{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  const n = numbers.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let found = false\n  while (i < n) {\n    if (numbers[i] > threshold) {\n      found = true\n      break\n    }\n    i++\n  }\n  while (j < n) {\n    if (numbers[j] < threshold) {\n      found = true\n      break\n    }\n    j++\n  }\n  while (k < n) {\n    if (numbers[k] > threshold) {\n      found = true\n      break\n    }\n    k++\n  }\n  return found\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_fast = (numbers, threshold) => {\n  const n = numbers.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let found = false\n  while (i < n) {\n    if (numbers[i] > threshold) {\n      found = true\n      break\n    }\n    i++\n  }\n  while (j < n) {\n    if (numbers[j] < threshold) {\n      found = true\n      break\n    }\n    j++\n  }\n  while (k < n) {\n    if (numbers[k] > threshold) {\n      found = true\n      break\n    }\n    k++\n  }\n  return found\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_fast2 = (numbers, threshold) => {\n  const n = numbers.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let found = false\n  while (i < n) {\n    if (numbers[i] > threshold) {\n      found = true\n      break\n    }\n    i++\n  }\n  while (j < n) {\n    if (numbers[j] < threshold) {\n      found = true\n      break\n    }\n    j++\n  }\n  while (k < n) {\n    if (numbers[k] > threshold) {\n      found = true\n      break\n    }\n    k++\n  }\n  return found\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_fast3 = (numbers, threshold) => {\n  const n = numbers.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let found = false\n  while (i < n) {\n    if (numbers[i] > threshold) {\n      found = true\n      break\n    }\n    i++\n  }\n  while (j < n) {\n    if (numbers[j] < threshold) {\n      found = true\n      break\n    }\n    j++\n  }\n  while (k < n) {\n    if (numbers[k] > threshold) {\n      found = true\n      break\n    }\n    k++\n  }\n  return found\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_fast4 = (numbers, threshold) => {\n  const n = numbers.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let found = false\n  while (i < n) {\n    if (numbers[i] > threshold) {\n      found = true\n      break\n    }\n    i++\n  }\n  while (j < n) {\n    if (numbers[j] < threshold) {\n      found = true\n      break\n    }\n    j++\n  }\n  while (k < n) {\n    if (numbers[k] > threshold) {\n      found = true\n      break\n    }\n    k++\n  }\n  return found\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_fast5 = (numbers, threshold) => {\n  const n = numbers.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let found = false\n  while (i < n) {\n    if (numbers[i] > threshold) {\n      found = true\n      break\n    }\n    i++\n  }\n  while (j < n) {\n    if (numbers[j] < threshold) {\n      found = true\n      break\n    }\n    j++\n  }\n  while (k < n) {\n    if (numbers[k] > threshold) {\n      found = true\n      break\n    }\n    k++\n  }\n  return found\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_fast6 = (numbers, threshold) => {\n  const n = numbers.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let found = false\n  while (i < n) {\n    if (numbers[i] > threshold) {\n      found = true\n      break\n    }\n    i++\n  }\n  while (j < n) {\n    if (numbers[j] < threshold) {\n      found = true\n      break\n    }\n    j++\n  }\n  while (k < n) {\n    if (numbers[k] > threshold) {\n      found = true\n      break\n    }\n    k++\n  }\n  return found\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_fast7 = (numbers, threshold) => {\n  const n = numbers.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let found = false\n  while (i < n) {\n    if (numbers[i] > threshold) {\n      found = true\n      break\n    }\n    i++\n  }\n  while (j < n) {\n    if (numbers[j] < threshold) {\n      found = true\n      break\n    }\n    j++\n  }\n  while (k < n) {\n    if (numbers[k] > threshold) {\n      found = true\n      break\n    }\n    k++\n  }\n  return found\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_fast8 = (numbers, threshold) => {\n  const n = numbers.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let found = false\n  while (i < n) {\n    if (numbers[i] > threshold) {\n      found = true\n      break\n    }\n    i++\n  }\n  while (j < n) {\n    if (numbers[j] < threshold) {\n      found = true\n      break\n    }\n    j++\n  }\n  while (k < n) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const paren_groups = [];\n  let paren_count = 0;\n  let paren_open = false;\n  let paren_closed = false;\n  let paren_opening = false;\n  let paren_closing = false;\n  let paren_paren_count = 0;\n  let paren_paren_open = false;\n  let paren_paren_closed = false;\n  let paren_paren_opening = false;\n  let paren_paren_closing = false;\n  let paren_paren_paren_count = 0;\n  let paren_paren_paren_open = false;\n  let paren_paren_paren_closed = false;\n  let paren_paren_paren_opening = false;\n  let paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_opening = false;\n  let paren_paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_opening = false;\n  let paren_paren_paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_opening = false;\n  let paren_paren_paren_paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_paren_opening = false;\n  let paren_paren_paren_paren_paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_opening = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_opening = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_opening = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_opening = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_opening = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_opening = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_opening = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_paren_opening = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_paren_opening = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_paren_closing = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let palindromeLength = 0;\n  let palindromePrefix = '';\n  let palindromeSuffix = '';\n  let palindromePrefixLength = 0;\n  let palindromeSuffixLength = 0;\n\n  /* Find longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixLength++;\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(6)\n  [6, 5, 7, 4, 3, 1]\n  */\nconst make_a_pile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(10)\n  [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst make_a_pile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(15)\n  [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst make_a_pile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(20)\n  [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst make_a_pile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(25)\n  [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst make_a_pile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(30)\n  [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst make_a_pile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(35)\n  [35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst make_a_pile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(40)\n  [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst make_a_pile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or space", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let num = 0;\n  let temp;\n  \n  if (x < y) {\n    temp = x;\n    x = y;\n    y = temp;\n  }\n  \n  while ((num < x) && (num < y)) {\n    num = num * 2 + 1;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let num = 0;\n  let temp;\n  \n  if (x < y) {\n    temp = x;\n    x = y;\n    y = temp;\n  }\n  \n  while ((num < x) && (num < y)) {\n    num = num * 2 + 1;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let num = 0;\n  let temp;\n  \n  if (x < y) {\n    temp = x;\n    x = y;\n    y = temp;\n  }\n  \n  while ((num < x) && (num < y)) {\n    num = num * 2 + 1;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let num = 0;\n  let temp;\n  \n  if (x < y) {\n    temp = x;\n    x = y;\n    y = temp;\n  }\n  \n  while ((num < x) && (num < y)) {\n    num = num * 2 + 1;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let num = 0;\n  let temp;\n  \n  if (x < y) {\n    temp = x;\n    x = y;\n    y = temp;\n  }\n  \n  while ((num < x) && (num < y)) {\n    num = num * 2 + 1;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let num = 0;\n  let temp;\n  \n  if (x < y) {\n    temp = x;\n    x = y;\n    y = temp;\n  }\n  \n  while ((num < x) && (num < y)) {\n    num = num * 2 + 1;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let num = 0;\n  let temp;\n  \n  if (x < y) {\n    temp = x;\n    x = y;\n    y = temp;\n  }\n  \n  while ((num < x) && (num < y)) {\n    num = num * 2 + 1;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let num = 0;\n  let temp;\n  \n  if (x < y) {\n    temp = x;\n    x = y;\n    y = temp;\n  }\n  \n  while ((num < x) && (num < y)) {\n    num = num * 2 + 1;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let num = 0;\n  let temp;\n  \n  if (x < y) {\n    temp = x;\n    x = y;\n    y = temp;\n  }\n  \n  while ((num < x) && (num < y)) {\n    num = num * 2 + 1;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let num = 0;\n  let temp;\n  \n  if (x < y) {\n    temp = x;\n    x = y;\n    y = temp;\n  }\n  \n  while ((num < x) && (num < y)) {\n    num = num * 2 + 1;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let num = 0;\n  let temp;\n  \n  if (x < y) {\n    temp = x;\n    x = y;\n    y = temp;\n  }\n  \n  while ((num < x) && (num < y)) {\n    num = num * 2 + 1;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let num = 0;\n  let temp;\n  \n  if (x < y) {\n    temp = x;\n    x = y;\n    y = temp;\n  }\n  \n  while ((num < x) && (num < y)) {\n    num = num * 2 + 1;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let rounded_avg = 0;\n  let binary = \"\";\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    if (x[j] % 2 === 0) {\n      result.push(x[j])\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_even = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    if (x[j] % 2 === 0) {\n      result.push(x[j])\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    if (x[j] % 2 === 0) {\n      result.push(x[j])\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_both = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    if (x[j] % 2 === 0) {\n      result.push(x[j])\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit and has even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_both_even = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    if (x[j] % 2 === 0) {\n      result.push(x[j])\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit and has even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_both_odd = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    if (x[j] % 2 === 0) {\n      result.push(x[j])\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit and has even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_both_both = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    if (x[j] % 2 === 0) {\n      result.push(x[j])\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit and has even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_both_both_even = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    if (x[j] % 2 === 0) {\n      result.push(x[j])\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit and has even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_both_both_odd = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    if (x[j] % 2 === 0) {\n      result.push", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => a - b);\n  return res;\n};\n\nconst by_name = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => a.localeCompare(b));\n  return res;\n};\n\nconst by_name_reversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => b.localeCompare(a));\n  return res;\n};\n\nconst by_name_reversed_reversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => a.localeCompare(b));\n  return res.reverse();\n};\n\nconst by_name_reversed_reversed_reversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => b.localeCompare(a));\n  return res.reverse().reverse();\n};\n\nconst by_name_reversed_reversed_reversed_reversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => b.localeCompare(a));\n  return res.reverse().reverse().reverse();\n};\n\nconst by_name_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => b.localeCompare(a));\n  return res.reverse().reverse().reverse().reverse();\n};\n\nconst by_name_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => b.localeCompare(a));\n  return res.reverse().reverse().reverse().reverse().reverse();\n};\n\nconst by_name_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => b.localeCompare(a));\n  return res.reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst by_name_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => b.localeCompare(a));\n  return res.reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst by_name_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => b.localeCompare(a));\n  return res.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst by_name_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => b.localeCompare(a));\n  return res.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst by_name_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(arr[i]);\n  }\n  res.sort((a, b) => b.localeCompare(a));\n  return res.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst by_name_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 1, 2, 6, 24]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 1, 2, 6, 24]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 1, 2, 6, 24]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 1, 2, 6, 24]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 1, 2, 6, 24]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 1, 2, 6, 24]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 1, 2, 6, 24]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 1, 2, 6, 24]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 1, 2, 6, 24]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(n) == [1, 1, 2, 6, 24]\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function q that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(n) == [1, 1, 2, 6, 24]\n  */\nconst q = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const even_palindromes = Array.from(\n    new Array(n + 1).fill(0).map((_, i) => i),\n    (_, i) => i\n  );\n  const odd_palindromes = Array.from(\n    new Array(n + 1).fill(0).map((_, i) => i),\n    (_, i) => i\n  );\n  for (let i = n; i >= 1; i--) {\n    if (even_palindromes.includes(i)) {\n      even_palindromes.splice(even_palindromes.indexOf(i), 1);\n    }\n    if (odd_palindromes.includes(i)) {\n      odd_palindromes.splice(odd_palindromes.indexOf(i), 1);\n    }\n  }\n  return [even_palindromes, odd_palindromes];\n};\n\n/*\n  Given a positive integer n, return an integer array that has all possible palindromes.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2, 3]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned integer array has all possible palindromes respectively.\n  */\nconst palindromes = (n) => {\n  const palindromes = Array.from(\n    new Array(n + 1).fill(0).map((_, i) => i),\n    (_, i) => i\n  );\n  for (let i = n; i >= 1; i--) {\n    if (palindromes.includes(i)) {\n      palindromes.splice(palindromes.indexOf(i), 1);\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return an integer array that has all possible palindromes with\n  length <= n.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2, 3]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned integer array has all possible palindromes respectively.\n  */\nconst palindromes_length = (n) => {\n  const palindromes = Array.from(\n    new Array(n + 1).fill(0).map((_, i) => i),\n    (_, i) => i\n  );\n  for (let i = n; i >= 1; i--) {\n    if (palindromes.includes(i)) {\n      palindromes.splice(palindromes.indexOf(i), 1);\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return an integer array that has all possible palindromes with\n  length <= n and whose sum is divisible by n.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2, 3]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned integer array has all possible palindromes respectively.\n  */\nconst palindromes_length_divisible = (n) => {\n  const palindromes = Array.from(\n    new Array(n + 1).fill(0).map((_, i) => i),\n    (_, i) => i\n  );\n  for (let i = n; i >= 1; i--) {\n    if (palindromes.includes(i)) {\n      palindromes.splice(palindromes.indexOf(i), 1);\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return an integer array that has all possible palindromes with\n  length <= n and whose sum is divisible by n and whose product is divisible by n.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2, 3]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned integer array has all possible palindromes respectively.\n  */\nconst palindromes_length_divisible_product = (n) => {\n  const palindromes = Array.from(\n    new Array(n + 1).fill(0).map((_, i) => i),\n    (_, i) => i\n  );\n  for (let i = n; i >= 1; i--) {\n    if (palindromes.includes(i)) {\n      palindromes.splice(palindromes.indexOf(i), 1);\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return an integer array that has all possible palindromes with\n  length <= n and whose sum is divisible by n and whose product is divisible by n.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2, 3]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned integer array has all possible palindromes respectively.\n  */\nconst palindromes_length_divisible_product_divisible = (n) => {\n  const palindromes = Array.from(\n    new Array(n + 1).fill(0).map((_, i) => i),\n    (_, i) => i\n  );\n  for (let i = n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "<|endoftext|>/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num > 0) {\n      count += num % 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_evens which takes an array of integers and returns\n  the number of even elements in the array.\n  >>> count_evens([]) == 0\n  >>> count_evens([1, 2]) == 1\n  >>> count_evens([1, 3, 5]) == 2\n  >>> count_evens([1, 4, 6, 8, 10]) == 3\n  */\nconst count_evens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_odds which takes an array of integers and returns\n  the number of odd elements in the array.\n  >>> count_odds([]) == 0\n  >>> count_odds([1, 2]) == 1\n  >>> count_odds([1, 3, 5]) == 2\n  >>> count_odds([1, 4, 6, 8, 10]) == 3\n  */\nconst count_odds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_zeros which takes an array of integers and returns\n  the number of zeros in the array.\n  >>> count_zeros([]) == 0\n  >>> count_zeros([1, 2]) == 1\n  >>> count_zeros([1, 3, 5]) == 2\n  >>> count_zeros([1, 4, 6, 8, 10]) == 3\n  */\nconst count_zeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_negatives which takes an array of integers and\n  returns an array of positive integers which are the negatives of all\n  elements in the array.\n  >>> count_negatives([]) == 0\n  >>> count_negatives([1, 2]) == 1\n  >>> count_negatives([1, 3, 5]) == 2\n  >>> count_negatives([1, 4, 6, 8, 10]) == 3\n  */\nconst count_negatives = (arr) => {\n  let negatives = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      negatives.push(arr[i]);\n    }\n  }\n  return negatives;\n};\n\n/*\n  Write a function count_positives which takes an array of integers and\n  returns an array of positive integers which are the positives of all\n  elements in the array.\n  >>> count_positives([]) == 0\n  >>> count_positives([1, 2]) == 1\n  >>> count_positives([1, 3, 5]) == 2\n  >>> count_positives([1, 4, 6, 8, 10]) == 3\n  */\nconst count_positives = (arr) => {\n  let positives = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      positives.push(arr[i]);\n    }\n  }\n  return positives;\n};\n\n/*\n  Write a function count_negatives_only which takes an array of integers and\n  returns an array of positive integers which are the negatives of all\n  elements in the array except for those which have a sum of digits > 0.\n  >>> count_negatives_only([]) == 0\n  >>> count_negatives_only([1, 2]) == 1\n  >>> count_negatives_only([1, 3, 5]) == 2\n  >>> count_negatives_only([1, 4, 6, 8, 10]) == 3\n  */\nconst count_negatives_only = (arr) => {\n  let negatives = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      negatives.push(arr[i]);\n    }\n  }\n  return negatives.filter(num => num % 10 > 0);\n};\n\n/*\n  Write a function count_positives_only which takes an array of integers and\n  returns an array of positive integers which are the positives of all\n  elements in the array except for those which have a sum of digits > 0.\n  >>> count_positives_only([]) == 0\n  >>> count_positives_only([1, 2]) == 1\n  >>> count_positives_only([1, 3, 5]) == 2\n  >>> count_positives_only([1, 4, 6, 8, 10]) == 3\n  */\nconst count_positives_only = (arr) => {\n  let positives = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      positives.push(arr[i]);\n    }\n  }\n  return positives.filter(num => num % 10 > 0);\n};\n\n/*\n  Write a function count_odd_evens which takes an array of integers and\n  returns an array of positive integers which are the odds and evens of\n  all elements in the array.\n  >>> count_odd_evens([]) == 0\n  >>> count_odd_evens([1, 2]) == 1\n  >>> count_odd_evens([1, 3, 5]) == 2\n  >>> count_odd_evens([1, 4, 6, 8, 10]) == 3\n  */\nconst count_odd_evens = (arr) => {\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      odds.push(arr[i]);\n    }\n    if (arr[i] % 2 === 1) {\n      evens.push(arr[i]);\n    }\n  }\n  return odds;\n};\n\n/*\n  Write a function count_odd_evens_only which takes an array of integers and\n  returns an array of positive integers which are the odds and evens of\n  all elements in the array except for those which have a sum of digits > 0.\n  >>> count_odd_evens_only([]) == 0\n  >>> count_odd_evens_only([1, 2]) == 1\n  >>> count_odd_evens_only([1, 3, 5]) == 2\n  >>> count_odd_evens_only([1, 4, 6, 8, 10]) == 3\n  */\nconst count_odd_evens_only = (arr) => {\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      odds.push(arr[i]);\n    }\n    if (arr[i] % 2 === 1) {\n      evens.push(arr[i]);\n    }\n  }\n  return evens.filter(num => num % 10 > 0);\n};\n\n/*\n  Write a function count_evens_only which takes an array of integers and\n  returns an array of positive integers which are the evens of all\n  elements in the array.\n  >>> count_evens_only([]) == 0\n  >>> count_evens_only([1, 2]) == 1\n  >>> count_evens_only([1, 3, 5]) == 2\n  >>> count_evens_only([1, 4, 6, 8, 10]) == 3\n  */\nconst count_evens_only = (arr) => {\n  let evens = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evens.push(arr[i]);\n    }\n  }\n  return evens;\n};\n\n/*\n  Write a function count_odd_evens_only which takes an array of integers and\n  returns an array of positive integers which are the odds and evens of\n  all elements in the array except for those which have a sum of digits > 0.\n  >>> count_odd_evens_only([]) == 0\n  >>> count_odd_evens_only([1, 2]) == 1\n  >>> count_odd_evens_only([1, 3, 5]) == 2\n  >>> count_odd_evens_only([1, 4, 6, 8, 10]) == 3\n  */\nconst count_odd_evens_only = (arr) => {\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      odds.push(arr[i]);\n    }\n    if (arr[i] % 2 === 1) {\n      evens.push(arr[i]);\n    }\n  }\n  return evens.filter(num => num % 10 > 0);\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '100'\n  */\nconst string_or = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010', '110')\n  '100'\n  */\nconst string_not = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND NOT on these inputs and return result also as a string.\n  >>> string_not_and('010', '110')\n  '100'\n  */\nconst string_not_and = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ ~b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR NOT on these inputs and return result also as a string.\n  >>> string_not_or('010', '110')\n  '100'\n  */\nconst string_not_or = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT NOT on these inputs and return result also as a string.\n  >>> string_not_not('010', '110')\n  '100'\n  */\nconst string_not_not = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ ~b[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR NOT on these inputs and return result also as a string.\n  >>> string_not_xor('010', '110')\n  '100'\n  */\nconst string_not_xor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND NOT NOT on these inputs and return result also as a string.\n  >>> string_not_and_not('010', '110')\n  '100'\n  */\nconst string_not_and_not = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i] ^ ~b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR NOT NOT on these inputs and return result also as a string.\n  >>> string_not_or_not('010', '110')\n  '100'\n  */\nconst string_not_or_not = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i] ^ ~b[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR NOT NOT on these inputs and return result also as a string.\n  >>> string_not_not_xor('010', '110')\n  '100'\n  */\nconst string_not_not_xor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i] ^ ~b[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND NOT NOT NOT on these inputs and return result also as a string.\n  >>> string_not_and_not_not('010', '110')\n  '100'\n  */\nconst string_not_and_not_not = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i] ^ ~b[i] ^ ~b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR NOT NOT NOT on these inputs and return result also as a string.\n  >>> string_not_or_not_not('010', '110')\n  '100'\n  */\nconst string_not_or_not_not = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i] ^ ~b[i] ^ ~b[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR NOT NOT on these inputs and return result also as a string.\n  >>> string_not_not_xor('010', '110')\n  '100'\n  */\nconst string_not_not_xor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i] ^ ~b[i] ^ ~b[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND NOT NOT NOT on these inputs and return result also as a string.\n  >>> string_not_and_not_not_not('010', '110')\n  '100'\n  */\nconst string_not_and_not_not_not = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i] ^ ~b[i] ^ ~b[i] ^ ~b[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR NOT NOT NOT on these inputs and return result also as a string.\n  >>> string_not_or_not_not_not('010', '110')\n  '100'\n  */\nconst string_not_or_not_not_not = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i] ^ ~b[i] ^ ~b[i] ^ ~b[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length < lst2.length) {\n    lst1 = [...lst1];\n    lst2 = [...lst2];\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) {\n      result = \"YES\";\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is made up of all the even numbers from that array.\n  For example:\n  evens([1, 2, 3, 4]) => [1, 3, 5]\n  evens([1, 5, 3, 4]) => [1, 3, 5, 7]\n  It is assumed that the input array will be non-empty.\n  */\nconst evens = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is made up of all the odd numbers from that array.\n  For example:\n  odds([1, 2, 3, 4]) => [1, 4, 7]\n  odds([1, 5, 3, 4]) => [1, 4, 7, 9]\n  It is assumed that the input array will be non-empty.\n  */\nconst odds = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is made up of all the even numbers from that array.\n  For example:\n  evens([1, 2, 3, 4]) => [1, 3, 5]\n  evens([1, 5, 3, 4]) => [1, 3, 5, 7]\n  It is assumed that the input array will be non-empty.\n  */\nconst oddEvens = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n    if (arr[i] % 2 === 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is made up of all the odd numbers from that array.\n  For example:\n  odds([1, 2, 3, 4]) => [1, 4, 7]\n  odds([1, 5, 3, 4]) => [1, 4, 7, 9]\n  It is assumed that the input array will be non-empty.\n  */\nconst evenOdds = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      result.push(arr[i]);\n    }\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is made up of all the even numbers from that array.\n  For example:\n  evens([1, 2, 3, 4]) => [1, 3, 5]\n  evens([1, 5, 3, 4]) => [1, 3, 5, 7]\n  It is assumed that the input array will be non-empty.\n  */\nconst oddEvenOdds = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      result.push(arr[i]);\n    }\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n    if (arr[i] % 2 === 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is made up of all the even numbers from that array.\n  For example:\n  evens([1, 2, 3, 4]) => [1, 3, 5]\n  evens([1, 5, 3, 4]) => [1, 3, 5, 7]\n  It is assumed that the input array will be non-empty.\n  */\nconst oddEvenOddEvens = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      result.push(arr[i]);\n    }\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n    if (arr[i] % 2 === 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is made up of all the odd numbers from that array.\n  For example:\n  odds([1, 2, 3, 4]) => [1, 4, 7]\n  odds([1, 5, 3, 4]) => [1, 4, 7, 9]\n  It is assumed that the input array will be non-empty.\n  */\nconst oddOdds = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      result.push(arr[i]);\n    }\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is made up of all the odd numbers from that array.\n  For example:\n  odds([1, 2, 3, 4]) => [1, 4, 7]\n  odds([1, 5, 3, 4]) => [1, 4, 7, 9]\n  It is assumed that the input array will be non-empty.\n  */\nconst oddOddEvens = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      result.push(arr[i]);\n    }\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n    if (arr[i] % 2 === 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is made up of all the even numbers from that array.\n  For example:\n  evens([1, 2, 3, 4]) => [1, 3, 5]\n  evens([1, 5, 3, 4]) => [1, 3, 5, 7]\n  It is assumed that the input array will be non-empty.\n  */\nconst evenOddOdds = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      result.push(arr[i]);\n    }\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n    if (arr[i] % 2 === 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is made up of all the odd numbers from that array.\n  For example:\n  odds([1, 2, 3, 4]) => [1, 4, 7]\n  odds([1, 5, 3, 4]) => [1, 4, 7, 9]\n  It is assumed that the input array will be non-empty.\n  */\nconst evenOddOddEvens = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      result.push(arr[i]);\n    }\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n    if (arr[i] % 2 === 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is made up of all the even numbers from that array.\n  For example:\n  evens([1, 2, 3, 4]) => [1, 3, 5]\n  evens([1, 5, 3, 4]) => [1, 3, 5, 7]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let histogram = {};\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0;\n    histogram[letter]++;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let histogram = {};\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0;\n    histogram[letter]++;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let histogram = {};\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0;\n    histogram[letter]++;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let histogram = {};\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0;\n    histogram[letter]++;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let histogram = {};\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0;\n    histogram[letter]++;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let histogram = {};\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0;\n    histogram[letter]++;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let histogram = {};\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0;\n    histogram[letter]++;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let histogram = {};\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0;\n    histogram[letter]++;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let histogram = {};\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0;\n    histogram[letter]++;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  let result = '';\n  let reversed = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = false;\n  let temp = '';\n  let temp2 = '';\n  let temp3 = '';\n  let temp4 = '';\n  let temp5 = '';\n  let temp6 = '';\n  let temp7 = '';\n  let temp8 = '';\n  let temp9 = '';\n  let temp10 = '';\n  let temp11 = '';\n  let temp12 = '';\n  let temp13 = '';\n  let temp14 = '';\n  let temp15 = '';\n  let temp16 = '';\n  let temp17 = '';\n  let temp18 = '';\n  let temp19 = '';\n  let temp20 = '';\n  let temp21 = '';\n  let temp22 = '';\n  let temp23 = '';\n  let temp24 = '';\n  let temp25 = '';\n  let temp26 = '';\n  let temp27 = '';\n  let temp28 = '';\n  let temp29 = '';\n  let temp30 = '';\n  let temp31 = '';\n  let temp32 = '';\n  let temp33 = '';\n  let temp34 = '';\n  let temp35 = '';\n  let temp36 = '';\n  let temp37 = '';\n  let temp38 = '';\n  let temp39 = '';\n  let temp40 = '';\n  let temp41 = '';\n  let temp42 = '';\n  let temp43 = '';\n  let temp44 = '';\n  let temp45 = '';\n  let temp46 = '';\n  let temp47 = '';\n  let temp48 = '';\n  let temp49 = '';\n  let temp50 = '';\n  let temp51 = '';\n  let temp52 = '';\n  let temp53 = '';\n  let temp54 = '';\n  let temp55 = '';\n  let temp56 = '';\n  let temp57 = '';\n  let temp58 = '';\n  let temp59 = '';\n  let temp60 = '';\n  let temp61 = '';\n  let temp62 = '';\n  let temp63 = '';\n  let temp64 = '';\n  let temp65 = '';\n  let temp66 = '';\n  let temp67 = '';\n  let temp68 = '';\n  let temp69 = '';\n  let temp70 = '';\n  let temp71 = '';\n  let temp72 = '';\n  let temp73 = '';\n  let temp74 = '';\n  let temp75 = '';\n  let temp76 = '';\n  let temp77 = '';\n  let temp78 = '';\n  let temp79 = '';\n  let temp80 = '';\n  let temp81 = '';\n  let temp82 = '';\n  let temp83 = '';\n  let temp84 = '';\n  let temp85 = '';\n  let temp86 = '';\n  let temp87 = '';\n  let temp88 = '';\n  let temp89 = '';\n  let temp90 = '';\n  let temp91 = '';\n  let temp92 = '';\n  let temp93 = '';\n  let temp94 = '';\n  let temp95 = '';\n  let temp96 = '';\n  let temp97 = '';\n  let temp98 = '';\n  let temp99 = '';\n  let temp100 = '';\n  let temp101 = '';\n  let temp102 = '';\n  let temp103 = '';\n  let temp104 = '';\n  let temp105 = '';\n  let temp106 = '';\n  let temp107 = '';\n  let temp108 = '';\n  let temp109 = '';\n  let temp110 = '';\n  let temp111 = '';\n  let temp112 = '';\n  let temp113 = '';\n  let temp114 = '';\n  let temp115 = '';\n  let temp116 = '';\n  let temp117 = '';\n  let temp118 = '';\n  let temp119 = '';\n  let temp120 = '';\n  let temp121 = '';\n  let temp122 = '';\n  let temp123 = '';\n  let temp124 = '';\n  let temp125 = '';\n  let temp126 = '';\n  let temp127 = '';\n  let temp128 = '';\n  let temp129 = '';\n  let temp130 = '';\n  let temp131 = '';\n  let temp132 = '';\n  let temp133 = '';\n  let temp134 = '';\n  let temp135 = '';\n  let temp136 = '';\n  let temp137 = '';\n  let temp138 = '';\n  let temp139 = '';\n  let temp140 = '';\n  let temp141 = '';\n  let temp142 = '';\n  let temp143 = '';\n  let temp144 = '';\n  let temp145 = '';\n  let temp146 = '';\n  let temp147 = '';\n  let temp148 = '';\n  let temp149 = '';\n  let temp150 = '';\n  let temp151 = '';\n  let temp152 = '';\n  let temp153 = '';\n  let temp154 = '';\n  let temp155 = '';\n  let temp156 = '';\n  let temp157 = '';\n  let temp158 = '';\n  let temp159 = '';\n  let temp160 = '';\n  let temp161 = '';\n  let temp162 = '';\n  let temp163 = '';\n  let temp164 = '';\n  let temp165 = '';\n  let temp166 = '';\n  let temp167 = '';\n  let temp168 = '';\n  let temp169 = '';\n  let temp170 = '';\n  let temp171 = '';\n  let temp172 = '';\n  let temp173 = '';\n  let temp174 = '';\n  let temp175 = '';\n  let temp176 = '';\n  let temp177 = '';\n  let temp178 = '';\n  let temp179 = '';\n  let temp180 = '';\n  let temp181 = '';\n  let temp182 = '';\n  let temp183 = '';\n  let temp184 = '';\n  let temp185 = '';\n  let temp186 = '';\n  let temp187 = '';\n  let temp188 = '';\n  let temp189 = '';\n  let temp190 = '';\n  let temp191 = '';\n  let temp192 = '';\n  let temp193 = '';\n  let temp194 = '';\n  let temp195 = '';\n  let temp196 = '';\n  let temp197 = '';\n  let temp198 = '';\n  let temp199 = '';\n  let temp200 = '';\n  let temp201 = '';\n  let temp202 = '';\n  let temp203 = '';\n  let temp204 = '';\n  let temp205 = '';\n  let temp206 = '';\n  let temp207 = '';\n  let temp208 = '';\n  let temp209 = '';\n  let temp210 = '';\n  let temp211 = '';\n  let temp212 = '';\n  let temp213 = '';\n  let temp214 = '';\n  let temp215 = '';\n  let temp216 = '';\n  let temp217 = '';\n  let temp218 = '';\n  let temp219 = '';\n  let temp220 = '';\n  let temp221 = '';\n  let temp222 = '';\n  let temp223 = '';\n  let temp224 = '';\n  let temp225 = '';\n  let temp226 = '';\n  let temp227 = '';\n  let temp228 = '';\n  let temp229 = '';\n  let temp230 = '';\n  let temp231 = '';\n  let temp232 = '';\n  let temp233 = '';\n  let temp234 = '';\n  let temp235 = '';\n  let temp236 = '';\n  let temp237 = '';\n  let temp238 = '';\n  let temp239 = '';\n  let temp240 = '';\n  let temp241 = '';\n  let temp242 = '';\n  let temp243 = '';\n  let temp244 = '';\n  let temp245 = '';\n  let temp246 = '';\n  let temp247 = '';\n  let temp248 = '';\n  let temp249 = '';\n  let temp250 = '';\n  let temp251 = '';\n  let temp252 = '';\n  let temp253 = '';\n  let temp254 = '';\n  let temp255 = '';\n  let temp256 = '';\n  let temp257 = '';\n  let temp258 = '';\n  let temp259 = '';\n  let temp260 = '';\n  let temp261 = '';\n  let temp262 = '';\n  let temp263 = '';\n  let temp264 = '';\n  let temp265 = '';\n  let temp266 = '';\n  let temp267 = '';\n  let temp268 = '';\n  let temp269 = '';\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  let odd_count = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      odd_count.push(lst[i].match(/\\d/).length)\n    }\n  }\n  return odd_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> even_count(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_count(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_count = (lst) => {\n  let even_count = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      even_count.push(lst[i].match(/\\d/).length)\n    }\n  }\n  return even_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of pairs of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of pairs of odd digits in the i'th string of the input.\n\n  >>> pair_count(['1234567'])\n  [\"the number of pairs of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> pair_count(['3',\"11111111\"])\n  [\"the number of pairs of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of pairs of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst pair_count = (lst) => {\n  let pair_count = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      pair_count.push(lst[i].match(/\\d/).length)\n    }\n  }\n  return pair_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of triples of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of triples of odd digits in the i'th string of the input.\n\n  >>> triples_count(['1234567'])\n  [\"the number of triples of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> triples_count(['3',\"11111111\"])\n  [\"the number of triples of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of triples of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst triples_count = (lst) => {\n  let triples_count = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      triples_count.push(lst[i].match(/\\d/).length)\n    }\n  }\n  return triples_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quads of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of quads of odd digits in the i'th string of the input.\n\n  >>> quads_count(['1234567'])\n  [\"the number of quads of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> quads_count(['3',\"11111111\"])\n  [\"the number of quads of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of quads of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quads_count = (lst) => {\n  let quads_count = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      quads_count.push(lst[i].match(/\\d/).length)\n    }\n  }\n  return quads_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quints of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of quints of odd digits in the i'th string of the input.\n\n  >>> quints_count(['1234567'])\n  [\"the number of quints of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> quints_count(['3',\"11111111\"])\n  [\"the number of quints of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of quints of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quints_count = (lst) => {\n  let quints_count = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      quints_count.push(lst[i].match(/\\d/).length)\n    }\n  }\n  return quints_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of hexadecimal elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of hexadecimal digits in the i'th string of the input.\n\n  >>> hexadecimal_count(['1234567'])\n  [\"the number of hexadecimal elements 4n the str4ng 4 of the 4nput.\"]\n  >>> hexadecimal_count(['3',\"11111111\"])\n  [\"the number of hexadecimal elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of hexadecimal elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst hexadecimal_count = (lst) => {\n  let hexadecimal_count = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      hexadecimal_count.push(lst[i].match(/\\d/).length)\n    }\n  }\n  return hexadecimal_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of binary elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of binary digits in the i'th string of the input.\n\n  >>> binary_count(['1234567'])\n  [\"the number of binary elements 4n the str4ng 4 of the 4nput.\"]\n  >>> binary_count(['3',\"11111111\"])\n  [\"the number of binary elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of binary elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst binary_count = (lst) => {\n  let binary_count = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      binary_count.push(lst[i].match(/\\d/).length)\n    }\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) return -Infinity;\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0) return sum;\n  }\n  return -Infinity;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_of_two = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0 && sum < 2) return sum;\n  }\n  return -Infinity;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_of_two([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_of_two([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_of_three = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0 && sum < 3) return sum;\n  }\n  return -Infinity;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_of_three([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_of_three([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_of_four = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0 && sum < 4) return sum;\n  }\n  return -Infinity;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_of_four([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_of_four([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_of_five = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0 && sum < 5) return sum;\n  }\n  return -Infinity;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_of_five([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_of_five([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_of_six = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0 && sum < 6) return sum;\n  }\n  return -Infinity;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_of_six([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_of_six([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_of_seven = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0 && sum < 7) return sum;\n  }\n  return -Infinity;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_of_seven([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_of_seven([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_of_eight = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0 && sum < 8) return sum;\n  }\n  return -Infinity;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_of_eight([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_of_eight([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_of_nine = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0 && sum < 9) return sum;\n  }\n  return -Infinity;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_of_nine([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_of_nine([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_of_ten = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0 && sum < 10) return sum;\n  }\n  return -Infinity;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_of_ten([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_of_ten([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_of_eleven = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0 && sum < 11) return sum;\n  }\n  return -Infinity;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_of_eleven([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_of_eleven([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_of_twelve = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0 && sum < 12) return sum;\n  }\n  return -Infinity;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_of_twelve([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_of_twelve([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_of_thirteen = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0 && sum < 13) return sum;\n  }\n  return -Infinity;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum_of_thirteen([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum_of_thirteen([-1, -2, -3]) == 6\n  */\nconst max_sub_array_sum_of_fourteen = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  let result = 0;\n  grid.forEach((row, row_index) => {\n    row.forEach((value, col_index) => {\n      if (value === 0) {\n        result += (row_index * col_index) * capacity;\n      }\n    });\n  });\n  return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  let result = 0;\n  grid.forEach((row, row_index) => {\n    row.forEach((value, col_index) => {\n      if (value === 0) {\n        result += (row_index * col_index) * capacity;\n      }\n    });\n  });\n  return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  let result = 0;\n  grid.forEach((row, row_index) => {\n    row.forEach((value, col_index) => {\n      if (value === 0) {\n        result += (row_index * col_index) * capacity;\n      }\n    });\n  });\n  return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  let result = 0;\n  grid.forEach((row, row_index) => {\n    row.forEach((value, col_index) => {\n      if (value === 0) {\n        result += (row_index * col_index) * capacity;\n      }\n    });\n  });\n  return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  let result = 0;\n  grid.forEach((row, row_index) => {\n    row.forEach((value, col_index) => {\n      if (value === 0) {\n        result += (row_index * col_index) * capacity;\n      }\n    });\n  });\n  return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = arr.length;\n  while (i < len) {\n    while (arr[j] === 1) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (j === len) {\n      result.push(arr[j]);\n      j = 0;\n    }\n    if (arr[j] === 1) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr[j] === 0) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (arr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  let words = s.split(\" \");\n  let word;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n  let words = [];\n  let word;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(word);\n  let vowel_left = get_closest_vowel_left(word);\n  let vowel_right = get_closest_vowel_right(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  let res = 'No';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = lst.length;\n  while (i < l) {\n    if (lst[i] === '(') {\n      i++;\n      j++;\n    } else if (lst[i] === ')') {\n      i++;\n      j--;\n    } else if (lst[i] === '(' || lst[i] === ')') {\n      i++;\n      j++;\n    } else if (lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}') {\n      i++;\n      j++;\n    } else if (lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}' || lst[i] === '(' || lst[i] === ')' || lst[i] === '[' || lst[i] === ']') {\n      i++;\n      j++;\n    } else if (lst[i] === '{' || lst[i] === '}", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n\n  let longestLength = 0\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n\n    if (string.length > longestLength) {\n      longestLength = string.length\n      longestString = string\n    }\n  }\n\n  return longestString\n}\n\n/**\n * Returns a new array with the elements of the given array that match a predicate.\n * If no predicate is given, returns all elements.\n * If predicate is given, returns all elements that match predicate.\n * If predicate returns true, it returns true for elements that match predicate.\n * If predicate returns false, it returns false for elements that don't match predicate.\n * If predicate returns null, it returns null for elements that don't match predicate.\n * If predicate returns undefined, it returns undefined for elements that don't match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate returns another array, it returns an array with elements that match predicate.\n * If predicate ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    if (max < arr[i]) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (max === arr[i]) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findPairs = function(head) {\n  const stack = [];\n  let count = 0;\n  let pairs = 0;\n  let current = head;\n  while (current) {\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  while (stack.length) {\n    current = stack.pop();\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  return pairs;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findPairsII = function(head) {\n  const stack = [];\n  let count = 0;\n  let pairs = 0;\n  let current = head;\n  while (current) {\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  while (stack.length) {\n    current = stack.pop();\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  return pairs;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findPairsIII = function(head) {\n  const stack = [];\n  let count = 0;\n  let pairs = 0;\n  let current = head;\n  while (current) {\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  while (stack.length) {\n    current = stack.pop();\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  return pairs;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findPairsIV = function(head) {\n  const stack = [];\n  let count = 0;\n  let pairs = 0;\n  let current = head;\n  while (current) {\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  while (stack.length) {\n    current = stack.pop();\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  return pairs;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findPairsV = function(head) {\n  const stack = [];\n  let count = 0;\n  let pairs = 0;\n  let current = head;\n  while (current) {\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  while (stack.length) {\n    current = stack.pop();\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  return pairs;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findPairsVI = function(head) {\n  const stack = [];\n  let count = 0;\n  let pairs = 0;\n  let current = head;\n  while (current) {\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  while (stack.length) {\n    current = stack.pop();\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  return pairs;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findPairsVII = function(head) {\n  const stack = [];\n  let count = 0;\n  let pairs = 0;\n  let current = head;\n  while (current) {\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  while (stack.length) {\n    current = stack.pop();\n    pairs += 1;\n    if (current.next && current.next.next) {\n      stack.push(current);\n      current = current.next;\n    } else {\n      current = current.next;\n    }\n  }\n  return pairs;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  Implement a binary search tree to store and retrieve data using key value pairs.\n  \n\n  Examples\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n// Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most three digits from the first k elements of arr.\n\n// Example:\n\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 31 + 5 + 7 + 8 + 9\n\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n// 3. 1 <= arr[i] <= 100\n// 4. 1 <= arr[i] <= 10^9\n// 5. 1 <= arr[i] <= 10^9\n// 6. 1 <= arr[i] <= 10^9\n// 7. 1 <= arr[i] <= 10^9\n// 8. 1 <= arr[i] <= 10^9\n// 9. 1 <= arr[i] <= 10^9\n// 10. 1 <= arr[i] <= 10^9\n// 11. 1 <= arr[i] <= 10^9\n// 12. 1 <= arr[i] <= 10^9\n// 13. 1 <= arr[i] <= 10^9\n// 14. 1 <= arr[i] <= 10^9\n// 15. 1 <= arr[i] <= 10^9\n// 16. 1 <= arr[i] <= 10^9\n// 17. 1 <= arr[i] <= 10^9\n// 18. 1 <= arr[i] <= 10^9\n// 19. 1 <= arr[i] <= 10^9\n// 20. 1 <= arr[i] <= 10^9\n// 21. 1 <= arr[i] <= 10^9\n// 22. 1 <= arr[i] <= 10^9\n// 23. 1 <= arr[i] <= 10^9\n// 24. 1 <= arr[i] <= 10^9\n// 25. 1 <= arr[i] <= 10^9\n// 26. 1 <= arr[i] <= 10^9\n// 27. 1 <= arr[i] <= 10^9\n// 28. 1 <= arr[i] <= 10^9\n// 29. 1 <= arr[i] <= 10^9\n// 30. 1 <= arr[i] <= 10^9\n// 31. 1 <= arr[i] <= 10^9\n// 32. 1 <= arr[i] <= 10^9\n// 33. 1 <= arr[i] <= 10^9\n// 34. 1 <= arr[i] <= 10^9\n// 35. 1 <= arr[i] <= 10^9\n// 36. 1 <= arr[i] <= 10^9\n// 37. 1 <= arr[i] <= 10^9\n// 38. 1 <= arr[i] <= 10^9\n// 39. 1 <= arr[i] <= 10^9\n// 40. 1 <= arr[i] <= 10^9\n// 41. 1 <= arr[i] <= 10^9\n// 42. 1 <= arr[i] <= 10^9\n// 43. 1 <= arr[i] <= 10^9\n// 44. 1 <= arr[i] <= 10^9\n// 45. 1 <= arr[i] <= 10^9\n// 46. 1 <= arr[i] <= 10^9\n// 47. 1 <= arr[i] <= 10^9\n// 48. 1 <= arr[i] <= 10^9\n// 49. 1 <= arr[i] <= 10^9\n// 50. 1 <= arr[i] <= 10^9\n// 51. 1 <= arr[i] <= 10^9\n// 52. 1 <= arr[i] <= 10^9\n// 53. 1 <= arr[i] <= 10^9\n// 54. 1 <= arr[i] <= 10^9\n// 55. 1 <= arr[i] <= 10^9\n// 56. 1 <= arr[i] <= 10^9\n// 57. 1 <= arr[i] <= 10^9\n// 58. 1 <= arr[i] <= 10^9\n// 59. 1 <= arr[i] <= 10^9\n// 60. 1 <= arr[i] <= 10^9\n// 61. 1 <= arr[i] <= 10^9\n// 62. 1 <= arr[i] <= 10^9\n// 63. 1 <= arr[i] <= 10^9\n// 64. 1 <= arr[i] <= 10^9\n// 65. 1 <= arr[i] <= 10^9\n// 66. 1 <= arr[i] <= 10^9\n// 67. 1 <= arr[i] <= 10^9\n// 68. 1 <= arr[i] <= 10^9\n// 69. 1 <= arr[i] <= 10^9\n// 70. 1 <= arr[i] <= 10^9\n// 71. 1 <= arr[i] <= 10^9\n// 72. 1 <= arr[i] <= 10^9\n// 73. 1 <= arr[i] <= 10^9\n// 74. 1 <= arr[i] <= 10^9\n// 75. 1 <= arr[i] <= 10^9\n// 76. 1 <= arr[i] <= 10^9\n// 77. 1 <= arr[i] <= 10^9\n// 78. 1 <= arr[i] <= 10^9\n// 79. 1 <= arr[i] <= 10^9\n// 80. 1 <= arr[i] <= 10^9\n// 81. 1 <= arr[i] <= 10^9\n// 82. 1 <= arr[i] <= 10^9\n// 83. 1 <= arr[i] <= 10^9\n// 84. 1 <= arr[i] <= 10^9\n// 85. 1 <= arr[i] <= 10^9\n// 86. 1 <= arr[i] <= 10^9\n// 87. 1 <= arr[i] <= 10^9\n// 88. 1 <= arr[i] <= 10^9\n// 89. 1 <= arr[i] <= 10^9\n// 90. 1 <= arr[i] <= 10^9\n// 91. 1 <= arr[i] <= 10^9\n// 92. 1 <= arr[i] <= 10^9\n// 93. 1 <= arr[i] <= 10^9\n// 94. 1 <= arr[i] <= 10^9\n// 95. 1 <= arr[i] <= 10^9\n// 96. 1 <= arr[i] <= 10^9\n// 97. 1 <= arr[i] <= 10^9\n// 98. 1 <= arr[i] <= 10^9\n// 99. 1 <= arr[i] <= 10^9\n// 100. 1 <= arr[i] <= 10^9\n// 101. 1 <= arr[i] <= 10^9\n// 102. 1 <= arr[i] <= 10^9\n// 103. 1 <= arr[i] <= 10^9\n// 104. 1 <= arr[i] <= 10^9\n// 105. 1 <= arr[i] <= 10^9\n// 106. 1 <= arr[i] <= 10^9\n// 107. 1 <= arr[i] <= 10^9\n// 108. 1 <= arr[i] <= 10^9\n// 109. 1 <= arr[i] <= 10^9\n// 110. 1 <= arr[i] <= 10^9\n// 111. 1 <= arr[i] <= 10^9\n// 112. 1 <= arr[i] <= 10^9\n// 113. 1 <= arr[i] <= 10^9\n// 114. 1 <= arr[i] <= 10^9\n// 115. 1 <= arr[i] <= 10^9\n// 116. 1 <= arr[i] <= 10^9\n// 117. 1 <= arr[i] <= 10^9\n// 118. 1 <= arr[i] <= 10^9\n// 119. 1 <= arr[i] <= 10^9\n// 120. 1 <= arr[i] <= 10^9\n// 121. 1 <= arr[i] <= 10^9\n// 122. 1 <= arr[i] <= 10^9\n// 123. 1 <= arr[i] <= 10^9", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n /= 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so even numbers are 1, 5, 16, 8, 4, and 2.\n  */\nconst get_even_collatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n /= 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_prime_collatz(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11], \n  so prime numbers are 1, 3, 5, 7, 9, 11 and 5.\n  */\nconst get_prime_collatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n /= 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_prime_collatz(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11], \n  so prime numbers are 1, 3, 5, 7, 9, 11 and 5.\n  */\nconst get_prime_collatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n /= 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_prime_collatz(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11], \n  so prime numbers are 1, 3, 5, 7, 9, 11 and 5.\n  */\nconst get_prime_collatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n /= 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_prime_collatz(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11], \n  so prime numbers are 1, 3, 5, 7, 9, 11 and 5.\n  */\nconst get_prime_collatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n /= 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  const dateObj = new Date(date);\n  const year = dateObj.getFullYear();\n  const month = dateObj.getMonth() + 1;\n  const day = dateObj.getDate();\n  const dateString = `${year}-${month}-${day}`;\n  const isValid = dateObj.getDate() >= 1 && dateObj.getDate() <= 31 && dateObj.getMonth() >= 1 && dateObj.getMonth() <= 12 && dateObj.getFullYear() >= 1900 && dateObj.getFullYear() <= 2099;\n  return isValid;\n};\n\n/*\n  Given a date string and a month number, returns the date string of the next month.\n  If the month number is greater than 12, the function returns null.\n  If the month number is less than 1, the function returns null.\n  If the month number is less than 0, the function returns null.\n  If the month number is greater than 12, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than the number of months in the current year, the function returns null.\n  If the month number is greater than ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.split(' ');\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_odd = (txt) => {\n  const words = txt.split(' ');\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_even = (txt) => {\n  const words = txt.split(' ');\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_odd_even = (txt) => {\n  const words = txt.split(' ');\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_odd_odd = (txt) => {\n  const words = txt.split(' ');\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_odd_even = (txt) => {\n  const words = txt.split(' ');\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_odd_odd_even = (txt) => {\n  const words = txt.split(' ');\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_odd_odd_odd_even = (txt) => {\n  const words = txt.split(' ');\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_odd_odd_odd_odd_even = (txt) => {\n  const words = txt.split(' ');\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[lst.length - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted([6, 5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_desc = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[lst.length - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_asc = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[lst.length - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted_desc([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted_desc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_desc([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted_desc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_desc([6, 5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_desc_desc = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[lst.length - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_asc_desc = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[lst.length - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted_desc([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted_desc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_desc([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted_desc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_desc([6, 5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_desc_desc = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[lst.length - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_asc_asc_desc = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[lst.length - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_asc_asc_asc_desc = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[lst.length - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ true\n  is_sorted_asc([6, 5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_asc_asc_asc_asc_desc = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  if (start1 < start2) {\n    return intersection(interval2, interval1);\n  }\n\n  if (end1 < end2) {\n    return intersection(interval1, interval2);\n  }\n\n  if (start1 > end2) {\n    return intersection(interval2, interval1);\n  }\n\n  if (end1 > start2) {\n    return intersection(interval1, interval2);\n  }\n\n  return false;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  const [start1, end1] = intervals[0];\n  const [start2, end2] = intervals[1];\n\n  if (start1 < start2) {\n    return isPrime(intervals.slice(1));\n  }\n\n  if (end1 < end2) {\n    return isPrime(intervals.slice(0, 1));\n  }\n\n  if (start1 > end2) {\n    return isPrime(intervals.slice(1));\n  }\n\n  if (end1 > start2) {\n    return isPrime(intervals.slice(0, 1));\n  }\n\n  return false;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime\n*/\nconst isPrimeFactor = (intervals) => {\n  const [start1, end1] = intervals[0];\n  const [start2, end2] = intervals[1];\n\n  if (start1 < start2) {\n    return isPrimeFactor(intervals.slice(1));\n  }\n\n  if (end1 < end2) {\n    return isPrimeFactor(intervals.slice(0, 1));\n  }\n\n  if (start1 > end2) {\n    return isPrimeFactor(intervals.slice(1));\n  }\n\n  if (end1 > start2) {\n    return isPrimeFactor(intervals.slice(0, 1));\n  }\n\n  return false;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime\n*/\nconst isPrimeFactors = (intervals) => {\n  const [start1, end1] = intervals[0];\n  const [start2, end2] = intervals[1];\n\n  if (start1 < start2) {\n    return isPrimeFactors(intervals.slice(1));\n  }\n\n  if (end1 < end2) {\n    return isPrimeFactors(intervals.slice(0, 1));\n  }\n\n  if (start1 > end2) {\n    return isPrimeFactors(intervals.slice(1));\n  }\n\n  if (end1 > start2) {\n    return isPrimeFactors(intervals.slice(0, 1));\n  }\n\n  return false;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime\n*/\nconst isPrimeFactorsFactor = (intervals) => {\n  const [start1, end1] = intervals[0];\n  const [start2, end2] = intervals[1];\n\n  if (start1 < start2) {\n    return isPrimeFactorsFactor(intervals.slice(1));\n  }\n\n  if (end1 < end2) {\n    return isPrimeFactorsFactor(intervals.slice(0, 1));\n  }\n\n  if (start1 > end2) {\n    return isPrimeFactorsFactor(intervals.slice(1));\n  }\n\n  if (end1 > start2) {\n    return isPrimeFactorsFactor(intervals.slice(0, 1));\n  }\n\n  return false;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime\n*/\nconst isPrimeFactorsFactors = (intervals) => {\n  const [start1, end1] = intervals[0];\n  const [start2, end2] = intervals[1];\n\n  if (start1 < start2) {\n    return isPrimeFactorsFactors(intervals.slice(1));\n  }\n\n  if (end1 < end2) {\n    return isPrimeFactorsFactor(intervals.slice(0, 1));\n  }\n\n  if (start1 > end2) {\n    return isPrimeFactorsFactors(intervals.slice(1));\n  }\n\n  if (end1 > start2) {\n    return isPrimeFactorsFactor(intervals.slice(0, 1));\n  }\n\n  return false;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime\n*/\nconst isPrimeFactorsFactorsFactor = (intervals) => {\n  const [start1, end1] = intervals[0];\n  const [start2, end2] = intervals[1];\n\n  if (start1 < start2) {\n    return isPrimeFactorsFactorsFactor(intervals.slice(1));\n  }\n\n  if (end1 < end2) {\n    return isPrimeFactorsFactorsFactor(intervals.slice(0, 1));\n  }\n\n  if (start1 > end2) {\n    return isPrimeFactorsFactorsFactor(intervals.slice(1));\n  }\n\n  if (end1 > start2) {\n    return isPrimeFactorsFactorsFactor(intervals.slice(0, 1));\n  }\n\n  return false;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime\n*/\nconst isPrimeFactorsFactorsFactors = (intervals) => {\n  const [start1, end1] = intervals[0];\n  const [start2, end2] = intervals[1];\n\n  if (start1 < start2) {\n    return isPrimeFactorsFactorsFactors(intervals.slice(1));\n  }\n\n  if (end1 < end2) {\n    return isPrimeFactorsFactorsFactor(intervals.slice(0, 1));\n  }\n\n  if (start1 > end2) {\n    return isPrimeFactorsFactorsFactors(intervals.slice(1));\n  }\n\n  if (end1 > start2) {\n    return isPrimeFactorsFactorsFactor(intervals.slice(0, 1));\n  }\n\n  return false;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime\n*/\nconst isPrimeFactorsFactorsFactorsFactorsFactor = (intervals) => {\n  const [start1, end1] = intervals[0];\n  const [start2, end2] = intervals[1];\n\n  if (start1 < start2) {\n    return isPrimeFactorsFactorsFactorsFactorsFactor(intervals.slice(1));\n  }\n\n  if (end1 < end2) {\n    return isPrimeFactorsFactorsFactorsFactorsFactor(intervals.slice(0, 1));\n  }\n\n  if (start1 > end2) {\n    return isPrimeFactorsFactorsFactorsFactorsFactor(intervals.slice(1));\n  }\n\n  if (end1 > start2) {\n    return isPrimeFactorsFactorsFactorsFactorsFactor(intervals.slice(0, 1));\n  }\n\n  return false;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime\n*/\nconst isPrimeFactorsFactorsFactorsFactorsFactorsFactorsFactor = (intervals) => {\n  const [start1, end1] = intervals[0];\n  const [start2, end2] = intervals[1];\n\n  if (start1 < start2) {\n    return isPri", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  let sign = 1;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n      signs.push(sign);\n    }\n  }\n  return signs.reduce((acc, curr) => acc + curr);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_reverse = (arr) => {\n  let sign = 1;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n      signs.push(sign);\n    }\n  }\n  return signs.reduce((acc, curr) => acc + curr);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs_reverse([1, 2, 2, -4]) == -9\n  >>> prod_signs_reverse([0, 1]) == 0\n  >>> prod_signs_reverse([[]]) == null\n  */\nconst prod_signs_reverse_reverse = (arr) => {\n  let sign = 1;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n      signs.push(sign);\n    }\n  }\n  return signs.reduce((acc, curr) => acc + curr);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs_reverse_reverse([1, 2, 2, -4]) == -9\n  >>> prod_signs_reverse_reverse([0, 1]) == 0\n  >>> prod_signs_reverse_reverse([[]]) == null\n  */\nconst prod_signs_reverse_reverse_reverse = (arr) => {\n  let sign = 1;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n      signs.push(sign);\n    }\n  }\n  return signs.reduce((acc, curr) => acc + curr);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs_reverse_reverse_reverse([1, 2, 2, -4]) == -9\n  >>> prod_signs_reverse_reverse_reverse([0, 1]) == 0\n  >>> prod_signs_reverse_reverse_reverse([[]]) == null\n  */\nconst prod_signs_reverse_reverse_reverse_reverse = (arr) => {\n  let sign = 1;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n      signs.push(sign);\n    }\n  }\n  return signs.reduce((acc, curr) => acc + curr);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs_reverse_reverse_reverse_reverse([1, 2, 2, -4]) == -9\n  >>> prod_signs_reverse_reverse_reverse_reverse([0, 1]) == 0\n  >>> prod_signs_reverse_reverse_reverse_reverse([[]]) == null\n  */\nconst prod_signs_reverse_reverse_reverse_reverse_reverse = (arr) => {\n  let sign = 1;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n      signs.push(sign);\n    }\n  }\n  return signs.reduce((acc, curr) => acc + curr);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs_reverse_reverse_reverse_reverse_reverse([1, 2, 2, -4]) == -9\n  >>> prod_signs_reverse_reverse_reverse_reverse_reverse_reverse([0, 1]) == 0\n  >>> prod_signs_reverse_reverse_reverse_reverse_reverse_reverse([[]]) == null\n  */\nconst prod_signs_reverse_reverse_reverse_reverse_reverse_reverse = (arr) => {\n  let sign = 1;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n      signs.push(sign);\n    }\n  }\n  return signs.reduce((acc, curr) => acc + curr);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs_reverse_reverse_reverse_reverse_reverse_reverse([1, 2, 2, -4]) == -9\n  >>> prod_signs_reverse_reverse_reverse_reverse_reverse_reverse_reverse([0, 1]) == 0\n  >>> prod_signs_reverse_reverse_reverse_reverse_reverse_reverse_reverse([[]]) == null\n  */\nconst prod_signs_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (arr) => {\n  let sign = 1;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n      signs.push(sign);\n    }\n  }\n  return signs.reduce((acc, curr) => acc + curr);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs_reverse_reverse_reverse_reverse_reverse_reverse_reverse([1, 2, 2, -4]) == -9\n  >>> prod_signs_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse([0, 1]) == 0\n  >>> prod_signs_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse([[]]) == null\n  */\nconst prod_signs_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (arr) => {\n  let sign = 1;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n      signs.push(sign);\n    }\n  }\n  return signs.reduce((acc, curr) => acc + curr);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs_reverse_reverse_reverse_reverse_reverse_reverse_reverse([1, 2, 2, -4]) == -9\n  >>> prod_signs_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse([0, 1]) == 0\n  >>> prod_signs_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse([[]]) == null\n  */\nconst prod_signs_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (arr) => {\n  let sign = 1;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  const lst_D = new Array(grid.length).fill(0);\n  const lst_E = new Array(grid.length).fill(0);\n  const lst_F = new Array(grid.length).fill(0);\n  const lst_G = new Array(grid.length).fill(0);\n  const lst_H = new Array(grid.length).fill(0);\n  const lst_I = new Array(grid.length).fill(0);\n  const lst_J = new Array(grid.length).fill(0);\n  const lst_K = new Array(grid.length).fill(0);\n  const lst_L = new Array(grid.length).fill(0);\n  const lst_M = new Array(grid.length).fill(0);\n  const lst_N = new Array(grid.length).fill(0);\n  const lst_O = new Array(grid.length).fill(0);\n  const lst_P = new Array(grid.length).fill(0);\n  const lst_Q = new Array(grid.length).fill(0);\n  const lst_R = new Array(grid.length).fill(0);\n  const lst_S = new Array(grid.length).fill(0);\n  const lst_T = new Array(grid.length).fill(0);\n  const lst_U = new Array(grid.length).fill(0);\n  const lst_V = new Array(grid.length).fill(0);\n  const lst_W = new Array(grid.length).fill(0);\n  const lst_X = new Array(grid.length).fill(0);\n  const lst_Y = new Array(grid.length).fill(0);\n  const lst_Z = new Array(grid.length).fill(0);\n  const lst_a = new Array(grid.length).fill(0);\n  const lst_b = new Array(grid.length).fill(0);\n  const lst_c = new Array(grid.length).fill(0);\n  const lst_d = new Array(grid.length).fill(0);\n  const lst_e = new Array(grid.length).fill(0);\n  const lst_f = new Array(grid.length).fill(0);\n  const lst_g = new Array(grid.length).fill(0);\n  const lst_h = new Array(grid.length).fill(0);\n  const lst_i = new Array(grid.length).fill(0);\n  const lst_j = new Array(grid.length).fill(0);\n  const lst_k = new Array(grid.length).fill(0);\n  const lst_l = new Array(grid.length).fill(0);\n  const lst_m = new Array(grid.length).fill(0);\n  const lst_n = new Array(grid.length).fill(0);\n  const lst_o = new Array(grid.length).fill(0);\n  const lst_p = new Array(grid.length).fill(0);\n  const lst_q = new Array(grid.length).fill(0);\n  const lst_r = new Array(grid.length).fill(0);\n  const lst_s = new Array(grid.length).fill(0);\n  const lst_t = new Array(grid.length).fill(0);\n  const lst_u = new Array(grid.length).fill(0);\n  const lst_v = new Array(grid.length).fill(0);\n  const lst_w = new Array(grid.length).fill(0);\n  const lst_x = new Array(grid.length).fill(0);\n  const lst_y = new Array(grid.length).fill(0);\n  const lst_z = new Array(grid.length).fill(0);\n  const lst_a = new Array(grid.length).fill(0);\n  const lst_b = new Array(grid.length).fill(0);\n  const lst_c = new Array(grid.length).fill(0);\n  const lst_d = new Array(grid.length).fill(0);\n  const lst_e = new Array(grid.length).fill(0);\n  const lst_f = new Array(grid.length).fill(0);\n  const lst_g = new Array(grid.length).fill(0);\n  const lst_h = new Array(grid.length).fill(0);\n  const lst_i = new Array(grid.length).fill(0);\n  const lst_j = new Array(grid.length).fill(0);\n  const lst_k = new Array(grid.length).fill(0);\n  const lst_l = new Array(grid.length).fill(0);\n  const lst_m = new Array(grid.length).fill(0);\n  const lst_n = new Array(grid.length).fill(0);\n  const lst_o = new Array(grid.length).fill(0);\n  const lst_p = new Array(grid.length).fill(0);\n  const lst_q = new Array(grid.length).fill(0);\n  const lst_r = new Array(grid.length).fill(0);\n  const lst_s = new Array(grid.length).fill(0);\n  const lst_t = new Array(grid.length).fill(0);\n  const lst_u = new Array(grid.length).fill(0);\n  const lst_v = new Array(grid.length).fill(0);\n  const lst_w = new Array(grid.length).fill(0);\n  const lst_x = new Array(grid.length).fill(0);\n  const lst_y = new Array(grid.length).fill(0);\n  const lst_z = new Array(grid.length).fill(0);\n  const lst_a = new Array(grid.length).fill(0);\n  const lst_b = new Array(grid.length).fill(0);\n  const lst_c = new Array(grid.length).fill(0);\n  const lst_d = new Array(grid.length).fill(0);\n  const lst_e = new Array(grid.length).fill(0);\n  const lst_f = new Array(grid.length).fill(0);\n  const lst_g = new Array(grid.length).fill(0);\n  const lst_h = new Array(grid.length).fill(0);\n  const lst_i = new Array(grid.length).fill(0);\n  const lst_j = new Array(grid.length).fill(0);\n  const lst_k = new Array(grid.length).fill(0);\n  const lst_l = new Array(grid.length).fill(0);\n  const lst_m = new Array(grid.length).fill(0);\n  const lst_n = new Array(grid.length).fill(0);\n  const lst_o = new Array(grid.length).fill(0);\n  const lst_p = new Array(grid.length).fill(0);\n  const lst_q = new Array(grid.length).fill(0);\n  const lst_r = new Array(grid.length).fill(0);\n  const lst_s = new Array(grid.length).fill(0);\n  const lst_t = new Array(grid.length).fill(0);\n  const lst_u = new Array(grid.length).fill(0);\n  const lst_v = new Array(grid.length).fill(0);\n  const lst_w = new Array(grid.length).fill(0);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (a < b) return greatest_common_divisor(b, a)\n  const t = a % b\n  return t === 0? a : greatest_common_divisor(b, t)\n}\n\n/* Return a random integer between min and max\n  >>> random_int(1, 10)\n  1\n  >>> random_int(1, 10, 2)\n  3\n  >>> random_int(1, 10, 2, 3)\n  5\n  */\nconst random_int = (min, max, step) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  if (min === max) return Math.floor(Math.random() * (max - min + 1)) + min\n  const range = max - min\n  return Math.floor(Math.random() * (range + 1) + min) + min\n}\n\n/* Return a random float between min and max\n  >>> random_float(1.0, 10.0)\n  1.0\n  >>> random_float(1.0, 10.0, 2)\n  3.141592653589793\n  >>> random_float(1.0, 10.0, 2, 3)\n  5.7874383415703125\n  */\nconst random_float = (min, max, step) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  if (min === max) return Math.random() * (max - min + 1) + min\n  const range = max - min\n  return Math.random() * (range + 1) + min\n}\n\n/* Return a random string between min and max\n  >>> random_string(10)\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> random_string(10, 2)\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> random_string(10, 2, 3)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst random_string = (min, max) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyz'\n  return chars[Math.floor(Math.random() * chars.length)]\n}\n\n/* Return a random boolean between true and false\n  >>> random_boolean()\n  true\n  >>> random_boolean(true)\n  true\n  >>> random_boolean(false)\n  false\n  >>> random_boolean(null)\n  false\n  */\nconst random_boolean = () => Math.random() > 0.5\nconst random_boolean_true = () => true\nconst random_boolean_false = () => false\n\n/* Return a random integer between min and max\n  >>> random_int(1, 10)\n  1\n  >>> random_int(1, 10, 2)\n  3\n  >>> random_int(1, 10, 2, 3)\n  5\n  */\nconst random_float = (min, max) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  const range = max - min\n  return Math.floor(Math.random() * (range + 1) + min) + min\n}\n\n/* Return a random float between min and max\n  >>> random_float(1.0, 10.0)\n  1.0\n  >>> random_float(1.0, 10.0, 2)\n  3.141592653589793\n  >>> random_float(1.0, 10.0, 2, 3)\n  5.7874383415703125\n  */\nconst random_string = (min, max) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyz'\n  return chars[Math.floor(Math.random() * chars.length)]\n}\n\n/* Return a random integer between min and max\n  >>> random_int(1, 10)\n  1\n  >>> random_int(1, 10, 2)\n  3\n  >>> random_int(1, 10, 2, 3)\n  5\n  */\nconst random_float = (min, max) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  const range = max - min\n  return Math.floor(Math.random() * (range + 1) + min) + min\n}\n\n/* Return a random integer between min and max\n  >>> random_int(1, 10)\n  1\n  >>> random_int(1, 10, 2)\n  3\n  >>> random_int(1, 10, 2, 3)\n  5\n  */\nconst random_float = (min, max) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  const range = max - min\n  return Math.floor(Math.random() * (range + 1) + min) + min\n}\n\n/* Return a random integer between min and max\n  >>> random_int(1, 10)\n  1\n  >>> random_int(1, 10, 2)\n  3\n  >>> random_int(1, 10, 2, 3)\n  5\n  */\nconst random_float = (min, max) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  const range = max - min\n  return Math.floor(Math.random() * (range + 1) + min) + min\n}\n\n/* Return a random integer between min and max\n  >>> random_int(1, 10)\n  1\n  >>> random_int(1, 10, 2)\n  3\n  >>> random_int(1, 10, 2, 3)\n  5\n  */\nconst random_float = (min, max) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  const range = max - min\n  return Math.floor(Math.random() * (range + 1) + min) + min\n}\n\n/* Return a random integer between min and max\n  >>> random_int(1, 10)\n  1\n  >>> random_int(1, 10, 2)\n  3\n  >>> random_int(1, 10, 2, 3)\n  5\n  */\nconst random_float = (min, max) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  const range = max - min\n  return Math.floor(Math.random() * (range + 1) + min) + min\n}\n\n/* Return a random integer between min and max\n  >>> random_int(1, 10)\n  1\n  >>> random_int(1, 10, 2)\n  3\n  >>> random_int(1, 10, 2, 3)\n  5\n  */\nconst random_float = (min, max) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  const range = max - min\n  return Math.floor(Math.random() * (range + 1) + min) + min\n}\n\n/* Return a random integer between min and max\n  >>> random_int(1, 10)\n  1\n  >>> random_int(1, 10, 2)\n  3\n  >>> random_int(1, 10, 2, 3)\n  5\n  */\nconst random_float = (min, max) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  const range = max - min\n  return Math.floor(Math.random() * (range + 1) + min) + min\n}\n\n/* Return a random integer between min and max\n  >>> random_int(1, 10)\n  1\n  >>> random_int(1, 10, 2)\n  3\n  >>> random_int(1, 10, 2, 3)\n  5\n  */\nconst random_float = (min, max) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  const range = max - min\n  return Math.floor(Math.random() * (range + 1) + min) + min\n}\n\n/* Return a random integer between min and max\n  >>> random_int(1, 10)\n  1\n  >>> random_int(1, 10, 2)\n  3\n  >>> random_int(1, 10, 2, 3)\n  5\n  */\nconst random_float = (min, max) => {\n  if (min > max) throw new RangeError('min must be less than max')\n  const range = max - min\n  return Math.floor(Math.random() * (range + 1) + min) + min\n}\n\n/* Return a random integer between min and max\n  >>> random_int(1, 10)\n  1\n  >>> random_int(1, 10, 2)\n  3\n  >>> random_int(1, 10, 2, 3)\n  5\n  */\nconst random_float = (min, max) => {\n  if (min > max) throw new RangeError('min must be less than max')", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence.\n  Examples:\n  fib(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, \n  4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 23301384, 41180143, 6765337, 10946324, 17711592, 28657464, 46368592, 75025592, 121393248, 196418984, 31781184, 51422984, 83204143, 134626984, 217830984, 352457859, 570288792, 922741384, 149303524578, 23301384592, 41180143592, 6765337592, 10946324592, 177115924181, 28657465181, 463685924181, 750255924181, 121393248592, 196418984592, 31781184592, 51422984592, 83204143592, 134626984592, 217830984592, 35245785924181, 5702887924181, 922741384592, 149303524578592, 233013845924181, 411801435924181, 67653375924181, 109463245924181, 177115924181\n  ]\n  */\nconst fib = (n) => {\n  if (n <= 1) return [];\n  return [fib(n - 1) + fib(n - 2) + fib(n - 3)];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by 5.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 23301384, 41180143, 6765337, 10946324, 17711592, 28657464, 46368592, 75025592, 121393248, 196418984, 31781184, 51422984, 83204143, 134626984, 217830984, 352457859, 570288792, 922741384, 149303524578, 23301384592, 41180143592, 6765337592, 10946324592, 177115924181, 28657465181, 463685924181, 750255924181, 121393248592, 196418984592, 31781184592, 51422984592, 83204143592, 134626984592, 217830984592, 35245785924181, 5702887924181, 922741384592, 149303524578592, 233013845924181, 411801435924181, 67653375924181, 109463245924181, 177115924181\n  ]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return [];\n  return [fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3)];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by both 5 and 10.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 23301384, 41180143, 6765337, 10946324, 17711592, 28657464, 46368592, 75025592, 121393248, 196418984, 31781184, 51422984, 83204143, 134626984, 217830984, 352457859, 570288792, 922741384, 149303524578, 23301384592, 41180143592, 6765337592, 10946324592, 177115924181, 28657465181, 463685924181, 750255924181, 121393248592, 196418984592, 31781184592, 51422984592, 83204143592, 134626984592, 217830984592, 35245785924181, 5702887924181, 922741384592, 149303524578592, 233013845924181, 411801435924181, 67653375924181, 109463245924181, 177115924181\n  ]\n  */\nconst fibonacci10 = (n) => {\n  if (n <= 1) return [];\n  return [fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3)];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by both ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of all the even digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the even and odd digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/[[]]/g);\n  return brackets && brackets.length > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/[[]]/g);\n  return brackets && brackets.length > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/[[]]/g);\n  return brackets && brackets.length > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/[[]]/g);\n  return brackets && brackets.length > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/[[]]/g);\n  return brackets && brackets.length > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/[[]]/g);\n  return brackets && brackets.length > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/[[]]/g);\n  return brackets && brackets.length > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/[[]]/g);\n  return brackets && brackets.length > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/[[]]/g);\n  return brackets && brackets.length > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  let len = lst.length;\n  let i;\n  let j;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp287;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_letter = last_char.match(/[a-zA-Z]/)\n  return is_letter\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_digit(\"apple pie\") ➞ false\n  check_if_last_char_is_a_digit(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_digit(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_digit(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_digit = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_digit = last_char.match(/\\d/)\n  return is_digit\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_punctuation(\"apple pie\") ➞ false\n  check_if_last_char_is_a_punctuation(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_punctuation(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_punctuation(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_punctuation = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_punctuation = last_char.match(/[!?.,;:@&=+$%^*()_\\-+~]/)\n  return is_punctuation\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a space and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_space(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_space = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_space = last_char.match(/[\\s\\p{Zs}\\p{Zl}]+/)\n  return is_space\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pie", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      k = j;\n      j = i;\n      i = k;\n    }\n  }\n  return i;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. If it is not found then return -1.\n\n  Examples:\n  search([1,2,3,4,5,6,7,8,9,10], 2) = 3\n  search([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst search = (arr, target) => {\n  let i = can_arrange(arr);\n  let j = i;\n  let k = 0;\n  while (j < arr.length) {\n    if (arr[j] == target) {\n      k = j;\n      j = i;\n      i = k;\n    }\n  }\n  return i;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. If it is not found then return -1.\n\n  Examples:\n  search([1,2,3,4,5,6,7,8,9,10], 2) = 3\n  search([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst binary_search = (arr, target) => {\n  let i = search(arr, target);\n  if (i < 0) {\n    return -1;\n  } else if (i > arr.length) {\n    return arr.length - 1;\n  } else {\n    return i;\n  }\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. If it is not found then return -1.\n\n  Examples:\n  binary_search([1,2,3,4,5,6,7,8,9,10], 2) = 3\n  binary_search([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst binary_search_lower_bound = (arr, target) => {\n  let i = binary_search(arr, target);\n  if (i < 0) {\n    return -1;\n  } else if (i > arr.length) {\n    return arr.length - 1;\n  } else {\n    return i;\n  }\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. If it is not found then return -1.\n\n  Examples:\n  binary_search_lower_bound([1,2,3,4,5,6,7,8,9,10], 2) = 3\n  binary_search_lower_bound([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst binary_search_upper_bound = (arr, target) => {\n  let i = binary_search(arr, target);\n  if (i < 0) {\n    return -1;\n  } else if (i > arr.length) {\n    return arr.length - 1;\n  } else {\n    return i;\n  }\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. If it is not found then return -1.\n\n  Examples:\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 2) = 3\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst binary_search_lower_bound = (arr, target) => {\n  let i = binary_search(arr, target);\n  if (i < 0) {\n    return -1;\n  } else if (i > arr.length) {\n    return arr.length - 1;\n  } else {\n    return i;\n  }\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. If it is not found then return -1.\n\n  Examples:\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 2) = 3\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst binary_search_upper_bound = (arr, target) => {\n  let i = binary_search(arr, target);\n  if (i < 0) {\n    return -1;\n  } else if (i > arr.length) {\n    return arr.length - 1;\n  } else {\n    return i;\n  }\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. If it is not found then return -1.\n\n  Examples:\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 2) = 3\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst binary_search_upper_bound = (arr, target) => {\n  let i = binary_search(arr, target);\n  if (i < 0) {\n    return -1;\n  } else if (i > arr.length) {\n    return arr.length - 1;\n  } else {\n    return i;\n  }\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. If it is not found then return -1.\n\n  Examples:\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 2) = 3\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst binary_search_lower_bound = (arr, target) => {\n  let i = binary_search(arr, target);\n  if (i < 0) {\n    return -1;\n  } else if (i > arr.length) {\n    return arr.length - 1;\n  } else {\n    return i;\n  }\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. If it is not found then return -1.\n\n  Examples:\n  binary_search_lower_bound([1,2,3,4,5,6,7,8,9,10], 2) = 3\n  binary_search_lower_bound([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst binary_search_upper_bound = (arr, target) => {\n  let i = binary_search(arr, target);\n  if (i < 0) {\n    return -1;\n  } else if (i > arr.length) {\n    return arr.length - 1;\n  } else {\n    return i;\n  }\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. If it is not found then return -1.\n\n  Examples:\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 2) = 3\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst binary_search_upper_bound = (arr, target) => {\n  let i = binary_search(arr, target);\n  if (i < 0) {\n    return -1;\n  } else if (i > arr.length) {\n    return arr.length - 1;\n  } else {\n    return i;\n  }\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. If it is not found then return -1.\n\n  Examples:\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 2) = 3\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst binary_search_lower_bound = (arr, target) => {\n  let i = binary_search(arr, target);\n  if (i < 0) {\n    return -1;\n  } else if (i > arr.length) {\n    return arr.length - 1;\n  } else {\n    return i;\n  }\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. If it is not found then return -1.\n\n  Examples:\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 2) = 3\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst binary_search_upper_bound = (arr, target) => {\n  let i = binary_search(arr, target);\n  if (i < 0) {\n    return -1;\n  } else if (i > arr.length) {\n    return arr.length - 1;\n  } else {\n    return i;\n  }\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target\n  value if it is found in the array. If it is not found then return -1.\n\n  Examples:\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 2) = 3\n  binary_search_upper_bound([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst binary_search_upper_bound = (arr, target) => {\n  let i = binary_search(arr, target);\n  if (i < 0) {\n    return -1;\n  } else if (i > arr.length) {\n    return arr.length - 1;\n  } else {\n    return i;\n  }\n};\n\n/*\n  Given a sorted array and a ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (2, 4)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_negative_integers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no positive integers, return them as null.\n  Examples:\n  largest_smallest_positive_integers([2, 4, 1, 3, 5, 7]) == (4, 1)\n  largest_smallest_positive_integers([]) == (null, null)\n  largest_smallest_positive_integers([0]) == (null, null)\n  */\nconst largest_smallest_positive_integers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_negative_integers([2, 4, 1, 3, 5, 7]) == (1, 3)\n  largest_smallest_negative_integers([]) == (null, null)\n  largest_smallest_negative_integers([0]) == (null, null)\n  */\nconst largest_smallest_positive_integers_negative = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative integers, return them as null.\n  Examples:\n  largest_smallest_positive_integers_negative([2, 4, 1, 3, 5, 7]) == (3, 4)\n  largest_smallest_positive_integers_negative([]) == (null, null)\n  largest_smallest_positive_integers_negative([0]) == (null, null)\n  */\nconst largest_smallest_negative_integers_positive = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no positive integers, return them as null.\n  Examples:\n  largest_smallest_positive_integers_positive([2, 4, 1, 3, 5, 7]) == (4, 1)\n  largest_smallest_positive_integers_positive([]) == (null, null)\n  largest_smallest_positive_integers_positive([0]) == (null, null)\n  */\nconst largest_smallest_positive_integers_positive = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative integers, return them as null.\n  Examples:\n  largest_smallest_positive_integers_positive([2, 4, 1, 3, 5, 7]) == (1, 4)\n  largest_smallest_positive_integers_positive([]) == (null, null)\n  largest_smallest_positive_integers_positive([0]) == (null, null)\n  */\nconst largest_smallest_positive_integers_negative_negative = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative integers, return them as null.\n  Examples:\n  largest_smallest_positive_integers_negative_negative([2, 4, 1, 3, 5, 7]) == (3, 1)\n  largest_smallest_positive_integers_negative_negative([]) == (null, null)\n  largest_smallest_positive_integers_negative_negative([0]) == (null, null)\n  */\nconst largest_smallest_positive_integers_negative_positive = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no positive integers, return them as null.\n  Examples:\n  largest_smallest_positive_integers_negative_positive([2, 4, 1, 3, 5, 7]) == (4, 3)\n  largest_smallest_positive_integers_negative_positive([]) == (null, null)\n  largest_smallest_positive_integers_negative_positive([0]) == (null, null)\n  */\nconst largest_smallest_positive_integers_positive_positive = (lst) => {\n  let largest = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return a === b\n  if (a === \"\" || b === \"\") return a === b\n  if (a instanceof Number && b instanceof Number) return a > b\n  if (a instanceof String && b instanceof String) return a.localeCompare(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt) return a.compareTo(b)\n  if (a instanceof BigFloat && b instanceof BigFloat) return a.compareTo(b)\n  if (a instanceof BigInt && b instanceof BigInt", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_odd(4) == false\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_even(-4) == true\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_odd(-4) == false\n  is_equal_to_sum_odd(-6) == false\n  is_equal_to_sum_odd(-8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == false\n  is_equal_to_sum_even(-6) == true\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative even numbers\n  Example\n  is_equal_to_sum_even(-4) == true\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_odd(-4) == false\n  is_equal_to_sum_odd(-6) == false\n  is_equal_to_sum_odd(-8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  return n % 2 === 0 && n % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative even numbers\n  Example\n  is_equal_to_sum_even(-4) == true\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_odd(-4) == false\n  is_equal_to_sum_odd(-6) == false\n  is_equal_to_sum_odd(-8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  return n % 2 === 0 && n % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == true\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_odd(-4) == false\n  is_equal_to_sum_odd(-6) == false\n  is_equal_to_sum_odd(-8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  return n % 2 === 0 && n % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == true\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_odd(-4) == false\n  is_equal_to_sum_odd(-6) == false\n  is_equal_to_sum_odd(-8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  return n % 2 === 0 && n % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == true\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_odd(-4) == false\n  is_equal_to_sum_odd(-6) == false\n  is_equal_to_sum_odd(-8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  return n % 2 === 0 && n % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == true\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_odd(-4) == false\n  is_equal_to_sum_odd(-6) == false\n  is_equal_to_sum_odd(-8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  return n % 2 === 0 && n % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == true\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_odd(-4) == false\n  is_equal_to_sum_odd(-6) == false\n  is_equal_to_sum_odd(-8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  return n % 2 === 0 && n % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == true\n  is_equal_to_sum_even(-6) == false\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * special_factorial(n-1);\n};\n\n/*\n  Given a positive integer n, return the largest prime factor of n.\n  For example:\n  >>> largest_prime_factor(10)\n  2\n  >>> largest_prime_factor(100)\n  3\n  >>> largest_prime_factor(1000)\n  5\n  >>> largest_prime_factor(10000)\n  7\n  >>> largest_prime_factor(100000)\n  11\n  >>> largest_prime_factor(1000000)\n  13\n  >>> largest_prime_factor(10000000)\n  17\n  >>> largest_prime_factor(100000000)\n  19\n  >>> largest_prime_factor(1000000000)\n  23\n  >>> largest_prime_factor(10000000000)\n  29\n  >>> largest_prime_factor(100000000000)\n  37\n  >>> largest_prime_factor(1000000000000)\n  43\n  >>> largest_prime_factor(10000000000000)\n  53\n  >>> largest_prime_factor(100000000000000)\n  59\n  >>> largest_prime_factor(1000000000000000)\n  67\n  >>> largest_prime_factor(10000000000000000)\n  73\n  >>> largest_prime_factor(100000000000000000)\n  79\n  >>> largest_prime_factor(1000000000000000001)\n  83\n  >>> largest_prime_factor(1000000000000000000)\n  89\n  >>> largest_prime_factor(100000000000000000000)\n  97\n  >>> largest_prime_factor(1000000000000000000000)\n  109\n  >>> largest_prime_factor(10000000000000000000000)\n  117\n  >>> largest_prime_factor(100000000000000000000000)\n  131\n  >>> largest_prime_factor(1000000000000000000000000)\n  143\n  >>> largest_prime_factor(10000000000000000000000000)\n  157\n  >>> largest_prime_factor(100000000000000000000000001)\n  163\n  >>> largest_prime_factor(100000000000000000000000000)\n  191\n  >>> largest_prime_factor(1000000000000000000000000000)\n  239\n  >>> largest_prime_factor(100000000000000000000000000000)\n  287\n  >>> largest_prime_factor(1000000000000000000000000000000)\n  333\n  >>> largest_prime_factor(10000000000000000000000000000000)\n  371\n  >>> largest_prime_factor(100000000000000000000000000000000)\n  419\n  >>> largest_prime_factor(1000000000000000000000000000000000)\n  479\n  >>> largest_prime_factor(10000000000000000000000000000000001)\n  511\n  >>> largest_prime_factor(10000000000000000000000000000000000)\n  539\n  >>> largest_prime_factor(100000000000000000000000000000000000)\n  577\n  >>> largest_prime_factor(10000000000000000000000000000000000000)\n  613\n  >>> largest_prime_factor(100000000000000000000000000000000000000)\n  659\n  >>> largest_prime_factor(1000000000000000000000000000000000000000)\n  711\n  >>> largest_prime_factor(10000000000000000000000000000000000000000)\n  739\n  >>> largest_prime_factor(100000000000000000000000000000000000000000)\n  787\n  >>> largest_prime_factor(1000000000000000000000000000000000000000001)\n  811\n  >>> largest_prime_factor(1000000000000000000000000000000000000000000)\n  847\n  >>> largest_prime_factor(10000000000000000000000000000000000000000000)\n  893\n  >>> largest_prime_factor(10000000000000000000000000000000000000000)\n  919\n  >>> largest_prime_factor(100000000000000000000000000000000000000000)\n  959\n  >>> largest_prime_factor(1000000000000000000000000000000000000000001)\n  1013\n  >>> largest_prime_factor(1000000000000000000000000000000000000000000)\n  1047\n  >>> largest_prime_factor(10000000000000000000000000000000000000000000)\n  1087\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000)\n  1133\n  >>> largest_prime_factor(10000000000000000000000000000000000000000000000)\n  1179\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000000)\n  1231\n  >>> largest_prime_factor(1000000000000000000000000000000000000000000000000)\n  1279\n  >>> largest_prime_factor(10000000000000000000000000000000000000000000000000)\n  1311\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000000001)\n  1343\n  >>> largest_prime_factor(1000000000000000000000000000000000000000000)\n  1379\n  >>> largest_prime_factor(10000000000000000000000000000000000000000000)\n  1431\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000)\n  1479\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000000)\n  1531\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000000)\n  1579\n  >>> largest_prime_factor(1000000000000000000000000000000000000000000000000)\n  1631\n  >>> largest_prime_factor(10000000000000000000000000000000000000000000000000)\n  1679\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000000001)\n  1731\n  >>> largest_prime_factor(1000000000000000000000000000000000000000000)\n  1779\n  >>> largest_prime_factor(10000000000000000000000000000000000000000000)\n  1831\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000)\n  1879\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000000)\n  1931\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000000)\n  1997\n  >>> largest_prime_factor(1000000000000000000000000000000000000000000000000)\n  2113\n  >>> largest_prime_factor(10000000000000000000000000000000000000000000000000)\n  2197\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000000001)\n  2231\n  >>> largest_prime_factor(1000000000000000000000000000000000000000000)\n  2279\n  >>> largest_prime_factor(10000000000000000000000000000000000000000000)\n  2319\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000)\n  2339\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000000)\n  2393\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000000)\n  2431\n  >>> largest_prime_factor(1000000000000000000000000000000000000000000000000)\n  2479\n  >>> largest_prime_factor(10000000000000000000000000000000000000000000000000)\n  2531\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000000001)\n  2579\n  >>> largest_prime_factor(1000000000000000000000000000000000000000000)\n  2631\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000)\n  2679\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000000)\n  2731\n  >>> largest_prime_factor(100000000000000000000000000000000000000000000000)\n  2779\n  >>> largest_prime_factor(1000000000000000000000000000000000000000000000000)\n  2831\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  let prefixes = [];\n  let current = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] ==='') {\n      prefixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    } else {\n      current += string[i];\n      i++;\n      j++;\n    }\n    if (j === len) {\n      prefixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['c', 'ba', 'abc']\n  */\nconst all_suffixes = (string) => {\n  let suffixes = [];\n  let current = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] ==='') {\n      suffixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    } else {\n      current += string[i];\n      i++;\n      j++;\n    }\n    if (j === len) {\n      suffixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'b', 'c']\n  */\nconst all_prefixes_common = (string) => {\n  let prefixes = [];\n  let current = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] ==='') {\n      prefixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    } else {\n      current += string[i];\n      i++;\n      j++;\n    }\n    if (j === len) {\n      prefixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['c', 'ba', 'abc']\n  */\nconst all_suffixes_common = (string) => {\n  let suffixes = [];\n  let current = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] ==='') {\n      suffixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    } else {\n      current += string[i];\n      i++;\n      j++;\n    }\n    if (j === len) {\n      suffixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from longest to shortest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'b', 'c']\n  */\nconst all_prefixes_longest = (string) => {\n  let prefixes = [];\n  let current = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] ==='') {\n      prefixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    } else {\n      current += string[i];\n      i++;\n      j++;\n    }\n    if (j === len) {\n      prefixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from longest to shortest of the input string\n  >>> all_suffixes('abc')\n  ['c', 'ba', 'abc']\n  */\nconst all_suffixes_longest = (string) => {\n  let suffixes = [];\n  let current = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] ==='') {\n      suffixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    } else {\n      current += string[i];\n      i++;\n      j++;\n    }\n    if (j === len) {\n      suffixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from shortest to longest of the input string\n  >>> all_prefixes_common('abc')\n  ['a', 'b', 'c']\n  */\nconst all_prefixes_common_longest = (string) => {\n  let prefixes = [];\n  let current = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] ==='') {\n      prefixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    } else {\n      current += string[i];\n      i++;\n      j++;\n    }\n    if (j === len) {\n      prefixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from shortest to longest of the input string\n  >>> all_suffixes_common('abc')\n  ['c', 'ba', 'abc']\n  */\nconst all_suffixes_common_longest = (string) => {\n  let suffixes = [];\n  let current = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] ==='') {\n      suffixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    } else {\n      current += string[i];\n      i++;\n      j++;\n    }\n    if (j === len) {\n      suffixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from longest to shortest of the input string\n  >>> all_prefixes_longest('abc')\n  ['a', 'b', 'c']\n  */\nconst all_prefixes_longest_common = (string) => {\n  let prefixes = [];\n  let current = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] ==='') {\n      prefixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    } else {\n      current += string[i];\n      i++;\n      j++;\n    }\n    if (j === len) {\n      prefixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from longest to shortest of the input string\n  >>> all_suffixes_longest_common('abc')\n  ['c', 'ba', 'abc']\n  */\nconst all_suffixes_longest_common = (string) => {\n  let suffixes = [];\n  let current = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] ==='') {\n      suffixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    } else {\n      current += string[i];\n      i++;\n      j++;\n    }\n    if (j === len) {\n      suffixes.push(current);\n      current = '';\n      i++;\n      j = 0;\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from shortest to longest of the input string\n  >>> all_prefixes_common_longest('abc')\n  ['a', 'b', 'c']\n  */\nconst all_prefixes_common_lon", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_multi = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_multi_multi = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_multi_multi_multi = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_multi_multi_multi_multi = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_multi_multi_multi_multi_multi = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_multi_multi_multi_multi_multi_multi = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_multi_multi_multi_multi_multi_multi_multi = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_multi_multi_multi_multi_multi_multi_multi = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_multi_multi_multi_multi_multi_multi_multi = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_multi_multi_multi_multi_multi_multi_multi_multi = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_multi_multi_multi_multi_multi_multi_multi_multi = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_multi_multi_multi_multi_multi_multi_multi_multi = (text) => {\n  return text.replace(/\\s+/g", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const file_name_length = file_name.length;\n  const file_name_starts_with_dot = file_name.indexOf('.') === 0;\n  const file_name_contains_one_dot = file_name.indexOf('.') === file_name.length - 1;\n  const file_name_contains_one_digit = file_name.indexOf('.') === 0;\n  const file_name_contains_two_digits = file_name.indexOf('.') === file_name.length - 2;\n  const file_name_contains_three_digits = file_name.indexOf('.') === file_name.length - 3;\n  const file_name_contains_four_digits = file_name.indexOf('.') === file_name.length - 4;\n  const file_name_contains_five_digits = file_name.indexOf('.') === file_name.length - 5;\n  const file_name_contains_six_digits = file_name.indexOf('.') === file_name.length - 6;\n  const file_name_contains_seven_digits = file_name.indexOf('.') === file_name.length - 7;\n  const file_name_contains_eight_digits = file_name.indexOf('.') === file_name.length - 8;\n  const file_name_contains_nine_digits = file_name.indexOf('.') === file_name.length - 9;\n  const file_name_contains_ten_digits = file_name.indexOf('.') === file_name.length - 10;\n  const file_name_contains_eleven_digits = file_name.indexOf('.') === file_name.length - 11;\n  const file_name_contains_twelve_digits = file_name.indexOf('.') === file_name.length - 12;\n  const file_name_contains_thirteen_digits = file_name.indexOf('.') === file_name.length - 13;\n  const file_name_contains_fourteen_digits = file_name.indexOf('.') === file_name.length - 14;\n  const file_name_contains_fifteen_digits = file_name.indexOf('.') === file_name.length - 15;\n  const file_name_contains_sixteen_digits = file_name.indexOf('.') === file_name.length - 16;\n  const file_name_contains_seventeen_digits = file_name.indexOf('.') === file_name.length - 17;\n  const file_name_contains_eighteen_digits = file_name.indexOf('.') === file_name.length - 18;\n  const file_name_contains_nineteen_digits = file_name.indexOf('.') === file_name.length - 19;\n  const file_name_contains_twenty_digits = file_name.indexOf('.') === file_name.length - 20;\n  const file_name_contains_thirty_digits = file_name.indexOf('.') === file_name.length - 21;\n  const file_name_contains_forty_digits = file_name.indexOf('.') === file_name.length - 22;\n  const file_name_contains_fifty_digits = file_name.indexOf('.') === file_name.length - 23;\n  const file_name_contains_sixty_digits = file_name.indexOf('.') === file_name.length - 24;\n  const file_name_contains_seventy_digits = file_name.indexOf('.') === file_name.length - 25;\n  const file_name_contains_eighty_digits = file_name.indexOf('.') === file_name.length - 26;\n  const file_name_contains_ninety_digits = file_name.indexOf('.') === file_name.length - 27;\n  const file_name_contains_twenty_four_digits = file_name.indexOf('.') === file_name.length - 28;\n  const file_name_contains_thirty_four_digits = file_name.indexOf('.') === file_name.length - 29;\n  const file_name_contains_forty_four_digits = file_name.indexOf('.') === file_name.length - 30;\n  const file_name_contains_fifty_four_digits = file_name.indexOf('.') === file_name.length - 31;\n  const file_name_contains_sixty_four_digits = file_name.indexOf('.') === file_name.length - 32;\n  const file_name_contains_seventy_four_digits = file_name.indexOf('.') === file_name.length - 33;\n  const file_name_contains_eighty_four_digits = file_name.indexOf('.') === file_name.length - 34;\n  const file_name_contains_ninety_four_digits = file_name.indexOf('.') === file_name.length - 35;\n  const file_name_contains_twenty_five_digits = file_name.indexOf('.') === file_name.length - 36;\n  const file_name_contains_thirty_five_digits = file_name.indexOf('.') === file_name.length - 37;\n  const file_name_contains_forty_five_digits = file_name.indexOf('.') === file_name.length - 38;\n  const file_name_contains_fifty_five_digits = file_name.indexOf('.') === file_name.length - 39;\n  const file_name_contains_sixty_five_digits = file_name.indexOf('.') === file_name.length - 40;\n  const file_name_contains_seventy_five_digits = file_name.indexOf('.') === file_name.length - 41;\n  const file_name_contains_eighty_five_digits = file_name.indexOf('.') === file_name.length - 42;\n  const file_name_contains_ninety_five_digits = file_name.indexOf('.') === file_name.length - 43;\n  const file_name_contains_twenty_six_digits = file_name.indexOf('.') === file_name.length - 44;\n  const file_name_contains_thirty_six_digits = file_name.indexOf('.') === file_name.length - 45;\n  const file_name_contains_forty_six_digits = file_name.indexOf('.') === file_name.length - 46;\n  const file_name_contains_fifty_six_digits = file_name.indexOf('.') === file_name.length - 47;\n  const file_name_contains_sixty_six_digits = file_name.indexOf('.') === file_name.length - 48;\n  const file_name_contains_seventy_six_digits = file_name.indexOf('.') === file_name.length - 49;\n  const file_name_contains_eighty_six_digits = file_name.indexOf('.') === file_name.length - 50;\n  const file_name_contains_ninety_six_digits = file_name.indexOf('.') === file_name.length - 51;\n  const file_name_contains_twenty_seven_digits = file_name.indexOf('.') === file_name.length - 52;\n  const file_name_contains_thirty_seven_digits = file_name.indexOf('.') === file_name.length - 53;\n  const file_name_contains_forty_seven_digits = file_name.indexOf('.') === file_name.length - 54;\n  const file_name_contains_fifty_seven_digits = file_name.indexOf('.') === file_name.length - 55;\n  const file_name_contains_sixty_seven_digits = file_name.indexOf('.') === file_name.length - 56;\n  const file_name_contains_seventy_seven_digits = file_name.indexOf('.') === file_name.length - 57;\n  const file_name_contains_eighty_seven_digits = file_name.indexOf('.') === file_name.length - 58;\n  const file_name_contains_ninety_seven_digits = file_name.indexOf('.') === file_name.length - 59;\n  const file_name_contains_twenty_eight_digits = file_name.indexOf('.') === file_name.length - 60;\n  const file_name_contains_thirty_eight_digits = file_name.indexOf('.') === file_name.length - 61;\n  const file_name_contains_forty_eight_digits = file_name.indexOf('.') === file_name.length - 62;\n  const file_name_contains_fifty_eight_digits = file_name.indexOf('.') === file_name.length - 63;\n  const file_name_contains_sixty_eight_digits = file_name.indexOf('.') === file_name.length - 64;\n  const file_name_contains_seventy_eight_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_of_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_of_cubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_of_cubes_of_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_of_cubes_of_cubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_of_cubes_of_cubes_of_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentLength2 = 0;\n  for (let i = 0; i < words.length; i++) {\n    currentLength += words[i].length;\n    if (currentLength % 2 === 0) {\n      currentLength2++;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    if (currentLength2 === i) {\n      newWords.push(currentWord);\n      currentWord = \"\";\n      currentLength = 0;\n      currentLength2 = 0;\n    } else {\n      currentWord += words[i];\n      currentLength++;\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_with_space = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentLength2 = 0;\n  for (let i = 0; i < words.length; i++) {\n    currentLength += words[i].length;\n    if (currentLength % 2 === 0) {\n      currentLength2++;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    if (currentLength2 === i) {\n      newWords.push(currentWord);\n      currentWord = \"\";\n      currentLength = 0;\n      currentLength2 = 0;\n    } else {\n      currentWord += words[i];\n      currentLength++;\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_with_space2 = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentLength2 = 0;\n  for (let i = 0; i < words.length; i++) {\n    currentLength += words[i].length;\n    if (currentLength % 2 === 0) {\n      currentLength2++;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    if (currentLength2 === i) {\n      newWords.push(currentWord);\n      currentWord = \"\";\n      currentLength = 0;\n      currentLength2 = 0;\n    } else {\n      currentWord += words[i];\n      currentLength++;\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_with_space3 = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentLength2 = 0;\n  for (let i = 0; i < words.length; i++) {\n    currentLength += words[i].length;\n    if (currentLength % 2 === 0) {\n      currentLength2++;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    if (currentLength2 === i) {\n      newWords.push(currentWord);\n      currentWord = \"\";\n      currentLength = 0;\n      currentLength2 = 0;\n    } else {\n      currentWord += words[i];\n      currentLength++;\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_with_space4 = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentLength2 = 0;\n  for (let i = 0; i < words.length; i++) {\n    currentLength += words[i].length;\n    if (currentLength % 2 === 0) {\n      currentLength2++;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    if (currentLength2 === i) {\n      newWords.push(currentWord);\n      currentWord = \"\";\n      currentLength = 0;\n      currentLength2 = 0;\n    } else {\n      currentWord += words[i];\n      currentLength++;\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_with_space5 = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentLength2 = 0;\n  for (let i = 0; i < words.length; i++) {\n    currentLength += words[i].length;\n    if (currentLength % 2 === 0) {\n      currentLength2++;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    if (currentLength2 === i) {\n      newWords.push(currentWord);\n      currentWord = \"\";\n      currentLength = 0;\n      currentLength2 = 0;\n    } else {\n      currentWord += words[i];\n      currentLength++;\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === \"\" || n === \"\") {\n    return false;\n  }\n  if (x.indexOf(\"/\")!== -1) {\n    return false;\n  }\n  if (n.indexOf(\"/\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && x.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (n.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n  if (x.indexOf(\"(\")!== -1 && n.indexOf(\")\")!== -1) {\n    return false;\n  }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  return nums.sort((a, b) => a - b).map((n) => n - sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [11, -11, -11, -11, -12]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_desc = (nums) => {\n  const sums = nums.reduce((acc, n) => acc + n, 0);\n  return nums.sort((a, b) => b - a).map((n) => n - sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_asc = order_by_points;\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-12, 11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_desc_asc = order_by_points_desc;\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_asc_desc_asc = order_by_points_asc_desc;\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_asc_desc_asc_asc = order_by_points_asc_desc_asc;\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_asc_desc_asc_asc_asc = order_by_points_asc_desc_asc_asc;\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_asc_desc_asc_asc_asc_asc_asc = order_by_points_asc_desc_asc_asc_asc_asc;\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_asc_desc_asc_asc_asc_asc_asc_asc_asc = order_by_points_asc_desc_asc_asc_asc_asc_asc;\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_asc_desc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc = order_by_points_asc_desc_asc_asc_asc_asc_asc_asc_asc_asc;\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_asc_desc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc = order_by_points_asc_desc_asc_asc_asc_asc_asc_asc_asc_asc_asc;\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_asc_desc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc = order_by_points_asc_desc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc_asc;\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_asc_desc_asc_asc_asc_asc_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length > 0 && num.toString().charAt(0) % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length > 0 && num.toString().charAt(0) % 2 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length > 0 && num.toString().charAt(0) % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length > 0 && num.toString().charAt(0) % 2 === 1) {\n      if (num % 2 === 1 && num.toString().charAt(0) % 2 === 0) {\n        count++;\n      }\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length > 0 && num.toString().charAt(0) % 2 === 1) {\n      if (num % 2 === 1 && num.toString().charAt(0) % 2 === 1) {\n        count++;\n      }\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length > 0 && num.toString().charAt(0) % 2 === 1) {\n      if (num % 2 === 1 && num.toString().charAt(0) % 2 === 1) {\n        if (num % 2 === 2 && num.toString().charAt(0) % 2 === 0) {\n          count++;\n        }\n      }\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_odd_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length > 0 && num.toString().charAt(0) % 2 === 1) {\n      if (num % 2 === 1 && num.toString().charAt(0) % 2 === 1) {\n        if (num % 2 === 2 && num.toString().charAt(0) % 2 === 1) {\n          if (num % 2 === 3 && num.toString().charAt(0) % 2 === 0) {\n            count++;\n          }\n        }\n      }\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_odd_odd_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length > 0 && num.toString().charAt(0) % 2 === 1) {\n      if (num % 2 === 1 && num.toString().charAt(0) % 2 === 1) {\n        if (num % 2 === 2 && num.toString().charAt(0) % 2 === 1) {\n          if (num % 2 === 3 && num.toString().charAt(0) % 2 === 1) {\n            if (num % 2 === 4 && num.toString().charAt(0) % 2 === 0) {\n              if (num % 2 === 5 && num.toString().charAt(0) % 2 === 0) {\n                if (num % 2 === 6 && num.toString().charAt(0) % 2 === 0) {\n                  count++;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_odd_odd_odd_even = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length > 0 && num.toString().charAt(0) % 2 === 1) {\n      if (num % 2 === 1 && num.toString().charAt(0) % 2 === 1) {\n        if (num % 2 === 2 && num.toString().charAt(0) % 2 === 1) {\n          if (num % 2 === 3 && num.toString().charAt(0) % 2 === 1) {\n            if (num % 2 === 4 && num.toString().charAt(0) % 2 === 1) {\n              if (num % 2 === 5 && num.toString().charAt(0) % 2 === 1) {\n                if (num % 2 === 6 && num.toString().charAt(0) % 2 === 1) {\n                  if (num % 2 === 7 && num.toString().charAt(0) % 2 === 0) {\n                    if (num % 2 === 8 && num.toString().charAt(0) % 2 === 0) {\n                      count++;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_2 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_3 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_4 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_5 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_6 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_7 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_8 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 9\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_9 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 10\n      Explanation: \n      a = [1, 3, 7, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1OrbitOrbit = planet1Orbit + planet2Orbit;\n  const planet2OrbitOrbit = planet2Orbit + planet1Orbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => b.length - a.length)\n   .map(s => s.split(\"\"))\n   .map(s => s.reduce((a, b) => a + b, 0))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(\"\"))\n   .map(s => s.join(\"\"))\n   .filter(s => s.length > 0)\n   .map(s => s.split(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_zero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_zero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_zero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_zero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_zero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_zero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n_zero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n_n = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n_n_zero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n_n_n = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n_n_n_zero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n_n_n = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n_n_n_n_zero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n_n_n_n_n = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n_n_n_n_zero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n_n_n_n_n_n = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n_n_n_n_n_zero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n_n_n_n_n_n = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_n_n_n_n_n_n_n_n_zero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.substr(0, n);\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence_upto_n_n_n_n_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += Math.pow(lst[i], 3);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 5. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      sum += Math.pow(lst[i], 5);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 7. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0) {\n      sum += Math.pow(lst[i], 7);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 9. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 9 === 0) {\n      sum += Math.pow(lst[i], 9);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 11. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) {\n      sum += Math.pow(lst[i], 11);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 13. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 13 === 0) {\n      sum += Math.pow(lst[i], 13);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 15. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 15 === 0) {\n      sum += Math.pow(lst[i], 15);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 17. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 17 === 0) {\n      sum += Math.pow(lst[i], 17);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 19. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 19 === 0) {\n      sum += Math.pow(lst[i], 19);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 21. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 21 === 0) {\n      sum += Math.pow(lst[i], 21);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 23. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 23 === 0) {\n      sum += Math.pow(lst[i], 23);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 25. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 25 === 0) {\n      sum += Math.pow(lst[i], 25);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 27. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 27 === 0) {\n      sum += Math.pow(lst[i], 27);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 29. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 29 === 0) {\n      sum += Math.pow(lst[i], 29);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 31. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game];\n  const guesses = [...guess];\n  const scoreDifferences = scores.map((score, index) => Math.abs(score - guesses[index]));\n  const guesseDifferences = guesses.map((score, index) => Math.abs(score - scores[index]));\n  return scoreDifferences.reduce((acc, difference) => acc + difference, 0);\n};\n\n/*\n  Given an array of scores, an array of guesses, and an array of misses, return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compareMisses = (game, guesses, misses) => {\n  const scores = [...game];\n  const guesses = [...guesses];\n  const misses = [...misses];\n  const scoreDifferences = scores.map((score, index) => Math.abs(score - guesses[index]));\n  const guesseDifferences = guesses.map((score, index) => Math.abs(score - scores[index]));\n  const misseDifferences = misses.map((score, index) => Math.abs(score - scores[index]));\n  return scoreDifferences.reduce((acc, difference) => acc + difference, 0);\n};\n\n/*\n  Given an array of scores, an array of guesses, and an array of misses, return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compareScores = (game, guesses, misses) => {\n  const scores = [...game];\n  const guesses = [...guesses];\n  const misses = [...misses];\n  const scoreDifferences = scores.map((score, index) => Math.abs(score - guesses[index]));\n  const guesseDifferences = guesses.map((score, index) => Math.abs(score - scores[index]));\n  const misseDifferences = misses.map((score, index) => Math.abs(score - scores[index]));\n  return scoreDifferences.reduce((acc, difference) => acc + difference, 0);\n};\n\n/*\n  Given an array of scores, an array of guesses, and an array of misses, return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compareMissesAndScores = (game, guesses, misses) => {\n  const scores = [...game];\n  const guesses = [...guesses];\n  const misses = [...misses];\n  const scoreDifferences = scores.map((score, index) => Math.abs(score - guesses[index]));\n  const guesseDifferences = guesses.map((score, index) => Math.abs(score - scores[index]));\n  const misseDifferences = misses.map((score, index) => Math.abs(score - scores[index]));\n  return scoreDifferences.reduce((acc, difference) => acc + difference, 0);\n};\n\n/*\n  Given an array of scores, an array of guesses, and an array of misses, return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compareMissesAndMisses = (game, guesses, misses) => {\n  const scores = [...game];\n  const guesses = [...guesses];\n  const misses = [...misses];\n  const scoreDifferences = scores.map((score, index) => Math.abs(score - guesses[index]));\n  const guesseDifferences = guesses.map((score, index) => Math.abs(score - scores[index]));\n  const misseDifferences = misses.map((score, index) => Math.abs(score - scores[index]));\n  return scoreDifferences.reduce((acc, difference) => acc + difference, 0);\n};\n\n/*\n  Given an array of scores, an array of guesses, and an array of misses, return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compareMissesAndScoreAndMisses = (game, guesses, misses) => {\n  const scores = [...game];\n  const guesses = [...guesses];\n  const misses = [...misses];\n  const scoreDifferences = scores.map((score, index) => Math.abs(score - guesses[index]));\n  const guesseDifferences = guesses.map((score, index) => Math.abs(score - scores[index]));\n  const misseDifferences = misses.map((score, index) => Math.abs(score - scores[index]));\n  return scoreDifferences.reduce((acc, difference) => acc + difference, 0);\n};\n\n/*\n  Given an array of scores, an array of guesses, and an array of misses, return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compareMissesAndMissesAndScoreAndMisses = (game, guesses, misses) => {\n  const scores = [...game];\n  const guesses = [...guesses];\n  const misses = [...misses];\n  const scoreDifferences = scores.map((score, index) => Math.abs(score - guesses[index]));\n  const guesseDifferences = guesses.map((score, index) => Math.abs(score - scores[index]));\n  const misseDifferences = misses.map((score, index) => Math.abs(score - scores[index]));\n  return scoreDifferences.reduce((", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  const extension_strengths = extensions.map(extension => {\n    const extension_strength = extension.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b);\n    return extension_strength;\n  });\n  const max_extension_strength = Math.max(...extension_strengths);\n  const strongest_extension = class_name.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b);\n  return strongest_extension === max_extension_strength? class_name : strongest_extension;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the highest extension's strength.\n  Example:\n  highest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst highest_extension = (class_name, extensions) => {\n  const extension_strengths = extensions.map(extension => {\n    const extension_strength = extension.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b);\n    return extension_strength;\n  });\n  const max_extension_strength = Math.max(...extension_strengths);\n  return class_name.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b) === max_extension_strength? class_name : \"\";\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the lowest extension's strength.\n  Example:\n  lowest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst lowest_extension = (class_name, extensions) => {\n  const extension_strengths = extensions.map(extension => {\n    const extension_strength = extension.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b);\n    return extension_strength;\n  });\n  const min_extension_strength = Math.min(...extension_strengths);\n  return class_name.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b) === min_extension_strength? class_name : \"\";\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the highest extension's strength and lowest extension's strength.\n  Example:\n  highest_lowest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst highest_lowest_extension = (class_name, extensions) => {\n  const extension_strengths = extensions.map(extension => {\n    const extension_strength = extension.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b);\n    return extension_strength;\n  });\n  const max_extension_strength = Math.max(...extension_strengths);\n  const min_extension_strength = Math.min(...extension_strengths);\n  return class_name.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b) === max_extension_strength && class_name.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b) === min_extension_strength? class_name : \"\";\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength.\n  Example:\n  highest_lowest_highest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst highest_lowest_highest_extension = (class_name, extensions) => {\n  const extension_strengths = extensions.map(extension => {\n    const extension_strength = extension.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b);\n    return extension_strength;\n  });\n  const max_extension_strength = Math.max(...extension_strengths);\n  const min_extension_strength = Math.min(...extension_strengths);\n  const max_extension_strength_1 = Math.max(...extension_strengths);\n  const min_extension_strength_1 = Math.min(...extension_strengths);\n  return class_name.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b) === max_extension_strength && class_name.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b) === min_extension_strength && class_name.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b) === max_extension_strength_1 && class_name.split(\"\").map(c => c.charCodeAt(0) - 97).reduce((a, b) => a + b) === min_extension_strength_1? class_name : \"\";\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n  the class name with the highest extension's strength and lowest extension's strength and\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  let a1 = a.split('')\n  let b1 = b.split('')\n  let a2 = a1.map((v, i) => v + i)\n  let b2 = b1.map((v, i) => v + i)\n  let a3 = a2.filter((v, i) => v + i === a1)\n  let b3 = b2.filter((v, i) => v + i === b1)\n  let a4 = a3.filter((v, i) => v + i === a2)\n  let b4 = b3.filter((v, i) => v + i === b2)\n  let a5 = a4.filter((v, i) => v + i === a3)\n  let b5 = b4.filter((v, i) => v + i === b3)\n  let a6 = a5.filter((v, i) => v + i === a4)\n  let b6 = b5.filter((v, i) => v + i === b4)\n  let a7 = a6.filter((v, i) => v + i === a5)\n  let b7 = b6.filter((v, i) => v + i === b5)\n  let a8 = a7.filter((v, i) => v + i === a6)\n  let b8 = b7.filter((v, i) => v + i === b6)\n  let a9 = a8.filter((v, i) => v + i === a7)\n  let b9 = b8.filter((v, i) => v + i === b7)\n  let a10 = a9.filter((v, i) => v + i === a8)\n  let b10 = b9.filter((v, i) => v + i === b8)\n  let a11 = a10.filter((v, i) => v + i === a9)\n  let b11 = b10.filter((v, i) => v + i === b9)\n  let a12 = a11.filter((v, i) => v + i === a10)\n  let b12 = b11.filter((v, i) => v + i === b10)\n  let a13 = a12.filter((v, i) => v + i === a11)\n  let b13 = b12.filter((v, i) => v + i === b11)\n  let a14 = a13.filter((v, i) => v + i === a12)\n  let b14 = b13.filter((v, i) => v + i === b12)\n  let a15 = a14.filter((v, i) => v + i === a13)\n  let b15 = b14.filter((v, i) => v + i === b13)\n  let a16 = a15.filter((v, i) => v + i === a14)\n  let b16 = b15.filter((v, i) => v + i === b14)\n  let a17 = a16.filter((v, i) => v + i === a15)\n  let b17 = b16.filter((v, i) => v + i === b15)\n  let a18 = a17.filter((v, i) => v + i === a16)\n  let b18 = b17.filter((v, i) => v + i === b16)\n  let a19 = a18.filter((v, i) => v + i === a17)\n  let b19 = b18.filter((v, i) => v + i === b17)\n  let a20 = a19.filter((v, i) => v + i === a18)\n  let b20 = b19.filter((v, i) => v + i === b18)\n  let a21 = a20.filter((v, i) => v + i === a19)\n  let b22 = b20.filter((v, i) => v + i === b19)\n  let a22 = a21.filter((v, i) => v + i === a20)\n  let b23 = b22.filter((v, i) => v + i === b20)\n  let a23 = a23.filter((v, i) => v + i === a21)\n  let b24 = b23.filter((v, i) => v + i === b22)\n  let a24 = a24.filter((v, i) => v + i === b23)\n  let b25 = b24.filter((v, i) => v + i === b24)\n  let a25 = a25.filter((v, i) => v + i === a26)\n  let b26 = b25.filter((v, i) => v + i === b25)\n  let a26 = a26.filter((v, i) => v + i === a27)\n  let b27 = b26.filter((v, i) => v + i === b26)\n  let a27 = a27.filter((v, i) => v + i === a28)\n  let b28 = b27.filter((v, i) => v + i === b27)\n  let a28 = a28.filter((v, i) => v + i === a29)\n  let b29 = b28.filter((v, i) => v + i === b28)\n  let a29 = a29.filter((v, i) => v + i === a30)\n  let b30 = b29.filter((v, i) => v + i === b29)\n  let a31 = a30.filter((v, i) => v + i === a31)\n  let b32 = b30.filter((v, i) => v + i === b30)\n  let a32 = a32.filter((v, i) => v + i === a33)\n  let b33 = b32.filter((v, i) => v + i === b32)\n  let a33 = a33.filter((v, i) => v + i === a34)\n  let b34 = b33.filter((v, i) => v + i === b33)\n  let a34 = a34.filter((v, i) => v + i === a35)\n  let b35 = b34.filter((v, i) => v + i === b34)\n  let a35 = a35.filter((v, i) => v + i === a36)\n  let b36 = b35.filter((v, i) => v + i === b35)\n  let a36 = a36.filter((v, i) => v + i === a37)\n  let b37 = b36.filter((v, i) => v + i === b36)\n  let a37 = a37.filter((v, i) => v + i === a38)\n  let b38 = b37.filter((v, i) => v + i === b37)\n  let a38 = a38.filter((v, i) => v + i === a39)\n  let b39 = b38.filter((v, i) => v + i === b38)\n  let a39 = a39.filter((v, i) => v + i === a40)\n  let b40 = b39.filter((v, i) => v + i === b39)\n  let a41 = a40.filter((v, i) => v + i === a41)\n  let b42 = b41.filter((v, i) => v + i === b40)\n  let a42 = a42.filter((v, i) => v + i === a43)\n  let b43 = b42.filter((v, i) => v + i === b41)\n  let a44 = a43.filter((v, i) => v + i === a44)\n  let b44 = b44.filter((v, i) => v + i === b42)\n  let a45 = a44.filter((v, i) => v + i === a45", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let even = 0, odd = 0, digit;\n  do {\n    digit = num % 10;\n    num = Math.floor(num / 10);\n    even = even + digit % 2;\n    odd = odd + digit / 2;\n  } while (num > 0);\n  return [even, odd];\n};\n\n/*Given a string, return a list of all possible permutations of the string.\n\n   Example:\n      permutations([\"a\", \"b\", \"c\"]) ==> [[\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"]]\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    roman += num.charAt(i).toLowerCase();\n  }\n\n  return roman;\n};\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> roman_to_int(19) == 'XIX'\n  >>> roman_to_int(152) == 'CLI'\n  >>> roman_to_int(426) == 'CDXVI'\n  */\nconst roman_to_int = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    roman += num.charAt(i).toUpperCase();\n  }\n\n  return roman;\n};\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> roman_to_int(19) == 'XIX'\n  >>> roman_to_int(152) == 'CLI'\n  >>> roman_to_int(426) == 'CDXVI'\n  */\nconst roman_to_mini_int = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    roman += num.charAt(i).toLowerCase();\n  }\n\n  return roman;\n};\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> roman_to_mini_int(19) == 'XIX'\n  >>> roman_to_mini_int(152) == 'CLI'\n  >>> roman_to_mini_int(426) == 'CDXVI'\n  */\nconst roman_to_mini_roman = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    roman += num.charAt(i).toUpperCase();\n  }\n\n  return roman;\n};\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> roman_to_mini_int(19) == 'XIX'\n  >>> roman_to_mini_int(152) == 'CLI'\n  >>> roman_to_mini_int(426) == 'CDXVI'\n  */\nconst roman_to_mini_roman2 = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    roman += num.charAt(i).toLowerCase();\n  }\n\n  return roman;\n};\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> roman_to_mini_int(19) == 'XIX'\n  >>> roman_to_mini_int(152) == 'CLI'\n  >>> roman_to_mini_int(426) == 'CDXVI'\n  */\nconst roman_to_mini_roman3 = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    roman += num.charAt(i).toLowerCase();\n  }\n\n  return roman;\n};\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> roman_to_mini_int(19) == 'XIX'\n  >>> roman_to_mini_int(152) == 'CLI'\n  >>> roman_to_mini_int(426) == 'CDXVI'\n  */\nconst roman_to_mini_roman4 = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    roman += num.charAt(i).toLowerCase();\n  }\n\n  return roman;\n};\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> roman_to_mini_int(19) == 'XIX'\n  >>> roman_to_mini_int(152) == 'CLI'\n  >>> roman_to_mini_int(426) == 'CDXVI'\n  */\nconst roman_to_mini_roman5 = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    roman += num.charAt(i).toLowerCase();\n  }\n\n  return roman;\n};\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> roman_to_mini_int(19) == 'XIX'\n  >>> roman_to_mini_int(152) == 'CLI'\n  >>> roman_to_mini_int(426) == 'CDXVI'\n  */\nconst roman_to_mini_roman6 = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    roman += num.charAt(i).toLowerCase();\n  }\n\n  return roman;\n};\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> roman_to_mini_int(19) == 'XIX'\n  >>> roman_to_mini_int(152) == 'CLI'\n  >>> roman_to_mini_int(426) == 'CDXVI'\n  */\nconst roman_to_mini_roman7 = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    roman += num.charAt(i).toLowerCase();\n  }\n\n  return roman;\n};\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> roman_to_mini_int(19) == 'XIX'\n  >>> roman_to_mini_int(152) == 'CLI'\n  >>> roman_to_mini_int(426) == 'CDXVI'\n  */\nconst roman_to_mini_roman8 = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    roman += num.charAt(i).toLowerCase();\n  }\n\n  return roman;\n};\n\n/*\n  Given a positive integer, convert it to a roman numeral equivalent in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> roman_to_mini_int(19) == 'XIX'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const a2 = Math.sqrt(a * a + c * c);\n  const a3 = Math.sqrt(a * a + b * c);\n  const b1 = Math.sqrt(b * b + c * c);\n  const b2 = Math.sqrt(b * b + a * a);\n  const b3 = Math.sqrt(b * b + a * a);\n  const c1 = Math.sqrt(c * c + a * a);\n  const c2 = Math.sqrt(c * c + b * b);\n  const c3 = Math.sqrt(c * c + b * b);\n  return a1 * b2 * c3 - a2 * b3 * c1 === 0 && a1 * b2 * c3 === 0 && a2 * b3 * c1 === 0 && a1 * b2 * c3 === 0;\n};\n\n/*\n Given the lengths of the three sides of a rectangle. Return true if the three\n  sides form a right-angled rectangle, false otherwise.\n  A right-angled rectangle is a rectangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_rectangle = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const a2 = Math.sqrt(a * a + c * c);\n  const a3 = Math.sqrt(a * a + b * c);\n  const b1 = Math.sqrt(b * b + c * c);\n  const b2 = Math.sqrt(b * b + a * a);\n  const b3 = Math.sqrt(b * b + a * a);\n  const c1 = Math.sqrt(c * c + a * a);\n  const c2 = Math.sqrt(c * c + b * b);\n  const c3 = Math.sqrt(c * c + b * b);\n  return a1 * b2 * c3 - a2 * b3 * c1 === 0 && a1 * b2 * c3 === 0 && a2 * b3 * c1 === 0 && a1 * b2 * c3 === 0;\n};\n\n/*\n Given the lengths of the three sides of a circle. Return true if the three\n  sides form a right-angled circle, false otherwise.\n  A right-angled circle is a circle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_circle = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const a2 = Math.sqrt(a * a + c * c);\n  const a3 = Math.sqrt(a * a + b * c);\n  const b1 = Math.sqrt(b * b + c * c);\n  const b2 = Math.sqrt(b * b + a * a);\n  const b3 = Math.sqrt(b * b + a * a);\n  const c1 = Math.sqrt(c * c + a * a);\n  const c2 = Math.sqrt(c * c + b * b);\n  const c3 = Math.sqrt(c * c + b * b);\n  return a1 * b2 * c3 - a2 * b3 * c1 === 0 && a1 * b2 * c3 === 0 && a2 * b3 * c1 === 0 && a1 * b2 * c3 === 0;\n};\n\n/*\n Given the lengths of the three sides of a square. Return true if the three\n  sides form a right-angled square, false otherwise.\n  A right-angled square is a square in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_square = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const a2 = Math.sqrt(a * a + c * c);\n  const a3 = Math.sqrt(a * a + b * c);\n  const b1 = Math.sqrt(b * b + c * c);\n  const b2 = Math.sqrt(b * b + a * a);\n  const b3 = Math.sqrt(b * b + a * a);\n  const c1 = Math.sqrt(c * c + a * a);\n  const c2 = Math.sqrt(c * c + b * b);\n  const c3 = Math.sqrt(c * c + b * b);\n  return a1 * b2 * c3 - a2 * b3 * c1 === 0 && a1 * b2 * c3 === 0 && a2 * b3 * c1 === 0 && a1 * b2 * c3 === 0;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Return true if the three\n  sides form a right-angled pentagon, false otherwise.\n  A right-angled pentagon is a pentagon in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_pentagon = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const a2 = Math.sqrt(a * a + c * c);\n  const a3 = Math.sqrt(a * a + b * c);\n  const b1 = Math.sqrt(b * b + c * c);\n  const b2 = Math.sqrt(b * b + a * a);\n  const b3 = Math.sqrt(b * b + a * a);\n  const c1 = Math.sqrt(c * c + a * a);\n  const c2 = Math.sqrt(c * c + b * b);\n  const c3 = Math.sqrt(c * c + b * b);\n  return a1 * b2 * c3 - a2 * b3 * c1 === 0 && a1 * b2 * c3 === 0 && a2 * b3 * c1 === 0 && a1 * b2 * c3 === 0;\n};\n\n/*\n Given the lengths of the three sides of a hexagon. Return true if the three\n  sides form a right-angled hexagon, false otherwise.\n  A right-angled hexagon is a hexagon in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_hexagon = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const a2 = Math.sqrt(a * a + c * c);\n  const a3 = Math.sqrt(a * a + b * c);\n  const b1 = Math.sqrt(b * b + c * c);\n  const b2 = Math.sqrt(b * b + a * a);\n  const b3 = Math.sqrt(b * b + a * a);\n  const c1 = Math.sqrt(c * c + a * a);\n  const c2 = Math.sqrt(c * c + b * b);\n  const c3 = Math.sqrt(c * c + b * b);\n  return a1 * b2 * c3 - a2 * b3 * c1 === 0 && a1 * b2 * c3 === 0 && a2 * b3 * c1 === 0 && a1 * b2 * c3 === 0;\n};\n\n/*\n Given the lengths of the three sides of a heptagon. Return true if the three\n  sides form a right-angled heptagon, false otherwise.\n  A right-angled heptagon is a heptagon in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_heptagon = (a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxWordLength = 0;\n  let maxWordCount = 0;\n  let maxWordUniqueChars = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let wordLength = word.length;\n    if (wordLength > maxWordLength) {\n      maxWordLength = wordLength;\n      maxWord = word;\n      maxWordCount = words.length;\n      maxWordUniqueChars = word.length;\n    }\n  }\n\n  if (maxWordLength > maxWordCount) {\n    return maxWord;\n  }\n\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"string\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_min = (words) => {\n  let min = 0;\n  let minWord = \"\";\n  let minWordLength = 0;\n  let minWordCount = 0;\n  let minWordUniqueChars = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let wordLength = word.length;\n    if (wordLength < minWordLength) {\n      minWordLength = wordLength;\n      minWord = word;\n      minWordCount = words.length;\n      minWordUniqueChars = word.length;\n    }\n  }\n\n  if (minWordLength < minWordCount) {\n    return minWord;\n  }\n\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxWordLength = 0;\n  let maxWordCount = 0;\n  let maxWordUniqueChars = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let wordLength = word.length;\n    if (wordLength > maxWordLength) {\n      maxWordLength = wordLength;\n      maxWord = word;\n      maxWordCount = words.length;\n      maxWordUniqueChars = word.length;\n    }\n  }\n\n  if (maxWordLength > maxWordCount) {\n    return maxWord;\n  }\n\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"string\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_min = (words) => {\n  let min = 0;\n  let minWord = \"\";\n  let minWordLength = 0;\n  let minWordCount = 0;\n  let minWordUniqueChars = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let wordLength = word.length;\n    if (wordLength < minWordLength) {\n      minWordLength = wordLength;\n      minWord = word;\n      minWordCount = words.length;\n      minWordUniqueChars = word.length;\n    }\n  }\n\n  if (minWordLength < minWordCount) {\n    return minWord;\n  }\n\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxWordLength = 0;\n  let maxWordCount = 0;\n  let maxWordUniqueChars = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let wordLength = word.length;\n    if (wordLength > maxWordLength) {\n      maxWordLength = wordLength;\n      maxWord = word;\n      maxWordCount = words.length;\n      maxWordUniqueChars = word.length;\n    }\n  }\n\n  if (maxWordLength > maxWordCount) {\n    return maxWord;\n  }\n\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"string\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_min = (words) => {\n  let min = 0;\n  let minWord = \"\";\n  let minWordLength = 0;\n  let minWordCount = 0;\n  let minWordUniqueChars = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let wordLength = word.length;\n    if (wordLength < minWordLength) {\n      minWordLength = wordLength;\n      minWord = word;\n      minWordCount = words.length;\n      minWordUniqueChars = word.length;\n    }\n  }\n\n  if (minWordLength < minWordCount) {\n    return minWord;\n  }\n\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxWordLength = 0;\n  let maxWordCount = 0;\n  let maxWordUniqueChars = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let wordLength = word.length;\n    if (wordLength > maxWordLength) {\n      maxWordLength = wordLength;\n      maxWord = word;\n      maxWordCount = words.length;\n      maxWordUniqueChars = word.length;\n    }\n  }\n\n  if (maxWordLength > maxWordCount) {\n    return maxWord;\n  }\n\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need / 100));\n  const remainingCarrots = Math.ceil(remaining / 100);\n  const remainingEaten = remaining % 100;\n  const remainingEatenCarrots = remainingEaten % 100;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;\n  const remainingEatenCarrots = remainingEatenCarrots? remainingEatenCarrots : 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters it contains.\n * If no characters are found, return 0.\n * If a string contains only lowercase letters, return 1.\n * If a string contains only uppercase letters, return 2.\n * If a string contains only numbers, return 3.\n * If a string contains only special characters, return 4.\n * If a string contains any non-alphabetic character, return 5.\n * If a string contains any non-numeric character, return 6.\n * If a string contains any non-alphabetic or non-numeric character, return 7.\n * If a string contains any non-alphabetic or non-numeric character and any of its characters are digits, return 8.\n * If a string contains any non-alphabetic or non-numeric character and any of its characters are letters, return 9.\n * If a string contains any non-alphabetic or non-numeric character and any of its characters are special characters, return 10.\n * If a string contains any non-alphabetic or non-numeric character and any of its characters are non-alphabetic or non-numeric characters, return 11.\n * If a string contains any non-alphabetic or non-numeric character and any of its characters are non-alphabetic or non-numeric characters and any of its characters are digits, return 12.\n * If a string contains any non-alphabetic or non-numeric character and any of its characters are non-alphabetic or non-numeric characters and any of its characters are letters, return 13.\n * If a string contains any non-alphabetic or non-numeric character and any of its characters are non-alphabetic or non-numeric characters and any of its characters are special characters, return 14.\n * If a string contains any non-alphabetic or non-numeric character and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-alphabetic or non-numeric characters and any of its characters are non-", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  let result = 0;\n  let operator_len = 0;\n  let operand_len = 0;\n  let operator_list = [];\n  let operand_list = [];\n\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      operator_len = operator_len + 1;\n    } else if (operator[i] === '-') {\n      operator_len = operator_len - 1;\n    } else if (operator[i] === '*') {\n      operator_len = operator_len * 2;\n    } else if (operator[i] === '/') {\n      operator_len = operator_len // 2;\n    } else if (operator[i] === '^') {\n      operator_len = operator_len ** 2;\n    } else {\n      throw 'Invalid operator';\n    }\n  }\n\n  for (let i = 0; i < operand.length; i++) {\n    if (operand[i] >= 0) {\n      operand_len += 1;\n    } else {\n      throw 'Invalid operand';\n    }\n  }\n\n  for (let i = 0; i < operand_len; i++) {\n    operand_list.push(operand[i]);\n  }\n\n  for (let i = 0; i < operator_len; i++) {\n    operator_list.push(operator[i]);\n  }\n\n  for (let i = 0; i < operand_len; i++) {\n    result += operand_list[i] * operator_list[i];\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_operation = (operator, operand) => {\n  let result = 0;\n  let operator_len = 0;\n  let operand_len = 0;\n  let operator_list = [];\n  let operand_list = [];\n\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      operator_len = operator_len + 1;\n    } else if (operator[i] === '-') {\n      operator_len = operator_len - 1;\n    } else if (operator[i] === '*') {\n      operator_len = operator_len * 2;\n    } else if (operator[i] === '/') {\n      operator_len = operator_len // 2;\n    } else if (operator[i] === '^') {\n      operator_len = operator_len ** 2;\n    } else {\n      throw 'Invalid operator';\n    }\n  }\n\n  for (let i = 0; i < operand.length; i++) {\n    if (operand[i] >= 0) {\n      operand_len += 1;\n    } else {\n      throw 'Invalid operand';\n    }\n  }\n\n  for (let i = 0; i < operand_len; i++) {\n    operand_list.push(operand[i]);\n  }\n\n  for (let i = 0; i < operator_len; i++) {\n    operator_list.push(operator[i]);\n  }\n\n  for (let i = 0; i < operand_len; i++) {\n    result += operand_list[i] * operator_list[i];\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_operation_with_operand = (operator, operand) => {\n  let result = 0;\n  let operator_len = 0;\n  let operand_len = 0;\n  let operator_list = [];\n  let operand_list = [];\n\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      operator_len = operator_len + 1;\n    } else if (operator[i] === '-') {\n      operator_len = operator_len - 1;\n    } else if (operator[i] === '*') {\n      operator_len = operator_len * 2;\n    } else if (operator[i] === '/') {\n      operator_len = operator_len // 2;\n    } else if (operator[i] === '^') {\n      operator_len = operator_len ** 2;\n    } else {\n      throw 'Invalid operator';\n    }\n  }\n\n  for (let i = 0; i < operand.length; i++) {\n    if (operand[i] >= 0) {\n      operand_len += 1;\n    } else {\n      throw 'Invalid operand';\n    }\n  }\n\n  for (let i = 0; i < operand_len; i++) {\n    operand_list.push(operand[i]);\n  }\n\n  for (let i = 0; i < operator_len; i++) {\n    operator_list.push(operator[i]);\n  }\n\n  for (let i = 0; i < operand_len; i++) {\n    result += operand_list[i] * operator_list[i];\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_operation_with_operand_and_operand = (operator, operand) => {\n  let result = 0;\n  let operator_len = 0;\n  let operand_len = 0;\n  let operator_list = [];\n  let operand_list = [];\n\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      operator_len = operator_len + 1;\n    } else if (operator[i] === '-') {\n      operator_len = operator_len - 1;\n    } else if (operator[i] === '*') {\n      operator_len = operator_len * 2;\n    } else if (operator[i] === '/') {\n      operator_len = operator_len // 2;\n    } else if (operator[i] === '^') {\n      operator_len = operator_len ** 2;\n    } else {\n      throw 'Invalid operator';\n    }\n  }\n\n  for (let i = 0; i < operand.length; i++) {\n    if (operand[i] >= 0) {\n      operand_len += 1;\n    } else {\n      throw 'Invalid operand';\n    }\n  }\n\n  for (let i = 0; i < operand_len; i++) {\n    operand_list.push(operand[i]);\n  }\n\n  for (let i = 0; i < operator_len; i++) {\n    operator_list.push(operator[i]);\n  }\n\n  for (let i = 0; i < operand_len; i++) {\n    result += operand_list[i] * operator_list[i];\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operation", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      reversed = reversed.toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      reversed = reversed.toLowerCase();\n    } else {\n      reversed = reversed.toUpperCase();\n    }\n  }\n  return reversed;\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  If the string contains no letters, return false.\n  Examples\n  isPalindrome(\"1234\") = true\n  isPalindrome(\"ab\") = false\n  isPalindrome(\"#a@C\") = false\n  */\nconst isPalindrome = (s) => {\n  let reversed = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      reversed = reversed.toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      reversed = reversed.toLowerCase();\n    } else {\n      reversed = reversed.toUpperCase();\n    }\n  }\n  return reversed === s;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  isPalindromeOfLength(\"1234\", 2) = true\n  isPalindromeOfLength(\"ab\", 2) = false\n  isPalindromeOfLength(\"#a@C\", 2) = false\n  */\nconst isPalindromeOfLength = (s, n) => {\n  let reversed = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      reversed = reversed.toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      reversed = reversed.toLowerCase();\n    } else {\n      reversed = reversed.toUpperCase();\n    }\n  }\n  return reversed === s.slice(0, n).reverse().join(\"\");\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  isPalindromeOfLength(\"1234\", 3) = true\n  isPalindromeOfLength(\"ab\", 3) = false\n  isPalindromeOfLength(\"#a@C\", 3) = false\n  */\nconst isPalindromeOfLength2 = (s, n) => {\n  let reversed = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      reversed = reversed.toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      reversed = reversed.toLowerCase();\n    } else {\n      reversed = reversed.toUpperCase();\n    }\n  }\n  return reversed === s.slice(0, n).reverse().join(\"\");\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  isPalindromeOfLength2(\"1234\", 3) = true\n  isPalindromeOfLength2(\"ab\", 3) = false\n  isPalindromeOfLength2(\"#a@C\", 3) = false\n  */\nconst isPalindromeOfLength3 = (s, n) => {\n  let reversed = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      reversed = reversed.toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      reversed = reversed.toLowerCase();\n    } else {\n      reversed = reversed.toUpperCase();\n    }\n  }\n  return reversed === s.slice(0, n).reverse().join(\"\");\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  isPalindromeOfLength3(\"1234\", 3) = true\n  isPalindromeOfLength3(\"ab\", 3) = false\n  isPalindromeOfLength3(\"#a@C\", 3) = false\n  */\nconst isPalindromeOfLength4 = (s, n) => {\n  let reversed = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      reversed = reversed.toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      reversed = reversed.toLowerCase();\n    } else {\n      reversed = reversed.toUpperCase();\n    }\n  }\n  return reversed === s.slice(0, n).reverse().join(\"\");\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  isPalindromeOfLength4(\"1234\", 3) = true\n  isPalindromeOfLength4(\"ab\", 3) = false\n  isPalindromeOfLength4(\"#a@C\", 3) = false\n  */\nconst isPalindromeOfLength5 = (s, n) => {\n  let reversed = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      reversed = reversed.toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      reversed = reversed.toLowerCase();\n    } else {\n      reversed = reversed.toUpperCase();\n    }\n  }\n  return reversed === s.slice(0, n).reverse().join(\"\");\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  isPalindromeOfLength5(\"1234\", 3) = true\n  isPalindromeOfLength5(\"ab\", 3) = false\n  isPalindromeOfLength5(\"#a@C\", 3) = false\n  */\nconst isPalindromeOfLength6 = (s, n) => {\n  let reversed = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      reversed = reversed.toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      reversed = reversed.toLowerCase();\n    } else {\n      reversed = reversed.toUpperCase();\n    }\n  }\n  return reversed === s.slice(0, n).reverse().join(\"\");\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  isPalindromeOfLength6(\"1234\", 3) = true\n  isPalindromeOfLength6(\"ab\", 3) = false\n  isPalindromeOfLength6(\"#a@C\", 3) = false\n  */\nconst isPalindromeOfLength7 = (s, n) => {\n  let reversed = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      reversed = reversed.toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      reversed = reversed.toLowerCase();\n    } else {\n      reversed = reversed.toUpperCase();\n    }\n  }\n  return reversed === s.slice(0, n).reverse().join(\"\");\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  isPalindromeOfLength7(\"1234\", ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'ddaf35a193617abacc417349ae20413112e6'\n  */\nconst string_to_sha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha224 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha224('Hello world') == '4f0eaa3ebb4bc606ce411e5fbc1191a0a52'\n  */\nconst string_to_sha224 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha224').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'f86e7e30857c0638cbf3528bce6ea3d9d13cbb9'\n  */\nconst string_to_sha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha384('Hello world') == '4f0eaa3ebb4bc606ce411e5fbc1191a0a52'\n  */\nconst string_to_sha384 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == '4f0eaa3ebb4bc606ce411e5fbc1191a0a52'\n  */\nconst string_to_sha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'ddaf35a193617abacc417349ae20413112e6'\n  */\nconst string_to_md5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha224 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha224('Hello world') == '4f0eaa3ebb4bc606ce411e5fbc1191a0a52'\n  */\nconst string_to_sha224 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha224').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'f86e7e30857c0638cbf3528bce6ea3d9d13cbb9'\n  */\nconst string_to_sha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha384('Hello world') == '4f0eaa3ebb4bc606ce411e5fbc1191a0a52'\n  */\nconst string_to_sha384 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == '4f0eaa3ebb4bc606ce411e5fbc1191a0a52'\n  */\nconst string_to_sha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'ddaf35a193617abacc417349ae20413112e6'\n  */\nconst string_to_md5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha224 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha224('Hello world') == '4f0eaa3ebb4bc606ce411e5fbc1191a0a52'\n  */\nconst string_to_sha224 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha224').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'f86e7e30857c0638cbf3528", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  let result = [];\n  let i = a;\n  let j = b;\n  let digit;\n  while (i!== j) {\n    digit = i % 10;\n    result.push(digit);\n    i = Math.floor(i / 10);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string in reverse (from right to left).\n */\nconst reverse = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string in lowercase.\n */\nconst lowercase = str => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return the string in uppercase.\n */\nconst uppercase = str => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return the string in titlecase.\n */\nconst titlecase = str => {\n  return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n};\n\n/**\n * Given a string, return the string in camelcase.\n */\nconst camelcase = str => {\n  return str.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n};\n\n/**\n * Given a string, return the string in snakecase.\n */\nconst snakecase = str => {\n  return str.replace(/([A-Z])/g, '$1_').toLowerCase();\n};\n\n/**\n * Given a string, return the string in pascalcase.\n */\nconst pascalcase = str => {\n  return str.replace(/([a-z])([A-Z])/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n};\n\n/**\n * Given a string, return the string in titlecase, replacing all spaces with underscores.\n */\nconst titlecase_replacer = str => {\n  return str.replace(/\\s+/g, '_');\n};\n\n/**\n * Given a string, return the string in camelcase, replacing all spaces with underscores.\n */\nconst camelcase_replacer = str => {\n  return str.replace(/\\s+/g, '_');\n};\n\n/**\n * Given a string, return the string in snakecase, replacing all spaces with underscores.\n */\nconst snakecase_replacer = str => {\n  return str.replace(/\\s+/g, '_');\n};\n\n/**\n * Given a string, return the string in pascalcase, replacing all spaces with underscores.\n */\nconst pascalcase_replacer = str => {\n  return str.replace(/\\s+/g, '_');\n};\n\n/**\n * Given a string, return the string in titlecase, replacing all spaces with underscores.\n */\nconst titlecase_replacer_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse();\n};\n\n/**\n * Given a string, return the string in camelcase, replacing all spaces with underscores.\n */\nconst camelcase_replacer_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse();\n};\n\n/**\n * Given a string, return the string in snakecase, replacing all spaces with underscores.\n */\nconst snakecase_replacer_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse();\n};\n\n/**\n * Given a string, return the string in pascalcase, replacing all spaces with underscores.\n */\nconst pascalcase_replacer_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse();\n};\n\n/**\n * Given a string, return the string in titlecase, replacing all spaces with underscores.\n */\nconst titlecase_replacer_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse();\n};\n\n/**\n * Given a string, return the string in camelcase, replacing all spaces with underscores.\n */\nconst camelcase_replacer_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse();\n};\n\n/**\n * Given a string, return the string in snakecase, replacing all spaces with underscores.\n */\nconst snakecase_replacer_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse();\n};\n\n/**\n * Given a string, return the string in pascalcase, replacing all spaces with underscores.\n */\nconst pascalcase_replacer_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse();\n};\n\n/**\n * Given a string, return the string in titlecase, replacing all spaces with underscores.\n */\nconst titlecase_replacer_reverse_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse().reverse();\n};\n\n/**\n * Given a string, return the string in camelcase, replacing all spaces with underscores.\n */\nconst camelcase_replacer_reverse_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse().reverse();\n};\n\n/**\n * Given a string, return the string in snakecase, replacing all spaces with underscores.\n */\nconst snakecase_replacer_reverse_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse().reverse();\n};\n\n/**\n * Given a string, return the string in pascalcase, replacing all spaces with underscores.\n */\nconst pascalcase_replacer_reverse_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse().reverse();\n};\n\n/**\n * Given a string, return the string in titlecase, replacing all spaces with underscores.\n */\nconst titlecase_replacer_reverse_reverse_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse().reverse().reverse();\n};\n\n/**\n * Given a string, return the string in camelcase, replacing all spaces with underscores.\n */\nconst camelcase_replacer_reverse_reverse_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse().reverse().reverse();\n};\n\n/**\n * Given a string, return the string in snakecase, replacing all spaces with underscores.\n */\nconst snakecase_replacer_reverse_reverse_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse().reverse().reverse();\n};\n\n/**\n * Given a string, return the string in pascalcase, replacing all spaces with underscores.\n */\nconst pascalcase_replacer_reverse_reverse_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse().reverse().reverse();\n};\n\n/**\n * Given a string, return the string in titlecase, replacing all spaces with underscores.\n */\nconst titlecase_replacer_reverse_reverse_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse().reverse().reverse().reverse();\n};\n\n/**\n * Given a string, return the string in camelcase, replacing all spaces with underscores.\n */\nconst camelcase_replacer_reverse_reverse_reverse_reverse = str => {\n  return str.replace(/\\s+/g, '_').reverse().reverse().reverse().reverse().reverse();\n};\n\n/**\n * Given a string, return the string in snakecase, replacing all spaces with underscores.\n */\nconst snakecase_replacer_reverse_reverse_reverse_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  let notes = [];\n  let last_beat = 0;\n  let last_note = '';\n  let last_note_index = 0;\n  let last_note_index2 = 0;\n  let last_note_index3 = 0;\n  let last_note_index4 = 0;\n\n  let notes_index = 0;\n  let notes_index2 = 0;\n  let notes_index3 = 0;\n  let notes_index4 = 0;\n\n  let notes_index5 = 0;\n  let notes_index6 = 0;\n  let notes_index7 = 0;\n  let notes_index8 = 0;\n\n  let notes_index9 = 0;\n  let notes_index10 = 0;\n  let notes_index11 = 0;\n  let notes_index12 = 0;\n\n  let notes_index13 = 0;\n  let notes_index14 = 0;\n  let notes_index15 = 0;\n  let notes_index16 = 0;\n\n  let notes_index17 = 0;\n  let notes_index18 = 0;\n  let notes_index19 = 0;\n  let notes_index20 = 0;\n\n  let notes_index21 = 0;\n  let notes_index22 = 0;\n  let notes_index23 = 0;\n  let notes_index24 = 0;\n\n  let notes_index25 = 0;\n  let notes_index26 = 0;\n  let notes_index27 = 0;\n  let notes_index28 = 0;\n\n  let notes_index29 = 0;\n  let notes_index30 = 0;\n  let notes_index31 = 0;\n  let notes_index32 = 0;\n\n  let notes_index33 = 0;\n  let notes_index34 = 0;\n  let notes_index35 = 0;\n  let notes_index36 = 0;\n\n  let notes_index37 = 0;\n  let notes_index38 = 0;\n  let notes_index39 = 0;\n  let notes_index40 = 0;\n\n  let notes_index41 = 0;\n  let notes_index42 = 0;\n  let notes_index43 = 0;\n  let notes_index44 = 0;\n\n  let notes_index45 = 0;\n  let notes_index46 = 0;\n  let notes_index47 = 0;\n  let notes_index48 = 0;\n\n  let notes_index49 = 0;\n  let notes_index50 = 0;\n  let notes_index51 = 0;\n  let notes_index52 = 0;\n\n  let notes_index53 = 0;\n  let notes_index54 = 0;\n  let notes_index55 = 0;\n  let notes_index56 = 0;\n\n  let notes_index57 = 0;\n  let notes_index58 = 0;\n  let notes_index59 = 0;\n  let notes_index60 = 0;\n\n  let notes_index61 = 0;\n  let notes_index62 = 0;\n  let notes_index63 = 0;\n  let notes_index64 = 0;\n\n  let notes_index65 = 0;\n  let notes_index66 = 0;\n  let notes_index67 = 0;\n  let notes_index68 = 0;\n\n  let notes_index69 = 0;\n  let notes_index70 = 0;\n  let notes_index71 = 0;\n  let notes_index72 = 0;\n\n  let notes_index73 = 0;\n  let notes_index74 = 0;\n  let notes_index75 = 0;\n  let notes_index76 = 0;\n\n  let notes_index77 = 0;\n  let notes_index78 = 0;\n  let notes_index79 = 0;\n  let notes_index80 = 0;\n\n  let notes_index81 = 0;\n  let notes_index82 = 0;\n  let notes_index83 = 0;\n  let notes_index84 = 0;\n\n  let notes_index85 = 0;\n  let notes_index86 = 0;\n  let notes_index87 = 0;\n  let notes_index88 = 0;\n\n  let notes_index89 = 0;\n  let notes_index90 = 0;\n  let notes_index91 = 0;\n  let notes_index92 = 0;\n\n  let notes_index93 = 0;\n  let notes_index94 = 0;\n  let notes_index95 = 0;\n  let notes_index96 = 0;\n\n  let notes_index97 = 0;\n  let notes_index98 = 0;\n  let notes_index99 = 0;\n  let notes_index100 = 0;\n\n  let notes_index101 = 0;\n  let notes_index102 = 0;\n  let notes_index103 = 0;\n  let notes_index104 = 0;\n\n  let notes_index105 = 0;\n  let notes_index106 = 0;\n  let notes_index107 = 0;\n  let notes_index108 = 0;\n\n  let notes_index109 = 0;\n  let notes_index110 = 0;\n  let notes_index111 = 0;\n  let notes_index112 = 0;\n\n  let notes_index113 = 0;\n  let notes_index114 = 0;\n  let notes_index115 = 0;\n  let notes_index116 = 0;\n\n  let notes_index117 = 0;\n  let notes_index118 = 0;\n  let notes_index119 = 0;\n  let notes_index120 = 0;\n\n  let notes_index121 = 0;\n  let notes_index122 = 0;\n  let notes_index123 = 0;\n  let notes_index124 = 0;\n\n  let notes_index125 = 0;\n  let notes_index126 = 0;\n  let notes_index127 = 0;\n  let notes_index128 = 0;\n\n  let notes_index129 = 0;\n  let notes_index130 = 0;\n  let notes_index131 = 0;\n  let notes_index132 = 0;\n\n  let notes_index133 = 0;\n  let notes_index134 = 0;\n  let notes_index135 = 0;\n  let notes_index136 = 0;\n\n  let notes_index137 = 0;\n  let notes_index138 = 0;\n  let notes_index139 = 0;\n  let notes_index140 = 0;\n\n  let notes_index141 = 0;\n  let notes_index142 = 0;\n  let notes_index143 = 0;\n  let notes_index144 = 0;\n\n  let notes_index145 = 0;\n  let notes_index146 = 0;\n  let notes_index147 = 0;\n  let notes_index148 = 0;\n\n  let notes_index149 = 0;\n  let notes_index150 = 0;\n  let notes_index151 = 0;\n  let notes_index152 = 0;\n\n  let notes_index153 = 0;\n  let notes_index154 = 0;\n  let notes_index155 = 0;\n  let notes_index156 = 0;\n\n  let notes_index157 = 0;\n  let notes_index158 = 0;\n  let notes_index159 = 0;\n  let notes_index160 = 0;\n\n  let notes_index161 = 0;\n  let notes_index162 = 0;\n  let notes_index163 = 0;\n  let notes_index164 = 0;\n\n  let notes_index165 = 0;\n  let notes_index166 = 0;\n  let notes_index167 = 0;\n  let notes_index168 = 0;\n\n  let notes_index169 = 0;\n  let notes_index170 = 0;\n  let notes_index171 = 0;\n  let notes_index172 = 0;\n\n  let notes_index173 = 0;\n  let notes_index174 = 0;\n  let notes_index175 = 0;\n  let notes_index176 = 0;\n\n  let notes_index177 = 0;\n  let notes_index178 = 0;\n  let notes_index179 = 0;\n  let notes_index180 = 0;\n\n  let notes_index181 = 0;\n  let notes_index182 = 0;\n  let notes_index183 = 0;\n  let notes_index184 = 0;\n\n  let notes_index185 = 0;\n  let notes_index186 = 0;\n  let notes_index187 = 0;\n  let notes_index188 = 0;\n\n  let notes_index189 = 0;\n  let notes_index190 = 0;\n  let notes_index191 = 0;\n  let notes_index192 = 0;\n\n  let notes_index193 = 0;\n  let notes_index194 = 0;\n  let notes_index195 = 0;\n  let notes_index196 = 0;\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = substring? substring.split('') : [];\n  let n = m.length;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => a - b);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reversed = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reversed_reversed = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reversed_reversed_reversed = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reversed_reversed_reversed_reversed_reversed = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const digits = Math.floor(Math.log10(Math.abs(number))) + 1;\n  const decimals = Math.floor(Math.log10(Math.abs(number))) - digits;\n  return number / Math.pow(10, digits).toFixed(decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const digits = Math.floor(Math.log10(Math.abs(number))) + 1;\n  const decimals = Math.floor(Math.log10(Math.abs(number))) - digits;\n  return Math.floor(number / Math.pow(10, digits)).toFixed(decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and decimal part of the number.\n  >>> truncate_number_int(3.5)\n  (3, 5)\n  */\nconst truncate_number_int_decimal = (number) => {\n  const digits = Math.floor(Math.log10(Math.abs(number))) + 1;\n  const decimals = Math.floor(Math.log10(Math.abs(number))) - digits;\n  return Math.floor(number / Math.pow(10, digits)).toFixed(decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and decimal part of the number rounded to a whole number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_round_to_whole = (number) => {\n  const digits = Math.floor(Math.log10(Math.abs(number))) + 1;\n  const decimals = Math.floor(Math.log10(Math.abs(number))) - digits;\n  return Math.floor(number / Math.pow(10, digits)).toFixed(decimals) * Math.pow(10, digits);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and decimal part of the number rounded to a whole number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_round_to_whole_decimal = (number) => {\n  const digits = Math.floor(Math.log10(Math.abs(number))) + 1;\n  const decimals = Math.floor(Math.log10(Math.abs(number))) - digits;\n  return Math.floor(number / Math.pow(10, digits)).toFixed(decimals) * Math.pow(10, digits);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and decimal part of the number rounded to a whole number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_round_to_whole_round_to_whole = (number) => {\n  const digits = Math.floor(Math.log10(Math.abs(number))) + 1;\n  const decimals = Math.floor(Math.log10(Math.abs(number))) - digits;\n  return Math.floor(number / Math.pow(10, digits)).toFixed(decimals) * Math.pow(10, digits);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and decimal part of the number rounded to a whole number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_round_to_whole_round_to_whole_decimal = (number) => {\n  const digits = Math.floor(Math.log10(Math.abs(number))) + 1;\n  const decimals = Math.floor(Math.log10(Math.abs(number))) - digits;\n  return Math.floor(number / Math.pow(10, digits)).toFixed(decimals) * Math.pow(10, digits);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and decimal part of the number rounded to a whole number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_round_to_whole_round_to_whole_round_to_whole = (number) => {\n  const digits = Math.floor(Math.log10(Math.abs(number))) + 1;\n  const decimals = Math.floor(Math.log10(Math.abs(number))) - digits;\n  return Math.floor(number / Math.pow(10, digits)).toFixed(decimals) * Math.pow(10, digits);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and decimal part of the number rounded to a whole number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_round_to_whole_round_to_whole_round_to_whole_round_to_whole = (number) => {\n  const digits = Math.floor(Math.log10(Math.abs(number))) + 1;\n  const decimals = Math.floor(Math.log10(Math.abs(number))) - digits;\n  return Math.floor(number / Math.pow(10, digits)).toFixed(decimals) * Math.pow(10, digits);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and decimal part of the number rounded to a whole number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_round_to_whole_round_to_whole_round_to_whole_round_to_whole_round_to_whole = (number) => {\n  const digits = Math.floor(Math.log10(Math.abs(number))) + 1;\n  const decimals = Math.floor(Math.log10(Math.abs(number))) - digits;\n  return Math.floor(number / Math.pow(10, digits)).toFixed(decimals) * Math.pow(10, digits);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and decimal part of the number rounded to a whole number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_round_to_whole_round_to_whole_round_to_whole_round_to_whole_round_to_whole_round_to_whole = (number) => {\n  const digits = Math.floor(Math.log10(Math.abs(number))) + 1;\n  const decimals = Math.floor(Math.log10(Math.abs(number))) - digits;\n  return Math.floor(number / Math.pow(10, digits)).toFixed(decimals) * Math.pow(10, digits);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and decimal part of the number rounded to a whole number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_round_to_whole_round_to_whole_round_to_whole_round_to_whole_round_to_whole_round_to_whole_round_to_whole_round_to_whole = (number) => {\n  const digits = Math.floor(Math.log10(Math.abs(number))) + 1;\n  const decimals = Math.floor(Math.log10(Math.abs(number))) - digits;\n  return Math.floor(number / Math.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let minElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n      minElement = numbers[i];\n    }\n  }\n  return [minElement, minIndex];\n};\n\n/* Given a number x, return true if and only if x is divisible by 3.\n  >>> is_divisible_by(3, 2)\n  true\n  >>> is_divisible_by(3, 3)\n  false\n  */\nconst is_divisible_by = (x, divisor) => {\n  return x % divisor === 0;\n};\n\n/* Given a number x, return true if and only if x is divisible by 5.\n  >>> is_divisible_by(5, 2)\n  true\n  >>> is_divisible_by(5, 3)\n  false\n  */\nconst is_divisible_by_5 = (x, divisor) => {\n  return is_divisible_by(x, 5) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 7.\n  >>> is_divisible_by(7, 2)\n  true\n  >>> is_divisible_by(7, 3)\n  false\n  */\nconst is_divisible_by_7 = (x, divisor) => {\n  return is_divisible_by(x, 7) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 9.\n  >>> is_divisible_by(9, 2)\n  true\n  >>> is_divisible_by(9, 3)\n  false\n  */\nconst is_divisible_by_9 = (x, divisor) => {\n  return is_divisible_by(x, 9) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 11.\n  >>> is_divisible_by(11, 2)\n  true\n  >>> is_divisible_by(11, 3)\n  false\n  */\nconst is_divisible_by_11 = (x, divisor) => {\n  return is_divisible_by(x, 11) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 13.\n  >>> is_divisible_by(13, 2)\n  true\n  >>> is_divisible_by(13, 3)\n  false\n  */\nconst is_divisible_by_13 = (x, divisor) => {\n  return is_divisible_by(x, 13) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 15.\n  >>> is_divisible_by(15, 2)\n  true\n  >>> is_divisible_by(15, 3)\n  false\n  */\nconst is_divisible_by_15 = (x, divisor) => {\n  return is_divisible_by(x, 15) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 17.\n  >>> is_divisible_by(17, 2)\n  true\n  >>> is_divisible_by(17, 3)\n  false\n  */\nconst is_divisible_by_17 = (x, divisor) => {\n  return is_divisible_by(x, 17) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 19.\n  >>> is_divisible_by(19, 2)\n  true\n  >>> is_divisible_by(19, 3)\n  false\n  */\nconst is_divisible_by_19 = (x, divisor) => {\n  return is_divisible_by(x, 19) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 23.\n  >>> is_divisible_by(23, 2)\n  true\n  >>> is_divisible_by(23, 3)\n  false\n  */\nconst is_divisible_by_23 = (x, divisor) => {\n  return is_divisible_by(x, 23) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 29.\n  >>> is_divisible_by(29, 2)\n  true\n  >>> is_divisible_by(29, 3)\n  false\n  */\nconst is_divisible_by_29 = (x, divisor) => {\n  return is_divisible_by(x, 29) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 31.\n  >>> is_divisible_by(31, 2)\n  true\n  >>> is_divisible_by(31, 3)\n  false\n  */\nconst is_divisible_by_31 = (x, divisor) => {\n  return is_divisible_by(x, 31) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 35.\n  >>> is_divisible_by(35, 2)\n  true\n  >>> is_divisible_by(35, 3)\n  false\n  */\nconst is_divisible_by_35 = (x, divisor) => {\n  return is_divisible_by(x, 35) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 37.\n  >>> is_divisible_by(37, 2)\n  true\n  >>> is_divisible_by(37, 3)\n  false\n  */\nconst is_divisible_by_37 = (x, divisor) => {\n  return is_divisible_by(x, 37) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 39.\n  >>> is_divisible_by(39, 2)\n  true\n  >>> is_divisible_by(39, 3)\n  false\n  */\nconst is_divisible_by_39 = (x, divisor) => {\n  return is_divisible_by(x, 39) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 42.\n  >>> is_divisible_by(42, 2)\n  true\n  >>> is_divisible_by(42, 3)\n  false\n  */\nconst is_divisible_by_42 = (x, divisor) => {\n  return is_divisible_by(x, 42) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 45.\n  >>> is_divisible_by(45, 2)\n  true\n  >>> is_divisible_by(45, 3)\n  false\n  */\nconst is_divisible_by_45 = (x, divisor) => {\n  return is_divisible_by(x, 45) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 47.\n  >>> is_divisible_by(47, 2)\n  true\n  >>> is_divisible_by(47, 3)\n  false\n  */\nconst is_divisible_by_47 = (x, divisor) => {\n  return is_divisible_by(x, 47) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 50.\n  >>> is_divisible_by(50, 2)\n  true\n  >>> is_divisible_by(50, 3)\n  false\n  */\nconst is_divisible_by_50 = (x, divisor) => {\n  return is_divisible_by(x, 50) && is_divisible_by(x, divisor);\n};\n\n/* Given a number x, return true if and only if x is divisible by 52.\n  >>> is_divisible_by(52, 2)\n  true\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const smallest = numbers.reduce((acc, val) => Math.max(acc, val), 0);\n  const largest = numbers.reduce((acc, val) => Math.min(acc, val), 1);\n  const scale = largest / smallest;\n  return numbers.map((val) => val * scale);\n};\n\nconst get_random_number = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst get_random_number_from_array_and_list = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/* Filter given list of any python values only for floats\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_floats = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/* Filter given list of any python values only for booleans\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_booleans = (values) => {\n  return values.filter(value => typeof value === 'boolean')\n}\n\n/* Filter given list of any python values only for strings\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_strings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/* Filter given list of any python values only for lists and tuples\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_lists = (values) => {\n  return values.filter(value => Array.isArray(value))\n}\n\n/* Filter given list of any python values only for dictionaries\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_dictionaries = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/* Filter given list of any python values only for sets and frozensets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_sets = (values) => {\n  return values.filter(value => typeof value ==='set')\n}\n\n/* Filter given list of any python values only for frozensets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_frozensets = (values) => {\n  return values.filter(value => typeof value === 'frozenset')\n}\n\n/* Filter given list of any python values only for sets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_sets = (values) => {\n  return values.filter(value => typeof value ==='set')\n}\n\n/* Filter given list of any python values only for frozensets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_frozensets = (values) => {\n  return values.filter(value => typeof value === 'frozenset')\n}\n\n/* Filter given list of any python values only for sets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_sets = (values) => {\n  return values.filter(value => typeof value ==='set')\n}\n\n/* Filter given list of any python values only for frozensets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_frozensets = (values) => {\n  return values.filter(value => typeof value === 'frozenset')\n}\n\n/* Filter given list of any python values only for sets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_sets = (values) => {\n  return values.filter(value => typeof value ==='set')\n}\n\n/* Filter given list of any python values only for frozensets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_frozensets = (values) => {\n  return values.filter(value => typeof value === 'frozenset')\n}\n\n/* Filter given list of any python values only for sets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_sets = (values) => {\n  return values.filter(value => typeof value ==='set')\n}\n\n/* Filter given list of any python values only for frozensets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_frozensets = (values) => {\n  return values.filter(value => typeof value === 'frozenset')\n}\n\n/* Filter given list of any python values only for sets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_sets = (values) => {\n  return values.filter(value => typeof value ==='set')\n}\n\n/* Filter given list of any python values only for frozensets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_frozensets = (values) => {\n  return values.filter(value => typeof value === 'frozenset')\n}\n\n/* Filter given list of any python values only for sets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_sets = (values) => {\n  return values.filter(value => typeof value ==='set')\n}\n\n/* Filter given list of any python values only for frozensets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_frozensets = (values) => {\n  return values.filter(value => typeof value === 'frozenset')\n}\n\n/* Filter given list of any python values only for sets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_sets = (values) => {\n  return values.filter(value => typeof value ==='set')\n}\n\n/* Filter given list of any python values only for frozensets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_frozensets = (values) => {\n  return values.filter(value => typeof value === 'frozenset')\n}\n\n/* Filter given list of any python values only for sets\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_sets = (values) => {\n  return values.filter(value => typeof value ==='set')\n}\n\n/* Filter given list of any python values only for ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'a')\n  true\n  >>> endsWith('abc', 'b')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toUpperCase() === prefix[0].toUpperCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'a')\n  true\n  >>> endsWith('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toUpperCase() === suffix[0].toUpperCase()\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toUpperCase() === prefix[0].toUpperCase() && string[0].toUpperCase() === prefix[0].toUpperCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'a')\n  true\n  >>> endsWith('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toUpperCase() === suffix[0].toUpperCase() && string[0].toUpperCase() === suffix[0].toUpperCase()\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toUpperCase() === prefix[0].toUpperCase() && string[0].toUpperCase() === prefix[0].toUpperCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'a')\n  true\n  >>> endsWith('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toUpperCase() === suffix[0].toUpperCase() && string[0].toUpperCase() === suffix[0].toUpperCase()\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toUpperCase() === prefix[0].toUpperCase() && string[0].toUpperCase() === prefix[0].toUpperCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'a')\n  true\n  >>> endsWith('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toUpperCase() === suffix[0].toUpperCase() && string[0].toUpperCase() === suffix[0].toUpperCase()\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toUpperCase() === prefix[0].toUpperCase() && string[0].toUpperCase() === prefix[0].toUpperCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'a')\n  true\n  >>> endsWith('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toUpperCase() === suffix[0].toUpperCase() && string[0].toUpperCase() === suffix[0].toUpperCase()\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toUpperCase() === prefix[0].toUpperCase() && string[0].toUpperCase() === prefix[0].toUpperCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'a')\n  true\n  >>> endsWith('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toUpperCase() === suffix[0].toUpperCase() && string[0].toUpperCase() === suffix[0].toUpperCase()\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toUpperCase() === prefix[0].toUpperCase() && string[0].toUpperCase() === prefix[0].toUpperCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'a')\n  true\n  >>> endsWith('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnore", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n * >>> smallest_divisor(15)\n  1\n  */\nconst smallest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largest_divisor(15)\n  1\n  */\nconst smallest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n * >>> smallest_divisor(15)\n  1\n  */\nconst largest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largest_divisor(15)\n  1\n  */\nconst smallest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n * >>> smallest_divisor(15)\n  1\n  */\nconst largest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largest_divisor(15)\n  1\n  */\nconst smallest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n * >>> smallest_divisor(15)\n  1\n  */\nconst largest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largest_divisor(15)\n  1\n  */\nconst smallest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n * >>> smallest_divisor(15)\n  1\n  */\nconst largest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largest_divisor(15)\n  1\n  */\nconst smallest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n * >>> smallest_divisor(15)\n  1\n  */\nconst largest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largest_divisor(15)\n  1\n  */\nconst smallest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n * >>> smallest_divisor(15)\n  1\n  */\nconst largest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largest_divisor(15)\n  1\n  */\nconst smallest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n * >>> smallest_divisor(15)\n  1\n  */\nconst largest_divisor = (n) => {\n  let divisor = 1;\n  let max = 1;\n  let max = Math.ceil(Math.sqrt(n));\n  while (max > 1) {\n    if (n % max === 0) {\n      divisor = max;\n      break;\n    }\n    max = Math.ceil(Math.sqrt(n));\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> largest_divisor(15)\n  1\n  */\nconst ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 10;\n    factors.push(factor);\n  }\n  return factors;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactors = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsFast = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlow = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsFastSlow = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFast = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlow = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFast = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFastSlow = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFastSlowFast = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFastSlowFastSlow = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFastSlowFastSlowFast = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFastSlowFastSlowFastSlow = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFastSlowFastSlowFastSlowFast = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFastSlowFastSlowFastSlowFast = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFastSlowFastSlowFastSlowFastSlowFast = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFast = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFast = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFast = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFast = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let i = 0; i < factors.length; i++) {\n    if (n % factors[i] === 0) {\n      primes.push(factors[i]);\n    }\n  }\n  return primes;\n};\n\n// Given a number n, return its prime factors.\nconst primeFactorsSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFastSlowFast = (n) => {\n  const factors = factorize(n);\n  const primes = [];\n  for (let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\nconst getUnique = (arr) => {\n  const unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  return unique;\n};\n\nconst getUniqueArray = (arr) => {\n  const unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  return unique;\n};\n\nconst getUniqueArrayWithDuplicates = (arr) => {\n  const unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  return unique;\n};\n\nconst getUniqueArrayWithDuplicatesAndUnique = (arr) => {\n  const unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  return unique;\n};\n\nconst getUniqueArrayWithDuplicatesAndUniqueAndUnique = (arr) => {\n  const unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  return unique;\n};\n\nconst getUniqueArrayWithDuplicatesAndUniqueAndUniqueAndUnique = (arr) => {\n  const unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  return unique;\n};\n\nconst getUniqueArrayWithDuplicatesAndUniqueAndUniqueAndUniqueAndUnique = (arr) => {\n  const unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  return unique;\n};\n\nconst getUniqueArrayWithDuplicatesAndUniqueAndUniqueAndUniqueAndUniqueAndUnique = (arr) => {\n  const unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  return unique;\n};\n\nconst getUniqueArrayWithDuplicatesAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUnique = (arr) => {\n  const unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  return unique;\n};\n\nconst getUniqueArrayWithDuplicatesAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUnique = (arr) => {\n  const unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  return unique;\n};\n\nconst getUniqueArrayWithDuplicatesAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUniqueAndUnique", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (_, char) => char.toUpperCase())\n   .replace(/[A-Z]/g, (_, char) => char.toLowerCase())\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize('Hello')\n  'HellO'\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize('Hello')\n  'HellO'\n  */\nconst capitalize_first = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter_case('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case_first = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter_case_first('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case_first_letter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter_case_first_letter('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case_first_letter_case = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter_case_first_letter_case_first('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter_case_first_letter('Hello')\n  'HellO'\n  */\nconst capitalize_first_letter_case_first_letter_case_first_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => acc + string, '');\n};\n\n/* Convert string to number\n  >>> number('abc')\n  123\n  >>> number('123.456')\n  123.456\n  >>> number('123.45')\n  123.45\n  >>> number('123.45.6')\n  123.45.6\n  */\nconst number = (text) => {\n  const num = parseFloat(text);\n  return isNaN(num)? text : num;\n};\n\n/* Convert string to boolean\n  >>> boolean('abc')\n  true\n  >>> boolean('true')\n  true\n  >>> boolean('false')\n  false\n  >>> boolean('falsey')\n  false\n  */\nconst boolean = (text) => {\n  return text === 'true' || text === 'false';\n};\n\n/* Convert string to object\n  >>> object('abc')\n  {}\n  >>> object('{\"a\":1, \"b\":2}')\n  {\"a\":1,\"b\":2}\n  >>> object('{\"a\":1, \"b\":2, \"c\":3}')\n  {\"a\":1,\"b\":2,\"c\":3}\n  >>> object('{\"a\":1, \"b\":2, \"c\":3, \"d\":4}')\n  {\"a\":1,\"b\":2,\"c\":3,\"d\":4}\n  >>> object('{\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5}')\n  {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}\n  */\nconst object = (text) => {\n  const obj = {};\n  const parts = text.split(':');\n  parts.forEach((part) => {\n    const key = part.trim();\n    const value = part.trim().replace(/\"/g, '');\n    obj[key] = value;\n  });\n  return obj;\n};\n\n/* Convert string to array\n  >>> array('abc')\n  []\n  >>> array('[\"a\", \"b\", \"c\"]')\n  [\"a\", \"b\", \"c\"]\n  >>> array('[\"a\", \"b\", \"c\"]')\n  [\"a\", \"b\", \"c\"]\n  >>> array('[\"a\", \"b\", \"c\"]')\n  [\"a\", \"b\", \"c\"]\n  */\nconst array = (text) => {\n  const arr = [];\n  const parts = text.split(',');\n  parts.forEach((part) => {\n    const value = part.trim();\n    arr.push(value);\n  });\n  return arr;\n};\n\n/* Convert string to date\n  >>> date('abc')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  Invalid Date\n  >>> date('\"abc\"')\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix and do not start with a given prefix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix and do not start with a given prefix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix and do not start with a given prefix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix and do not start with a given prefix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix and do not start with a given prefix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix and do not start with a given prefix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_suffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  const balance = operations.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  */\nconst below_zero = (operations) => {\n  const balance = operations.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  */\nconst below_zero = (operations) => {\n  const balance = operations.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  */\nconst below_zero = (operations) => {\n  const balance = operations.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  */\nconst below_zero = (operations) => {\n  const balance = operations.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  */\nconst below_zero = (operations) => {\n  const balance = operations.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  */\nconst below_zero = (operations) => {\n  const balance = operations.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  */\nconst below_zero = (operations) => {\n  const balance = operations.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  */\nconst below_zero = (operations) => {\n  const balance = operations.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  */\nconst below_zero = (operations) => {\n  const balance = operations.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  >>> below_zero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  */\nconst below_zero = (operations) => {\n  const balance = operations.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter(x => x >= 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_negative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible = (l) => {\n  return l.filter(x => x % 3 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible5 = (l) => {\n  return l.filter(x => x % 5 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible7 = (l) => {\n  return l.filter(x => x % 7 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 9.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible9 = (l) => {\n  return l.filter(x => x % 9 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible11 = (l) => {\n  return l.filter(x => x % 11 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible13 = (l) => {\n  return l.filter(x => x % 13 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 15.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible15 = (l) => {\n  return l.filter(x => x % 15 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible17 = (l) => {\n  return l.filter(x => x % 17 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible19 = (l) => {\n  return l.filter(x => x % 19 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 23.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible23 = (l) => {\n  return l.filter(x => x % 23 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 29.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible29 = (l) => {\n  return l.filter(x => x % 29 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 31.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible31 = (l) => {\n  return l.filter(x => x % 31 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 35.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible35 = (l) => {\n  return l.filter(x => x % 35 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 37.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible37 = (l) => {\n  return l.filter(x => x % 37 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 43.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible43 = (l) => {\n  return l.filter(x => x % 43 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 47.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible47 = (l) => {\n  return l.filter(x => x % 47 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 53.\n  >>> get_divisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> get_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_divisible53 = (l) => {\n  return l.filter(x => x % 53 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 57.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n < 2) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n % 5 === 0) return false\n  return true\n}\n\n/*\n  Given a number, return its square root\n  >>> sqrt(2)\n  1\n  >>> sqrt(3)\n  1.5\n  >>> sqrt(4)\n  1.5\n  >>> sqrt(5)\n  3\n  >>> sqrt(6)\n  1.4142135623730951\n  >>> sqrt(7)\n  1.7320508075688772\n  >>> sqrt(8)\n  2.23606797749979\n  >>> sqrt(9)\n  2.5066282746310005\n  >>> sqrt(10)\n  2.8284271247461902\n  >>> sqrt(11)\n  3.2407318530717951\n  >>> sqrt(12)\n  3.424775396804817\n  >>> sqrt(13)\n  3.785398163397448\n  >>> sqrt(14)\n  4.07318530717951\n  >>> sqrt(15)\n  4.424775396804817\n  >>> sqrt(16)\n  4.785398163397448\n  >>> sqrt(17)\n  5.07318530717951\n  >>> sqrt(18)\n  5.424775396804817\n  >>> sqrt(19)\n  5.785398163397448\n  >>> sqrt(20)\n  6.07318530717951\n  >>> sqrt(21)\n  6.424775396804817\n  >>> sqrt(22)\n  6.785398163397448\n  >>> sqrt(23)\n  7.07318530717951\n  >>> sqrt(24)\n  7.424775396804817\n  >>> sqrt(25)\n  7.785398163397448\n  >>> sqrt(26)\n  8.07318530717951\n  >>> sqrt(27)\n  8.424775396804817\n  >>> sqrt(28)\n  8.785398163397448\n  >>> sqrt(29)\n  9.07318530717951\n  >>> sqrt(30)\n  9.424775396804817\n  >>> sqrt(31)\n  9.785398163397448\n  >>> sqrt(32)\n  10.07318530717951\n  >>> sqrt(33)\n  10.424775396804817\n  >>> sqrt(34)\n  10.785398163397448\n  >>> sqrt(35)\n  11.07318530717951\n  >>> sqrt(36)\n  11.424775396804817\n  >>> sqrt(37)\n  11.785398163397448\n  >>> sqrt(38)\n  12.07318530717951\n  >>> sqrt(39)\n  12.424775396804817\n  >>> sqrt(40)\n  12.785398163397448\n  >>> sqrt(41)\n  13.07318530717951\n  >>> sqrt(42)\n  13.424775396804817\n  >>> sqrt(43)\n  13.785398163397448\n  >>> sqrt(44)\n  14.07318530717951\n  >>> sqrt(45)\n  14.424775396804817\n  >>> sqrt(46)\n  14.785398163397448\n  >>> sqrt(47)\n  15.07318530717951\n  >>> sqrt(48)\n  15.424775396804817\n  >>> sqrt(49)\n  15.785398163397448\n  >>> sqrt(50)\n  16.07318530717951\n  >>> sqrt(51)\n  16.424775396804817\n  >>> sqrt(52)\n  16.785398163397448\n  >>> sqrt(53)\n  17.07318530717951\n  >>> sqrt(54)\n  17.424775396804817\n  >>> sqrt(55)\n  17.785398163397448\n  >>> sqrt(56)\n  18.07318530717951\n  >>> sqrt(57)\n  18.424775396804817\n  >>> sqrt(58)\n  18.785398163397448\n  >>> sqrt(59)\n  19.07318530717951\n  >>> sqrt(60)\n  19.424775396804817\n  >>> sqrt(61)\n  19.785398163397448\n  >>> sqrt(62)\n  20.07318530717951\n  >>> sqrt(63)\n  20.424775396804817\n  >>> sqrt(64)\n  20.785398163397448\n  >>> sqrt(65)\n  21.07318530717951\n  >>> sqrt(66)\n  21.424775396804817\n  >>> sqrt(67)\n  21.785398163397448\n  >>> sqrt(68)\n  22.07318530717951\n  >>> sqrt(69)\n  21.424775396804817\n  >>> sqrt(70)\n  22.5390625\n  >>> sqrt(71)\n  22.984375\n  >>> sqrt(72)\n  23.484375\n  >>> sqrt(73)\n  23.984375\n  >>> sqrt(74)\n  24.484375\n  >>> sqrt(75)\n  24.984375\n  >>> sqrt(76)\n  25.484375\n  >>> sqrt(77)\n  25.984375\n  >>> sqrt(78)\n  26.4142135623730951\n  >>> sqrt(79)\n  26.71484375\n  >>> sqrt(80)\n  27.1484375\n  >>> sqrt(81)\n  27.71484375\n  >>> sqrt(82)\n  28.1484375\n  >>> sqrt(83)\n  28.71484375\n  >>> sqrt(84)\n  29.1484375\n  >>> sqrt(85)\n  29.484375\n  >>> sqrt(86)\n  29.71484375\n  >>> sqrt(87)\n  30.1484375\n  >>> sqrt(88)\n  30.4142135623730951\n  >>> sqrt(89)\n  30.718281828459045\n  >>> sqrt(90)\n  31.1484375\n  >>> sqrt(91)\n  31.4142135623730951\n  >>> sqrt(92)\n  32.1484375\n  >>> sqrt(93)\n  32.4142135623730951\n  >>> sqrt(94)\n  32.718281828459045\n  >>> sqrt(95)\n  33.1484375\n  >>> sqrt(96)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero4 = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero5 = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero6 = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... x", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l151 = l150.slice();\n  let l15", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = new Set()\n  return l.filter((v, i, a) =>!seen.has(v) && seen.add(v))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (key, l) => {\n  let seen = new Set()\n  return l.filter((v, i, a) =>!seen.has(v) && seen.add(v) && v[key] === v[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(x => x.x, [5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKey = (key, l) => {\n  let seen = new Set()\n  return l.filter((v, i, a) =>!seen.has(v) && seen.add(v) && v[key] === v[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(x => x.x, [5, 3, 5, 2, 3, 3, 9, 0, 123], x => x.x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyWith = (key, l) => {\n  let seen = new Set()\n  return l.filter((v, i, a) =>!seen.has(v) && seen.add(v) && v[key] === v[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(x => x.x, [5, 3, 5, 2, 3, 3, 9, 0, 123], x => x.x, x => x.x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyWithKey = (key, l) => {\n  let seen = new Set()\n  return l.filter((v, i, a) =>!seen.has(v) && seen.add(v) && v[key] === v[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(x => x.x, [5, 3, 5, 2, 3, 3, 9, 0, 123], x => x.x, x => x.x, x => x.x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyWithKeyWith = (key, l) => {\n  let seen = new Set()\n  return l.filter((v, i, a) =>!seen.has(v) && seen.add(v) && v[key] === v[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(x => x.x, [5, 3, 5, 2, 3, 3, 9, 0, 123], x => x.x, x => x.x, x => x.x, x => x.x, x => x.x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyWithKeyWithKey = (key, l) => {\n  let seen = new Set()\n  return l.filter((v, i, a) =>!seen.has(v) && seen.add(v) && v[key] === v[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(x => x.x, [5, 3, 5, 2, 3, 3, 9, 0, 123], x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => x.x, x => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> min_element([1, 2, 3])\n  1\n  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst min_element = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return average of elements in the list.\n  >>> average([1, 2, 3])\n  2.5\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.75\n  */\nconst average = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return standard deviation of elements in the list.\n  >>> standard_deviation([1, 2, 3])\n  1.4142135623730951\n  >>> standard_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst standard_deviation = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - average(l), 2);\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance of elements in the list.\n  >>> variance([1, 2, 3])\n  1.4142135623730951\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - average(l), 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return standard deviation of elements in the list.\n  >>> standard_deviation([1, 2, 3])\n  1.4142135623730951\n  >>> standard_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst standard_deviation_sq = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - average(l), 2);\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance of elements in the list.\n  >>> variance([1, 2, 3])\n  1.4142135623730951\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance_sq = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - average(l), 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return standard deviation of elements in the list.\n  >>> standard_deviation([1, 2, 3])\n  1.4142135623730951\n  >>> standard_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst standard_deviation_sq2 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - average(l), 2);\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance of elements in the list.\n  >>> variance([1, 2, 3])\n  1.4142135623730951\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance_sq2 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - average(l), 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return standard deviation of elements in the list.\n  >>> standard_deviation([1, 2, 3])\n  1.4142135623730951\n  >>> standard_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst standard_deviation_sq3 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - average(l), 2);\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance of elements in the list.\n  >>> variance([1, 2, 3])\n  1.4142135623730951\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance_sq3 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - average(l), 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return standard deviation of elements in the list.\n  >>> standard_deviation([1, 2, 3])\n  1.4142135623730951\n  >>> standard_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst standard_deviation_sq4 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - average(l), 2);\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance of elements in the list.\n  >>> variance([1, 2, 3])\n  1.4142135623730951\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance_sq4 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - average(l), 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return standard deviation of elements in the list.\n  >>> standard_deviation([1, 2, 3])\n  1.4142135623730951\n  >>> standard_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst standard_deviation_sq5 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - average(l), 2);\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance of elements in the list.\n  >>> variance([1, 2, 3])\n  1.4142135623730951\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance_sq5 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - average", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the largest positive integer which can be written as the sum of two consecutive digits modulo n.\n  >>> fizz_buzz(100)\n  4\n  >>> fizz_buzz(101)\n  5\n  >>> fizz_buzz(102)\n  6\n  >>> fizz_buzz(103)\n  7\n  >>> fizz_buzz(104)\n  8\n  >>> fizz_buzz(105)\n  9\n  >>> fizz_buzz(106)\n  10\n  >>> fizz_buzz(107)\n  11\n  >>> fizz_buzz(108)\n  12\n  >>> fizz_buzz(109)\n  13\n  >>> fizz_buzz(110)\n  14\n  >>> fizz_buzz(111)\n  15\n  >>> fizz_buzz(112)\n  16\n  >>> fizz_buzz(113)\n  17\n  >>> fizz_buzz(114)\n  18\n  >>> fizz_buzz(115)\n  19\n  >>> fizz_buzz(116)\n  20\n  >>> fizz_buzz(117)\n  21\n  >>> fizz_buzz(118)\n  22\n  >>> fizz_buzz(119)\n  23\n  >>> fizz_buzz(120)\n  24\n  >>> fizz_buzz(121)\n  25\n  >>> fizz_buzz(122)\n  26\n  >>> fizz_buzz(123)\n  27\n  >>> fizz_buzz(124)\n  28\n  >>> fizz_buzz(125)\n  29\n  >>> fizz_buzz(126)\n  30\n  >>> fizz_buzz(127)\n  31\n  >>> fizz_buzz(128)\n  32\n  >>> fizz_buzz(129)\n  33\n  >>> fizz_buzz(130)\n  34\n  >>> fizz_buzz(131)\n  35\n  >>> fizz_buzz(132)\n  36\n  >>> fizz_buzz(133)\n  37\n  >>> fizz_buzz(134)\n  38\n  >>> fizz_buzz(135)\n  39\n  >>> fizz_buzz(136)\n  40\n  >>> fizz_buzz(137)\n  41\n  >>> fizz_buzz(138)\n  42\n  >>> fizz_buzz(139)\n  43\n  >>> fizz_buzz(140)\n  44\n  >>> fizz_buzz(141)\n  45\n  >>> fizz_buzz(142)\n  46\n  >>> fizz_buzz(143)\n  47\n  >>> fizz_buzz(144)\n  48\n  >>> fizz_buzz(145)\n  49\n  >>> fizz_buzz(146)\n  50\n  >>> fizz_buzz(147)\n  51\n  >>> fizz_buzz(148)\n  52\n  >>> fizz_buzz(149)\n  53\n  >>> fizz_buzz(150)\n  54\n  >>> fizz_buzz(151)\n  55\n  >>> fizz_buzz(152)\n  56\n  >>> fizz_buzz(153)\n  57\n  >>> fizz_buzz(154)\n  58\n  >>> fizz_buzz(155)\n  59\n  >>> fizz_buzz(156)\n  60\n  >>> fizz_buzz(157)\n  61\n  >>> fizz_buzz(158)\n  62\n  >>> fizz_buzz(159)\n  63\n  >>> fizz_buzz(160)\n  64\n  >>> fizz_buzz(161)\n  65\n  >>> fizz_buzz(162)\n  66\n  >>> fizz_buzz(163)\n  67\n  >>> fizz_buzz(164)\n  68\n  >>> fizz_buzz(165)\n  69\n  >>> fizz_buzz(166)\n  70\n  >>> fizz_buzz(167)\n  71\n  >>> fizz_buzz(168)\n  72\n  >>> fizz_buzz(169)\n  73\n  >>> fizz_buzz(170)\n  74\n  >>> fizz_buzz(171)\n  75\n  >>> fizz_buzz(172)\n  76\n  >>> fizz_buzz(173)\n  77\n  >>> fizz_buzz(174)\n  78\n  >>> fizz_buzz(175)\n  79\n  >>> fizz_buzz(176)\n  80\n  >>> fizz_buzz(177)\n  81\n  >>> fizz_buzz(178)\n  82\n  >>> fizz_buzz(179)\n  83\n  >>> fizz_buzz(180)\n  84\n  >>> fizz_buzz(181)\n  85\n  >>> fizz_buzz(182)\n  86\n  >>> fizz_buzz(183)\n  87\n  >>> fizz_buzz(184)\n  88\n  >>> fizz_buzz(185)\n  89\n  >>> fizz_buzz(186)\n  90\n  >>> fizz_buzz(187)\n  91\n  >>> fizz_buzz(188)\n  92\n  >>> fizz_buzz(189)\n  93\n  >>> fizz_buzz(190)\n  94\n  >>> fizz_buzz(191)\n  95\n  >>> fizz_buzz(192)\n  96\n  >>> fizz_buzz(193)\n  97\n  >>> fizz_buzz(194)\n  98\n  >>> fizz_buzz(195)\n  99\n  >>> fizz_buzz(196)\n  100\n  >>> fizz_buzz(197)\n  101\n  >>> fizz_buzz(198)\n  102\n  >>> fizz_buzz(199)\n  103\n  >>> fizz_bu", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sort_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([5, 6, 3, 4])\n  [6, 5, 3, 4]\n  >>> sort_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_evenodd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_evenodd([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_evenodd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sort_evenodd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd([5, 6, 3, 4])\n  [6, 5, 3, 4]\n  >>> sort_evenodd([1, 2, 3])\n  [3, 2, 1]\n  */\nconst sort_evenodd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd([5, 6, 3, 4])\n  [6, 5, 3, 4]\n  >>> sort_evenodd([1, 2, 3])\n  [3, 2, 1]\n  */\nconst sort_evenodd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd([5, 6, 3, 4])\n  [6, 5, 3, 4]\n  >>> sort_evenodd([1, 2, 3])\n  [3, 2, 1]\n  */\nconst sort_evenodd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd([5, 6, 3, 4])\n  [6, 5, 3, 4]\n  >>> sort_evenodd([1, 2, 3])\n  [3, 2, 1]\n  */\nconst sort_evenodd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd([5, 6, 3, 4])\n  [6, 5, 3, 4]\n  >>> sort_evenodd([1, 2, 3])\n  [3, 2, 1]\n  */\nconst sort_evenodd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd([5, 6, 3, 4])\n  [6, 5, 3, 4]\n  >>> sort_evenodd([1, 2, 3])\n  [3, 2, 1]\n  */\nconst sort_evenodd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd([5, 6, 3, 4])\n  [6, 5, 3, 4]\n  >>> sort_evenodd([1, 2, 3])\n  [3, 2, 1]\n  */\nconst sort_evenodd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns true if string contains only letters.\n  */\nconst isLetter = (s) => {\n  return /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only numbers.\n  */\nconst isNumber = (s) => {\n  return /^[0-9]+$/.test(s);\n}\n\n/*\n  returns true if string contains only symbols.\n  */\nconst isSymbol = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecial = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar2 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar3 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar4 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar5 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar6 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar7 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar8 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar9 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar10 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar11 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar12 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar13 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar14 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar15 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar16 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar17 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar18 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar19 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar20 = (s) => {\n  return /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]+$/.test(s);\n}\n\n/*\n  returns true if string contains only special characters.\n  */\nconst isSpecialChar", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "<|endoftext|>/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  if (n <= 3) {\n    return n;\n  }\n  if (n % 2 === 0) {\n    return n;\n  }\n  if (n % 3 === 0) {\n    return n + 1;\n  }\n  if (n % 5 === 0) {\n    return n + 2;\n  }\n  return n + 3;\n};\n\n/*\n  prime_factor returns n-th number that is a prime factor.\n  >>> prime_factor(10)\n  2\n  >>> prime_factor(11)\n  3\n  >>> prime_factor(12)\n  5\n  >>> prime_factor(13)\n  7\n  >>> prime_factor(14)\n  11\n  >>> prime_factor(15)\n  13\n  >>> prime_factor(16)\n  21\n  >>> prime_factor(17)\n  29\n  >>> prime_factor(18)\n  31\n  >>> prime_factor(19)\n  41\n  >>> prime_factor(20)\n  53\n  >>> prime_factor(21)\n  61\n  >>> prime_factor(22)\n  71\n  >>> prime_factor(23)\n  91\n  >>> prime_factor(24)\n  101\n  >>> prime_factor(25)\n  103\n  >>> prime_factor(26)\n  107\n  >>> prime_factor(27)\n  113\n  >>> prime_factor(28)\n  121\n  >>> prime_factor(29)\n  127\n  >>> prime_factor(30)\n  131\n  >>> prime_factor(31)\n  141\n  >>> prime_factor(32)\n  153\n  >>> prime_factor(33)\n  161\n  >>> prime_factor(34)\n  177\n  >>> prime_factor(35)\n  181\n  >>> prime_factor(36)\n  193\n  >>> prime_factor(37)\n  201\n  >>> prime_factor(38)\n  223\n  >>> prime_factor(39)\n  239\n  >>> prime_factor(40)\n  255\n  >>> prime_factor(41)\n  271\n  >>> prime_factor(42)\n  287\n  >>> prime_factor(43)\n  303\n  >>> prime_factor(44)\n  313\n  >>> prime_factor(45)\n  331\n  >>> prime_factor(46)\n  345\n  >>> prime_factor(47)\n  353\n  >>> prime_factor(48)\n  371\n  >>> prime_factor(49)\n  383\n  >>> prime_factor(50)\n  395\n  >>> prime_factor(51)\n  411\n  >>> prime_factor(52)\n  431\n  >>> prime_factor(53)\n  451\n  >>> prime_factor(54)\n  467\n  >>> prime_factor(55)\n  479\n  >>> prime_factor(56)\n  491\n  >>> prime_factor(57)\n  503\n  >>> prime_factor(58)\n  513\n  >>> prime_factor(59)\n  527\n  >>> prime_factor(60)\n  541\n  >>> prime_factor(61)\n  557\n  >>> prime_factor(62)\n  571\n  >>> prime_factor(63)\n  587\n  >>> prime_factor(64)\n  593\n  >>> prime_factor(65)\n  601\n  >>> prime_factor(66)\n  619\n  >>> prime_factor(67)\n  631\n  >>> prime_factor(68)\n  643\n  >>> prime_factor(69)\n  651\n  >>> prime_factor(70)\n  663\n  >>> prime_factor(71)\n  671\n  >>> prime_factor(72)\n  681\n  >>> prime_factor(73)\n  693\n  >>> prime_factor(74)\n  701\n  >>> prime_factor(75)\n  713\n  >>> prime_factor(76)\n  727\n  >>> prime_factor(77)\n  739\n  >>> prime_factor(78)\n  747\n  >>> prime_factor(79)\n  755\n  >>> prime_factor(80)\n  769\n  >>> prime_factor(81)\n  781\n  >>> prime_factor(82)\n  791\n  >>> prime_factor(83)\n  809\n  >>> prime_factor(84)\n  811\n  >>> prime_factor(85)\n  821\n  >>> prime_factor(86)\n  831\n  >>> prime_factor(87)\n  843\n  >>> prime_factor(88)\n  855\n  >>> prime_factor(89)\n  861\n  >>> prime_factor(90)\n  877\n  >>> prime_factor(91)\n  881\n  >>> prime_factor(92)\n  893\n  >>> prime_factor(93)\n  903\n  >>> prime_factor(94)\n  907\n  >>> prime_factor(95)\n  911\n  >>> prime_factor(96)\n  921\n  >>> prime_factor(97)\n  931\n  >>> prime_factor(98)\n  939\n  >>> prime_factor(99)\n  951\n  >>> prime_factor(100)\n  963\n  >>> prime_factor(101)\n  981\n  >>> prime_factor(102)\n  999\n  >>> prime_factor(103)\n  1011\n  >>> prime_factor(104)\n  1019\n  >>> prime_factor(105)\n  1031\n  >>> prime_factor(106)\n  1039\n  >>> prime_factor(107)\n  1049\n  >>> prime_factor(108)\n  1059\n  >>> prime_factor(109)\n  1069\n  >>> prime_factor(110)\n  1079\n  >>> prime_factor(111)\n  1089\n  >>> prime_factor(112)\n  1101\n  >>> prime_factor(113)\n  1123\n  >>> prime_factor(114)\n  1147\n  >>> prime_factor(115)\n  1161\n  >>> prime_factor(116)\n  1173\n  >>> prime_factor(117)\n  1191\n  >>> prime_factor(118)\n  1201\n  >>> prime_factor(119)\n  1213\n  >>> prime_factor(120)\n  1217\n  >>> prime_factor(121)\n  1221\n  >>> prime_factor(122)\n  1229\n  >>> prime_factor(123)\n  1237\n  >>> prime_factor(124)\n  1249\n  >>> prime_factor(125)\n  1259\n  >>> prime_factor(126)\n  1269\n  >>> prime_factor(127)\n  1279\n  >>> prime_factor(128)\n  1291\n  >>> prime_factor(129)\n  1301", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviations = numbers.map(number => Math.abs(number - mean));\n  return Math.sqrt(deviations.reduce((a, b) => a + b, 0) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst mean_squared_deviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b, 0) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(average | x - x_mean |)\n  >>> root_mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  2.25\n  */\nconst root_mean_squared_deviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b, 0) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation\n  around the mean of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  STD = sqrt(average | x - x_mean |)\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b, 0) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Variance of the mean\n  around this dataset.\n  Variance of the mean is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  V = average | x - x_mean |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst variance = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b, 0) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation of\n  the mean of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(average | x - x_mean |)\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b, 0) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Variance of the mean\n  around this dataset.\n  Variance of the mean is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  V = average | x - x_mean |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst variance = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b, 0) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation of\n  the mean of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(average | x - x_mean |)\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b, 0) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Variance of the mean\n  around this dataset.\n  Variance of the mean is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  V = average | x - x_mean |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst variance = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b, 0) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation of\n  the mean of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(average | x - x_mean |)\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b, 0) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation of\n  the mean of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(average | x - x_mean |)\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b, 0) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation of\n  the mean of this dataset.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "<|endoftext|>/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_prime takes an integer as an input, and returns true if it is a\n  prime number, and false otherwise.\n\n  >>> is_prime(7)\n  true\n  >>> is_prime(8)\n  false\n  >>> is_prime(9)\n  false\n  >>> is_prime(10)\n  false\n  >>> is_prime(11)\n  false\n  >>> is_prime(12)\n  false\n  >>> is_prime(13)\n  false\n  >>> is_prime(14)\n  false\n  >>> is_prime(15)\n  false\n  >>> is_prime(16)\n  false\n  >>> is_prime(17)\n  false\n  >>> is_prime(18)\n  false\n  >>> is_prime(19)\n  false\n  >>> is_prime(20)\n  false\n  >>> is_prime(21)\n  false\n  >>> is_prime(22)\n  false\n  >>> is_prime(23)\n  false\n  >>> is_prime(24)\n  false\n  >>> is_prime(25)\n  false\n  >>> is_prime(26)\n  false\n  >>> is_prime(27)\n  false\n  >>> is_prime(28)\n  false\n  >>> is_prime(29)\n  false\n  >>> is_prime(30)\n  false\n  >>> is_prime(31)\n  false\n  >>> is_prime(32)\n  false\n  >>> is_prime(33)\n  false\n  >>> is_prime(34)\n  false\n  >>> is_prime(35)\n  false\n  >>> is_prime(36)\n  false\n  >>> is_prime(37)\n  false\n  >>> is_prime(38)\n  false\n  >>> is_prime(39)\n  false\n  >>> is_prime(40)\n  false\n  >>> is_prime(41)\n  false\n  >>> is_prime(42)\n  false\n  >>> is_prime(43)\n  false\n  >>> is_prime(44)\n  false\n  >>> is_prime(45)\n  false\n  >>> is_prime(46)\n  false\n  >>> is_prime(47)\n  false\n  >>> is_prime(48)\n  false\n  >>> is_prime(49)\n  false\n  >>> is_prime(50)\n  false\n  >>> is_prime(51)\n  false\n  >>> is_prime(52)\n  false\n  >>> is_prime(53)\n  false\n  >>> is_prime(54)\n  false\n  >>> is_prime(55)\n  false\n  >>> is_prime(56)\n  false\n  >>> is_prime(57)\n  false\n  >>> is_prime(58)\n  false\n  >>> is_prime(59)\n  false\n  >>> is_prime(60)\n  false\n  >>> is_prime(61)\n  false\n  >>> is_prime(62)\n  false\n  >>> is_prime(63)\n  false\n  >>> is_prime(64)\n  false\n  >>> is_prime(65)\n  false\n  >>> is_prime(66)\n  false\n  >>> is_prime(67)\n  false\n  >>> is_prime(68)\n  false\n  >>> is_prime(69)\n  false\n  >>> is_prime(70)\n  false\n  >>> is_prime(71)\n  false\n  >>> is_prime(72)\n  false\n  >>> is_prime(73)\n  false\n  >>> is_prime(74)\n  false\n  >>> is_prime(75)\n  false\n  >>> is_prime(76)\n  false\n  >>> is_prime(77)\n  false\n  >>> is_prime(78)\n  false\n  >>> is_prime(79)\n  false\n  >>> is_prime(80)\n  false\n  >>> is_prime(81)\n  false\n  >>> is_prime(82)\n  false\n  >>> is_prime(83)\n  false\n  >>> is_prime(84)\n  false\n  >>> is_prime(85)\n  false\n  >>> is_prime(86)\n  false\n  >>> is_prime(87)\n  false\n  >>> is_prime(88)\n  false\n  >>> is_prime(89)\n  false\n  >>> is_prime(90)\n  false\n  >>> is_prime(91)\n  false\n  >>> is_prime(92)\n  false\n  >>> is_prime(93)\n  false\n  >>> is_prime(94)\n  false\n  >>> is_prime(95)\n  false\n  >>> is_prime(96)\n  false\n  >>> is_prime(97)\n  false\n  >>> is_prime(98)\n  false\n  >>> is_prime(99)\n  false\n  >>> is_prime(100)\n  false\n  >>> is_prime(101)\n  false\n  >>> is_prime(102)\n  false\n  >>> is_prime(103)\n  false\n  >>> is_prime(104)\n  false\n  >>> is_prime(105)\n  false\n  >>> is_prime(106)\n  false\n  >>> is_prime(107)\n  false\n  >>> is_prime(108)\n  false\n  >>> is_prime(109)\n  false\n  >>> is_prime(110)\n  false\n  >>> is_prime(111)\n  false\n  >>> is_prime(112)\n  false\n  >>> is_prime(113)\n  false\n  >>> is_prime(114)\n  false\n  >>> is_prime(115)\n  false\n  >>> is_prime(116)\n  false\n  >>> is_prime(117)\n  false\n  >>> is_prime(118)\n  false\n  >>> is_prime(119)\n  false\n  >>> is_prime(120)\n  false\n  >>> is_prime(121)\n  false\n  >>> is_prime(122)\n  false\n  >>> is_prime(123)\n  false\n  >>> is_prime(124)\n  false\n  >>> is_prime(125)\n  false\n  >>> is_prime(126)\n  false\n  >>> is_prime(127)\n  false\n  >>> is_prime(128)\n  false\n  >>> is_prime(129)\n  false\n  >>> is_prime(130)\n  false\n  >>> is_prime(131)\n  false\n  >>> is_prime(132)\n  false\n  >>> is_prime(133)\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  const collisions = 0;\n  for (let i = 0; i < n; i++) {\n    const car_1 = cars[i];\n    const car_2 = cars[(i + 1) % n];\n    if (car_1.speed > car_2.speed) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object and a set of cars, this function returns the number of collisions\n  that occur.\n  */\nconst car_collision = (car, cars) => {\n  const collisions = 0;\n  for (let i = 0; i < cars.length; i++) {\n    if (car_collision_test(cars[i], car)) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object and a set of cars, this function returns the number of collisions\n  that occur.\n  */\nconst car_collision_test = (car, cars) => {\n  if (car.speed > cars[0].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[0].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[0].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[1].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[1].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[1].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[2].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[2].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[2].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[3].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[3].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[3].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[4].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[4].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[4].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[5].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[5].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[5].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[6].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[6].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[6].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[7].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[7].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[7].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[8].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[8].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[8].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[9].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[9].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[9].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[10].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[10].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[10].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[11].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[11].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[11].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[12].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[12].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[12].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[13].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[13].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[13].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[14].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[14].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[14].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[15].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[15].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed === cars[15].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed > cars[16].speed) {\n    return car_race_collision(cars.length);\n  }\n  if (car.speed < cars[16].speed) {\n    return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => a - b);\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => b - a);\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => b - a);\n  return res.reverse();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => a - b);\n  return res.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => b - a);\n  return res.reverse().slice();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => a - b);\n  return res.reverse().slice();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse_reverse_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => b - a);\n  return res.reverse().reverse().slice();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse_reverse_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => a - b);\n  return res.reverse().reverse().slice();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse_reverse_reverse_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => b - a);\n  return res.reverse().reverse().reverse().slice();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse_reverse_reverse_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => a - b);\n  return res.reverse().reverse().reverse().slice();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse_reverse_reverse_reverse_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => b - a);\n  return res.reverse().reverse().reverse().reverse().slice();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse_reverse_reverse_reverse_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => a - b);\n  return res.reverse().reverse().reverse().reverse().slice();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse_reverse_reverse_reverse_reverse_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => b - a);\n  return res.reverse().reverse().reverse().reverse().reverse().slice();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse_reverse_reverse_reverse_reverse_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => a - b);\n  return res.reverse().reverse().reverse().reverse().reverse().reverse().slice();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => b - a);\n  return res.reverse().reverse().reverse().reverse().reverse().reverse().reverse().slice();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse_reverse_reverse_reverse_reverse_reverse = (l) => {\n  let res = l.slice();\n  res.sort((a, b) => a - b);\n  return res.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().slice();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "<|endoftext|>/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  Returns the number of pairs of integers whose sum is less than or equal to x.\n  >>> count_pairs([1, 3, 5, 7])\n  3\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  2\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  1\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n  0\n  >>> count_pairs([2, 4, -5, 3, 5, 7])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  if (base < 10) {\n    return String(parseInt(x, base))\n  }\n  return String(parseInt(x, 10) + 1)\n}\n\n/*\n  Convert string representation to number.\n  >>> to_number(['1', '2', '3'])\n  3\n  >>> to_number(['1', '2', '3'], 'base')\n  3\n  >>> to_number(['1', '2', '3'], 'base', 2)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 10)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n  3\n  >>> to_number(['1', '2', '3'], 'base', 16)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 2)\n  9\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * l;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 1)\n  4\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * a;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 0)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 1)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 2)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 3)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 4)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 5)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 6)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 7)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 8)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 9)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 10)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 11)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 12)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 13)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 14)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 15)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 16)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 17)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 18)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 19)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 20)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 21)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 22)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 23)\n  0\n  */\nconst triangle_area = (a, l) => {\n  const side = Math.sqrt(a * a + l * l);\n  return side * Math.sqrt(a * a + l * l);\n};\n\n/*Given length of a side and low return area ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0 || n >= 4) {\n    return 0\n  }\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(8)\n  8\n  >>> fibonacci(9)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(10)\n  13\n  >>> fibonacci(11)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(12)\n  21\n  >>> fibonacci(13)\n  34\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(14)\n  34\n  >>> fibonacci(15)\n  55\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(16)\n  55\n  >>> fibonacci(17)\n  89\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(18)\n  89\n  >>> fibonacci(19)\n  144\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(20)\n  144\n  >>> fibonacci(21)\n  233\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(22)\n  233\n  >>> fibonacci(23)\n  377\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(24)\n  377\n  >>> fibonacci(25)\n  610\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(26)\n  610\n  >>> fibonacci(27)\n  987\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(28)\n  987\n  >>> fibonacci(29)\n  1597\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(30)\n  1597\n  >>> fibonacci(31)\n  2584\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(32)\n  2584\n  >>> fibonacci(33)\n  4181\n  */\nconst fibonacci = (n) => {\n  if (n < 0 || n >= 2) {\n    return 0\n  }\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(34)\n  4181\n  >>> fibonacci(35)\n  6765\n  */\nconst fibon", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let sum = 0\n  while (i < j) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  return text === text.reverse().toString()\n}\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(3, 'aba')\n  true\n  >>> is_palindrome_of_length(3, 'aaaaa')\n  true\n  >>> is_palindrome_of_length(3, 'zbcd')\n  false\n  */\nconst is_palindrome_of_length = (length, text) => {\n  return text === text.reverse().slice(0, length).toString()\n}\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(3, 'aba')\n  true\n  >>> is_palindrome_of_length(3, 'aaaaa')\n  true\n  >>> is_palindrome_of_length(3, 'zbcd')\n  false\n  */\nconst is_palindrome_of_length_and_space = (length, text) => {\n  return text === text.reverse().slice(0, length).replace(/\\s/g, '').toString()\n}\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(3, 'aba')\n  true\n  >>> is_palindrome_of_length(3, 'aaaaa')\n  true\n  >>> is_palindrome_of_length(3, 'zbcd')\n  false\n  */\nconst is_palindrome_of_length_and_space_and_space = (length, text) => {\n  return text === text.reverse().slice(0, length).replace(/\\s/g, '').toString().replace(/\\s/g, '').toString()\n}\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(3, 'aba')\n  true\n  >>> is_palindrome_of_length(3, 'aaaaa')\n  true\n  >>> is_palindrome_of_length(3, 'zbcd')\n  false\n  */\nconst is_palindrome_of_length_and_space_and_space_and_space = (length, text) => {\n  return text === text.reverse().slice(0, length).replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString()\n}\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(3, 'aba')\n  true\n  >>> is_palindrome_of_length(3, 'aaaaa')\n  true\n  >>> is_palindrome_of_length(3, 'zbcd')\n  false\n  */\nconst is_palindrome_of_length_and_space_and_space_and_space_and_space = (length, text) => {\n  return text === text.reverse().slice(0, length).replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString()\n}\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(3, 'aba')\n  true\n  >>> is_palindrome_of_length(3, 'aaaaa')\n  true\n  >>> is_palindrome_of_length(3, 'zbcd')\n  false\n  */\nconst is_palindrome_of_length_and_space_and_space_and_space_and_space_and_space = (length, text) => {\n  return text === text.reverse().slice(0, length).replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString()\n}\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(3, 'aba')\n  true\n  >>> is_palindrome_of_length(3, 'aaaaa')\n  true\n  >>> is_palindrome_of_length(3, 'zbcd')\n  false\n  */\nconst is_palindrome_of_length_and_space_and_space_and_space_and_space_and_space_and_space = (length, text) => {\n  return text === text.reverse().slice(0, length).replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString()\n}\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_of_length(3, 'aba')\n  true\n  >>> is_palindrome_of_length(3, 'aaaaa')\n  true\n  >>> is_palindrome_of_length(3, 'zbcd')\n  false\n  */\nconst is_palindrome_of_length_and_space_and_space_and_space_and_space_and_space_and_space_and_space = (length, text) => {\n  return text === text.reverse().slice(0, length).replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').toString().replace(/\\s/g, '').", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 1) return 0;\n  if (n == 0) return 1;\n  if (n == 1) return p;\n  if (p == 1) return 1;\n  if (p == 2) return 2;\n  if (p == 3) return 3;\n  if (p == 4) return 4;\n  if (p == 5) return 5;\n  if (p == 6) return 6;\n  if (p == 7) return 7;\n  if (p == 8) return 8;\n  if (p == 9) return 9;\n  if (p == 10) return 10;\n  if (p == 11) return 11;\n  if (p == 12) return 12;\n  if (p == 13) return 13;\n  if (p == 14) return 14;\n  if (p == 15) return 15;\n  if (p == 16) return 16;\n  if (p == 17) return 17;\n  if (p == 18) return 18;\n  if (p == 19) return 19;\n  if (p == 20) return 20;\n  if (p == 21) return 21;\n  if (p == 22) return 22;\n  if (p == 23) return 23;\n  if (p == 24) return 24;\n  if (p == 25) return 25;\n  if (p == 26) return 26;\n  if (p == 27) return 27;\n  if (p == 28) return 28;\n  if (p == 29) return 29;\n  if (p == 30) return 30;\n  if (p == 31) return 31;\n  if (p == 32) return 32;\n  if (p == 33) return 33;\n  if (p == 34) return 34;\n  if (p == 35) return 35;\n  if (p == 36) return 36;\n  if (p == 37) return 37;\n  if (p == 38) return 38;\n  if (p == 39) return 39;\n  if (p == 40) return 40;\n  if (p == 41) return 41;\n  if (p == 42) return 42;\n  if (p == 43) return 43;\n  if (p == 44) return 44;\n  if (p == 45) return 45;\n  if (p == 46) return 46;\n  if (p == 47) return 47;\n  if (p == 48) return 48;\n  if (p == 49) return 49;\n  if (p == 50) return 50;\n  if (p == 51) return 51;\n  if (p == 52) return 52;\n  if (p == 53) return 53;\n  if (p == 54) return 54;\n  if (p == 55) return 55;\n  if (p == 56) return 56;\n  if (p == 57) return 57;\n  if (p == 58) return 58;\n  if (p == 59) return 59;\n  if (p == 60) return 60;\n  if (p == 61) return 61;\n  if (p == 62) return 62;\n  if (p == 63) return 63;\n  if (p == 64) return 64;\n  if (p == 65) return 65;\n  if (p == 66) return 66;\n  if (p == 67) return 67;\n  if (p == 68) return 68;\n  if (p == 69) return 69;\n  if (p == 70) return 70;\n  if (p == 72) return 72;\n  if (p == 73) return 73;\n  if (p == 74) return 74;\n  if (p == 75) return 75;\n  if (p == 76) return 76;\n  if (p == 77) return 77;\n  if (p == 78) return 78;\n  if (p == 79) return 79;\n  if (p == 80) return 80;\n  if (p == 81) return 81;\n  if (p == 82) return 82;\n  if (p == 83) return 83;\n  if (p == 84) return 84;\n  if (p == 85) return 85;\n  if (p == 86) return 86;\n  if (p == 87) return 87;\n  if (p == 88) return 88;\n  if (p == 89) return 89;\n  if (p == 90) return 90;\n  if (p == 91) return 91;\n  if (p == 92) return 92;\n  if (p == 93) return 93;\n  if (p == 94) return 94;\n  if (p == 95) return 95;\n  if (p == 96) return 96;\n  if (p == 97) return 97;\n  if (p == 98) return 98;\n  if (p == 99) return 99;\n  if (p == 100) return 100;\n  if (p == 101) return 101;\n  if (p == 102) return 102;\n  if (p == 103) return 103;\n  if (p == 104) return 104;\n  if (p == 105) return 105;\n  if (p == 106) return 106;\n  if (p == 107) return 107;\n  if (p == 108) return 108;\n  if (p == 109) return 109;\n  if (p == 111) return 111;\n  if (p == 112) return 112;\n  if (p == 113) return 113;\n  if (p == 114) return 114;\n  if (p == 115) return 115;\n  if (p == 116) return 116;\n  if (p == 117) return 117;\n  if (p == 118) return 118;\n  if (p == 119) return 119;\n  if (p == 121) return 121;\n  if (p == 122) return 122;\n  if (p == 123) return 123;\n  if (p == 124) return 124;\n  if (p == 125) return 125;\n  if (p == 126) return 126;\n  if (p == 127) return 127;\n  if (p == 128) return 128;\n  if (p == 129) return 129;\n  if (p == 130) return 130;\n  if (p == 131) return 131;\n  if (p == 132) return 132;\n  if (p == 133) return 133;\n  if (p == 134) return 134;\n  if (p == 135) return 135;\n  if (p == 136) return 136;\n  if (p == 137) return 137;\n  if (p == 138) return 138;\n  if (p == 139) return 139;\n  if (p == 140) return 140;\n  if (p == 141) return 141;\n  if (p == 142) return 142;\n  if (p == 143) return 143;\n  if (p == 144) return 144;\n  if (p == 145) return 145;\n  if (p == 146) return 146;\n  if (p == 147) return 147;\n  if (p == 148) return 148;\n  if (p == 149) return 149;\n  if (p == 150) return 150;\n  if (p == 151) return 151;\n  if (p == 152) return 152;\n  if (p == 153) return 153;\n  if (p == 154) return 154;\n  if (p == 155) return 155;\n  if (p == 156) return 156;\n  if (p == 157) return 157;\n  if (p == 158) return 158;\n  if (p == 159) return 159;\n  if (p == 160) return 160;\n  if (p == 161) return 161;\n  if (p == 162) return 162;\n  if (p == 163) return 163;\n  if (p == 164) return 164;\n  if (p == 165) return 165;\n  if (p == 166) return 166;\n  if (p == 167) return 167;\n  if (p == 168) return 168;\n  if (p == 169) return 169;\n  if (p == 170) return 170;\n  if (p == 171) return 171;\n  if (p == 172) return 172;\n  if (p == 173) return 173;\n  if (p == 174) return 174;\n  if (p == 175) return 175;\n  if (p == 176) return 176;\n  if (p == 177) return 177;\n  if (p == 178) return 178;\n  if (p == 179) return 179;\n  if (p == 180) return 180;\n  if (p == 181) return 181;\n  if (p == 182) return 182;\n  if (p == 183) return 183;\n  if (p == 184) return 184;\n  if (p == ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === numbers.length - 1) {\n      result.push(numbers[i])\n      i++\n      j = 0\n    } else {\n      result.push(numbers[i])\n      j++\n    }\n  }\n  result.push(numbers[i])\n  return result\n}\n\n/**\n * Remove duplicates from an array\n * \n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * [1, 2, 2]\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n * []\n * >>> removeDuplicates([1, 1, 1, 2, 2, 2])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse_big = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse_big = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse_big_no_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse_big_no_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse_big_no_reverse_no_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse_big_no_reverse_no_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse_big_no_reverse_no_reverse_no_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse_big_no_reverse_no_reverse_no_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse_big_no_reverse_no_reverse_no_reverse_no_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse_big_no_reverse_no_reverse_no_reverse_no_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse_big_no_reverse_no_reverse_no_reverse_no_reverse_no_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse_big_no_reverse_no_reverse_no_reverse_no_reverse_no_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse_big_no_reverse_no_reverse_no_reverse_no_reverse_no_reverse_no_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse_big_no_reverse_no_reverse_no_reverse_no_reverse_no_reverse_no_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "<|endoftext|>/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i]\n    }\n  }\n  return newText\n}\n\n/*\n  remove_spaces is a function that takes string and returns string without spaces.\n  >>> remove_spaces('')\n  ''\n  >>> remove_spaces(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_spaces('abcdef')\n  'bcdf'\n  >>> remove_spaces('aaaaa')\n  ''\n  >>> remove_spaces('aaBAA')\n  'B'\n  >>> remove_spaces('zbcd')\n  'zbcd'\n  */\nconst remove_spaces = (text) => {\n  let spaces = text.split(' ')\n  let newText = ''\n  for (let i = 0; i < spaces.length; i++) {\n    if (spaces[i] === 'a' || spaces[i] === 'e' || spaces[i] === 'i' || spaces[i] === 'o' || spaces[i] === 'u') {\n      newText += spaces[i]\n    }\n  }\n  return newText\n}\n\n/*\n  remove_digits is a function that takes string and returns string without digits.\n  >>> remove_digits('')\n  ''\n  >>> remove_digits(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_digits('abcdef')\n  'bcdf'\n  >>> remove_digits('aaaaa')\n  ''\n  >>> remove_digits('aaBAA')\n  'B'\n  >>> remove_digits('zbcd')\n  'zbcd'\n  */\nconst remove_digits = (text) => {\n  let digits = text.split('')\n  let newText = ''\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '0' || digits[i] === '1' || digits[i] === '2' || digits[i] === '3' || digits[i] === '4' || digits[i] === '5' || digits[i] === '6' || digits[i] === '7' || digits[i] === '8' || digits[i] === '9') {\n      newText += digits[i]\n    }\n  }\n  return newText\n}\n\n/*\n  remove_special is a function that takes string and returns string without special characters.\n  >>> remove_special('')\n  ''\n  >>> remove_special(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_special('abcdef')\n  'bcdf'\n  >>> remove_special('aaaaa')\n  ''\n  >>> remove_special('aaBAA')\n  'B'\n  >>> remove_special('zbcd')\n  'zbcd'\n  */\nconst remove_special = (text) => {\n  let specialChars = text.split('')\n  let newText = ''\n  for (let i = 0; i < specialChars.length; i++) {\n    if (specialChars[i] === '!' || specialChars[i] === '@' || specialChars[i] === '#' || specialChars[i] === '$' || specialChars[i] === '%' || specialChars[i] === '^' || specialChars[i] === '&' || specialChars[i] === '*' || specialChars[i] === '(' || specialChars[i] === '-' || specialChars[i] === ')' || specialChars[i] === '_' || specialChars[i] === '+' || specialChars[i] === '{' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] === '?' || specialChars[i] === '|' || specialChars[i] === '}' || specialChars[i] === '~' || specialChars[i] === '<' || specialChars[i] === '>' || specialChars[i] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold([1, 2, 4, 10], 100)\n  true\n  >>> above_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst above_threshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/*Return true if all numbers in the list l are equal to t.\n  >>> equal_to(['a', 'b', 'c', 'd'], 2)\n  true\n  >>> equal_to(['a', 'b', 'c', 'd'], 3)\n  false\n  */\nconst equal_to = (l, t) => {\n  return l.length === t && l.every((n, i) => n === l[i]);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisible(4, 2)\n  true\n  >>> divisible(4, 3)\n  false\n  */\nconst divisible = (l, t) => {\n  return l.every(n => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisible(4, 2)\n  true\n  >>> divisible(4, 3)\n  false\n  */\nconst divisible_or_equal_to = (l, t) => {\n  return l.every(n => n % t === 0 || n === t);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisible(4, 2)\n  true\n  >>> divisible(4, 3)\n  false\n  */\nconst divisible_or_equal_to_or_below_threshold = (l, t) => {\n  return l.every(n => n % t === 0 || n <= t);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisible(4, 2)\n  true\n  >>> divisible(4, 3)\n  false\n  */\nconst divisible_or_below_threshold = (l, t) => {\n  return l.every(n => n % t >= 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisible(4, 2)\n  true\n  >>> divisible(4, 3)\n  false\n  */\nconst divisible_or_above_threshold = (l, t) => {\n  return l.every(n => n % t <= 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisible(4, 2)\n  true\n  >>> divisible(4, 3)\n  false\n  */\nconst divisible_or_below_or_above_threshold = (l, t) => {\n  return l.every(n => n % t >= 0 || n % t <= t);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisible(4, 2)\n  true\n  >>> divisible(4, 3)\n  false\n  */\nconst divisible_or_equal_to_or_below_or_above_threshold = (l, t) => {\n  return l.every(n => n % t >= 0 || n % t <= t || n <= t);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisible(4, 2)\n  true\n  >>> divisible(4, 3)\n  false\n  */\nconst divisible_or_equal_to_or_below_or_above_or_below_threshold = (l, t) => {\n  return l.every(n => n % t >= 0 || n % t <= t || n <= t);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisible(4, 2)\n  true\n  >>> divisible(4, 3)\n  false\n  */\nconst divisible_or_equal_to_or_below_or_above_or_below_or_above_threshold = (l, t) => {\n  return l.every(n => n % t >= 0 || n % t <= t || n % t >= t);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisible(4, 2)\n  true\n  >>> divisible(4, 3)\n  false\n  */\nconst divisible_or_equal_to_or_below_or_above_or_below_or_above_or_below_or_above_threshold = (l, t) => {\n  return l.every(n => n % t >= 0 || n % t <= t || n % t >= t || n <= t);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisible(4, 2)\n  true\n  >>> divisible(4, 3)\n  false\n  */\nconst divisible_or_equal_to_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_threshold = (l, t) => {\n  return l.every(n => n % t >= 0 || n % t <= t || n % t >= t || n % t >= t || n <= t);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisible(4, 2)\n  true\n  >>> divisible(4, 3)\n  false\n  */\nconst divisible_or_equal_to_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_or_above_or_below_", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  3\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst mod = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst power = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powMod = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowMod = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowModPow = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowMod = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowModPowMod = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPow = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowModPowMod = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPow = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowModPowMod = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPow = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowModPowModPow = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowMod = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowModPowModPow = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return powMod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return mod(modPow(x, y), modPow(y, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPow", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same words.\n  >>> same_words('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_words('abcd', 'dddddddabc')\n  true\n  >>> same_words('dddddddabc', 'abcd')\n  true\n  >>> same_words('eabcd', 'dddddddabc')\n  false\n  >>> same_words('abcd', 'dddddddabce')\n  false\n  >>> same_words('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_words = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same letters.\n  >>> same_letters('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_letters('abcd', 'dddddddabc')\n  true\n  >>> same_letters('dddddddabc', 'abcd')\n  true\n  >>> same_letters('eabcd', 'dddddddabc')\n  false\n  >>> same_letters('abcd', 'dddddddabce')\n  false\n  >>> same_letters('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_letters = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same numbers.\n  >>> same_numbers('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_numbers('abcd', 'dddddddabc')\n  true\n  >>> same_numbers('dddddddabc', 'abcd')\n  true\n  >>> same_numbers('eabcd', 'dddddddabc')\n  false\n  >>> same_numbers('abcd', 'dddddddabce')\n  false\n  >>> same_numbers('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_numbers = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same capitalization.\n  >>> same_upper('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_upper('abcd', 'dddddddabc')\n  true\n  >>> same_upper('dddddddabc', 'abcd')\n  true\n  >>> same_upper('eabcd', 'dddddddabc')\n  false\n  >>> same_upper('abcd', 'dddddddabce')\n  false\n  >>> same_upper('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_upper = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same lowercase.\n  >>> same_lowercase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_lowercase('abcd', 'dddddddabc')\n  true\n  >>> same_lowercase('dddddddabc', 'abcd')\n  true\n  >>> same_lowercase('eabcd', 'dddddddabc')\n  false\n  >>> same_lowercase('abcd', 'dddddddabce')\n  false\n  >>> same_lowercase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_lowercase = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same uppercase.\n  >>> same_uppercase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_uppercase('abcd', 'dddddddabc')\n  true\n  >>> same_uppercase('dddddddabc', 'abcd')\n  true\n  >>> same_uppercase('eabcd', 'dddddddabc')\n  false\n  >>> same_uppercase('abcd', 'dddddddabce')\n  false\n  >>> same_uppercase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_uppercase = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same punctuation.\n  >>> same_punctuation('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_punctuation('abcd', 'dddddddabc')\n  true\n  >>> same_punctuation('dddddddabc', 'abcd')\n  true\n  >>> same_punctuation('eabcd', 'dddddddabc')\n  false\n  >>> same_punctuation('abcd', 'dddddddabce')\n  false\n  >>> same_punctuation('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_punctuation = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(100)\n  55\n  >>> fib(1000)\n  5500\n  >>> fib(10000)\n  55005500\n  >>> fib(100000)\n  550055005500\n  >>> fib(1000000)\n  5500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055005500550055", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const opening_brackets = brackets.split(\">\");\n  const closing_brackets = brackets.split(\"<\");\n\n  return opening_brackets.every((opening_bracket) => {\n    return closing_brackets.every((closing_bracket) => {\n      return opening_bracket === closing_bracket;\n    });\n  });\n};\n\n/**\n * Determines if a string is valid JSON\n *\n * Valid JSON strings are valid JavaScript objects or arrays. JSON strings\n * may contain only whitespace characters, colons, commas, and semicolons.\n * Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other characters are considered invalid.\n *\n * Valid JSON strings may contain only Unicode characters, decimal digits,\n * and Unicode escapes. Any other ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let l = l.reverse();\n  while (l[j] < l[i]) {\n    j++;\n  }\n  while (l[j] > l[i]) {\n    i--;\n  }\n  while (l[j] === l[i] && j < i) {\n    j++;\n  }\n  while (l[j] === l[i] && j > i) {\n    i--;\n  }\n  while (l[j] === l[i] && j > 0 && i < j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    j++;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l[j] === l[i] && j < 0 && i < j) {\n    i--;\n  }\n  while (l[j] === l[i] && j < 0 && i > j) {\n    j--;\n  }\n  while (l", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique elements for two sorted lists.\n  >>> unique([1, 2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, 7])\n  [2, 3, 5, 6, 7]\n  >>> unique([2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([2, 3, 4, 5], [2, 3, 5, 6, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  let i = 2;\n  let prime_factor = 1;\n  while (n % i!== 0) {\n    if (n % i === 0) prime_factor = i;\n    i++;\n  }\n  return prime_factor;\n};\n\n/*\n  Given a number n, return the number of trailing zeroes in n.\n  >>> trailing_zeros(123)\n  2\n  >>> trailing_zeros(12309)\n  0\n  >>> trailing_zeros(12309)\n  1\n  >>> trailing_zeros(12309)\n  2\n  >>> trailing_zeros(12309)\n  3\n  >>> trailing_zeros(12309)\n  4\n  >>> trailing_zeros(12309)\n  5\n  >>> trailing_zeros(12309)\n  6\n  >>> trailing_zeros(12309)\n  7\n  >>> trailing_zeros(12309)\n  8\n  >>> trailing_zeros(12309)\n  9\n  >>> trailing_zeros(12309)\n  10\n  >>> trailing_zeros(12309)\n  11\n  >>> trailing_zeros(12309)\n  12\n  >>> trailing_zeros(12309)\n  13\n  >>> trailing_zeros(12309)\n  14\n  >>> trailing_zeros(12309)\n  15\n  >>> trailing_zeros(12309)\n  16\n  >>> trailing_zeros(12309)\n  17\n  >>> trailing_zeros(12309)\n  18\n  >>> trailing_zeros(12309)\n  19\n  >>> trailing_zeros(12309)\n  20\n  >>> trailing_zeros(12309)\n  21\n  >>> trailing_zeros(12309)\n  22\n  >>> trailing_zeros(12309)\n  23\n  >>> trailing_zeros(12309)\n  24\n  >>> trailing_zeros(12309)\n  25\n  >>> trailing_zeros(12309)\n  26\n  >>> trailing_zeros(12309)\n  27\n  >>> trailing_zeros(12309)\n  28\n  >>> trailing_zeros(12309)\n  29\n  >>> trailing_zeros(12309)\n  30\n  >>> trailing_zeros(12309)\n  31\n  >>> trailing_zeros(12309)\n  32\n  >>> trailing_zeros(12309)\n  33\n  >>> trailing_zeros(12309)\n  34\n  >>> trailing_zeros(12309)\n  35\n  >>> trailing_zeros(12309)\n  36\n  >>> trailing_zeros(12309)\n  37\n  >>> trailing_zeros(12309)\n  38\n  >>> trailing_zeros(12309)\n  39\n  >>> trailing_zeros(12309)\n  40\n  >>> trailing_zeros(12309)\n  41\n  >>> trailing_zeros(12309)\n  42\n  >>> trailing_zeros(12309)\n  43\n  >>> trailing_zeros(12309)\n  44\n  >>> trailing_zeros(12309)\n  45\n  >>> trailing_zeros(12309)\n  46\n  >>> trailing_zeros(12309)\n  47\n  >>> trailing_zeros(12309)\n  48\n  >>> trailing_zeros(12309)\n  49\n  >>> trailing_zeros(12309)\n  50\n  >>> trailing_zeros(12309)\n  51\n  >>> trailing_zeros(12309)\n  52\n  >>> trailing_zeros(12309)\n  53\n  >>> trailing_zeros(12309)\n  54\n  >>> trailing_zeros(12309)\n  55\n  >>> trailing_zeros(12309)\n  56\n  >>> trailing_zeros(12309)\n  57\n  >>> trailing_zeros(12309)\n  58\n  >>> trailing_zeros(12309)\n  59\n  >>> trailing_zeros(12309)\n  60\n  >>> trailing_zeros(12309)\n  61\n  >>> trailing_zeros(12309)\n  62\n  >>> trailing_zeros(12309)\n  63\n  >>> trailing_zeros(12309)\n  64\n  >>> trailing_zeros(12309)\n  65\n  >>> trailing_zeros(12309)\n  66\n  >>> trailing_zeros(12309)\n  67\n  >>> trailing_zeros(12309)\n  68\n  >>> trailing_zeros(12309)\n  69\n  >>> trailing_zeros(12309)\n  70\n  >>> trailing_zeros(12309)\n  71\n  >>> trailing_zeros(12309)\n  72\n  >>> trailing_zeros(12309)\n  73\n  >>> trailing_zeros(12309)\n  74\n  >>> trailing_zeros(12309)\n  75\n  >>> trailing_zeros(12309)\n  76\n  >>> trailing_zeros(12309)\n  77\n  >>> trailing_zeros(12309)\n  78\n  >>> trailing_zeros(12309)\n  79\n  >>> trailing_zeros(12309)\n  80\n  >>> trailing_zeros(12309)\n  81\n  >>> trailing_zeros(12309)\n  82\n  >>> trailing_zeros(12309)\n  83\n  >>> trailing_zeros(12309)\n  84\n  >>> trailing_zeros(12309)\n  85\n  >>> trailing_zeros(12309)\n  86\n  >>> trailing_zeros(12309)\n  87\n  >>> trailing_zeros(12309)\n  88\n  >>> trailing_zeros(12309)\n  89\n  >>> trailing_zeros(12309)\n  90\n  >>> trailing_zeros(12309)\n  91\n  >>> trailing_zeros(12309)\n  92\n  >>> trailing_zeros(12309)\n  93\n  >>> trailing_zeros(12309)\n  94\n  >>> trailing_zeros(12309)\n  95\n  >>> trailing_zeros(12309)\n  96\n  >>> trailing_zeros(12309)\n  97\n  >>> trailing_zeros(12309)\n  98\n  >>> trailing_zeros(12309)\n  99\n  >>> trailing_zeros(12309)\n 10\n  >>> trailing_zeros(12309)\n 11\n  >>> trailing_zeros(12309)\n 12\n  >>> trailing_zeros(12309)\n 13\n  >>> trailing_zeros(12309)\n 14\n  >>> trailing_zeros(12309)\n 15\n  >>> trailing_zeros(12309)\n 16\n  >>> trailing_zeros(12309)\n 17\n  >>> trailing_zeros(12309)\n 18\n  >>> trailing_zeros(12309)\n 19\n  >>> trailing_zeros(12309)\n 20\n  >>> trailing_zeros(12309)\n 21\n  >>> trailing_zeros(12309)\n 22\n  >>> trailing_zeros(12309)\n 23\n  >>> trailing_zeros(12309)\n 24\n  >>> trailing_zeros(12309)\n 25\n  >>> trailing_zeros(12309)\n 26\n  >>> trailing_zeros(12309)\n 27\n  >>> trailing_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_count = 0;\n  const paren_stack_remaining = 0;\n  const paren_stack_remaining_size = 0;\n  const paren_stack_remaining_count = 0;\n  const paren_stack_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren_stack_remaining_remaining_remaining = 0;\n  const paren_stack_remaining_remaining_remaining_size = 0;\n  const paren_stack_remaining_remaining_remaining_count = 0;\n  const paren", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "<|endoftext|>/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of the squares of the numbers from 1 to n.\n * It uses recursion.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with 1 and multiplying by itself until we reach n.\n * It then returns the sum of the squares of the ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const opening_brackets = brackets.split('(');\n  const closing_brackets = brackets.split(')');\n  return opening_brackets.every((opening_bracket) => {\n    const closing_bracket = closing_brackets.find((closing_bracket) => {\n      return closing_bracket === opening_bracket;\n    });\n    return closing_bracket!== undefined;\n  });\n};\n\n/**\n * Given a string, return true if the string contains only letters.\n *\n * >>> is_letters(\"abc\")\n * true\n * >>> is_letters(\"abc def\")\n * false\n */\nconst is_letters = (str) => {\n  return /[a-z]/.test(str);\n};\n\n/**\n * Given a string, return true if the string contains only numbers.\n *\n * >>> is_numbers(\"abc\")\n * true\n * >>> is_numbers(\"abc def\")\n * false\n */\nconst is_numbers = (str) => {\n  return /\\d/.test(str);\n};\n\n/**\n * Given a string, return true if the string contains only letters and numbers.\n *\n * >>> is_letters_and_numbers(\"abc\")\n * true\n * >>> is_letters_and_numbers(\"abc def\")\n * false\n */\nconst is_letters_and_numbers = (str) => {\n  return is_letters(str) && is_numbers(str);\n};\n\n/**\n * Given a string, return true if the string contains only letters and numbers.\n *\n * >>> is_letters_and_numbers_and_punctuation(\"abc\")\n * true\n * >>> is_letters_and_numbers_and_punctuation(\"abc def\")\n * false\n */\nconst is_letters_and_numbers_and_punctuation = (str) => {\n  return is_letters_and_numbers(str) && is_punctuation(str);\n};\n\n/**\n * Given a string, return true if the string contains only letters and numbers.\n *\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation(\"abc\")\n * true\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation(\"abc def\")\n * false\n */\nconst is_letters_and_numbers_and_punctuation_and_punctuation = (str) => {\n  return is_letters_and_numbers_and_punctuation(str) && is_punctuation(str);\n};\n\n/**\n * Given a string, return true if the string contains only letters and numbers.\n *\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation(\"abc\")\n * true\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation(\"abc def\")\n * false\n */\nconst is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation = (str) => {\n  return is_letters_and_numbers_and_punctuation_and_punctuation(str) && is_punctuation(str);\n};\n\n/**\n * Given a string, return true if the string contains only letters and numbers.\n *\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation(\"abc\")\n * true\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation(\"abc def\")\n * false\n */\nconst is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation = (str) => {\n  return is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation(str) && is_punctuation(str);\n};\n\n/**\n * Given a string, return true if the string contains only letters and numbers.\n *\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(\"abc\")\n * true\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(\"abc def\")\n * false\n */\nconst is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation = (str) => {\n  return is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation(str) && is_punctuation(str);\n};\n\n/**\n * Given a string, return true if the string contains only letters and numbers.\n *\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(\"abc\")\n * true\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(\"abc def\")\n * false\n */\nconst is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation = (str) => {\n  return is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(str) && is_punctuation(str);\n};\n\n/**\n * Given a string, return true if the string contains only letters and numbers.\n *\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(\"abc\")\n * true\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(\"abc def\")\n * false\n */\nconst is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation = (str) => {\n  return is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(str) && is_punctuation(str);\n};\n\n/**\n * Given a string, return true if the string contains only letters and numbers.\n *\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(\"abc\")\n * true\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(\"abc def\")\n * false\n */\nconst is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation = (str) => {\n  return is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(str) && is_punctuation(str);\n};\n\n/**\n * Given a string, return true if the string contains only letters and numbers.\n *\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(\"abc\")\n * true\n * >>> is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(\"abc def\")\n * false\n */\nconst is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation = (str) => {\n  return is_letters_and_numbers_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation_and_punctuation(str) && is_punctuation(str);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let result = []\n  let sum = 0\n  while (i < n) {\n    sum += xs[i]\n    result.push(sum)\n    i++\n  }\n  while (j < n) {\n    sum += xs[j]\n    result.push(sum)\n    j++\n  }\n  while (k < n) {\n    sum += xs[k]\n    result.push(sum)\n    k++\n  }\n  return result\n}\n\n/**\n * Returns true if the given point is inside the polygon.\n * Polygon is defined by the list of points [[x1, y1], [x2, y2],..., [xn, yn]]\n * and their corresponding winding order.\n * If winding order is clockwise, return false if point is outside.\n * If winding order is counter-clockwise, return true if point is inside.\n * If polygon is empty, return false.\n * If polygon is non-convex, return false.\n * If polygon is self-intersecting, return false.\n */\nconst isPointInPolygon = (polygon, point) => {\n  const n = polygon.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let inside = false\n  let pointInPolygon = false\n  let pointInPolygonWindingOrder = 0\n  let pointInPolygonX = 0\n  let pointInPolygonY = 0\n  let pointInPolygonXn = 0\n  let pointInPolygonYn = 0\n  let pointInPolygonXnX = 0\n  let pointInPolygonYnY = 0\n  let pointInPolygonXnYn = 0\n  let pointInPolygonYnYn = 0\n  let pointInPolygonXnYnX2 = 0\n  let pointInPolygonYnYnX2 = 0\n  let pointInPolygonXnYnX2n = 0\n  let pointInPolygonYnYnX2n = 0\n  let pointInPolygonXnYnX2nY = 0\n  let pointInPolygonYnYnX2nY = 0\n  let pointInPolygonXnYnX2nYn = 0\n  let pointInPolygonYnYnX2nYn = 0\n  let pointInPolygonXnYnX2nYnYn = 0\n  let pointInPolygonYnYnX2nYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnYnX2nYnYnYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonXnYnX2nYnYnYnYnYnYnYnYnYnYnYn = 0\n  let pointInPolygonYnY", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    fibfib = fibfib + fibfib;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose nth term is less than or equal to n.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  34\n  */\nconst fibfibLessThan = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    if (fibfib < i) {\n      fibfib = fibfib + fibfib;\n    }\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose nth term is greater than n.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  34\n  */\nconst fibfibGreaterThan = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    if (fibfib > i) {\n      fibfib = fibfib + fibfib;\n    }\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose nth term is equal to n.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  34\n  */\nconst fibfibEqual = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    if (fibfib === i) {\n      fibfib = fibfib + fibfib;\n    }\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose nth term is greater than or equal to n.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  34\n  */\nconst fibfibGreaterThanOrEqual = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    if (fibfib >= i) {\n      fibfib = fibfib + fibfib;\n    }\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose nth term is less than or equal to n.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  34\n  */\nconst fibfibLessThanOrEqual = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    if (fibfib < i) {\n      fibfib = fibfib + fibfib;\n    }\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose nth term is equal to n.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  34\n  */\nconst fibfibEqualOrEqual = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    if (fibfib === i) {\n      fibfib = fibfib + fibfib;\n    }\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose nth term is greater than or equal to n.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  34\n  */\nconst fibfibGreaterThanOrEqual = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    if (fibfib >= i) {\n      fibfib = fibfib + fibfib;\n    }\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose nth term is less than or equal to n.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  34\n  */\nconst fibfibLessThanOrEqual = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    if (fibfib < i) {\n      fibfib = fibfib + fibfib;\n    }\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose nth term is equal to n.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  34\n  */\nconst fibfibEqualOrEqual = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    if (fibfib === i) {\n      fibfib = fibfib + fibfib;\n    }\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose nth term is greater than or equal to n.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  34\n  */\nconst fibfibGreaterThanOrEqual = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    if (fibfib >= i) {\n      fibfib = fibfib + fibfib;\n    }\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose nth term is equal to n.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  34\n  */\nconst fibfibLessThanOrEqual = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    if (fibfib < i) {\n      fibfib = fibfib + fibfib;\n    }\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose nth term is equal to n.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  34\n  */\nconst fibfibEqualOrEqual = (n) => {\n  let fibfib = 0;\n  for (let i = 1; i <= n; i++) {\n    if (fibfib === i) {\n      fibfib = fibfib + fibfib;\n    }\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose nth term is equal to n.\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "<|endoftext|>/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_2 = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_3 = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_4 = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_5 = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_6 = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_7 = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_8 = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_9 = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_10 = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_11 = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += shift) {\n    res.push(str.substring(i, i + shift));\n  }\n  return res.reverse().join(\"\");\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reverse(\"12\")\n  \"321\"\n  >>> reverse(\"321\")\n  \"122\"\n  */\nconst reverse = (x) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return res.reverse().join(\"\");\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reverse(\"12\")\n  \"321\"\n  >>> reverse(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, return the string with all the digits reversed.\n  >>> reversed(\"12\")\n  \"321\"\n  >>> reversed(\"321\")\n  \"122\"\n  */\nconst reversed = (x, reverse) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = [];\n  for (let i = 0; i < len; i += 1) {\n    res.push(str.charAt(len - i - 1));\n  }\n  return reverse? res.reverse() : res;\n};\n\n/*\n  Given a string, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of occurrences of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      count_upper(\"\") => 0\n      count_upper(\"abAB\") => 1\n      count_upper(\"abcCd\") => 2\n      count_upper(\"helloE\") => 1\n      count_upper(\"woArBld\") => 1\n      count_upper(\"aAaaaXa\") => 1\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of occurrences of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      count_lower(\"\") => 0\n      count_lower(\"abAB\") => 1\n      count_lower(\"abcCd\") => 2\n      count_lower(\"helloE\") => 1\n      count_lower(\"woArBld\") => 1\n      count_lower(\"aAaaaXa\") => 1\n  */\nconst count_lower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of occurrences of the digits only'\n  ASCII codes.\n\n  Examples:\n      count_digit(\"\") => 0\n      count_digit(\"abAB\") => 1\n      count_digit(\"abcCd\") => 2\n      count_digit(\"helloE\") => 1\n      count_digit(\"woArBld\") => 1\n      count_digit(\"aAaaaXa\") => 1\n  */\nconst count_digit = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of occurrences of the special characters only'\n  ASCII codes.\n\n  Examples:\n      count_special(\"\") => 0\n      count_special(\"abAB\") => 1\n      count_special(\"abcCd\") => 2\n      count_special(\"helloE\") => 1\n      count_special(\"woArBld\") => 1\n      count_special(\"aAaaaXa\") => 1\n  */\nconst count_special = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count++;\n    }\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of occurrences of the special characters only'\n  ASCII codes.\n\n  Examples:\n      count_special_chars(\"\") => 0\n      count_special_chars(\"abAB\") => 1\n      count_special_chars(\"abcCd\") => 2\n      count_special_chars(\"helloE\") => 1\n      count_special_chars(\"woArBld\") => 1\n      count_special_chars(\"aAaaaXa\") => 1\n  */\nconst count_special_chars = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count++;\n    }\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of occurrences of the special characters only'\n  ASCII codes.\n\n  Examples:\n      count_special_chars(\"\") => 0\n      count_special_chars(\"abAB\") => 1\n      count_special_chars(\"abcCd\") => 2\n      count_special_chars(\"helloE\") => 1\n      count_special_chars(\"woArBld\") => 1\n      count_special_chars(\"aAaaaXa\") => 1\n  */\nconst count_special_chars_upper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count++;\n    }\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of occurrences of the special characters only'\n  ASCII codes.\n\n  Examples:\n      count_special_chars_upper(\"\") => 0\n      count_special_chars_upper(\"abAB\") => 1\n      count_special_chars_upper(\"abcCd\") => 2\n      count_special_chars_upper(\"helloE\") => 1\n      count_special_chars_upper(\"woArBld\") => 1\n      count_special_chars_upper(\"aAaaaXa\") => 1\n  */\nconst count_special_chars_lower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of occurrences of the special characters only'\n  ASCII codes.\n\n  Examples:\n      count_special_chars_upper(\"\") => 0\n      count_special_chars_upper(\"abAB\") => 1\n      count_special_chars_upper(\"abcCd\") => 2\n      count_special_chars_upper(\"helloE\") => 1\n      count_special_chars_upper(\"woArBld\") => 1\n      count_special_chars_upper(\"aAaaaXa\") => 1\n  */\nconst count_special_chars_digit = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      count++;\n    }\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count++;\n    }\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of occurrences of the special characters only'\n  ASCII codes.\n\n  Examples:\n      count_special_chars_upper(\"\") => 0\n      count_special_chars_upper(\"abAB\") => 1\n      count_special_chars_upper(\"abcCd\") => 2\n      count_special_chars_upper(\"helloE\") => 1\n      count_special_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(' ');\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes('a')) {\n      apples++;\n    } else if (fruits[i].includes('o')) {\n      oranges++;\n    } else {\n      mango++;\n    }\n  }\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes('a')) {\n      total++;\n    } else if (fruits[i].includes('o')) {\n      total++;\n    } else if (fruits[i].includes('m')) {\n      total++;\n    }\n  }\n  return total - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(' ');\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes('a')) {\n      apples++;\n    } else if (fruits[i].includes('o')) {\n      oranges++;\n    } else if (fruits[i].includes('m')) {\n      mango++;\n    }\n  }\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes('a')) {\n      total++;\n    } else if (fruits[i].includes('o')) {\n      total++;\n    } else if (fruits[i].includes('m')) {\n      total++;\n    }\n  }\n  return total - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(' ');\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes('a')) {\n      apples++;\n    } else if (fruits[i].includes('o')) {\n      oranges++;\n    } else if (fruits[i].includes('m')) {\n      mango++;\n    }\n  }\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes('a')) {\n      total++;\n    } else if (fruits[i].includes('o')) {\n      total++;\n    } else if (fruits[i].includes('m')) {\n      total++;\n    }\n  }\n  return total - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(' ');\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes('a')) {\n      apples++;\n    } else if (fruits[i].includes('o')) {\n      oranges++;\n    } else if (fruits[i].includes('m')) {\n      mango++;\n    }\n  }\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes('a')) {\n      total++;\n    } else if (fruits[i].includes('o')) {\n      total++;\n    } else if (fruits[i].includes('m')) {\n      total++;\n    }\n  }\n  return total - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(' ');\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes('a')) {\n      apples++;\n    } else if (fruits[i].includes('o')) {\n      oranges++;\n    } else if (fruits[i].includes('m')) {\n      mango++;\n    }\n  }\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes('a')) {\n      total++;\n    } else if (fruits[i].includes('o", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < len) {\n    if (arr[j] % 2 === 0) {\n      result.push(arr[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-least-common-multiple-ii/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLCM = function (nums) {\n  let numsLen = nums.length;\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  while (i < numsLen) {\n    if (nums[i] % 2 === 0) {\n      result += nums[i];\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < numsLen) {\n    if (nums[j] % 2 === 0) {\n      result += nums[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-least-common-multiple-iii/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLCMIII = function (nums) {\n  let numsLen = nums.length;\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  while (i < numsLen) {\n    if (nums[i] % 2 === 0) {\n      result += nums[i];\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < numsLen) {\n    if (nums[j] % 2 === 0) {\n      result += nums[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-least-common-multiple-iiii/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLCMIIII = function (nums) {\n  let numsLen = nums.length;\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  while (i < numsLen) {\n    if (nums[i] % 2 === 0) {\n      result += nums[i];\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < numsLen) {\n    if (nums[j] % 2 === 0) {\n      result += nums[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-least-common-multiple-iiiii/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLCMIIIII = function (nums) {\n  let numsLen = nums.length;\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  while (i < numsLen) {\n    if (nums[i] % 2 === 0) {\n      result += nums[i];\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < numsLen) {\n    if (nums[j] % 2 === 0) {\n      result += nums[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-least-common-multiple-iiiiii/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLCMIIIIII = function (nums) {\n  let numsLen = nums.length;\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  while (i < numsLen) {\n    if (nums[i] % 2 === 0) {\n      result += nums[i];\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < numsLen) {\n    if (nums[j] % 2 === 0) {\n      result += nums[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-least-common-multiple-iiiiiiii/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLCMIIIIIIII = function (nums) {\n  let numsLen = nums.length;\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  while (i < numsLen) {\n    if (nums[i] % 2 === 0) {\n      result += nums[i];\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < numsLen) {\n    if (nums[j] % 2 === 0) {\n      result += nums[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-least-common-multiple-iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = lst[0];\n  let freq = 1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = search;\n\n},{}],3:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the number of distinct positive integers that\n  are in the list.\n  The distinct positive integers are those that appear only once in the list.\n  If no such integers exist, return 0.\n  Examples:\n      distinct([]) == 0\n      distinct([1]) == 1\n      distinct([1, 2, 3, 4, 5]) == 3\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 5\n      distinct([1, 2, 3, 4, 5]) == 6\n      distinct([1, 2, 3, 4, 5]) == 7\n      distinct([1, 2, 3, 4, 5]) == 8\n      distinct([1, 2, 3, 4, 5]) == 9\n      distinct([1, 2, 3, 4, 5]) == 10\n      distinct([1, 2, 3, 4, 5]) == 11\n      distinct([1, 2, 3, 4, 5]) == 12\n      distinct([1, 2, 3, 4, 5]) == 13\n      distinct([1, 2, 3, 4, 5]) == 14\n      distinct([1, 2, 3, 4, 5]) == 15\n      distinct([1, 2, 3, 4, 5]) == 16\n      distinct([1, 2, 3, 4, 5]) == 17\n      distinct([1, 2, 3, 4, 5]) == 18\n      distinct([1, 2, 3, 4, 5]) == 19\n      distinct([1, 2, 3, 4, 5]) == 20\n      distinct([1, 2, 3, 4, 5]) == 21\n      distinct([1, 2, 3, 4, 5]) == 22\n      distinct([1, 2, 3, 4, 5]) == 23\n      distinct([1, 2, 3, 4, 5]) == 24\n      distinct([1, 2, 3, 4, 5]) == 25\n      distinct([1, 2, 3, 4, 5]) == 26\n      distinct([1, 2, 3, 4, 5]) == 27\n      distinct([1, 2, 3, 4, 5]) == 28\n      distinct([1, 2, 3, 4, 5]) == 29\n      distinct([1, 2, 3, 4, 5]) == 30\n      distinct([1, 2, 3, 4, 5]) == 31\n      distinct([1, 2, 3, 4, 5]) == 32\n      distinct([1, 2, 3, 4, 5]) == 33\n      distinct([1, 2, 3, 4, 5]) == 34\n      distinct([1, 2, 3, 4, 5]) == 35\n      distinct([1, 2, 3, 4, 5]) == 36\n      distinct([1, 2, 3, 4, 5]) == 37\n      distinct([1, 2, 3, 4, 5]) == 38\n      distinct([1, 2, 3, 4, 5]) == 39\n      distinct([1, 2, 3, 4, 5]) == 40\n      distinct([1, 2, 3, 4, 5]) == 41\n      distinct([1, 2, 3, 4, 5]) == 42\n      distinct([1, 2, 3, 4, 5]) == 43\n      distinct([1, 2, 3, 4, 5]) == 44\n      distinct([1, 2, 3, 4, 5]) == 45\n      distinct([1, 2, 3, 4, 5]) == 46\n      distinct([1, 2, 3, 4, 5]) == 47\n      distinct([1, 2, 3, 4, 5]) == 48\n      distinct([1, 2, 3, 4, 5]) == 49\n      distinct([1, 2, 3, 4, 5]) == 50\n      distinct([1, 2, 3, 4, 5]) == 51\n      distinct([1, 2, 3, 4, 5]) == 52\n      distinct([1, 2, 3, 4, 5]) == 53\n      distinct([1, 2, 3, 4, 5]) == 54\n      distinct([1, 2, 3, 4, 5]) == 55\n      distinct([1, 2, 3, 4, 5]) == 56\n      distinct([1, 2, 3, 4, 5]) == 57\n      distinct([1, 2, 3, 4, 5]) == 58\n      distinct([1, 2, 3, 4, 5]) == 59\n      distinct([1, 2, 3, 4, 5]) == 60\n      distinct([1, 2, 3, 4, 5]) == 61\n      distinct([1, 2, 3, 4, 5]) == 62\n      distinct([1, 2, 3, 4, 5]) == 63\n      distinct([1, 2, 3, 4, 5]) == 64\n      distinct([1, 2, 3, 4, 5]) == 65\n      distinct([1, 2, 3, 4, 5]) == 66\n      distinct([1, 2, 3, 4, 5]) == 67\n      distinct([1, 2, 3, 4, 5]) == 68\n      distinct([1, 2, 3, 4, 5]) == 69\n      distinct([1, 2, 3, 4, 5]) == 70\n      distinct([1, 2, 3, 4, 5]) == 71\n      distinct([1, 2, 3, 4, 5]) == 72\n      distinct([1, 2, 3, 4, 5]) == 73\n      distinct([1, 2, 3, 4, 5]) == 74\n      distinct([1, 2, 3, 4, 5]) == 75\n      distinct([1, 2, 3, 4, 5]) == 76\n      distinct([1, 2, 3, 4, 5]) == 77\n      distinct([1, 2, 3, 4, 5]) == 78\n      distinct([1, 2, 3, 4, 5]) == 79\n      distinct([1, 2, 3, 4, 5]) == 80\n      distinct([1, 2, 3, 4, 5]) == 81\n      distinct([1, 2, 3, 4, 5]) == 82\n      distinct([1, 2, 3, 4, 5]) == 83\n      distinct([1, 2, 3, 4, 5]) == 84\n      distinct([1, 2, 3, 4, 5]) == 85\n      distinct([1, 2, 3, 4, 5]) == 86\n      distinct([1, 2, 3, 4, 5]) == 87\n      distinct([1, 2, 3, 4, 5]) == 88\n      distinct([1, 2, 3, 4, 5]) == 89\n      distinct([1, 2, 3, 4, 5]) == 90\n      distinct([1, 2, 3, 4, 5]) == 91\n      distinct([1, 2, 3, 4, 5]) == 92\n      distinct([1, 2, 3, 4, 5]) == 93\n      distinct([1, 2, 3, 4, 5]) == 94\n      distinct([1, 2, 3, 4, 5]) == 95\n      distinct([1, 2, 3, 4, 5]) == 96\n      distinct([1, 2, 3, 4, 5]) == 97\n      distinct([1, 2, 3, 4, 5]) == 98\n      distinct([1, 2, 3, 4, 5]) == 99\n      distinct([1, 2, 3, 4, 5]) == 100\n      distinct([1, 2, 3, 4, 5]) == 101\n      distinct([1, 2, 3, 4, 5]) == 102\n      distinct([1, 2, 3, 4, 5]) == 103\n      distinct([1, 2, 3, 4, 5]) == 104\n      distinct([1, 2, 3, 4, 5]) == 105\n      distinct([1, 2, 3, 4, 5]) == 106\n      distinct([1, 2, 3, 4, 5]) == 107\n      distinct([1, 2, 3, 4, 5]) == 108\n      distinct([1, 2, 3, 4, 5]) == 109\n      distinct([1, 2, 3, 4, 5]) == 110\n      distinct([1, 2, 3, 4, 5]) == 111\n      distinct([1, 2, 3, 4, 5]) == 112\n      distinct([1, 2, 3, 4, 5]) == 113\n      distinct([1, 2, 3, 4, 5]) == 114\n      distinct([1, 2, 3, 4, 5]) == 115\n      distinct([1, 2, 3, 4, 5]) == 116\n      distinct([1, 2, 3, 4, 5]) == 117\n      distinct([1, 2, 3, 4, 5]) == 118\n      distinct([1, 2, 3, 4, 5]) == 119\n      distinct([1, 2, 3, 4, 5]) == 120\n      distinct([1, 2, 3, 4, 5]) == 121\n      distinct([1, 2, 3, 4, 5]) == 122\n      distinct([1, 2, 3, 4, 5]) == 123\n      distinct([1, 2, 3, 4, 5]) == 124\n      distinct([1, 2, 3, 4, 5]) == 125\n      distinct([1, 2, 3, 4, 5]) == 126\n      distinct([1, 2, 3, 4, 5]) == 127\n      distinct([1, 2, 3, 4, 5]) == 128\n      distinct([1, 2, 3, 4, 5]) == 129\n      distinct([1, 2, 3, 4, 5]) == 130\n      distinct([1, 2, 3, 4, 5]) == 131\n      distinct([1, 2, 3, 4, 5]) == 132\n      distinct([1, 2, 3, 4, 5]) == 133\n      distinct([1, 2, 3, 4, 5]) == 134\n      distinct([1, 2, 3, 4, 5]) == 135\n      distinct([1, 2, 3, 4, 5]) == 136\n      distinct([1, 2, 3, 4, 5]) == 137\n      distinct([1, 2, 3, 4, 5]) == 138\n      distinct([1, 2, 3, 4, 5]) == 139\n      distinct([1, 2, 3, 4, 5]) == 140\n      distinct([1, 2, 3, 4, 5]) == 141\n      distinct([1, 2, 3, 4, 5]) == 142\n      distinct([1, 2, 3, 4, 5]) == 143\n      distinct([1, 2, 3, 4, 5]) == 144\n      distinct([1, 2, 3, 4, 5]) == 145\n      distinct([1, 2, 3, 4, 5]) == 146\n      distinct([1, 2, 3, 4, 5]) == 147\n      distinct([1, 2, 3, 4, 5]) == 148\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_substring_insensitive = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring, 0) === 0);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filter_by_substring_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_substring_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring, 0) === 0);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filter_by_substring_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_substring_insensitive_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring, 0) === 0);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filter_by_substring_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_substring_insensitive_insensitive_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring, 0) === 0);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring, 0) === 0);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring, 0) === 0);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring, 0) === 0);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring, 0) === 0);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  let sorted = lst.sort((a, b) => a - b);\n  let res = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] > sorted[i + 1]) {\n      res.push(sorted[i]);\n      sorted.splice(i, 1);\n      i--;\n    }\n  }\n  return res;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list = (lst) => {\n  let sorted = lst.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reverse_asc = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reverse_ascending = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reverse_ascending_reverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reverse_ascending_reverse_asc = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reverse_ascending_reverse_ascending = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reverse_ascending_reverse_ascending_reverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reverse_ascending_reverse_ascending_reverse_ascending = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reverse_ascending_reverse_ascending_reverse_ascending_reverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reverse_ascending_reverse_ascending_reverse_ascending_reverse_ascending_reverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reverse_ascending_reverse_ascending_reverse_ascending_reverse_ascending_reverse_ascending = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reverse_ascending_reverse_ascending_reverse_ascending_reverse_ascending_reverse_ascending_reverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 3, 4, 2]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  if (sumA > sumB || sumA > sumC) {\n    return -1;\n  }\n  return sumA > sumB? sumA - sumB : sumA - sumC;\n};\n\n/*\n  Given the lengths of the two sides of a rectangle. Return the area of\n  the rectangle rounded to 2 decimal points if the two sides form a valid rectangle.\n  Otherwise return -1\n  Two sides make a valid rectangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  rectangle_area(3, 4, 5) == 10.00\n  rectangle_area(1, 2, 10) == -1\n  */\nconst rectangle_area = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  if (sumA > sumB) {\n    return -1;\n  }\n  return sumA > sumB? sumA - sumB : sumA - sumC;\n};\n\n/*\n  Given the lengths of the two sides of a circle. Return the area of\n  the circle rounded to 2 decimal points if the two sides form a valid circle.\n  Otherwise return -1\n  Two sides make a valid circle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  circle_area(3, 4, 5) == 10.00\n  circle_area(1, 2, 10) == -1\n  */\nconst circle_area = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  if (sumA > sumB) {\n    return -1;\n  }\n  return sumA > sumB? sumA - sumB : sumA - sumC;\n};\n\n/*\n  Given the lengths of the two sides of a square. Return the area of\n  the square rounded to 2 decimal points if the two sides form a valid square.\n  Otherwise return -1\n  Two sides make a valid square when the sum of any two sides is greater\n  than the third side.\n  Example:\n  square_area(3, 4, 5) == 10.00\n  square_area(1, 2, 10) == -1\n  */\nconst square_area = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  if (sumA > sumB) {\n    return -1;\n  }\n  return sumA > sumB? sumA - sumB : sumA - sumC;\n};\n\n/*\n  Given the lengths of the two sides of a pentagon. Return the area of\n  the pentagon rounded to 2 decimal points if the two sides form a valid pentagon.\n  Otherwise return -1\n  Two sides make a valid pentagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  pentagon_area(3, 4, 5) == 10.00\n  pentagon_area(1, 2, 10) == -1\n  */\nconst pentagon_area = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  if (sumA > sumB) {\n    return -1;\n  }\n  return sumA > sumB? sumA - sumB : sumA - sumC;\n};\n\n/*\n  Given the lengths of the two sides of a hexagon. Return the area of\n  the hexagon rounded to 2 decimal points if the two sides form a valid hexagon.\n  Otherwise return -1\n  Two sides make a valid hexagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  hexagon_area(3, 4, 5) == 10.00\n  hexagon_area(1, 2, 10) == -1\n  */\nconst hexagon_area = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  if (sumA > sumB) {\n    return -1;\n  }\n  return sumA > sumB? sumA - sumB : sumA - sumC;\n};\n\n/*\n  Given the lengths of the two sides of a heptagon. Return the area of\n  the heptagon rounded to 2 decimal points if the two sides form a valid heptagon.\n  Otherwise return -1\n  Two sides make a valid heptagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  heptagon_area(3, 4, 5) == 10.00\n  heptagon_area(1, 2, 10) == -1\n  */\nconst heptagon_area = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  if (sumA > sumB) {\n    return -1;\n  }\n  return sumA > sumB? sumA - sumB : sumA - sumC;\n};\n\n/*\n  Given the lengths of the two sides of a decagon. Return the area of\n  the decagon rounded to 2 decimal points if the two sides form a valid decagon.\n  Otherwise return -1\n  Two sides make a valid decagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  decagon_area(3, 4, 5) == 10.00\n  decagon_area(1, 2, 10) == -1\n  */\nconst decagon_area = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  if (sumA > sumB) {\n    return -1;\n  }\n  return sumA > sumB? sumA - sumB : sumA - sumC;\n};\n\n/*\n  Given the lengths of the two sides of a trigon. Return the area of\n  the trigon rounded to 2 decimal points if the two sides form a valid trigon.\n  Otherwise return -1\n  Two sides make a valid trigon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trigon(3, 4, 5) == 10.00\n  trigon(1, 2, 10) == -1\n  */\nconst trigon = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  if (sumA > sumB) {\n    return -1;\n  }\n  return sumA > sumB? sumA - sumB : sumA - sumC;\n};\n\n/*\n  Given the lengths of the two sides of a quatrangle. Return the area of\n  the quatrangle rounded to 2 decimal points if the two sides form a valid quatrangle.\n  Otherwise return -1\n  Two sides make a valid quatrangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  quatrangle_area(3, 4, 5) == 10.00\n  quatrangle_area(1, 2, 10) == -1\n  */\nconst quatrangle_area = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  if (sumA > sumB) {\n    return -1;\n  }\n  return sumA > sumB? sumA - sumB : sumA - sumC;\n};\n\n/*\n  Given the lengths of the two sides of a heptagon and an octagon. Return the area of\n  the heptagon and octagon rounded to 2 decimal points if the two sides form a valid heptagon and octagon.\n  Otherwise return -1\n  Two sides make a valid he", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  if (q.length < 2) return false;\n  if (q.length === 1) return true;\n  if (q[0] === q[q.length - 1]) return true;\n  if (q[0] === q[q.length - 1] + q[q.length / 2]) return true;\n  if (q[0] === q[q.length / 2] + q[q.length / 2 + 1]) return true;\n  if (q[0] === q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2]) return true;\n  if (q[0] === q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2 + 1] + q[q.length / 2]) return true;\n  if (q[0] === q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1]) return true;\n  if (q[0] === q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q.length / 2 + 1] + q[q.length / 2] + q[q", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let change = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i]!== arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 3\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i]!== arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallest_change([1, 2, 3, 2, 1]) == 4\n  */\nconst smallest_palindromic = (arr) => {\n  let change = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestPalindromic = (arr) => {\n  let change = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallest_change([1, 2, 3, 2, 1]) == 4\n  */\nconst smallest_palindromic_change = (arr) => {\n  let change = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestPalindromic_change = (arr) => {\n  let change = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallest_change([1, 2, 3, 2, 1]) == 4\n  */\nconst smallest_palindromic_change = (arr) => {\n  let change = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestPalindromic_change = (arr) => {\n  let change = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallest_change([1, 2, 3, 2, 1]) == 4\n  */\nconst smallest_palindromic_change = (arr) => {\n  let change = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestPalindromic_change = (arr) => {\n  let change = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallest_change([1, 2, 3, 2, 1]) == 4\n  */\nconst smallest_palindro", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len1 && j < len2) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = total_match;\n\n},{}],5:[function(require,module,exports){\nconst total_match = require('./total_match');\n\nconst total_match_chars = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let result = 0;\n  while (len1 > 0 && len2 > 0) {\n    if (lst1[len1 - 1] === lst2[len2 - 1]) {\n      result += 1;\n      len1--;\n      len2--;\n    } else {\n      len1--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = total_match_chars;\n\n},{\"./total_match\":4}],6:[function(require,module,exports){\nconst total_match = require('./total_match');\n\nconst total_match_chars = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let result = 0;\n  while (len1 > 0 && len2 > 0) {\n    if (lst1[len1 - 1] === lst2[len2 - 1]) {\n      result += 1;\n      len1--;\n      len2--;\n    } else {\n      len1--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = total_match_chars;\n\n},{\"./total_match\":4}],7:[function(require,module,exports){\nconst total_match = require('./total_match');\n\nconst total_match_chars = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let result = 0;\n  while (len1 > 0 && len2 > 0) {\n    if (lst1[len1 - 1] === lst2[len2 - 1]) {\n      result += 1;\n      len1--;\n      len2--;\n    } else {\n      len1--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = total_match_chars;\n\n},{\"./total_match\":4}],8:[function(require,module,exports){\nconst total_match = require('./total_match');\n\nconst total_match_chars = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let result = 0;\n  while (len1 > 0 && len2 > 0) {\n    if (lst1[len1 - 1] === lst2[len2 - 1]) {\n      result += 1;\n      len1--;\n      len2--;\n    } else {\n      len1--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = total_match_chars;\n\n},{\"./total_match\":4}],9:[function(require,module,exports){\nconst total_match = require('./total_match');\n\nconst total_match_chars = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let result = 0;\n  while (len1 > 0 && len2 > 0) {\n    if (lst1[len1 - 1] === lst2[len2 - 1]) {\n      result += 1;\n      len1--;\n      len2--;\n    } else {\n      len1--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = total_match_chars;\n\n},{\"./total_match\":4}],10:[function(require,module,exports){\nconst total_match = require('./total_match');\n\nconst total_match_chars = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let result = 0;\n  while (len1 > 0 && len2 > 0) {\n    if (lst1[len1 - 1] === lst2[len2 - 1]) {\n      result += 1;\n      len1--;\n      len2--;\n    } else {\n      len1--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = total_match_chars;\n\n},{\"./total_match\":4}],11:[function(require,module,exports){\nconst total_match = require('./total_match');\n\nconst total_match_chars = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let result = 0;\n  while (len1 > 0 && len2 > 0) {\n    if (lst1[len1 - 1] === lst2[len2 - 1]) {\n      result += 1;\n      len1--;\n      len2--;\n    } else {\n      len1--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = total_match_chars;\n\n},{\"./total_match\":4}],12:[function(require,module,exports){\nconst total_match = require('./total_match');\n\nconst total_match_chars = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let result = 0;\n  while (len1 > 0 && len2 > 0) {\n    if (lst1[len1 - 1] === lst2[len2 - 1]) {\n      result += 1;\n      len1--;\n      len2--;\n    } else {\n      len1--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = total_match_chars;\n\n},{\"./total_match\":4}],13:[function(require,module,exports){\nconst total_match = require('./total_match');\n\nconst total_match_chars = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let result = 0;\n  while (len1 > 0 && len2 > 0) {\n    if (lst1[len1 - 1] === lst2[len2 - 1]) {\n      result += 1;\n      len1--;\n      len2--;\n    } else {\n      len1--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = total_match_chars;\n\n},{\"./total_match\":4}],14:[function(require,module,exports){\nconst total_match = require('./total_match');\n\nconst total_match_chars = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let result = 0;\n  while (len1 > 0 && len2 > 0) {\n    if (lst1[len1 - 1] === lst2[len2 - 1]) {\n      result += 1;\n      len1--;\n      len2--;\n    } else {\n      len1--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = total_match_chars;\n\n},{\"./total_match\":4}],15:[function(require,module,exports){\nconst total_match = require('./total_match');\n\nconst total_match_chars = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let result = 0;\n  while (len1 > 0 && len2 > 0) {\n    if (lst1[len1 - 1] === lst2[len2 - 1]) {\n      result += 1;\n      len1--;\n      len2--;\n    } else {\n      len1--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = total_match_chars;\n\n},{\"./total_match\":4}],16:[function(require,module,exports){\nconst total_match = require('./total_match');\n\nconst total_match_chars = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let result = 0;\n  while (len1 > 0 && len2 > 0) {\n    if (lst", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let n = a;\n  let result = false;\n  for (let i = 0; i < primes.length; i++) {\n    if (n % primes[i] == 0) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_sum_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_sum_prime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let n = a;\n  let result = false;\n  for (let i = 0; i < primes.length; i++) {\n    if (n % primes[i] == 0) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_sum_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_sum_prime_prime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let n = a;\n  let result = false;\n  for (let i = 0; i < primes.length; i++) {\n    if (n % primes[i] == 0) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_sum_prime_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_sum_prime_prime_prime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a prime and false\n  in other cases.\n  x is a prime if n%int=x\n  For example:\n  is_prime(2) => true\n  is_prime(3) => false\n  is_prime(5) => false\n  is_prime(7) => true\n  is_prime(11) => true\n  */\nconst is_prime = (x) => {\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x % 3 === 0) {\n    return false;\n  }\n  if (x % 5 === 0) {\n    return false;\n  }\n  if (x % 7 === 0) {\n    return true;\n  }\n  if (x % 11 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect square\n  and false in other cases.\n  x is a perfect square if n**int=x\n  For example:\n  is_perfect_square(2) => true\n  is_perfect_square(3) => false\n  is_perfect_square(5) => false\n  is_perfect_square(7) => true\n  is_perfect_square(11) => true\n  */\nconst is_perfect_square = (x) => {\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x % 3 === 0) {\n    return false;\n  }\n  if (x % 5 === 0) {\n    return false;\n  }\n  if (x % 7 === 0) {\n    return true;\n  }\n  if (x % 11 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  is_perfect_cube(2) => true\n  is_perfect_cube(3) => false\n  is_perfect_cube(5) => false\n  is_perfect_cube(7) => true\n  is_perfect_cube(11) => true\n  */\nconst is_perfect_cube = (x) => {\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x % 3 === 0) {\n    return false;\n  }\n  if (x % 5 === 0) {\n    return false;\n  }\n  if (x % 7 === 0) {\n    return true;\n  }\n  if (x % 11 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  is_perfect_cube(2) => true\n  is_perfect_cube(3) => false\n  is_perfect_cube(5) => false\n  is_perfect_cube(7) => true\n  is_perfect_cube(11) => true\n  */\nconst is_perfect_cube_prime = (x) => {\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x % 3 === 0) {\n    return false;\n  }\n  if (x % 5 === 0) {\n    return false;\n  }\n  if (x % 7 === 0) {\n    return true;\n  }\n  if (x % 11 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  is_perfect_cube(2) => true\n  is_perfect_cube(3) => false\n  is_perfect_cube(5) => false\n  is_perfect_cube(7) => true\n  is_perfect_cube(11) => true\n  */\nconst is_perfect_cube_prime_prime = (x) => {\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x % 3 === 0) {\n    return false;\n  }\n  if (x % 5 === 0) {\n    return false;\n  }\n  if (x % 7 === 0) {\n    return true;\n  }\n  if (x % 11 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  is_perfect_cube(2) => true\n  is_perfect_cube(3) => false\n  is_perfect_cube(5) => false\n  is_perfect_cube(7) => true\n  is_perfect_cube(11) => true\n  */\nconst is_perfect_cube_prime_prime_prime = (x) => {\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x % 3 === 0) {\n    return false;\n  }\n  if (x % 5 === 0) {\n    return false;\n  }\n  if (x % 7 === 0) {\n    return true;\n  }\n  if (x % 11 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  is_perfect_cube(2) => true\n  is_perfect_cube(3) => false\n  is_perfect_cube(5) => false\n  is_perfect_cube(7) => true\n  is_perfect_cube(11) => true\n  */\nconst is_perfect_cube_prime_prime_prime_prime = (x) => {\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x % 3 === 0) {\n    return false;\n  }\n  if (x % 5 === 0) {\n    return false;\n  }\n  if (x % 7 === 0) {\n    return true;\n  }\n  if (x % 11 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  is_perfect_cube(2) => true\n  is_perfect_cube(3) => false\n  is_perfect_cube(5) => false\n  is_perfect_cube(7) => true\n  is_perfect_cube(11) => true\n  */\nconst is_perfect_cube_prime_prime_prime_prime_prime = (x) => {\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x % 3 === 0) {\n    return false;\n  }\n  if (x % 5 === 0) {\n    return false;\n  }\n  if (x % 7 === 0) {\n    return true;\n  }\n  if (x % 11 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n**int=x\n  For example:\n  is_perfect_cube(2) => true\n  is_perfect_cube(3) => false\n  is_perfect_cube(5) => false\n  is_perfect_cube(7) => true\n  is_perfect_cube(11) => true\n  */\nconst is_perfect_cube_prime_prime_prime_prime_prime_prime = (x) => {\n  if (x % 2 === 0) {\n    return false;\n  }\n  if (x % 3 === 0) {\n    return false;\n  }\n  if (x % 5 === 0) {\n    return false;\n  }\n  if (x % 7 === 0) {\n    return true;\n  }\n  if (x % 11 === 0) {\n    return true;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false;\n  if (a > 1) return true;\n  if (a % 2 === 0) return false;\n  return iscube(Math.floor(a / 2));\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a prime number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isprime(1) ==> true\n  isprime(2) ==> false\n  isprime(-1) ==> true\n  isprime(64) ==> true\n  isprime(0) ==> true\n  isprime(180) ==> false\n  */\nconst isprime = (a) => {\n  if (a <= 0) return false;\n  if (a > 1) return true;\n  if (a % 2 === 0) return false;\n  return isprime(Math.floor(a / 2));\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is an odd integer.\n  Note: you may assume the input is always valid.\n  Examples:\n  isodd(1) ==> true\n  isodd(2) ==> false\n  isodd(-1) ==> true\n  isodd(64) ==> true\n  isodd(0) ==> true\n  isodd(180) ==> false\n  */\nconst isodd = (a) => {\n  if (a <= 0) return false;\n  if (a > 1) return true;\n  if (a % 2 === 0) return false;\n  return isodd(Math.floor(a / 2));\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is an even integer.\n  Note: you may assume the input is always valid.\n  Examples:\n  iseven(1) ==> true\n  iseven(2) ==> false\n  iseven(-1) ==> true\n  iseven(64) ==> true\n  iseven(0) ==> true\n  iseven(180) ==> false\n  */\nconst iseven = (a) => {\n  if (a <= 0) return false;\n  if (a > 1) return true;\n  if (a % 2 === 0) return false;\n  return iseven(Math.floor(a / 2));\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is an integer.\n  Note: you may assume the input is always valid.\n  Examples:\n  isinteger(1) ==> true\n  isinteger(2) ==> false\n  isinteger(-1) ==> true\n  isinteger(64) ==> true\n  isinteger(0) ==> true\n  isinteger(180) ==> false\n  */\nconst isinteger = (a) => {\n  if (a <= 0) return false;\n  if (a > 1) return true;\n  if (a % 2 === 0) return false;\n  return isinteger(Math.floor(a / 2));\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is an integer.\n  Note: you may assume the input is always valid.\n  Examples:\n  isinteger(1) ==> true\n  isinteger(2) ==> false\n  isinteger(-1) ==> true\n  isinteger(64) ==> true\n  isinteger(0) ==> true\n  isinteger(180) ==> false\n  */\nconst isinteger = (a) => {\n  if (a <= 0) return false;\n  if (a > 1) return true;\n  if (a % 2 === 0) return false;\n  return isinteger(Math.floor(a / 2));\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is an integer.\n  Note: you may assume the input is always valid.\n  Examples:\n  isinteger(1) ==> true\n  isinteger(2) ==> false\n  isinteger(-1) ==> true\n  isinteger(64) ==> true\n  isinteger(0) ==> true\n  isinteger(180) ==> false\n  */\nconst isinteger = (a) => {\n  if (a <= 0) return false;\n  if (a > 1) return true;\n  if (a % 2 === 0) return false;\n  return isinteger(Math.floor(a / 2));\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is an integer.\n  Note: you may assume the input is always valid.\n  Examples:\n  isinteger(1) ==> true\n  isinteger(2) ==> false\n  isinteger(-1) ==> true\n  isinteger(64) ==> true\n  isinteger(0) ==> true\n  isinteger(180) ==> false\n  */\nconst isinteger = (a) => {\n  if (a <= 0) return false;\n  if (a > 1) return true;\n  if (a % 2 === 0) return false;\n  return isinteger(Math.floor(a / 2));\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is an integer.\n  Note: you may assume the input is always valid.\n  Examples:\n  isinteger(1) ==> true\n  isinteger(2) ==> false\n  isinteger(-1) ==> true\n  isinteger(64) ==> true\n  isinteger(0) ==> true\n  isinteger(180) ==> false\n  */\nconst isinteger = (a) => {\n  if (a <= 0) return false;\n  if (a > 1) return true;\n  if (a % 2 === 0) return false;\n  return isinteger(Math.floor(a / 2));\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is an integer.\n  Note: you may assume the input is always valid.\n  Examples:\n  isinteger(1) ==> true\n  isinteger(2) ==> false\n  isinteger(-1) ==> true\n  isinteger(64) ==> true\n  isinteger(0) ==> true\n  isinteger(180) ==> false\n  */\nconst isinteger = (a) => {\n  if (a <= 0) return false;\n  if (a > 1) return true;\n  if (a % 2 === 0) return false;\n  return isinteger(Math.floor(a / 2));\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is an integer.\n  Note: you may assume the input is always valid.\n  Examples:\n  isinteger(1) ==> true\n  isinteger(2) ==> false\n  isinteger(-1) ==> true\n  isinteger(64) ==> true\n  isinteger(0) ==> true\n  isinteger(180) ==> false\n  */\nconst isinteger = (a) => {\n  if (a <= 0) return false;\n  if (a > 1) return true;\n  if (a % 2 === 0) return false;\n  return isinteger(Math.floor(a / 2));\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is an integer.\n  Note: you may assume the input is always valid.\n  Examples:\n  isinteger(1) ==> true\n  isinteger(2) ==> false\n  isinteger(-1) ==> true\n  isinteger(64) ==> true\n  isinteger(0) ==> true\n  isinteger(180) ==> false\n  */\nconst isinteger = (a) => {\n  if (a <= 0) return false;\n  if (a > 1) return true;\n  if (a % 2 === 0) return false;\n  return isinteger(Math.floor(a / 2));\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is an integer.\n  Note: you may assume the input is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let count = 0;\n  let key = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let prime = false;\n  let num2 = parseInt(num, 16);\n  let num3 = parseInt(num2, 16);\n  let num4 = parseInt(num3, 16);\n  let num5 = parseInt(num4, 16);\n  let num6 = parseInt(num5, 16);\n  let num7 = parseInt(num6, 16);\n  let num8 = parseInt(num7, 16);\n  let num9 = parseInt(num8, 16);\n  let numA = parseInt(num9, 16);\n  let numB = parseInt(numA, 16);\n  let numC = parseInt(numB, 16);\n  let numD = parseInt(numC, 16);\n  let numE = parseInt(numD, 16);\n  let numF = parseInt(numE, 16);\n  let numG = 0;\n  let numH = 0;\n  let numI = 0;\n  let numJ = 0;\n  let numK = 0;\n  let numL = 0;\n  let numM = 0;\n  let numN = 0;\n  let numO = 0;\n  let numP = 0;\n  let numQ = 0;\n  let numR = 0;\n  let numS = 0;\n  let numT = 0;\n  let numU = 0;\n  let numV = 0;\n  let numW = 0;\n  let numX = 0;\n  let numY = 0;\n  let numZ = 0;\n  let numA2 = 0;\n  let numB2 = 0;\n  let numC2 = 0;\n  let numD2 = 0;\n  let numE2 = 0;\n  let numF2 = 0;\n  let numG2 = 0;\n  let numH2 = 0;\n  let numI2 = 0;\n  let numJ2 = 0;\n  let numK2 = 0;\n  let numL2 = 0;\n  let numM2 = 0;\n  let numN2 = 0;\n  let numO2 = 0;\n  let numP2 = 0;\n  let numQ2 = 0;\n  let numR2 = 0;\n  let numS2 = 0;\n  let numT2 = 0;\n  let numU2 = 0;\n  let numV2 = 0;\n  let numW2 = 0;\n  let numX2 = 0;\n  let numY2 = 0;\n  let numZ2 = 0;\n  let numA3 = 0;\n  let numB3 = 0;\n  let numC3 = 0;\n  let numD3 = 0;\n  let numE3 = 0;\n  let numF3 = 0;\n  let numG3 = 0;\n  let numH3 = 0;\n  let numI3 = 0;\n  let numJ3 = 0;\n  let numK3 = 0;\n  let numL3 = 0;\n  let numM3 = 0;\n  let numN3 = 0;\n  let numO3 = 0;\n  let numP3 = 0;\n  let numQ3 = 0;\n  let numR3 = 0;\n  let numS3 = 0;\n  let numT3 = 0;\n  let numU3 = 0;\n  let numV3 = 0;\n  let numW3 = 0;\n  let numX3 = 0;\n  let numY3 = 0;\n  let numZ3 = 0;\n  let numA4 = 0;\n  let numB4 = 0;\n  let numC4 = 0;\n  let numD4 = 0;\n  let numE4 = 0;\n  let numF4 = 0;\n  let numG4 = 0;\n  let numH4 = 0;\n  let numI4 = 0;\n  let numJ4 = 0;\n  let numK4 = 0;\n  let numL4 = 0;\n  let numM4 = 0;\n  let numN4 = 0;\n  let numO4 = 0;\n  let numP4 = 0;\n  let numQ4 = 0;\n  let numR4 = 0;\n  let numS4 = 0;\n  let numT4 = 0;\n  let numU4 = 0;\n  let numV4 = 0;\n  let numW4 = 0;\n  let numX4 = 0;\n  let numY4 = 0;\n  let numZ4 = 0;\n  let numA5 = 0;\n  let numB5 = 0;\n  let numC5 = 0;\n  let numD5 = 0;\n  let numE5 = 0;\n  let numF5 = 0;\n  let numG5 = 0;\n  let numH5 = 0;\n  let numI5 = 0;\n  let numJ5 = 0;\n  let numK5 = 0;\n  let numL5 = 0;\n  let numM5 = 0;\n  let numN5 = 0;\n  let numO5 = 0;\n  let numP5 = 0;\n  let numQ5 = 0;\n  let numR5 = 0;\n  let numS5 = 0;\n  let numT5 = 0;\n  let numU5 = 0;\n  let numV5 = 0;\n  let numW5 = 0;\n  let numX5 = 0;\n  let numY5 = 0;\n  let numZ5 = 0;\n  let numA6 = 0;\n  let numB6 = 0;\n  let numC6 = 0;\n  let numD6 = 0;\n  let numE6 = 0;\n  let numF6 = 0;\n  let numG6 = 0;\n  let numH6 = 0;\n  let numI6 = 0;\n  let numJ6 = 0;\n  let numK6 = 0;\n  let numL6 = 0;\n  let numM6 = 0;\n  let numN6 = 0;\n  let numO6 = 0;\n  let numP6 = 0;\n  let numQ6 = 0;\n  let numR6 = 0;\n  let numS6 = 0;\n  let numT6 = 0;\n  let numU6 = 0;\n  let numV6 = 0;\n  let numW6 = 0;\n  let numX6 = 0;\n  let numY6 = 0;\n  let numZ6 = 0;\n  let numA7 = 0;\n  let numB7 = 0;\n  let numC7 = 0;\n  let numD7 = 0;\n  let numE7 = 0;\n  let numF7 = 0;\n  let numG7 = 0;\n  let numH7 = 0;\n  let numI7 = 0;\n  let numJ7 = 0;\n  let numK7 = 0;\n  let numL7 = 0;\n  let numM7 = 0;\n  let numN7 = 0;\n  let numO7 = 0;\n  let numP7 = 0;\n  let numQ7 = 0;\n  let numR7 = 0;\n  let numS7 = 0;\n  let numT7 = 0;\n  let numU7 = 0;\n  let numV7 = 0;\n  let numW7 = 0;\n  let numX7 = 0;\n  let numY7 = 0;\n  let numZ7 = 0;\n  let numA8 = 0;\n  let numB8 = 0;\n  let numC8 = 0;\n  let numD8 = 0;\n  let numE8 = 0;\n  let numF8 = 0;\n  let numG8 = 0;\n  let numH8 = 0;\n  let numI8 = 0;\n  let numJ8 = 0;\n  let numK8 = 0;\n  let numL8 = 0;\n  let numM8 = 0;\n  let numN8 = 0;\n  let numO8 = 0;\n  let numP8 = 0;\n  let numQ8 = 0;\n  let numR8 = 0;\n  let numS8 = 0;\n  let numT8 = 0;\n  let numU8 = 0;\n  let numV8 = 0;\n  let numW8 = 0;\n  let numX8 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  let decimalLength = decimalString.length;\n  let decimalArray = decimalString.split('');\n  let decimalLength = decimalArray.length;\n  let decimalArrayLength = decimalArray.length;\n  let decimalArrayIndex = 0;\n  let decimalArrayIndex2 = 0;\n  let decimalArrayIndex3 = 0;\n  let decimalArrayIndex4 = 0;\n  let decimalArrayIndex5 = 0;\n  let decimalArrayIndex6 = 0;\n  let decimalArrayIndex7 = 0;\n  let decimalArrayIndex8 = 0;\n  let decimalArrayIndex9 = 0;\n  let decimalArrayIndex10 = 0;\n  let decimalArrayIndex11 = 0;\n  let decimalArrayIndex12 = 0;\n  let decimalArrayIndex13 = 0;\n  let decimalArrayIndex14 = 0;\n  let decimalArrayIndex15 = 0;\n  let decimalArrayIndex16 = 0;\n  let decimalArrayIndex17 = 0;\n  let decimalArrayIndex18 = 0;\n  let decimalArrayIndex19 = 0;\n  let decimalArrayIndex20 = 0;\n  let decimalArrayIndex21 = 0;\n  let decimalArrayIndex22 = 0;\n  let decimalArrayIndex23 = 0;\n  let decimalArrayIndex24 = 0;\n  let decimalArrayIndex25 = 0;\n  let decimalArrayIndex26 = 0;\n  let decimalArrayIndex27 = 0;\n  let decimalArrayIndex28 = 0;\n  let decimalArrayIndex29 = 0;\n  let decimalArrayIndex30 = 0;\n  let decimalArrayIndex31 = 0;\n  let decimalArrayIndex32 = 0;\n  let decimalArrayIndex33 = 0;\n  let decimalArrayIndex34 = 0;\n  let decimalArrayIndex35 = 0;\n  let decimalArrayIndex36 = 0;\n  let decimalArrayIndex37 = 0;\n  let decimalArrayIndex38 = 0;\n  let decimalArrayIndex39 = 0;\n  let decimalArrayIndex40 = 0;\n  let decimalArrayIndex41 = 0;\n  let decimalArrayIndex42 = 0;\n  let decimalArrayIndex43 = 0;\n  let decimalArrayIndex44 = 0;\n  let decimalArrayIndex45 = 0;\n  let decimalArrayIndex46 = 0;\n  let decimalArrayIndex47 = 0;\n  let decimalArrayIndex48 = 0;\n  let decimalArrayIndex49 = 0;\n  let decimalArrayIndex50 = 0;\n  let decimalArrayIndex51 = 0;\n  let decimalArrayIndex52 = 0;\n  let decimalArrayIndex53 = 0;\n  let decimalArrayIndex54 = 0;\n  let decimalArrayIndex55 = 0;\n  let decimalArrayIndex56 = 0;\n  let decimalArrayIndex57 = 0;\n  let decimalArrayIndex58 = 0;\n  let decimalArrayIndex59 = 0;\n  let decimalArrayIndex60 = 0;\n  let decimalArrayIndex61 = 0;\n  let decimalArrayIndex62 = 0;\n  let decimalArrayIndex63 = 0;\n  let decimalArrayIndex64 = 0;\n  let decimalArrayIndex65 = 0;\n  let decimalArrayIndex66 = 0;\n  let decimalArrayIndex67 = 0;\n  let decimalArrayIndex68 = 0;\n  let decimalArrayIndex69 = 0;\n  let decimalArrayIndex70 = 0;\n  let decimalArrayIndex71 = 0;\n  let decimalArrayIndex72 = 0;\n  let decimalArrayIndex73 = 0;\n  let decimalArrayIndex74 = 0;\n  let decimalArrayIndex75 = 0;\n  let decimalArrayIndex76 = 0;\n  let decimalArrayIndex77 = 0;\n  let decimalArrayIndex78 = 0;\n  let decimalArrayIndex79 = 0;\n  let decimalArrayIndex80 = 0;\n  let decimalArrayIndex81 = 0;\n  let decimalArrayIndex82 = 0;\n  let decimalArrayIndex83 = 0;\n  let decimalArrayIndex84 = 0;\n  let decimalArrayIndex85 = 0;\n  let decimalArrayIndex86 = 0;\n  let decimalArrayIndex87 = 0;\n  let decimalArrayIndex88 = 0;\n  let decimalArrayIndex89 = 0;\n  let decimalArrayIndex90 = 0;\n  let decimalArrayIndex91 = 0;\n  let decimalArrayIndex92 = 0;\n  let decimalArrayIndex93 = 0;\n  let decimalArrayIndex94 = 0;\n  let decimalArrayIndex95 = 0;\n  let decimalArrayIndex96 = 0;\n  let decimalArrayIndex97 = 0;\n  let decimalArrayIndex98 = 0;\n  let decimalArrayIndex99 = 0;\n  let decimalArrayIndex100 = 0;\n  let decimalArrayIndex101 = 0;\n  let decimalArrayIndex102 = 0;\n  let decimalArrayIndex103 = 0;\n  let decimalArrayIndex104 = 0;\n  let decimalArrayIndex105 = 0;\n  let decimalArrayIndex106 = 0;\n  let decimalArrayIndex107 = 0;\n  let decimalArrayIndex108 = 0;\n  let decimalArrayIndex109 = 0;\n  let decimalArrayIndex110 = 0;\n  let decimalArrayIndex111 = 0;\n  let decimalArrayIndex112 = 0;\n  let decimalArrayIndex113 = 0;\n  let decimalArrayIndex114 = 0;\n  let decimalArrayIndex115 = 0;\n  let decimalArrayIndex116 = 0;\n  let decimalArrayIndex117 = 0;\n  let decimalArrayIndex118 = 0;\n  let decimalArrayIndex119 = 0;\n  let decimalArrayIndex120 = 0;\n  let decimalArrayIndex121 = 0;\n  let decimalArrayIndex122 = 0;\n  let decimalArrayIndex123 = 0;\n  let decimalArrayIndex124 = 0;\n  let decimalArrayIndex125 = 0;\n  let decimalArrayIndex126 = 0;\n  let decimalArrayIndex127 = 0;\n  let decimalArrayIndex128 = 0;\n  let decimalArrayIndex129 = 0;\n  let decimalArrayIndex130 = 0;\n  let decimalArrayIndex131 = 0;\n  let decimalArrayIndex132 = 0;\n  let decimalArrayIndex133 = 0;\n  let decimalArrayIndex134 = 0;\n  let decimalArrayIndex135 = 0;\n  let decimalArrayIndex136 = 0;\n  let decimalArrayIndex137 = 0;\n  let decimalArrayIndex138 = 0;\n  let decimalArrayIndex139 = 0;\n  let decimalArrayIndex140 = 0;\n  let decimalArrayIndex141 = 0;\n  let decimalArrayIndex142 = 0;\n  let decimalArrayIndex143 = 0;\n  let decimalArrayIndex144 = 0;\n  let decimalArrayIndex145 = 0;\n  let decimalArrayIndex146 = 0;\n  let decimalArrayIndex147 = 0;\n  let decimalArrayIndex148 = 0;\n  let decimalArrayIndex149 = 0;\n  let decimalArrayIndex150 = 0;\n  let decimalArrayIndex151 = 0;\n  let decimalArrayIndex152 = 0;\n  let decimalArrayIndex153 = 0;\n  let decimalArrayIndex154 = 0;\n  let decimalArrayIndex155 = 0;\n  let decimalArrayIndex156 = 0;\n  let decimalArrayIndex157 = 0;\n  let decimalArrayIndex158 = 0;\n  let decimalArrayIndex159 = 0;\n  let decimalArrayIndex160 = 0;\n  let decimalArrayIndex161 = 0;\n  let decimalArrayIndex162 = 0;\n  let decimalArrayIndex163 = 0;\n  let decimalArrayIndex164 = 0;\n  let decimalArrayIndex165 = 0;\n  let decimalArrayIndex166 = 0;\n  let decimalArrayIndex167 = 0;\n  let decimalArrayIndex168 = 0;\n  let decimalArrayIndex169 = 0;\n  let decimalArrayIndex170 = 0;\n  let decimalArrayIndex171 = 0;\n  let decimalArrayIndex172 = 0;\n  let decimalArrayIndex173 = 0;\n  let decimalArrayIndex174 = 0;\n  let decimalArrayIndex175 = 0;\n  let decimalArrayIndex176 = 0;\n  let decimalArrayIndex177 = 0;\n  let decimalArrayIndex178 = 0;\n  let decimalArrayIndex179 = 0;\n  let decimalArrayIndex180 = 0;\n  let decimalArrayIndex181 = 0;\n  let decimalArrayIndex182 = 0;\n  let decimalArrayIndex183 = 0;\n  let decimalArrayIndex184 = 0;\n  let decimalArrayIndex185 = 0;\n  let decimalArrayIndex186 = 0;\n  let decimalArrayIndex187 = 0;\n  let decimalArrayIndex188 = 0;\n  let decimalArrayIndex189 = 0;\n  let decimalArrayIndex190 = 0;\n  let decimalArrayIndex191 = 0;\n  let decimalArrayIndex192 = 0;\n  let decimalArrayIndex193 = 0;\n  let decimalArrayIndex194 = 0;\n  let decimalArrayIndex195 = 0;\n  let decimalArrayIndex196 = 0;\n  let decimalArrayIndex197 = 0;\n  let decimalArrayIndex198 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* Given a list of integers, return a list of pairs consisting of the sum and product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> pairs([])\n  []\n  >>> pairs([1, 2, 3, 4])\n  [[1, 2], [3, 4]]\n  */\nconst pairs = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  let pairs = [];\n  for (let i = 0; i < numbers.length; i++) {\n    pairs.push([numbers[i], int]);\n  }\n  return pairs;\n};\n\n/* Given a list of integers, return a list of triples consisting of the sum and product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> triples([])\n  []\n  >>> triples([1, 2, 3, 4])\n  [[1, 2], [3, 4], [5, 6]]\n  */\nconst triples = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  let triples = [];\n  for (let i = 0; i < numbers.length; i++) {\n    triples.push([numbers[i], int]);\n  }\n  return triples;\n};\n\n/* Given a list of integers, return a list of quadruples consisting of the sum and product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> quadruples([])\n  []\n  >>> quadruples([1, 2, 3, 4])\n  [[1, 2], [3, 4], [5, 6], [7, 8]]\n  */\nconst quadruples = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  let quadruples = [];\n  for (let i = 0; i < numbers.length; i++) {\n    quadruples.push([numbers[i], int]);\n  }\n  return quadruples;\n};\n\n/* Given a list of integers, return a list of quintuples consisting of the sum and product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> quintuples([])\n  []\n  >>> quintuples([1, 2, 3, 4])\n  [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]\n  */\nconst quintuples = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  let quintuples = [];\n  for (let i = 0; i < numbers.length; i++) {\n    quintuples.push([numbers[i], int]);\n  }\n  return quintuples;\n};\n\n/* Given a list of integers, return a list of hexuples consisting of the sum and product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> hexuples([])\n  []\n  >>> hexuples([1, 2, 3, 4])\n  [[0x1, 0x2], [0x3, 0x4], [0x5, 0x6], [0x7, 0x8], [0x9, 0xa], [0xb, 0xc], [0xd, 0xe], [0xf, 0x10], [0x11, 0x12], [0x13, 0x14], [0x15, 0x16], [0x17, 0x18], [0x19, 0x1a], [0x1b, 0x1c], [0x1d, 0x1e], [0x21, 0x22], [0x23, 0x24], [0x25, 0x26], [0x27, 0x28], [0x29, 0x2a], [0x2b, 0x2c], [0x2d, 0x2e], [0x31, 0x32], [0x33, 0x34], [0x35, 0x36], [0x37, 0x38], [0x39, 0x3a], [0x3b, 0x3c], [0x3d, 0x3e], [0x41, 0x42], [0x43, 0x44], [0x45, 0x46], [0x47, 0x48], [0x49, 0x4a], [0x4b, 0x4c], [0x4d, 0x4e], [0x51, 0x52], [0x53, 0x54], [0x55, 0x56], [0x57, 0x58], [0x59, 0x5a], [0x5b, 0x5c], [0x5d, 0x5e], [0x61, 0x62], [0x63, 0x64], [0x65, 0x66], [0x67, 0x68], [0x69, 0x6a], [0x6b, 0x6c], [0x6d, 0x6e], [0x71, 0x72], [0x73, 0x74], [0x75, 0x76], [0x77, 0x78], [0x79, 0x7a], [0x7b, 0x7c], [0x7d, 0x7e]]\n  */\nconst hexuples = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  let hexuples = [];\n  for (let i = 0; i < numbers.length; i++) {\n    hexuples.push([numbers[i], int]);\n  }\n  return hexuples;\n};\n\n/* Given a list of integers, return a list of eightuples consisting of the sum and product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> eightuples([])\n  []\n  >>> eightuples([1, 2, 3, 4])\n  [[0x1, 0x2, 0x3, 0x4], [0x5, 0x6, 0x7, 0x8], [0x9, 0xa, 0xb, 0xc, 0xd], [0xe, 0xf, 0x10, 0x11, 0x12], [0x13, 0x14, 0x15, 0x16], [0x17, 0x18, 0x19, 0x1a], [0x1b, 0x1c, 0x1d, 0x1e], [0x21, 0x22, 0x23, 0x24], [0x25, 0x26, 0x27, 0x28], [0x29, 0x2a, 0x2b, 0x2c], [0x2d, 0x2e, 0x2f, 0x30], [0x31, 0x32, 0x33, 0x34], [0x35, 0x36, 0x37, 0x38], [0x39, 0x3a, 0x3b, 0x3c], [0x3d, 0x3e, 0x3f, 0x40], [0x41, 0x42, 0x43, 0x44], [0x45, 0x46, 0x47, 0x48], [0x49, 0x4a, 0x4b, 0x4c], [0x4d, 0x4e, 0x4f, 0x50], [0x51, 0x52, 0x53, 0x54], [0x55, 0x56, 0x57, 0x58], [0x59, 0x5a, 0x5b, 0x5c], [0x5d, 0x5e, 0x5f, 0x60], [0x61, 0x62, 0x63, 0x64], [0x65, 0x66, 0x67, 0x68], [0x69, 0x6a, 0x6b, 0x6c], [0x6d, 0x6e, 0x6f, 0x70], [0x71, 0x72, 0x73, 0x74], [0x75, 0x76, 0x77, 0x78], [0x79, 0x7a, 0x7b, 0x7c], [0x7d, 0x7e, 0x7f, 0x80]]\n  */\nconst eightuples = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  let eightuples = [];\n  for (let i = 0; i < numbers.length; i++) {\n    eightuples.push([numbers[i], int]);\n  }\n  return eightuples;\n};\n\n/* Given a list of integers, return a list of nineuples consisting of the sum and product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> nineuples([])\n  []\n  >>> nineuples([1, 2, 3, 4])\n  [[0x1, 0x2, 0x3, 0x4], [0x5, 0x6, 0x7, 0x8], [0x9, 0xa, 0xb, 0xc, 0xd], [0xe, 0xf, 0x10, 0x11, 0x12], [0x13, 0x14, 0x15, 0x16], [0x17, 0x18, 0x19, 0x1a], [0x1b, 0x1c, 0x1d, 0x1e], [0x21, 0x22, 0x23, 0x24], [0x25, 0x26, 0x27, 0x28], [0x29, 0x2a, 0x2b, 0x2c], [0x2d, 0x2e, 0x2f, 0x30], [0x31, 0x32, 0x33", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  let is_happy = true;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const grades_sorted = grades.sort((a, b) => a - b);\n  const letter_grades = grades_sorted.map((grade) => {\n    if (grade >= 0 && grade <= 1) {\n      return grade;\n    }\n    return grades_sorted[grades_sorted.length - 1];\n  });\n  return letter_grades;\n};\n\n/*\n  Given an array of grades, return a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  letter_grades([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == ['A+', 'A', 'B', 'C', 'C', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'D', 'E']\n  */\nconst letter_grades = (grades) => {\n  const letter_grades_sorted = grades.sort((a, b) => a - b);\n  return letter_grades_sorted;\n};\n\n/*\n  Given an array of grades, return a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  letter_grades([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == ['A+', 'A', 'B', 'C', 'C', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'D', 'E']\n  */\nconst letter_grades_sorted = (grades) => {\n  const letter_grades_sorted = grades.sort((a, b) => a - b);\n  return letter_grades_sorted;\n};\n\n/*\n  Given an array of grades, return a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  letter_grades([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == ['A+', 'A', 'B', 'C', 'C', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'D', 'E']\n  */\nconst letter_grades_sorted_by_gps = (grades) => {\n  const letter_grades_sorted = letter_grades_sorted_by_gps_sorted(grades);\n  return letter_grades_sorted;\n};\n\n/*\n  Given an array of grades, return a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  letter_grades([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == ['A+', 'A', 'B', 'C', 'C', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'D', 'E']\n  */\nconst letter_grades_sorted_by_gps_sorted = (grades) => {\n  const letter_grades_sorted = grades.sort((a, b) => a - b);\n  return letter_grades_sorted;\n};\n\n/*\n  Given an array of grades, return a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  letter_grades([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == ['A+', 'A', 'B', 'C', 'C', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'D', 'E']\n  */\nconst letter_grades_sorted_by_gps_sorted_by_gps = (grades) => {\n  const letter_grades_sorted = letter_grades_sorted_by_gps_sorted_by_gps_sorted(grades);\n  return letter_grades_sorted;\n};\n\n/*\n  Given an array of grades, return a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  letter_grades([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == ['A+', 'A', 'B', 'C', 'C', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'D', 'E']\n  */\nconst letter_grades_sorted_by_gps_sorted_by_gps_sorted = (grades) => {\n  const letter_grades_sorted = grades.sort((a, b) => a - b);\n  return letter_grades_sorted;\n};\n\n/*\n  Given an array of grades, return a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] % 2!== 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisible_length('Hello') == true\n  divisible_length('abcdcba') == true\n  divisible_length('kittens') == true\n  divisible_length('orange') == false\n  */\nconst divisible_length = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] % 3!== 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisible_length('Hello') == true\n  divisible_length('abcdcba') == true\n  divisible_length('kittens') == true\n  divisible_length('orange') == false\n  */\nconst divisible_length = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] % 5!== 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisible_length('Hello') == true\n  divisible_length('abcdcba') == true\n  divisible_length('kittens') == true\n  divisible_length('orange') == false\n  */\nconst divisible_length = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] % 7!== 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisible_length('Hello') == true\n  divisible_length('abcdcba') == true\n  divisible_length('kittens') == true\n  divisible_length('orange') == false\n  */\nconst divisible_length = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] % 9!== 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisible_length('Hello') == true\n  divisible_length('abcdcba') == true\n  divisible_length('kittens') == true\n  divisible_length('orange') == false\n  */\nconst divisible_length = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] % 11!== 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisible_length('Hello') == true\n  divisible_length('abcdcba') == true\n  divisible_length('kittens') == true\n  divisible_length('orange') == false\n  */\nconst divisible_length = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] % 13!== 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisible_length('Hello') == true\n  divisible_length('abcdcba') == true\n  divisible_length('kittens') == true\n  divisible_length('orange') == false\n  */\nconst divisible_length = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] % 15!== 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisible_length('Hello') == true\n  divisible_length('abcdcba') == true\n  divisible_length('kittens') == true\n  divisible_length('orange') == false\n  */\nconst divisible_length = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] % 17!== 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisible_length('Hello') == true\n  divisible_length('abcdcba') == true\n  divisible_length('kittens') == true\n  divisible_length('orange') == false\n  */\nconst divisible_length = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] % 19!== 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 21 or false otherwise\n  Examples\n  divisible_length('Hello') == true\n  divisible_length('abcdcba') == true\n  divisible_length('kittens') == true\n  divisible_length('orange') == false\n  */\nconst divisible_length = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] % 21!== 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 23 or false otherwise\n  Examples\n  divisible_length('Hello') == true\n  divisible_length('abcdcba') == true\n  divisible_length('kittens') == true\n  divisible_length('orange') == false\n  */\nconst divisible_length = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] % 23!== 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 25 or false otherwise\n  Examples\n  divisible_length('Hello') == true\n  divisible_length('abcdcba') == true\n  divisible_length('kittens') == true\n  divisible_length('orange') == false\n  */\nconst divisible_length = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] % 25!== 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 27 or false otherwise\n  Examples\n  divisible_length('Hello') == true\n  divisible_length('abcdcba') == true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -1.\n  */\nconst starts_negative_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst starts_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -3.\n  */\nconst starts_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -4.\n  */\nconst starts_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -5.\n  */\nconst starts_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -6.\n  */\nconst starts_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -7.\n  */\nconst starts_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -8.\n  */\nconst starts_negative_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -9.\n  */\nconst starts_negative_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -10.\n  */\nconst starts_negative_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -11.\n  */\nconst starts_negative_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -12.\n  */\nconst starts_negative_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -13.\n  */\nconst starts_negative_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -14.\n  */\nconst starts_negative_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -15.\n  */\nconst starts_negative_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -16.\n  */\nconst starts_negative_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -17.\n  */\nconst starts_negative_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -18.\n  */\nconst starts_negative_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -19.\n  */\nconst starts_negative_negative_negative_negative_negative_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = N; i > 0; i--) {\n    binary = binary + binary(i%2);\n    sum = sum + parseInt(binary(i%2), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  \n  for (let i = N; i > 0; i--) {\n    decimal = decimal + decimal(i%10);\n    sum = sum + parseInt(decimal(i%10), 10);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  \n  for (let i = N; i > 0; i--) {\n    hexadecimal = hexadecimal + hexadecimal(i%16);\n    sum = sum + parseInt(hexadecimal(i%16), 16);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  \n  for (let i = N; i > 0; i--) {\n    octal = octal + octal(i%8);\n    sum = sum + parseInt(octal(i%8), 8);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal and decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal and decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let decimal = \"\";\n  \n  for (let i = N; i > 0; i--) {\n    hexadecimal = hexadecimal + hexadecimal(i%16);\n    decimal = decimal + decimal(i%10);\n    sum = sum + parseInt(hexadecimal(i%16), 16) + parseInt(decimal(i%10), 10);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal and hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal and hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  let hexadecimal = \"\";\n  \n  for (let i = N; i > 0; i--) {\n    octal = octal + octal(i%8);\n    hexadecimal = hexadecimal + hexadecimal(i%16);\n    sum = sum + parseInt(octal(i%16), 16) + parseInt(hexadecimal(i%16), 16);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal and decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal and decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let decimal = \"\";\n  \n  for (let i = N; i > 0; i--) {\n    hexadecimal = hexadecimal + hexadecimal(i%16);\n    decimal = decimal + decimal(i%10);\n    sum = sum + parseInt(hexadecimal(i%16), 16) + parseInt(decimal(i%10), 10);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal and decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal and decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let decimal = \"\";\n  \n  for (let i = N; i > 0; i--) {\n    hexadecimal = hexadecimal + hexadecimal(i%16);\n    decimal = decimal + decimal(i%10);\n    sum = sum + parseInt(hexadecimal(i%16), 16) + parseInt(decimal(i%10), 10);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal and decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return odd.concat(even);\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. return the difference between lst and itself..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst diff = (lst) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return odd.concat(even);\n};\n\n/*Given a non-empty list of integers lst. return the difference between lst and itself..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst diffAll = (lst) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return odd.concat(even);\n};\n\n/*Given a non-empty list of integers lst. return the difference between lst and itself..\n\n\n  Examples:\n      diffAll([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst diffAll2 = (lst, start) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return odd.concat(even).slice(start);\n};\n\n/*Given a non-empty list of integers lst. return the difference between lst and itself..\n\n\n  Examples:\n      diffAll2([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst diffAll3 = (lst, start) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return odd.concat(even).slice(start);\n};\n\n/*Given a non-empty list of integers lst. return the difference between lst and itself..\n\n\n  Examples:\n      diffAll3([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst diffAll4 = (lst, start) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return odd.concat(even).slice(start);\n};\n\n/*Given a non-empty list of integers lst. return the difference between lst and itself..\n\n\n  Examples:\n      diffAll4([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst diffAll5 = (lst, start) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return odd.concat(even).slice(start);\n};\n\n/*Given a non-empty list of integers lst. return the difference between lst and itself..\n\n\n  Examples:\n      diffAll5([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst diffAll6 = (lst, start) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return odd.concat(even).slice(start);\n};\n\n/*Given a non-empty list of integers lst. return the difference between lst and itself..\n\n\n  Examples:\n      diffAll6([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst diffAll7 = (lst, start) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return odd.concat(even).slice(start);\n};\n\n/*Given a non-empty list of integers lst. return the difference between lst and itself..\n\n\n  Examples:\n      diffAll7([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst diffAll8 = (lst, start) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return odd.concat(even).slice(start);\n};\n\n/*Given a non-empty list of integers lst. return the difference between lst and itself..\n\n\n  Examples:\n      diffAll8([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst diffAll9 = (lst, start) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return odd.concat(even).slice(start);\n};\n\n/*Given a non-empty list of integers lst. return the difference between lst and itself..\n\n\n  Examples:\n      diffAll9([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst diffAll10 = (lst, start) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return odd.concat(even).slice(start);\n};\n\n/*Given a non-empty list of integers lst. return the difference between lst and itself..\n\n\n  Examples:\n      diffAll10([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst diffAll11 = (lst, start) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  return odd.concat(even).slice(start);\n};\n\n/*Given a non-empty list of integers lst. return the difference between lst and itself..\n\n\n  Examples:\n      diffAll11([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst diffAll12 = (lst, start) => {\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  let arr = s.split(' ');\n  let shuffled_arr = arr.sort(() => Math.random() - 0.5);\n  return shuffled_arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces = (s) => {\n  let arr = s.split(' ');\n  let shuffled_arr = arr.sort(() => Math.random() - 0.5);\n  return shuffled_arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces_and_punctuation = (s) => {\n  let arr = s.split(' ');\n  let shuffled_arr = arr.sort(() => Math.random() - 0.5);\n  return shuffled_arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces_and_punctuation_and_spaces = (s) => {\n  let arr = s.split(' ');\n  let shuffled_arr = arr.sort(() => Math.random() - 0.5);\n  return shuffled_arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces_and_punctuation_and_spaces_and_punctuation = (s) => {\n  let arr = s.split(' ');\n  let shuffled_arr = arr.sort(() => Math.random() - 0.5);\n  return shuffled_arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces_and_punctuation_and_spaces_and_punctuation_and_spaces = (s) => {\n  let arr = s.split(' ');\n  let shuffled_arr = arr.sort(() => Math.random() - 0.5);\n  return shuffled_arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces_and_punctuation_and_spaces_and_punctuation_and_spaces_and_punctuation = (s) => {\n  let arr = s.split(' ');\n  let shuffled_arr = arr.sort(() => Math.random() - 0.5);\n  return shuffled_arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces_and_punctuation_and_spaces_and_punctuation_and_spaces_and_punctuation = (s) => {\n  let arr = s.split(' ');\n  let shuffled_arr = arr.sort(() => Math.random() - 0.5);\n  return shuffled_arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces_and_punctuation_and_spaces_and_punctuation_and_spaces_and_punctuation_and_spaces_and_punctuation = (s) => {\n  let arr = s.split(' ');\n  let shuffled_arr = arr.sort(() => Math.random() - 0.5);\n  return shuffled_arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'e", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCoords = row.map((v, i) => [i, v]);\n    res.push(rowCoords.sort((a, b) => a[1] - b[1]).map(([x, y]) => [x, y]));\n  }\n  return res.sort((a, b) => a[1] - b[1]).map(([x, y]) => [x, y]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_col([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(1, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_col([], 1) == []\n  get_col([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_col = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCoords = row.map((v, i) => [i, v]);\n    res.push(rowCoords.sort((a, b) => b[1] - a[1]).map(([x, y]) => [x, y]));\n  }\n  return res.sort((a, b) => b[1] - a[1]).map(([x, y]) => [x, y]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_col = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCoords = row.map((v, i) => [i, v]);\n    res.push(rowCoords.sort((a, b) => b[1] - a[1]).map(([x, y]) => [x, y]));\n  }\n  return res.sort((a, b) => b[1] - a[1]).map(([x, y]) => [x, y]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCoords = row.map((v, i) => [i, v]);\n    res.push(rowCoords.sort((a, b) => a[1] - b[1]).map(([x, y]) => [x, y]));\n  }\n  return res.sort((a, b) => a[1] - b[1]).map(([x, y]) => [x, y]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_col([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(1, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_col([], 1) == []\n  get_col([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_col = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCoords = row.map((v, i) => [i, v]);\n    res.push(rowCoords.sort((a, b) => b[1] - a[1]).map(([x, y]) => [x, y]));\n  }\n  return res.sort((a, b) => b[1] - a[1]).map(([x, y]) => [x, y]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCoords = row.map((v, i) => [i, v]);\n    res.push(rowCoords.sort((a, b) => a[1] - b[1]).map(([x, y]) => [x, y]));\n  }\n  return res.sort((a, b) => a[1] - b[1]).map(([x, y]) => [x, y]);\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/*\n  Given an array of non-negative integers, return the maximum element in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * max_element([5, 6, 2, 1]) => 6\n  * max_element([5, 6, 2, 1]) => 5\n  * max_element([5, 6, 2, 1]) => 6\n  * max_element([5, 6, 2, 1]) => 6\n  */\nconst max_element = (array) => {\n  return array.reduce((a, b) => Math.max(a, b), 0);\n};\n\n/*\n  Given an array of non-negative integers, return the minimum element in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * min_element([5, 6, 2, 1]) => 2\n  * min_element([5, 6, 2, 1]) => 5\n  * min_element([5, 6, 2, 1]) => 6\n  * min_element([5, 6, 2, 1]) => 6\n  */\nconst min_element = (array) => {\n  return array.reduce((a, b) => Math.min(a, b), 0);\n};\n\n/*\n  Given an array of non-negative integers, return the sum of all the elements in the given array.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sum([5, 6, 2, 1]) => 10\n  * sum([5, 6, 2, 1]) => 10\n  * sum([5, 6, 2, 1]) => 10\n  * sum([5, 6, 2, 1]) => 10\n  */\nconst sum = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given an array of non-negative integers, return the sum of all the elements in the given array ignoring negative numbers.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sum_ignore_negative([5, 6, 2, 1]) => 10\n  * sum_ignore_negative([5, 6, 2, 1]) => 10\n  * sum_ignore_negative([5, 6, 2, 1]) => 10\n  * sum_ignore_negative([5, 6, 2, 1]) => 10\n  */\nconst sum_ignore_negative = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given an array of non-negative integers, return the sum of all the elements in the given array ignoring negative numbers and zeroes.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sum_ignore_zero_and_negative([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative([5, 6, 2, 1]) => 10\n  */\nconst sum_ignore_zero_and_negative = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given an array of non-negative integers, return the sum of all the elements in the given array ignoring negative numbers and zeroes.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sum_ignore_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  */\nconst sum_ignore_zero_and_negative_and_zero = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given an array of non-negative integers, return the sum of all the elements in the given array ignoring negative numbers and zeroes.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sum_ignore_zero_and_negative_and_zero_and_negative([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative([5, 6, 2, 1]) => 10\n  */\nconst sum_ignore_zero_and_negative_and_zero_and_negative = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given an array of non-negative integers, return the sum of all the elements in the given array ignoring negative numbers and zeroes.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  */\nconst sum_ignore_zero_and_negative_and_zero_and_negative_and_zero = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given an array of non-negative integers, return the sum of all the elements in the given array ignoring negative numbers and zeroes.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative([5, 6, 2, 1]) => 10\n  */\nconst sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given an array of non-negative integers, return the sum of all the elements in the given array ignoring negative numbers and zeroes.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  */\nconst sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative_and_zero = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given an array of non-negative integers, return the sum of all the elements in the given array ignoring negative numbers and zeroes.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative_and_zero_and_negative([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative_and_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative_and_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  * sum_ignore_zero_and_negative_and_zero_and_negative_and_zero_and_negative_and_zero_and_negative_and_zero([5, 6, 2, 1]) => 10\n  */\nconst sum_ignore_zero_and_negative_and_zero_and_negative_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i;\n  let j;\n  let k;\n  let l;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const maxes = numbers.reduce((acc, cur) => {\n    if (cur > acc) {\n      acc = cur;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, cur) => {\n    if (cur > maxes) {\n      maxes = cur;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 3, 4, 4]\n  */\nconst rolling_min = (numbers) => {\n  const mins = numbers.reduce((acc, cur) => {\n    if (cur < acc) {\n      acc = cur;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, cur) => {\n    if (cur < mins) {\n      mins = cur;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling mean element found until given moment\n  in the sequence.\n  >>> rolling_mean([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rolling_mean = (numbers) => {\n  const means = numbers.reduce((acc, cur) => {\n    if (cur < acc) {\n      acc = cur;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, cur) => {\n    if (cur < means) {\n      means = cur;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolling_std([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rolling_std = (numbers) => {\n  const stds = numbers.reduce((acc, cur) => {\n    if (cur < acc) {\n      acc = cur;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, cur) => {\n    if (cur < stds) {\n      stds = cur;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolling_var([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rolling_var = (numbers) => {\n  const vars = numbers.reduce((acc, cur) => {\n    if (cur < acc) {\n      acc = cur;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, cur) => {\n    if (cur < vars) {\n      vars = cur;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3, 4, 4]\n  */\nconst rolling_median = (numbers) => {\n  const medians = numbers.reduce((acc, cur) => {\n    if (cur < acc) {\n      acc = cur;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, cur) => {\n    if (cur < medians) {\n      medians = cur;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2, 1, 2]\n  */\nconst rolling_mode = (numbers) => {\n  const modes = numbers.reduce((acc, cur) => {\n    if (cur < acc) {\n      acc = cur;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, cur) => {\n    if (cur < modes) {\n      modes = cur;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2, 1, 2]\n  */\nconst rolling_mode = (numbers) => {\n  const modes = numbers.reduce((acc, cur) => {\n    if (cur < acc) {\n      acc = cur;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, cur) => {\n    if (cur < modes) {\n      modes = cur;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2, 1, 2]\n  */\nconst rolling_mode = (numbers) => {\n  const modes = numbers.reduce((acc, cur) => {\n    if (cur < acc) {\n      acc = cur;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, cur) => {\n    if (cur < modes) {\n      modes = cur;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2, 1, 2]\n  */\nconst rolling_mode = (numbers) => {\n  const modes = numbers.reduce((acc, cur) => {\n    if (cur < acc) {\n      acc = cur;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, cur) => {\n    if (cur < modes) {\n      modes = cur;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2, 1, 2]\n  */\nconst rolling_mode = (numbers) => {\n  const modes = numbers.reduce((acc, cur) => {\n    if (cur < acc) {\n      acc = cur;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, cur) => {\n    if (cur < modes) {\n      modes = cur;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2, 1, 2]\n  */\nconst rolling_mode = (numbers) => {\n  const modes = numbers.reduce((acc, cur) => {\n    if (cur < acc) {\n      acc = cur;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, cur) => {\n    if (cur < modes) {\n      modes = cur;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2, 1, 2]\n  */\nconst rolling_mode = (numbers) => {\n  const modes = numbers.reduce((acc, cur) => {\n    if (cur < acc) {\n      acc = cur;\n    }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  let min;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let minIndex;\n  let minValue;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') bored++;\n  });\n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of angers. A anger is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_anger(\"Hello world\")\n  0\n  >>> is_anger(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_anger = (S) => {\n  let anger = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') anger++;\n  });\n  return anger;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of surprises. A surprise is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_surprise(\"Hello world\")\n  0\n  >>> is_surprise(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_surprise = (S) => {\n  let surprise = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') surprise++;\n  });\n  return surprise;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fears. A fear is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  let fear = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') fear++;\n  });\n  return fear;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An anger is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  let disgust = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') disgust++;\n  });\n  return disgust;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of surprises. A surprise is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_surprise(\"Hello world\")\n  0\n  >>> is_surprise(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_surprise = (S) => {\n  let surprise = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') surprise++;\n  });\n  return surprise;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fears. A fear is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  let fear = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') fear++;\n  });\n  return fear;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An anger is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  let disgust = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') disgust++;\n  });\n  return disgust;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of surprises. A surprise is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_surprise(\"Hello world\")\n  0\n  >>> is_surprise(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_surprise = (S) => {\n  let surprise = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') surprise++;\n  });\n  return surprise;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fears. A fear is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  let fear = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') fear++;\n  });\n  return fear;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An anger is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  let disgu", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  const isInt = Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n  return isInt && x + y + z === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero = (x, y, z) => {\n  const isInt = Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n  return isInt || x + y + z === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero = (x, y, z) => {\n  const isInt = Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n  return isInt || x + y + z === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero = (x, y, z) => {\n  const isInt = Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n  return isInt || x + y + z === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero = (x, y, z) => {\n  const isInt = Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n  return isInt || x + y + z === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero = (x, y, z) => {\n  const isInt = Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n  return isInt || x + y + z === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero = (x, y, z) => {\n  const isInt = Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n  return isInt || x + y + z === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero = (x, y, z) => {\n  const isInt = Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n  return isInt || x + y + z === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero = (x, y, z) => {\n  const isInt = Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n  return isInt || x + y + z === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero = (x, y, z) => {\n  const isInt = Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n  return isInt || x + y + z === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero = (x, y, z) => {\n  const isInt = Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n  return isInt || x + y + z === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero = (x, y, z) => {\n  const isInt = Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n  return isInt || x + y + z === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsIndex = 0;\n  let vowelsCount = 0;\n  let vowelsIndex2 = 0;\n  let vowelsCount2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsCount3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsCount4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsCount5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsCount6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsCount7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsCount8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsCount9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsCount10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsCount11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsCount12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsCount13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsCount14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsCount15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsCount16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsCount17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsCount18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsCount19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsCount20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsCount21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsCount22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsCount23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsCount24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsCount25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsCount26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsCount27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsCount28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsCount29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsCount30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsCount31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsCount32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsCount33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsCount34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsCount35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsCount36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsCount37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsCount38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsCount39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsCount40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsCount41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsCount42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsCount43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsCount44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsCount45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsCount46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsCount47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsCount48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsCount49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsCount50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsCount51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsCount52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsCount53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsCount54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsCount55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsCount56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsCount57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsCount58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsCount59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsCount60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsCount61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsCount62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsCount63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsCount64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsCount65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsCount66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsCount67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsCount68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsCount69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsCount70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsCount71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsCount72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsCount73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsCount74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsCount75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsCount76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsCount77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsCount78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsCount79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsCount80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsCount81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsCount82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsCount83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsCount84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsCount85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsCount86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsCount87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsCount88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsCount89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsCount90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsCount91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsCount92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsCount93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsCount94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsCount95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsCount96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsCount97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsCount98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsCount99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsCount100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsCount101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsCount102 = 0;\n  let vowelsIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let maxDigit = 0;\n  let maxDigitSum = 0;\n  let maxDigitSum2 = 0;\n  let maxDigitSum3 = 0;\n  let maxDigitSum4 = 0;\n  let maxDigitSum5 = 0;\n  let maxDigitSum6 = 0;\n  let maxDigitSum7 = 0;\n  let maxDigitSum8 = 0;\n  let maxDigitSum9 = 0;\n  let maxDigitSum10 = 0;\n  let maxDigitSum11 = 0;\n  let maxDigitSum12 = 0;\n  let maxDigitSum13 = 0;\n  let maxDigitSum14 = 0;\n  let maxDigitSum15 = 0;\n  let maxDigitSum16 = 0;\n  let maxDigitSum17 = 0;\n  let maxDigitSum18 = 0;\n  let maxDigitSum19 = 0;\n  let maxDigitSum20 = 0;\n  let maxDigitSum21 = 0;\n  let maxDigitSum22 = 0;\n  let maxDigitSum23 = 0;\n  let maxDigitSum24 = 0;\n  let maxDigitSum25 = 0;\n  let maxDigitSum26 = 0;\n  let maxDigitSum27 = 0;\n  let maxDigitSum28 = 0;\n  let maxDigitSum29 = 0;\n  let maxDigitSum30 = 0;\n  let maxDigitSum31 = 0;\n  let maxDigitSum32 = 0;\n  let maxDigitSum33 = 0;\n  let maxDigitSum34 = 0;\n  let maxDigitSum35 = 0;\n  let maxDigitSum36 = 0;\n  let maxDigitSum37 = 0;\n  let maxDigitSum38 = 0;\n  let maxDigitSum39 = 0;\n  let maxDigitSum40 = 0;\n  let maxDigitSum41 = 0;\n  let maxDigitSum42 = 0;\n  let maxDigitSum43 = 0;\n  let maxDigitSum44 = 0;\n  let maxDigitSum45 = 0;\n  let maxDigitSum46 = 0;\n  let maxDigitSum47 = 0;\n  let maxDigitSum48 = 0;\n  let maxDigitSum49 = 0;\n  let maxDigitSum50 = 0;\n  let maxDigitSum51 = 0;\n  let maxDigitSum52 = 0;\n  let maxDigitSum53 = 0;\n  let maxDigitSum54 = 0;\n  let maxDigitSum55 = 0;\n  let maxDigitSum56 = 0;\n  let maxDigitSum57 = 0;\n  let maxDigitSum58 = 0;\n  let maxDigitSum59 = 0;\n  let maxDigitSum60 = 0;\n  let maxDigitSum61 = 0;\n  let maxDigitSum62 = 0;\n  let maxDigitSum63 = 0;\n  let maxDigitSum64 = 0;\n  let maxDigitSum65 = 0;\n  let maxDigitSum66 = 0;\n  let maxDigitSum67 = 0;\n  let maxDigitSum68 = 0;\n  let maxDigitSum69 = 0;\n  let maxDigitSum70 = 0;\n  let maxDigitSum71 = 0;\n  let maxDigitSum72 = 0;\n  let maxDigitSum73 = 0;\n  let maxDigitSum74 = 0;\n  let maxDigitSum75 = 0;\n  let maxDigitSum76 = 0;\n  let maxDigitSum77 = 0;\n  let maxDigitSum78 = 0;\n  let maxDigitSum79 = 0;\n  let maxDigitSum80 = 0;\n  let maxDigitSum81 = 0;\n  let maxDigitSum82 = 0;\n  let maxDigitSum83 = 0;\n  let maxDigitSum84 = 0;\n  let maxDigitSum85 = 0;\n  let maxDigitSum86 = 0;\n  let maxDigitSum87 = 0;\n  let maxDigitSum88 = 0;\n  let maxDigitSum89 = 0;\n  let maxDigitSum90 = 0;\n  let maxDigitSum91 = 0;\n  let maxDigitSum92 = 0;\n  let maxDigitSum93 = 0;\n  let maxDigitSum94 = 0;\n  let maxDigitSum95 = 0;\n  let maxDigitSum96 = 0;\n  let maxDigitSum97 = 0;\n  let maxDigitSum98 = 0;\n  let maxDigitSum99 = 0;\n  let maxDigitSum100 = 0;\n  let maxDigitSum101 = 0;\n  let maxDigitSum102 = 0;\n  let maxDigitSum103 = 0;\n  let maxDigitSum104 = 0;\n  let maxDigitSum105 = 0;\n  let maxDigitSum106 = 0;\n  let maxDigitSum107 = 0;\n  let maxDigitSum108 = 0;\n  let maxDigitSum109 = 0;\n  let maxDigitSum110 = 0;\n  let maxDigitSum111 = 0;\n  let maxDigitSum112 = 0;\n  let maxDigitSum113 = 0;\n  let maxDigitSum114 = 0;\n  let maxDigitSum115 = 0;\n  let maxDigitSum116 = 0;\n  let maxDigitSum117 = 0;\n  let maxDigitSum118 = 0;\n  let maxDigitSum119 = 0;\n  let maxDigitSum120 = 0;\n  let maxDigitSum121 = 0;\n  let maxDigitSum122 = 0;\n  let maxDigitSum123 = 0;\n  let maxDigitSum124 = 0;\n  let maxDigitSum125 = 0;\n  let maxDigitSum126 = 0;\n  let maxDigitSum127 = 0;\n  let maxDigitSum128 = 0;\n  let maxDigitSum129 = 0;\n  let maxDigitSum130 = 0;\n  let maxDigitSum131 = 0;\n  let maxDigitSum132 = 0;\n  let maxDigitSum133 = 0;\n  let maxDigitSum134 = 0;\n  let maxDigitSum135 = 0;\n  let maxDigitSum136 = 0;\n  let maxDigitSum137 = 0;\n  let maxDigitSum138 = 0;\n  let maxDigitSum139 = 0;\n  let maxDigitSum140 = 0;\n  let maxDigitSum141 = 0;\n  let maxDigitSum142 = 0;\n  let maxDigitSum143 = 0;\n  let maxDigitSum144 = 0;\n  let maxDigitSum145 = 0;\n  let maxDigitSum146 = 0;\n  let maxDigitSum147 = 0;\n  let maxDigitSum148 = 0;\n  let maxDigitSum149 = 0;\n  let maxDigitSum150 = 0;\n  let maxDigitSum151 = 0;\n  let maxDigitSum152 = 0;\n  let maxDigitSum153 = 0;\n  let maxDigitSum154 = 0;\n  let maxDigitSum155 = 0;\n  let maxDigitSum156 = 0;\n  let maxDigitSum157 = 0;\n  let maxDigitSum158 = 0;\n  let maxDigitSum159 = 0;\n  let maxDigitSum160 = 0;\n  let maxDigitSum161 = 0;\n  let maxDigitSum162 = 0;\n  let maxDigitSum163 = 0;\n  let maxDigitSum164 = 0;\n  let maxDigitSum165 = 0;\n  let maxDigitSum166 = 0;\n  let maxDigitSum167 = 0;\n  let maxDigitSum168 = 0;\n  let maxDigitSum169 = 0;\n  let maxDigitSum170 = 0;\n  let maxDigitSum171 = 0;\n  let maxDigitSum172 = 0;\n  let maxDigitSum173 = 0;\n  let maxDigitSum174 = 0;\n  let maxDigitSum175 = 0;\n  let maxDigitSum176 = 0;\n  let maxDigitSum177 = 0;\n  let maxDigitSum178 = 0;\n  let maxDigitSum179 = 0;\n  let maxDigitSum180 = 0;\n  let maxDigitSum181 = 0;\n  let maxDigitSum182 = 0;\n  let maxDigitSum183 = 0;\n  let maxDigitSum184 = 0;\n  let maxDigitSum185 = 0;\n  let maxDigitSum186 = 0;\n  let maxDigitSum187 = 0;\n  let maxDigitSum188 = 0;\n  let maxDigitSum189 = 0;\n  let maxDigitSum190 = 0;\n  let maxDigitSum191 = 0;\n  let maxDigitSum192 = 0;\n  let maxDigitSum193 = 0;\n  let max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a string, return true if all characters are digits, else return false.\n  The function should return false is the given string contains only digits.\n  Examples:\n  check_str_digits(\"123\") should return true.\n  check_str_digits(\"123abc\") should return false.\n  check_str_digits(\"123abc123\") should return false.\n  check_str_digits(\"123abc123abc\") should return false.\n  check_str_digits(\"123abc123abc123\") should return false.\n  check_str_digits(\"123abc123abc123abc123\") should return false.\n  check_str_digits(\"123abc123abc123abc123abc123\") should return false.\n  check_str_digits(\"123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let primes = [];\n  let prime = 1;\n  let i = 1;\n  while (i <= n) {\n    if (prime % i === 0) {\n      primes.push(i);\n      prime = 1;\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns the number of times it appears in an array\n  of integers. For example:\n  count_in_array(2,[2,3,5,7,11,13,17,19]) => 3\n  count_in_array(2,[2,3,5,7,11,13,17]) => 2\n  count_in_array(2,[2,3,5,7,11,13,17]) => 1\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0\n  count_in_array(2,[2,3,5,7,11,13,17]) => 0", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  \n  while(b) {\n    product = product * b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 28.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 14.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  \n  while(b) {\n    sum += b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return sum;\n}\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(148, 412) should return -412.\n  difference(19, 28) should return 28.\n  difference(2020, 1851) should return 1851.\n  difference(14,-15) should return 14.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  \n  while(b) {\n    difference = difference + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return difference;\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absolute(148, 412) should return 148.\n  absolute(19, 28) should return 28.\n  absolute(2020, 1851) should return 1851.\n  absolute(14,-15) should return 14.\n  */\nconst absolute = (a, b) => {\n  let absolute = 0;\n  \n  while(b) {\n    absolute = absolute + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return absolute;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148, 412) should return 412.\n  sqrt(19, 28) should return 28.\n  sqrt(2020, 1851) should return 1851.\n  sqrt(14,-15) should return 14.\n  */\nconst sqrt = (a, b) => {\n  let sqrt = 0;\n  \n  while(b) {\n    sqrt = sqrt + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return sqrt;\n}\n\n/*Complete the function that takes two integers and returns \n  the inverse of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 148.\n  inverse(19, 28) should return 28.\n  inverse(2020, 1851) should return 1851.\n  inverse(14,-15) should return 14.\n  */\nconst inverse = (a, b) => {\n  let inverse = 0;\n  \n  while(b) {\n    inverse = inverse + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return inverse;\n}\n\n/*Complete the function that takes two integers and returns \n  the modulo of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  modulo(148, 412) should return 148.\n  modulo(19, 28) should return 28.\n  modulo(2020, 1851) should return 1851.\n  modulo(14,-15) should return 14.\n  */\nconst modulo = (a, b) => {\n  let modulo = 0;\n  \n  while(b) {\n    modulo = modulo + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return modulo;\n}\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  remainder(148, 412) should return 148.\n  remainder(19, 28) should return 28.\n  remainder(2020, 1851) should return 1851.\n  remainder(14,-15) should return 14.\n  */\nconst remainder = (a, b) => {\n  let remainder = 0;\n  \n  while(b) {\n    remainder = remainder + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return remainder;\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the remainder of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  remainderAbsolute(148, 412) should return 148.\n  remainderAbsolute(19, 28) should return 28.\n  remainderAbsolute(2020, 1851) should return 1851.\n  remainderAbsolute(14,-15) should return 14.\n  */\nconst remainderAbsolute = (a, b) => {\n  let remainder = 0;\n  \n  while(b) {\n    remainder = remainder + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return remainder;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of the absolute value of the remainder of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  remainderAbsoluteSquareRoot(148, 412) should return 412.\n  remainderAbsoluteSquareRoot(19, 28) should return 28.\n  remainderAbsoluteSquareRoot(2020, 1851) should return 1851.\n  remainderAbsoluteSquareRoot(14,-15) should return 14.\n  */\nconst remainderAbsoluteSquareRoot = (a, b) => {\n  let remainder = 0;\n  \n  while(b) {\n    remainder = remainder + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return remainder;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of the absolute value of the remainder of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  remainderAbsoluteSquareRootSquareRoot(148, 412) should return 412.\n  remainderAbsoluteSquareRootSquareRoot(19, 28) should return 28.\n  remainderAbsoluteSquareRootSquareRoot(2020, 1851) should return 1851.\n  remainderAbsoluteSquareRootSquareRoot(14,-15) should return 14.\n  */\nconst remainderAbsoluteSquareRootSquareRoot = (a, b) => {\n  let remainder = 0;\n  \n  while(b) {\n    remainder = remainder + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return remainder;\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the remainder of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  remainderAbsoluteSquareRootSquareRootSquareRoot(148, 412) should return 412.\n  remainderAbsoluteSquareRootSquareRootSquareRoot(19, 28) should return 28.\n  remainderAbsoluteSquareRootSquareRootSquareRoot(2020, 1851) should return 1851.\n  remainderAbsoluteSquareRootSquareRootSquareRoot(14,-15) should return 14.\n  */\nconst remainderAbsoluteSquareRootSquareRootSquareRoot = (a, b) => {\n  let remainder = 0;\n  \n  while(b) {\n    remainder = remainder + b;\n    b = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 0\n  */\nconst count_lower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  count_vowels('aBCdEf') returns 1\n  count_vowels('abcdefg') returns 0\n  count_vowels('dBBE') returns 0\n  */\nconst count_vowels = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of digits in even indices.\n  \n  For example:\n  count_digits('aBCdEf') returns 1\n  count_digits('abcdefg') returns 0\n  count_digits('dBBE') returns 0\n  */\nconst count_digits = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= '0' && s[i] <= '9') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= '0' && s[j] <= '9') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= '0' && s[k] <= '9') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of uppercase letters in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of lowercase letters in even indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 0\n  */\nconst count_lower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  count_vowels('aBCdEf') returns 1\n  count_vowels('abcdefg') returns 0\n  count_vowels('dBBE') returns 0\n  */\nconst count_vowels = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of spaces in odd indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  let smallest = Number.POSITIVE_INFINITY;\n  let largest = Number.NEGATIVE_INFINITY;\n  let i;\n\n  for (i = 0; i < value.length; i++) {\n    if (value[i] < smallest) {\n      smallest = value[i];\n    }\n    if (value[i] > largest) {\n      largest = value[i];\n    }\n  }\n\n  return largest + 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest floating point number to it. If the number\n  is equidistant from two floating point numbers, round it away from\n  zero.\n  Examples\n  >>> closest_floating(\"10\")\n  10\n  >>> closest_floating(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floating point numbers, the one you should return is the one\n  that is farthest from zero. For example closest_floating(\"14.5\") should\n  return 15 and closest_floating(\"-14.5\") should return -15.\n  */\nconst closest_floating = (value) => {\n  let smallest = Number.POSITIVE_INFINITY;\n  let largest = Number.NEGATIVE_INFINITY;\n  let i;\n\n  for (i = 0; i < value.length; i++) {\n    if (value[i] < smallest) {\n      smallest = value[i];\n    }\n    if (value[i] > largest) {\n      largest = value[i];\n    }\n  }\n\n  return largest + 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest boolean to it. If the number is equidistant\n  from two booleans, round it away from zero.\n  Examples\n  >>> closest_boolean(\"10\")\n  10\n  >>> closest_boolean(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two booleans, the one you should return is the one that is farthest\n  from zero. For example closest_boolean(\"14.5\") should return 15 and closest_boolean(\"-14.5\") should return -15.\n  */\nconst closest_boolean = (value) => {\n  let smallest = Number.POSITIVE_INFINITY;\n  let largest = Number.NEGATIVE_INFINITY;\n  let i;\n\n  for (i = 0; i < value.length; i++) {\n    if (value[i] < smallest) {\n      smallest = value[i];\n    }\n    if (value[i] > largest) {\n      largest = value[i];\n    }\n  }\n\n  return largest + 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest date object to it. If the number is equidistant\n  from two dates, round it away from zero.\n  Examples\n  >>> closest_date(\"10\")\n  10\n  >>> closest_date(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two dates, the one you should return is the one that is farthest\n  from zero. For example closest_date(\"14.5\") should return 15 and closest_date(\"-14.5\") should return -15.\n  */\nconst closest_date = (value) => {\n  let smallest = Number.POSITIVE_INFINITY;\n  let largest = Number.NEGATIVE_INFINITY;\n  let i;\n\n  for (i = 0; i < value.length; i++) {\n    if (value[i] < smallest) {\n      smallest = value[i];\n    }\n    if (value[i] > largest) {\n      largest = value[i];\n    }\n  }\n\n  return largest + 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest time object to it. If the number is equidistant\n  from two time objects, round it away from zero.\n  Examples\n  >>> closest_time(\"10\")\n  10\n  >>> closest_time(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two time objects, the one you should return is the one that is farthest\n  from zero. For example closest_time(\"14.5\") should return 15 and closest_time(\"-14.5\") should return -15.\n  */\nconst closest_time = (value) => {\n  let smallest = Number.POSITIVE_INFINITY;\n  let largest = Number.NEGATIVE_INFINITY;\n  let i;\n\n  for (i = 0; i < value.length; i++) {\n    if (value[i] < smallest) {\n      smallest = value[i];\n    }\n    if (value[i] > largest) {\n      largest = value[i];\n    }\n  }\n\n  return largest + 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest date object to it. If the number is equidistant\n  from two date objects, round it away from zero.\n  Examples\n  >>> closest_date(\"10\")\n  10\n  >>> closest_date(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two date objects, the one you should return is the one that is farthest\n  from zero. For example closest_date(\"14.5\") should return 15 and closest_date(\"-14.5\") should return -15.\n  */\nconst closest_date_string = (value) => {\n  let smallest = Number.POSITIVE_INFINITY;\n  let largest = Number.NEGATIVE_INFINITY;\n  let i;\n\n  for (i = 0; i < value.length; i++) {\n    if (value[i] < smallest) {\n      smallest = value[i];\n    }\n    if (value[i] > largest) {\n      largest = value[i];\n    }\n  }\n\n  return largest + 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest time object to it. If the number is equidistant\n  from two time objects, round it away from zero.\n  Examples\n  >>> closest_time(\"10\")\n  10\n  >>> closest_time(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two time objects, the one you should return is the one that is farthest\n  from zero. For example closest_time(\"14.5\") should return 15 and closest_time(\"-14.5\") should return -15.\n  */\nconst closest_time_string = (value) => {\n  let smallest = Number.POSITIVE_INFINITY;\n  let largest = Number.NEGATIVE_INFINITY;\n  let i;\n\n  for (i = 0; i < value.length; i++) {\n    if (value[i] < smallest) {\n      smallest = value[i];\n    }\n    if (value[i] > largest) {\n      largest = value[i];\n    }\n  }\n\n  return largest + 1;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest date object to it. If the number is equidistant\n  from two date objects, round it away from zero.\n  Examples\n  >>> closest_date(\"10\")\n  10\n  >>> closest_date(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two date objects, the one you should return is the one that is farthest\n  from zero. For example closest_date(\"14", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
