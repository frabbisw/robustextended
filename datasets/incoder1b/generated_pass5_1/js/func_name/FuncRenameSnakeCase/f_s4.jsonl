{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  const closest = numbers.reduce((acc, curr) => {\n    const diff = curr - acc;\n    if (diff < Math.abs(diff)) {\n      return curr;\n    }\n    return acc;\n  }, Number.POSITIVE_INFINITY);\n  return Math.abs(closest - threshold) < Math.abs(threshold);\n};\n\n/**\n * Check if given number is in given list of numbers.\n * If given number is in given list of numbers, return true.\n * If given number is not in given list of numbers, return false.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to each other than given threshold.\n * If given number is not in given list of numbers, return false only if number\n * is closer to each other than given threshold.\n * If given number is in given list of numbers, return true only if number is\n * closer to "}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      if (j === 0) paren_group_string += paren_group[j];\n      if (j === paren_group.length - 1) paren_group_string += ')';\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/* Given a string, return a list of all possible permutations of its characters.\n  >>> permutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst permutations = (string) => {\n  const permutations = [];\n  let current_permutation = '';\n  for (let i = 0; i < string.length; i++) {\n    current_permutation += string[i];\n    permutations.push(current_permutation);\n  }\n  return permutations;\n};\n\n/* Given a string, return a list of all possible permutations of its characters, ignoring any spaces.\n  >>> permutations('  abc  ')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst permutations_ignoring_spaces = (string) => {\n  const permutations = [];\n  let current_permutation = '';\n  for (let i = 0; i < string.length; i++) {\n    current_permutation += string[i];\n    permutations.push(current_permutation);\n  }\n  return permutations;\n};\n\n/* Given a string, return a list of all possible permutations of its characters, ignoring any spaces, and\n  removing any spaces.\n  >>> permutations('  abc  ')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst permutations_ignoring_spaces_no_spaces = (string) => {\n  const permutations = [];\n  let current_permutation = '';\n  for (let i = 0; i < string.length; i++) {\n    current_permutation += string[i];\n    permutations.push(current_permutation);\n  }\n  return permutations;\n};\n\n/* Given a string, return a list of all possible permutations of its characters, ignoring any spaces, and\n  removing any spaces, except for one space.\n  >>> permutations('  abc  ')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst permutations_ignoring_spaces_except_one_space = (string) => {\n  const permutations = [];\n  let current_permutation = '';\n  for (let i = 0; i < string.length; i++) {\n    current_permutation += string[i];\n    permutations.push(current_permutation);\n  }\n  return permutations;\n};\n\n/* Given a string, return a list of all possible permutations of its characters, ignoring any spaces, and\n  removing any spaces, except for one space, except for one space.\n  >>> permutations('  abc  ')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst permutations_ignoring_spaces_except_one_space_no_spaces = (string) => {\n  const permutations = [];\n  let current_permutation = '';\n  for (let i = 0; i < string.length; i++) {\n    current_permutation += string[i];\n    permutations.push(current_permutation);\n  }\n  return permutations;\n};\n\n/* Given a string, return a list of all possible permutations of its characters, ignoring any spaces, and\n  removing any spaces, except for one space, except for one space, except for one space.\n  >>> permutations('  abc  ')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst permutations_ignoring_spaces_except_one_space_except_one_space = (string) => {\n  const permutations = [];\n  let current_permutation = '';\n  for (let i = 0; i < string.length; i++) {\n    current_permutation += string[i];\n    permutations.push(current_permutation);\n  }\n  return permutations;\n};\n\n/* Given a string, return a list of all possible permutations of its characters, ignoring any spaces, and\n  removing any spaces, except for one space, except for one space, except for one space, except for one space.\n  >>> permutations('  abc  ')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst permutations_ignoring_spaces_except_one_space_except_one_space_no_spaces = (string) => {\n  const permutations = [];\n  let current_permutation = '';\n  for (let i = 0; i < string.length; i++) {\n    current_permutation += string[i];\n    permutations.push(current_permutation);\n  }\n  return permutations;\n};\n\n/* Given a string, return a list of all possible permutations of its characters, ignoring any spaces, and\n  removing any spaces, except for one space, except for one space, except for one space, except for one space.\n  >>> permutations('  abc  ')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst permutations_ignoring_spaces_except_one_space_except_one_space_except_one_space = (string) => {\n  const permutations = [];\n  let current_permutation = '';\n  for (let i = 0; i < string.length; i++) {\n    current_permutation += string[i];\n    permutations.push(current_permutation);\n  }\n  return permutations;\n};\n\n/* Given a string, return a list of all possible permutations of its characters, ignoring any spaces, and\n  removing any spaces, except for one space, except for one space, except for one space, except for one space.\n  >>> permutations('  abc  ')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst permutations_ignoring_spaces_except_one_space_except_one_space_except_one_space_no_spaces = (string) => {\n  const permutations = [];\n  let current_permutation = '';\n  for (let i = 0; i < string.length; i++) {\n    current_permutation += string[i];\n    permutations.push(current_permutation);\n  }\n  return permutations;\n};\n\n/* Given a string, return a list of all possible permutations of its characters, ignoring any spaces, and\n  removing any spaces, except for one space, except for one space, except for one space, except for one space.\n  >>> permutations('  abc  ')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst permutations_ignoring_spaces_except_one_space_except_one_space_except_one_space_except_one_space = (string) => {\n  const permutations = [];\n  let current_permutation = '';\n  for (let i = 0; i < string.length; i++) {\n    current_permutation += string[i];\n    permutations.push(current_permutation);\n  }\n  return permutations;\n};\n\n/* Given a string, return a list of all possible permutations of its characters, ignoring any spaces, and\n  removing any spaces, except for one space, except for one space, except for one space, except for one space.\n  >>> permutations('  abc  ')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst permutations_ignoring_spaces_except_one_space_except_one_space_except_one_space_except_one_space_no_spaces = (string) => {\n  const permutations = [];\n  let current_permutation = '';\n  for (let i = 0; i < string.length; i++) {\n    current_permutation += string[i];\n    permutations.push(current_permutation);\n  }\n  return permutations;\n};\n\n/* Given a string, return a list of all possible permutations of its characters, ignoring any spaces, and\n  removing any spaces, except for one space, except for one space, except for one space, except for one space.\n  >>> permutations('  abc  ')"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_decimal = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_decimal2 = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_decimal3 = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_decimal4 = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_decimal5 = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_decimal6 = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_decimal7 = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_decimal8 = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_decimal9 = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_decimal10 = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_decimal11 = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_decimal12 = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_int_decimal13 = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = decimals <= 0? 0 : decimals - 1;\n  return number / Math.pow(10, decimal);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number_int(3.5)\n  3\n  */\nconst truncate_number_"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -4, -4, -5])\n  false\n  >>> below_zero([-4, -4, -4, -5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -4, -4, -5])\n  false\n  >>> below_zero([-4, -4, -4, -5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -4, -4, -5])\n  false\n  >>> below_zero([-4, -4, -4, -5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -4, -4, -5])\n  false\n  >>> below_zero([-4, -4, -4, -5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -4, -4, -5])\n  false\n  >>> below_zero([-4, -4, -4, -5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -4, -4, -5])\n  false\n  >>> below_zero([-4, -4, -4, -5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -4, -4, -5])\n  false\n  >>> below_zero([-4, -4, -4, -5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -4, -4, -5])\n  false\n  >>> below_zero([-4, -4, -4, -5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -4, -4, -5])\n  false\n  >>> below_zero([-4, -4, -4, -5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -4, -4, -5])\n  false\n  >>> below_zero([-4, -4, -4, -5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([-4, -4, -4, -5])\n  false\n  >>> below_zero([-4, -4, -4, -5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n));\n  const mean = mean(means);\n  const deviations = numbers.map((n) => Math.abs(n - mean));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the square root of the average squared difference\n  between each element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst mean_squared_deviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n));\n  const mean = mean(means);\n  const deviations = numbers.map((n) => Math.pow(n, 2));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(average | x - x_mean |)\n  >>> root_mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst root_mean_squared_deviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n));\n  const mean = mean(means);\n  const deviations = numbers.map((n) => Math.pow(n, 0.5));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation\n  around the mean of this dataset.\n  Standard Deviation is the square root of the average squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = average | x - x_mean |\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n));\n  const mean = mean(means);\n  const deviations = numbers.map((n) => Math.pow(n, 0.5));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Variance (standard deviation)\n  around the mean of this dataset.\n  Variance is the square root of the average squared difference\n  between each element and a centerpoint (mean in this case):\n  V = average | x - x_mean |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst variance = (numbers) => {\n  const means = numbers.map((n) => Math.round(n));\n  const mean = mean(means);\n  const deviations = numbers.map((n) => Math.pow(n, 2));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation of\n  the absolute deviation from the mean of this dataset.\n  Standard Deviation is the square root of the average squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = average | x - x_mean |\n  >>> standard_deviation_of_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation_of_absolute_deviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n));\n  const mean = mean(means);\n  const deviations = numbers.map((n) => Math.abs(n - mean));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation of\n  the squared deviation from the mean of this dataset.\n  Standard Deviation is the square root of the average squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = average | x - x_mean |^2\n  >>> standard_deviation_of_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation_of_squared_deviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n));\n  const mean = mean(means);\n  const deviations = numbers.map((n) => Math.pow(n, 2));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation of\n  the root mean squared deviation from the mean of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(average | x - x_mean |)\n  >>> standard_deviation_of_root_mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation_of_root_mean_squared_deviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n));\n  const mean = mean(means);\n  const deviations = numbers.map((n) => Math.pow(n, 0.5));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation of\n  the absolute deviation from the mean of this dataset.\n  Standard Deviation is the square root of the average squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = average | x - x_mean |\n  >>> standard_deviation_of_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation_of_absolute_deviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n));\n  const mean = mean(means);\n  const deviations = numbers.map((n) => Math.abs(n - mean));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation of\n  the squared deviation from the mean of this dataset.\n  Standard Deviation is the square root of the average squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = average | x - x_mean |^2\n  >>> standard_deviation_of_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation_of_squared_deviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n));\n  const mean = mean(means);\n  const deviations = numbers.map((n) => Math.pow(n, 2));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation of\n  the root mean squared deviation from the mean of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(average | x - x_mean |)\n  >>> standard_deviation_of_root_mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation_of_root_mean_squared_deviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n));\n  const mean = mean(means);\n  const devi"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      j++\n      if (j === numbers.length) {\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n// Returns a list of all possible combinations of length n from length 1 to n-1.\n// If n is 0, returns an empty list.\nconst combinations = (from, to) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < to) {\n    if (from < to) {\n      if (i === to) {\n        result.push([])\n      }\n      result.push([from])\n      i++\n    } else {\n      if (i === from) {\n        result.push([])\n      }\n      result.push([to])\n      j++\n      if (j === from) {\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n// Returns a list of all possible combinations of length n from length 1 to n-1.\n// If n is 0, returns an empty list.\nconst combinations_with_replacement = (from, to) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < to) {\n    if (from < to) {\n      if (i === to) {\n        result.push([])\n      }\n      result.push([from])\n      i++\n    } else {\n      if (i === from) {\n        result.push([])\n      }\n      result.push([to])\n      j++\n      if (j === from) {\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n// Returns a list of all possible combinations of length n from length 1 to n-1.\n// If n is 0, returns an empty list.\nconst combinations_with_replacement_and_replacement = (from, to) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < to) {\n    if (from < to) {\n      if (i === to) {\n        result.push([])\n      }\n      result.push([from])\n      i++\n    } else {\n      if (i === from) {\n        result.push([])\n      }\n      result.push([to])\n      j++\n      if (j === from) {\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n// Returns a list of all possible combinations of length n from length 1 to n-1.\n// If n is 0, returns an empty list.\nconst combinations_with_replacement_and_replacement_and_replacement = (from, to) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < to) {\n    if (from < to) {\n      if (i === to) {\n        result.push([])\n      }\n      result.push([from])\n      i++\n    } else {\n      if (i === from) {\n        result.push([])\n      }\n      result.push([to])\n      j++\n      if (j === from) {\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n// Returns a list of all possible combinations of length n from length 1 to n-1.\n// If n is 0, returns an empty list.\nconst combinations_with_replacement_and_replacement_and_replacement_and_replacement = (from, to) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < to) {\n    if (from < to) {\n      if (i === to) {\n        result.push([])\n      }\n      result.push([from])\n      i++\n    } else {\n      if (i === from) {\n        result.push([])\n      }\n      result.push([to])\n      j++\n      if (j === from) {\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n// Returns a list of all possible combinations of length n from length 1 to n-1.\n// If n is 0, returns an empty list.\nconst combinations_with_replacement_and_replacement_and_replacement_and_replacement_and_replacement = (from, to) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < to) {\n    if (from < to) {\n      if (i === to) {\n        result.push([])\n      }\n      result.push([from])\n      i++\n    } else {\n      if (i === from) {\n        result.push([])\n      }\n      result.push([to])\n      j++\n      if (j === from) {\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n// Returns a list of all possible combinations of length n from length 1 to n-1.\n// If n is 0, returns an empty list.\nconst combinations_with_replacement_and_replacement_and_replacement_and_replacement_and_replacement_and_replacement = (from, to) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < to) {\n    if (from < to) {\n      if (i === to) {\n        result.push([])\n      }\n      result.push([from])\n      i++\n    } else {\n      if (i === from) {\n        result.push([])\n      }\n      result.push([to])\n      j++\n      if (j === from) {\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n// Returns a list of all possible combinations of length n from length 1 to n-1.\n// If n is 0, returns an empty list.\nconst combinations_with_replacement_and_replacement_and_replacement_and_replacement_and_replacement_and_replacement_and_replacement = (from, to) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < to) {\n    if (from < to) {\n      if (i === to) {\n        result.push([])\n      }\n      result.push([from])\n      i++\n    } else {\n      if (i === from) {\n        result.push([])\n      }\n      result.push([to])\n      j++\n      if (j === from) {\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n// Returns a list of all possible combinations of length n from length 1 to n-1.\n// If n is 0, returns an empty list.\nconst combinations_with_replacement_and_replacement_and_replacement_and_replacement_and_replacement_and_replacement_and_replacement_and_replacement = (from, to) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < to) {\n    if (from < to) {\n      if (i === to) {\n        result.push([])\n      }\n      result.push([from])\n      i++\n    } else {\n      if (i === from) {\n        result.push([])\n      }\n      result.push([to])\n      j++\n      if (j === from) {\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n// Returns a list of all possible combinations of length n from length 1 to n-1.\n// If n is 0, returns an empty list.\nconst combinations_with_replacement_and_replacement_and_replacement_and_replacement_and_replacement_and_replacement_and_replacement_and_replacement_and_replacement_and_replacement = (from, to) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < to) {\n    if (from < to) {\n      if (i === to) {\n        result.push([])\n      }\n      result.push([from])\n      i++\n    } else {\n      if (i === from) {\n        result.push([])\n      }\n      result.push([to])\n      j++\n      if (j === from) {\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n// Returns a list of all possible combinations of length n from length 1 to n-1.\n// If n is 0, returns an empty list.\nconst combinations_with_replacement_and_replacement_and_replacement_and_replacement_"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = 0;\n  const paren_nesting = 0;\n  const paren_stack_size = 0;\n  const paren_stack_remaining = 0;\n  const paren_stack_remaining_size = 0;\n  const paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining = 0;\n  let paren_stack_remaining_remaining"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filter_by_substring_rejected = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring_rejected(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filter_by_substring_rejected_rejected = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring_rejected_rejected(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filter_by_substring_rejected_rejected_rejected = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring_rejected_rejected_rejected(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filter_by_substring_rejected_rejected_rejected_rejected_rejected = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_rejected_reje"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product([2, 3])\n  (3, 6)\n  */\nconst sum_product_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int_int_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int_int_int_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int_int_int_int_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int_int_int_int_int_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int_int_int_int_int_int_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int_int_int_int_int_int_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int_int_int_int_int_int_int_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int_int_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int_int_int_int_int_int_int_int_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int_int_int_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int_int_int_int_int_int_int_int_int_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int_int_int_int_int_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only integers, return its sum and product as a tuple.\n  >>> sum_product_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int([2, 3], 2)\n  (3, 6)\n  */\nconst sum_product_int_int_int_int_int_int_"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] >= current) {\n      current = numbers[i];\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rolling_min = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] <= current) {\n      current = numbers[i];\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 5, 4, 4]\n  */\nconst rolling_sum = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      current = numbers[i];\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 24, 120, 720, 360, 720]\n  */\nconst rolling_product = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] * current > 1) {\n      current = numbers[i] * current;\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 5, 4, 4]\n  */\nconst rolling_sum_with_zero = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      current = numbers[i];\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 24, 120, 720, 360, 720]\n  */\nconst rolling_product_with_zero = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] * current > 1) {\n      current = numbers[i] * current;\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 5, 4, 4]\n  */\nconst rolling_sum_with_zero_and_one = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      current = numbers[i];\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 24, 120, 720, 360, 720]\n  */\nconst rolling_product_with_zero_and_one = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] * current > 1) {\n      current = numbers[i] * current;\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 5, 4, 4]\n  */\nconst rolling_sum_with_zero_and_one_and_zero = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      current = numbers[i];\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 24, 120, 720, 360, 720]\n  */\nconst rolling_product_with_zero_and_one_and_zero = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] * current > 1) {\n      current = numbers[i] * current;\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 5, 4, 4]\n  */\nconst rolling_sum_with_zero_and_one_and_one = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      current = numbers[i];\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 24, 120, 720, 360, 720]\n  */\nconst rolling_product_with_zero_and_one_and_one = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] * current > 1) {\n      current = numbers[i] * current;\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 5, 4, 4]\n  */\nconst rolling_sum_with_zero_and_one_and_one_and_zero = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      current = numbers[i];\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 24, 120, 720, 360, 720]\n  */\nconst rolling_product_with_zero_and_one_and_one_and_zero = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] * current > 1) {\n      current = numbers[i] * current;\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 5, 4, 4]\n  */\nconst rolling_sum_with_zero_and_one_and_one_and_one = (numbers) => {\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > current) {\n      current = numbers[i];\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 24, 120, 720, 360, 720]\n"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let palindromeLength = 0;\n  let palindromePrefix = '';\n  let palindromeSuffix = '';\n  let palindromePrefixLength = 0;\n  let palindromeSuffixLength = 0;\n  let palindromePrefixReverse = '';\n  let palindromeSuffixReverse = '';\n  let palindromePrefixReverseLength = 0;\n  let palindromeSuffixReverseLength = 0;\n  let palindromePrefixReverseReverse = '';\n  let palindromeSuffixReverseReverse = '';\n  let palindromePrefixReverseReverseLength = 0;\n  let palindromeSuffixReverseReverseLength = 0;\n  let palindromePrefixReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseLength = 0;\n  let palindromeSuffixReverseReverseReverseLength = 0;\n  let palindromePrefixReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromealisPalindrome = is_palindrome(string);\n  if (alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(alis(al"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  const result = []\n  for (let i = 0; i < a.length; i++) {\n    const bit = a.charCodeAt(i) | b.charCodeAt(i)\n    result.push(bit.toString(2))\n  }\n  return result.join('')\n}\n\n/* Convert a string to binary and return the binary string.\n  >>> binary_to_string('100')\n  '110'\n  */\nconst binary_to_string = (str) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    const bit = parseInt(str.charAt(i), 2)\n    result.push(bit.toString(2))\n  }\n  return result.join('')\n}\n\n/* Convert binary to string and return the string.\n  >>> binary_to_string('110')\n  '100'\n  */\nconst binary_to_string_hex = (str) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    const bit = parseInt(str.charAt(i), 2)\n    result.push(bit.toString(16))\n  }\n  return result.join('')\n}\n\n/* Convert binary to string and return the binary string.\n  >>> binary_to_string_hex('110')\n  '100'\n  */\nconst binary_to_string_hexa = (str) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    const bit = parseInt(str.charAt(i), 16)\n    result.push(bit.toString(2))\n  }\n  return result.join('')\n}\n\n/* Convert binary to string and return the binary string.\n  >>> binary_to_string_hexa('110')\n  '100'\n  */\nconst binary_to_string_hexa_hex = (str) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    const bit = parseInt(str.charAt(i), 16)\n    result.push(bit.toString(16))\n  }\n  return result.join('')\n}\n\n/* Convert binary to string and return the binary string.\n  >>> binary_to_string_hexa_hex('110')\n  '100'\n  */\nconst binary_to_string_hexa_hexa = (str) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    const bit = parseInt(str.charAt(i), 16)\n    result.push(bit.toString(2))\n  }\n  return result.join('')\n}\n\n/* Convert binary to string and return the binary string.\n  >>> binary_to_string_hexa_hexa('110')\n  '100'\n  */\nconst binary_to_string_hexa_hexa_hexa = (str) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    const bit = parseInt(str.charAt(i), 16)\n    result.push(bit.toString(2))\n  }\n  return result.join('')\n}\n\n/* Convert binary to string and return the binary string.\n  >>> binary_to_string_hexa_hexa_hexa('110')\n  '100'\n  */\nconst binary_to_string_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_hexa_"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = ''\n  let longestLength = 0\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (string.length > longestLength) {\n      longestString = string\n      longestLength = string.length\n    }\n  }\n  return longestString\n}\n\n/**\n * Given a string, return its reverse in string form.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, return an empty string.\n * If no reverse exists, "}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  return gcd(a, b);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst pow = (n, p) => {\n  return Math.pow(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod = (n, p) => {\n  return pow(n, p) % p;\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod2 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod3 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod4 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod5 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod6 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod7 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod8 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod9 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod10 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod11 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod12 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod13 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod14 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod15 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod16 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod17 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod18 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod19 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod20 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod21 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod22 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod23 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod24 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod25 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod26 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod27 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod28 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod29 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod30 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod31 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod32 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod33 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod34 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod35 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod36 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod37 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod38 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod39 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod40 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod41 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a number and a power of 2, return the number raised to the power.\nconst powMod42 = (n, p) => {\n  return powMod(n % p, p);\n};\n\n// Given a "}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if (string.charAt(i) === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string.charAt(i);\n    }\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['c', 'ba', 'ca']\n  */\nconst all_suffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if (string.charAt(i) === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string.charAt(i);\n    }\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['abc', 'ab', 'ba', 'ca']\n  */\nconst all_substrings = (string) => {\n  let substrings = [];\n  let substring = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += string.charAt(i);\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['abc', 'ab', 'ba', 'ca']\n  */\nconst all_substrings_reverse = (string) => {\n  let substrings = [];\n  let substring = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += string.charAt(i);\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_reverse('abc')\n  ['ca', 'ba', 'ab', 'bc']\n  */\nconst all_substrings_reverse_reverse = (string) => {\n  let substrings = [];\n  let substring = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += string.charAt(i);\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_reverse_reverse('abc')\n  ['ba', 'ca', 'ab', 'bc']\n  */\nconst all_substrings_reverse_reverse_reverse = (string) => {\n  let substrings = [];\n  let substring = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += string.charAt(i);\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_reverse_reverse_reverse('abc')\n  ['ab', 'bc', 'ca', 'ba']\n  */\nconst all_substrings_reverse_reverse_reverse_reverse = (string) => {\n  let substrings = [];\n  let substring = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += string.charAt(i);\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_reverse_reverse_reverse_reverse_reverse('abc')\n  ['ba', 'ca', 'ab', 'bc']\n  */\nconst all_substrings_reverse_reverse_reverse_reverse_reverse = (string) => {\n  let substrings = [];\n  let substring = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += string.charAt(i);\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_reverse_reverse_reverse_reverse_reverse_reverse('abc')\n  ['ab', 'bc', 'ca', 'ba']\n  */\nconst all_substrings_reverse_reverse_reverse_reverse_reverse_reverse = (string) => {\n  let substrings = [];\n  let substring = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += string.charAt(i);\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_reverse_reverse_reverse_reverse_reverse_reverse_reverse('abc')\n  ['ba', 'ca', 'ab', 'bc']\n  */\nconst all_substrings_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (string) => {\n  let substrings = [];\n  let substring = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += string.charAt(i);\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse('abc')\n  ['ab', 'bc', 'ca', 'ba']\n  */\nconst all_substrings_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (string) => {\n  let substrings = [];\n  let substring = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += string.charAt(i);\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse('abc')\n  ['ba', 'ca', 'ab', 'bc']\n  */\nconst all_substrings_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (string) => {\n  let substrings = [];\n  let substring = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += string.charAt(i);\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse('abc')\n  ['ab', 'bc', 'ca', 'ba']\n  */\nconst all_substrings_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (string) => {\n  let substrings = [];\n  let substring = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += string.charAt(i);\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse('abc')\n  ['ab', 'bc', 'ca', 'ba']\n  */\nconst all_substrings_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (string) => {\n  let substrings = [];\n  let substring = '';\n  let i;\n  for (i = 0; i < string.length; i++) {\n    if ("}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n// Return a string containing space-delimited numbers starting from n inclusive.\nconst string_sequence = ("}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find the number of unique characters (regardless of case) in the string\n  >>> count_unique_characters('xyzXYZ')\n  3\n  >>> count_unique_characters('Jerry')\n  4\n  */\nconst count_unique_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find the number of unique characters in the string ignoring case\n  >>> count_unique_characters_ignoring_case('xyzXYZ')\n  3\n  >>> count_unique_characters_ignoring_case('Jerry')\n  4\n  */\nconst count_unique_characters_ignoring_case = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find the number of unique characters in the string ignoring case and ignore case\n  >>> count_unique_characters_ignoring_case_and_ignore_case('xyzXYZ')\n  3\n  >>> count_unique_characters_ignoring_case_and_ignore_case('Jerry')\n  4\n  */\nconst count_unique_characters_ignoring_case_and_ignore_case = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find the number of unique characters in the string ignoring case and ignore case and ignore case\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case('xyzXYZ')\n  3\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case('Jerry')\n  4\n  */\nconst count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find the number of unique characters in the string ignoring case and ignore case and ignore case and ignore case\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case('xyzXYZ')\n  3\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case('Jerry')\n  4\n  */\nconst count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find the number of unique characters in the string ignoring case and ignore case and ignore case and ignore case and ignore case\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case('xyzXYZ')\n  3\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case('Jerry')\n  4\n  */\nconst count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find the number of unique characters in the string ignoring case and ignore case and ignore case and ignore case and ignore case\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case('xyzXYZ')\n  3\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case('Jerry')\n  4\n  */\nconst count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find the number of unique characters in the string ignoring case and ignore case and ignore case and ignore case and ignore case\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case('xyzXYZ')\n  3\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case('Jerry')\n  4\n  */\nconst count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find the number of unique characters in the string ignoring case and ignore case and ignore case and ignore case and ignore case\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case('xyzXYZ')\n  3\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case('Jerry')\n  4\n  */\nconst count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find the number of unique characters in the string ignoring case and ignore case and ignore case and ignore case and ignore case and ignore case\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case('xyzXYZ')\n  3\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case('Jerry')\n  4\n  */\nconst count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find the number of unique characters in the string ignoring case and ignore case and ignore case and ignore case and ignore case and ignore case and ignore case\n  >>> count_unique_characters_ignoring_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case_and_ignore_case('xyzXYZ')\n  3\n  >>> count_unique_characters_ignor"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i].split(' ');\n    if (note.length === 2) {\n      result.push(parseInt(note[0], 10));\n    } else if (note.length === 4) {\n      result.push(parseInt(note[0], 10) + parseInt(note[1], 10));\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n * If no note is last, return an empty list.\n * If there are multiple notes last, return a list of length equal to the number of notes.\n */\nconst parse_notes = (music_string) => {\n  const notes = parse_music(music_string);\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === notes[notes.length - 1]) {\n      result.push(notes.length);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n * If no note is last, return an empty list.\n * If there are multiple notes last, return a list of length equal to the number of notes.\n */\nconst parse_notes_reversed = (music_string) => {\n  const notes = parse_music(music_string);\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === notes[notes.length - 1]) {\n      result.push(notes.length);\n    } else {\n      result.push(0);\n    }\n  }\n  return result.slice().reverse();\n};\n\n/**\n * Given a string, return list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n * If no note is last, return an empty list.\n * If there are multiple notes last, return a list of length equal to the number of notes.\n */\nconst parse_notes_reversed_reversed = (music_string) => {\n  const notes = parse_music(music_string);\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === notes[notes.length - 1]) {\n      result.push(notes.length);\n    } else {\n      result.push(0);\n    }\n  }\n  return result.slice().reverse().slice();\n};\n\n/**\n * Given a string, return list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n * If no note is last, return an empty list.\n * If there are multiple notes last, return a list of length equal to the number of notes.\n */\nconst parse_notes_reversed_reversed_reversed = (music_string) => {\n  const notes = parse_music(music_string);\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === notes[notes.length - 1]) {\n      result.push(notes.length);\n    } else {\n      result.push(0);\n    }\n  }\n  return result.slice().reverse().slice().reverse();\n};\n\n/**\n * Given a string, return list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.|.| o o', return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n * If no note is last, return an empty list.\n * If there are multiple notes last, return a list of length equal to the number of notes.\n */\nconst parse_notes_reversed_reversed_reversed_reversed = (music_string) => {\n  const notes = parse_music(music_string);\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === notes[notes.length - 1]) {\n      result.push(notes.length);\n    } else {\n      result.push(0);\n    }\n  }\n  return result.slice().reverse().slice().reverse().slice();\n};\n\n/**\n * Given a string, return list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.|.| o o', return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n * If no note is last, return an empty list.\n * If there are multiple notes last, return a list of length equal to the number of notes.\n */\nconst parse_notes_reversed_reversed_reversed_reversed_reversed = (music_string) => {\n  const notes = parse_music(music_string);\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === notes[notes.length - 1]) {\n      result.push(notes.length);\n    } else {\n      result.push(0);\n    }\n  }\n  return result.slice().reverse().slice().reverse().slice().reverse();\n};\n\n/**\n * Given a string, return list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.|.| o o', return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n * If no note is last, return an empty list.\n * If there are multiple notes last, return a list of length equal to the number of notes.\n */\nconst parse_notes_reversed_reversed_reversed_reversed_reversed_reversed = (music_string) => {\n  const notes = parse_music(music_string);\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === notes[notes.length - 1]) {\n      result.push(notes.length);\n    } else {\n      result.push(0);\n    }\n  }\n  return result.slice().reverse().slice().reverse().slice().reverse().slice().reverse();\n};\n\n/**\n * Given a string, return list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.|.| o o', return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n * If no note is last, return an empty list.\n * If there are multiple notes last, return a list of length equal to the number of notes.\n */\nconst parse_notes_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (music_string) => {\n  const notes = parse_music(music_string);\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === notes[notes.length - 1]) {\n      result.push(notes.length);\n    } else {\n      result.push(0);\n    }\n  }\n  return result.slice().reverse().slice().reverse().slice().reverse().slice().reverse().slice().reverse();\n};\n\n/**\n * Given "}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = substring? substring.split('') : [];\n\n  while (i < l && j < m) {\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i)!== substring.charAt(j)) {\n      count++;\n      i++;"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_arr = numbers.split(' ');\n  const numbers_sorted = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let numbers_length = numbers_arr.length;\n  while (i < numbers_length) {\n    while (j < numbers_length) {\n      if (numbers_arr[i] > numbers_arr[j]) {\n        numbers_sorted.push(numbers_arr[j]);\n        numbers_arr[j + 1] = numbers_arr[j];\n        numbers_arr[j] = numbers_arr[j + 1];\n        j++;\n      }\n      else {\n        numbers_sorted.push(numbers_arr[j]);\n        j++;\n      }\n    }\n    while (j < numbers_length) {\n      if (numbers_arr[i] < numbers_arr[j]) {\n        numbers_sorted.push(numbers_arr[j]);\n        numbers_arr[j + 1] = numbers_arr[j];\n        numbers_arr[j] = numbers_arr[j + 1];\n        j++;\n      }\n      else {\n        numbers_sorted.push(numbers_arr[j]);\n        j++;\n      }\n    }\n    i++;\n    j = 0;\n  }\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse = (numbers) => {\n  const numbers_arr = numbers.split(' ');\n  const numbers_sorted = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let numbers_length = numbers_arr.length;\n  while (i < numbers_length) {\n    while (j < numbers_length) {\n      if (numbers_arr[i] > numbers_arr[j]) {\n        numbers_sorted.push(numbers_arr[j]);\n        numbers_arr[j + 1] = numbers_arr[j];\n        numbers_arr[j] = numbers_arr[j + 1];\n        j++;\n      }\n      else {\n        numbers_sorted.push(numbers_arr[j]);\n        j++;\n      }\n    }\n    while (j < numbers_length) {\n      if (numbers_arr[i] < numbers_arr[j]) {\n        numbers_sorted.push(numbers_arr[j]);\n        numbers_arr[j + 1] = numbers_arr[j];\n        numbers_arr[j] = numbers_arr[j + 1];\n        j++;\n      }\n      else {\n        numbers_sorted.push(numbers_arr[j]);\n        j++;\n      }\n    }\n    i++;\n    j = 0;\n  }\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse_reverse = (numbers) => {\n  const numbers_arr = numbers.split(' ');\n  const numbers_sorted = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let numbers_length = numbers_arr.length;\n  while (i < numbers_length) {\n    while (j < numbers_length) {\n      if (numbers_arr[i] > numbers_arr[j]) {\n        numbers_sorted.push(numbers_arr[j]);\n        numbers_arr[j + 1] = numbers_arr[j];\n        numbers_arr[j] = numbers_arr[j + 1];\n        j++;\n      }\n      else {\n        numbers_sorted.push(numbers_arr[j]);\n        j++;\n      }\n    }\n    while (j < numbers_length) {\n      if (numbers_arr[i] < numbers_arr[j]) {\n        numbers_sorted.push(numbers_arr[j]);\n        numbers_arr[j + 1] = numbers_arr[j];\n        numbers_arr[j] = numbers_arr[j + 1];\n        j++;\n      }\n      else {\n        numbers_sorted.push(numbers_arr[j]);\n        j++;\n      }\n    }\n    i++;\n    j = 0;\n  }\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse_reverse_2 = (numbers) => {\n  const numbers_arr = numbers.split(' ');\n  const numbers_sorted = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let numbers_length = numbers_arr.length;\n  while (i < numbers_length) {\n    while (j < numbers_length) {\n      if (numbers_arr[i] > numbers_arr[j]) {\n        numbers_sorted.push(numbers_arr[j]);\n        numbers_arr[j + 1] = numbers_arr[j];\n        numbers_arr[j] = numbers_arr[j + 1];\n        j++;\n      }\n      else {\n        numbers_sorted.push(numbers_arr[j]);\n        j++;\n      }\n    }\n    while (j < numbers_length) {\n      if (numbers_arr[i] < numbers_arr[j]) {\n        numbers_sorted.push(numbers_arr[j]);\n        numbers_arr[j + 1] = numbers_arr[j];\n        numbers_arr[j] = numbers_arr[j + 1];\n        j++;\n      }\n      else {\n        numbers_sorted.push(numbers_arr[j]);\n        j++;\n      }\n    }\n    i++;\n    j = 0;\n  }\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse_reverse_3 = (numbers) => {\n  const numbers_arr = numbers.split(' ');\n  const numbers_sorted = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let numbers_length = numbers_arr.length;\n  while (i < numbers_length) {\n    while (j < numbers_length) {\n      if (numbers_arr[i] > numbers_arr[j]) {\n        numbers_sorted.push(numbers_arr[j]);\n        numbers_arr[j + 1] = numbers_arr[j];\n        numbers_arr[j] = numbers_arr[j + 1];\n        j++;\n      }\n      else {\n        numbers_sorted.push(numbers_arr[j]);\n        j++;\n      }\n    }\n    while (j < numbers_length) {\n      if (numbers_arr[i] < numbers_arr[j]) {\n        numbers_sorted.push(numbers_arr[j]);\n        numbers_arr[j + 1] = numbers_arr[j];\n        numbers_arr[j] = numbers_arr[j + 1];\n        j++;\n      }\n      else {\n        numbers_sorted.push(numbers_arr[j]);\n        j++;\n      }\n    }\n    i++;\n    j = 0;\n  }\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minDistanceIndex = -1;\n  let minDistanceElement = undefined;\n  let minDistanceElementIndex = -1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceElement = numbers[i];\n      minDistanceElementIndex = i;\n    }\n  }\n\n  return [minDistanceElement, minDistanceElementIndex];\n};\n\n// Given a number and a list that contains the numbers 1 to n, return true if the number is a perfect square\n// and false otherwise.\nconst is_perfect_square = (number, list) => {\n  const squares = list.map((x) => x * x);\n  const squares_sum = squares.reduce((sum, x) => sum + x, 0);\n  return squares_sum === number;\n};\n\n// Given a number and a list that contains the numbers 1 to n, return true if the number is a perfect cube\n// and false otherwise.\nconst is_perfect_cube = (number, list) => {\n  const cubes = list.map((x) => x * x * x);\n  const cubes_sum = cubes.reduce((sum, x) => sum + x, 0);\n  return cubes_sum === number;\n};\n\n// Given a number and a list that contains the numbers 1 to n, return true if the number is a perfect cube\n// and false otherwise.\nconst is_perfect_cube_or_perfect_square = (number, list) => {\n  const cubes = list.map((x) => x * x * x);\n  const cubes_sum = cubes.reduce((sum, x) => sum + x, 0);\n  return cubes_sum === number || is_perfect_square(number, cubes);\n};\n\n// Given a number and a list that contains the numbers 1 to n, return true if the number is a perfect cube\n// and false otherwise.\nconst is_perfect_cube_or_perfect_square_or_perfect_cube = (number, list) => {\n  const cubes = list.map((x) => x * x * x * x);\n  const cubes_sum = cubes.reduce((sum, x) => sum + x, 0);\n  return cubes_sum === number || is_perfect_cube(number, cubes);\n};\n\n// Given a number and a list that contains the numbers 1 to n, return true if the number is a perfect cube\n// and false otherwise.\nconst is_perfect_cube_or_perfect_square_or_perfect_cube_or_perfect_square = (number, list) => {\n  const cubes = list.map((x) => x * x * x * x * x);\n  const cubes_sum = cubes.reduce((sum, x) => sum + x, 0);\n  return cubes_sum === number || is_perfect_cube_or_perfect_square(number, cubes) || is_perfect_square(number, cubes);\n};\n\n// Given a number and a list that contains the numbers 1 to n, return true if the number is a perfect cube\n// and false otherwise.\nconst is_perfect_cube_or_perfect_square_or_perfect_cube_or_perfect_square_or_perfect_cube = (number, list) => {\n  const cubes = list.map((x) => x * x * x * x * x * x);\n  const cubes_sum = cubes.reduce((sum, x) => sum + x, 0);\n  return cubes_sum === number || is_perfect_cube_or_perfect_square_or_perfect_cube(number, cubes) || is_perfect_cube_or_perfect_square(number, cubes) || is_perfect_square(number, cubes);\n};\n\n// Given a number and a list that contains the numbers 1 to n, return true if the number is a perfect cube\n// and false otherwise.\nconst is_perfect_cube_or_perfect_square_or_perfect_cube_or_perfect_square_or_perfect_cube_or_perfect_cube = (number, list) => {\n  const cubes = list.map((x) => x * x * x * x * x * x * x * x);\n  const cubes_sum = cubes.reduce((sum, x) => sum + x, 0);\n  return cubes_sum === number || is_perfect_cube_or_perfect_square_or_perfect_cube_or_perfect_square(number, cubes) || is_perfect_cube_or_perfect_cube(number, cubes) || is_perfect_cube_or_perfect_square(number, cubes) || is_perfect_square(number, cubes);\n};\n\n// Given a number and a list that contains the numbers 1 to n, return true if the number is a perfect cube\n// and false otherwise.\nconst is_perfect_cube_or_perfect_square_or_perfect_cube_or_perfect_square_or_perfect_cube_or_perfect_cube_or_perfect_square = (number, list) => {\n  const cubes = list.map((x) => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * "}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [])\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0], 2)\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_2d = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [])\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_2d([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_2d_2d = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [])\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_2d_2d([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_2d_2d_2d = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [])\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_2d_2d_2d([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_2d_2d_2d_2d = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [])\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_2d_2d_2d_2d([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_2d_2d_2d_2d_2d = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [])\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_2d_2d_2d_2d_2d([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_2d_2d_2d_2d_2d_2d = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [])\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_2d_2d_2d_2d_2d_2d([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_2d_2d_2d_2d_2d_2d_2d = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [])\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_2d_2d_2d_2d_2d_2d_2d([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_2d_2d_2d_2d_2d_2d_2d = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [])\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_2d_2d_2d_2d_2d_2d_2d([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_2d_2d_2d_2d_2d_2d_2d_2d = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [])\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_2d_2d_2d_2d_2d_2d_2d_2d([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_2d_2d_2d_2d_2d_2d_2d_2d_2d = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [])\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_2d_2d_2d_2d_2d_2d_2d_2d_2d([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [])\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [])\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescal"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filter_integers(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_floats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_strings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_booleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for empty lists\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_empty_lists = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_empty_dictionaries = (values) => {\n  return values.filter(value => typeof value === 'object' &&!Object.keys(value).length);\n};\n\n/**\n * Filter given list of any python values only for empty strings\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_empty_strings = (values) => {\n  return values.filter(value => typeof value ==='string' && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_empty_lists_or_dictionaries = (values) => {\n  return values.filter(value => Array.isArray(value) || typeof value === 'object');\n};\n\n/**\n * Filter given list of any python values only for empty strings\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_empty_lists_or_dictionaries_or_strings = (values) => {\n  return values.filter(value => Array.isArray(value) || typeof value === 'object' || typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_empty_lists_or_dictionaries_or_strings = (values) => {\n  return values.filter(value => Array.isArray(value) || typeof value === 'object' || typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_empty_lists_or_dictionaries_or_strings_or_empty_lists = (values) => {\n  return values.filter(value => Array.isArray(value) || typeof value === 'object' || typeof value ==='string' || Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_empty_lists_or_dictionaries_or_strings_or_empty_lists = (values) => {\n  return values.filter(value => Array.isArray(value) || typeof value === 'object' || typeof value ==='string' || Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_empty_lists_or_dictionaries_or_strings_or_empty_lists_or_empty_lists = (values) => {\n  return values.filter(value => Array.isArray(value) || typeof value === 'object' || typeof value ==='string' || Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_empty_lists_or_dictionaries_or_strings_or_empty_lists_or_empty_lists = (values) => {\n  return values.filter(value => Array.isArray(value) || typeof value === 'object' || typeof value ==='string' || Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_empty_lists_or_dictionaries_or_strings_or_empty_lists_or_empty_lists_or_empty_lists = (values) => {\n  return values.filter(value => Array.isArray(value) || typeof value === 'object' || typeof value ==='string' || Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_empty_lists_or_dictionaries_or_strings_or_empty_lists_or_empty_lists_or_empty_lists_or_empty_lists = (values) => {\n  return values.filter(value => Array.isArray(value) || typeof value === 'object' || typeof value ==='string' || Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_empty_lists_or_dictionaries_or_strings_or_empty_lists_or_empty_lists_or_empty_lists_or_empty_lists_or_empty_lists = (values) => {\n  return values.filter(value => Array.isArray(value) || typeof value === 'object' || typeof value ==='string' || Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filter_strings(['a', 3.14, 5.1])\n  [5.1]\n  >>> "}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n// Return true if given string starts with given prefix\nconst startsWith = (string, prefix) => {\n  return string.slice(0, prefix.length) === prefix\n}\n\n// Return true if given string ends with given suffix\nconst endsWith = (string, suffix) => {\n  return string.slice(string.length - suffix.length) === suffix\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWith = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix)\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix).toLowerCase() === suffix\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWith = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix) && endsWith(string, suffix)\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix).toLowerCase() === suffix\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWith = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix) && endsWith(string, suffix)\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix).toLowerCase() === suffix\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWith = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix) && endsWith(string, suffix)\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix).toLowerCase() === suffix\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWith = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix) && endsWith(string, suffix)\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix).toLowerCase() === suffix\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWith = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix) && endsWith(string, suffix)\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix).toLowerCase() === suffix\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix) && endsWith(string, suffix)\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix).toLowerCase() === suffix\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix) && endsWith(string, suffix)\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix) && endsWith(string, suffix)\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix) && endsWith(string, suffix)\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix) && endsWith(string, suffix)\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix) && endsWith(string, suffix)\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitiveAndEndsWithCaseInsensitive = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix) && endsWith(string, suffix)\n}\n\n// Return true if given string starts with given prefix and ends with given suffix\nconst startsWithAndEndsWith"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor(100)\n  5\n  */\nconst smallest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst smallest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> greatest_divisor(100)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> greatest_divisor(100)\n  1\n  */"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      prime = false;\n      factors.push(j);\n      j++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      prime = false;\n      factors.push(k);\n      k++;\n    }\n    j++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      prime = false;\n      factors.push(j);\n      j++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      prime = false;\n      factors.push(k);\n      k++;\n    }\n    j++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      prime = false;\n      factors.push(j);\n      j++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      prime = false;\n      factors.push(k);\n      k++;\n    }\n    j++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      prime = false;\n      factors.push(j);\n      j++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      prime = false;\n      factors.push(k);\n      k++;\n    }\n    j++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      prime = false;\n      factors.push(j);\n      j++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      prime = false;\n      factors.push(k);\n      k++;\n    }\n    j++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      prime = false;\n      factors.push(j);\n      j++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      prime = false;\n      factors.push(k);\n      k++;\n    }\n    j++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      prime = false;\n      factors.push(j);\n      j++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      prime = false;\n      factors.push(k);\n      k++;\n    }\n    j++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      prime = false;\n      factors.push(j);\n      j++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      prime = false;\n      factors.push(k);\n      k++;\n    }\n    j++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      prime = false;\n      factors.push(j);\n      j++;\n    }\n    i++;\n  }"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen.has(number)) {\n      continue;\n    }\n    seen.add(number);\n    result.push(number);\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '12345'\n */\nconst to_base10 = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.234'\n */\nconst to_base10_no_decimals = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.2345'\n */\nconst to_base10_no_decimals_reverse = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.23456789'\n */\nconst to_base10_no_decimals_reverse_reverse = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.234567890'\n */\nconst to_base10_no_decimals_reverse_no_decimals = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.234567890'\n */\nconst to_base10_no_decimals_reverse_no_decimals_reverse = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.234567890'\n */\nconst to_base10_no_decimals_reverse_no_decimals_reverse_reverse = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.234567890'\n */\nconst to_base10_no_decimals_reverse_no_decimals_reverse_no_decimals = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.234567890'\n */\nconst to_base10_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.234567890'\n */\nconst to_base10_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.234567890'\n */\nconst to_base10_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.234567890'\n */\nconst to_base10_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.234567890'\n */\nconst to_base10_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.234567890'\n */\nconst to_base10_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.234567890'\n */\nconst to_base10_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n};\n\n/**\n * A function to convert a number to a string in base 10.\n * >>> to_base10(12345)\n '1.234567890'\n */\nconst to_base10_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse_no_decimals_reverse = (number) => {\n  let result = '';\n  while (number > 0) {\n    const digit = number % 10;\n    number = Math.floor(number / 10);\n    result += digit;\n  }\n  return result;\n"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (_, char) => char.toUpperCase());\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a digit, ignoring case.\n  >>> first_digit('Hello')\n  'e'\n  */\nconst first_digit = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/* Given a string, return the first character of the string that is a letter, ignoring case.\n  >>> first_letter('Hello')\n  'H'\n  */\nconst first_letter"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, curr, index) => {\n    return acc + (curr? curr.toString() : '');\n  }, '');\n};\n\n/* Convert string to number\n  >>> convert(1,'string')\n  1\n  >>> convert(1, 'number')\n  1\n  >>> convert('1','string')\n  '1'\n  >>> convert('1', 'number')\n  1\n  >>> convert('1', 'boolean')\n  true\n  >>> convert('1', 'null')\n  null\n  */\nconst convert = (value, type) => {\n  if (type ==='string') return value;\n  if (type === 'number') return Number(value);\n  if (type === 'boolean') return Boolean(value);\n  if (type === 'null') return null;\n  throw new Error(`Invalid type ${type}`);\n};\n\n/* Convert string to boolean\n  >>> convert('true', 'boolean')\n  true\n  >>> convert('false', 'boolean')\n  false\n  >>> convert('true', 'null')\n  null\n  >>> convert('false', 'null')\n  null\n  */\nconst convertToBoolean = (value) => {\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n  throw new Error(`Invalid value ${value}`);\n};\n\n/* Convert string to number\n  >>> convertToNumber(1)\n  1\n  >>> convertToNumber(true)\n  1\n  >>> convertToNumber('1')\n  1\n  >>> convertToNumber('true')\n  1\n  >>> convertToNumber('false')\n  0\n  */\nconst convertToNumber = (value) => {\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n  throw new Error(`Invalid value ${value}`);\n};\n\n/* Convert string to null\n  >>> convertToNull(null)\n  null\n  >>> convertToNull(undefined)\n  null\n  >>> convertToNull('')\n  null\n  */\nconst convertToNull = (value) => {\n  if (value === null) return null;\n  throw new Error(`Invalid value ${value}`);\n};\n\n/* Convert string to undefined\n  >>> convertToUndefined(undefined)\n  undefined\n  >>> convertToUndefined(null)\n  null\n  >>> convertToUndefined(0)\n  0\n  */\nconst convertToUndefined = (value) => {\n  if (value === undefined) return undefined;\n  throw new Error(`Invalid value ${value}`);\n};\n\n/* Convert string to date\n  >>> convertToDate(new Date())\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:51:03Z'))\n  Sun Jul 25 2017 15:51:03 GMT+0100 (CET)\n  >>> convertToDate(new Date('2017-07-25T15:"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filter_by_not_prefix([], 'a')\n  []\n  >>> filter_by_not_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filter_by_not_suffix([], 'a')\n  []\n  >>> filter_by_not_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_suffix = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain([], 'a')\n  []\n  >>> filter_by_not_contain(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_all([], 'a')\n  []\n  >>> filter_by_not_contain_all(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain_all = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_any([], 'a')\n  []\n  >>> filter_by_not_contain_any(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain_any = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_all([], 'a')\n  []\n  >>> filter_by_not_contain_all(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain_any_all = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_any([], 'a')\n  []\n  >>> filter_by_not_contain_any(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain_any_any = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_all([], 'a')\n  []\n  >>> filter_by_not_contain_all(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain_any_all = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_any([], 'a')\n  []\n  >>> filter_by_not_contain_any(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain_any_any = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_all([], 'a')\n  []\n  >>> filter_by_not_contain_all(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain_any_all = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_any([], 'a')\n  []\n  >>> filter_by_not_contain_any(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain_any_any = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_all([], 'a')\n  []\n  >>> filter_by_not_contain_all(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain_any_all = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_any([], 'a')\n  []\n  >>> filter_by_not_contain_any(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain_any_any = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_all([], 'a')\n  []\n  >>> filter_by_not_contain_all(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain_any_all = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_any([], 'a')\n  []\n  >>> filter_by_not_contain_any(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain_any_any = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_all([], 'a')\n  []\n  >>> filter_by_not_contain_all(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_not_contain_any_all = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain any substring.\n  >>> filter_by_not_contain_any([], 'a')\n  []\n  >>> filter_by_not_contain_any(['abc', 'b"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter(x => x > 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_negative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 6)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 7)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 8)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 9)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 11)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 12)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 13)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 14)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 15)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 16)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 17)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 18)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 19)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 20)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 21)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 22)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 23)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 24)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 25)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 26)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 27)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 28)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 29)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 30)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 31)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 32)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 33)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 34)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 35)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 36)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 37)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 38)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 39)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 40)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 41)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 42)\n  [3, -5, 2, -3, 3, 9, 123, 1, -10]\n  >>> get_divisible([3, -5, 2, -3, 3, 9, "}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, and false otherwise.\n  >>> is_prime_number(6)\n  true\n  >>> is_prime_number(101)\n  false\n  >>> is_prime_number(11)\n  false\n  >>> is_prime_number(13441)\n  true\n  >>> is_prime_number(61)\n  true\n  >>> is_prime_number(4)\n  false\n  >>> is_prime_number(1)\n  false\n  */\nconst is_prime_number = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, and false otherwise.\n  >>> is_prime_number_2(6)\n  true\n  >>> is_prime_number_2(101)\n  false\n  >>> is_prime_number_2(11)\n  false\n  >>> is_prime_number_2(13441)\n  true\n  >>> is_prime_number_2(61)\n  true\n  >>> is_prime_number_2(4)\n  false\n  >>> is_prime_number_2(1)\n  false\n  */\nconst is_prime_number_2 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, and false otherwise.\n  >>> is_prime_number_3(6)\n  true\n  >>> is_prime_number_3(101)\n  false\n  >>> is_prime_number_3(11)\n  false\n  >>> is_prime_number_3(13441)\n  true\n  >>> is_prime_number_3(61)\n  true\n  >>> is_prime_number_3(4)\n  false\n  >>> is_prime_number_3(1)\n  false\n  */\nconst is_prime_number_3 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, and false otherwise.\n  >>> is_prime_number_4(6)\n  true\n  >>> is_prime_number_4(101)\n  false\n  >>> is_prime_number_4(11)\n  false\n  >>> is_prime_number_4(13441)\n  true\n  >>> is_prime_number_4(61)\n  true\n  >>> is_prime_number_4(4)\n  false\n  >>> is_prime_number_4(1)\n  false\n  */\nconst is_prime_number_4 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, and false otherwise.\n  >>> is_prime_number_5(6)\n  true\n  >>> is_prime_number_5(101)\n  false\n  >>> is_prime_number_5(11)\n  false\n  >>> is_prime_number_5(13441)\n  true\n  >>> is_prime_number_5(61)\n  true\n  >>> is_prime_number_5(4)\n  false\n  >>> is_prime_number_5(1)\n  false\n  */\nconst is_prime_number_5 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, and false otherwise.\n  >>> is_prime_number_6(6)\n  true\n  >>> is_prime_number_6(101)\n  false\n  >>> is_prime_number_6(11)\n  false\n  >>> is_prime_number_6(13441)\n  true\n  >>> is_prime_number_6(61)\n  true\n  >>> is_prime_number_6(4)\n  false\n  >>> is_prime_number_6(1)\n  false\n  */\nconst is_prime_number_6 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, and false otherwise.\n  >>> is_prime_number_7(6)\n  true\n  >>> is_prime_number_7(101)\n  false\n  >>> is_prime_number_7(11)\n  false\n  >>> is_prime_number_7(13441)\n  true\n  >>> is_prime_number_7(61)\n  true\n  >>> is_prime_number_7(4)\n  false\n  >>> is_prime_number_7(1)\n  false\n  */\nconst is_prime_number_7 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, and false otherwise.\n  >>> is_prime_number_8(6)\n  true\n  >>> is_prime_number_8(101)\n  false\n  >>> is_prime_number_8(11)\n  false\n  >>> is_prime_number_8(13441)\n  true\n  >>> is_prime_number_8(61)\n  true\n  >>> is_prime_number_8(4)\n  false\n  >>> is_prime_number_8(1)\n  false\n  */\nconst is_prime_number_8 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, and false otherwise.\n  >>> is_prime_number_9(6)\n  true\n  >>> is_prime_number_9(101)\n  false\n  >>> is_prime_number_9(11)\n  false\n  >>> is_prime_number_9(13441)\n  true\n  >>> is_prime_number_9(61)\n  true\n  >>> is_prime_number_9(4)\n  false\n  >>> is_prime_number_9(1)\n  false\n  */\nconst is_prime_number_9 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) {\n    return zeros[0];\n  }\n  const zero = zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index + 1);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) {\n    return zeros[0];\n  }\n  const zero = zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index + 1);\n  }, 0);\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index + 2);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) {\n    return zeros[0];\n  }\n  const zero = zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index + 2);\n  }, 0);\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index + 3);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero4 = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) {\n    return zeros[0];\n  }\n  const zero = zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index + 3);\n  }, 0);\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index + 4);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero5 = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) {\n    return zeros[0];\n  }\n  const zero = zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index + 4);\n  }, 0);\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index + 5);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + "}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l151 = l150.slice();\n  let l15"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v) => {\n    if (seen[v]) return false; // already seen\n    seen[v] = true;\n    return true; // keep going\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {};\n  return l.filter((v) => {\n    if (seen[v]) return false; // already seen\n    seen[v] = true;\n    return true; // keep going\n  }).sort((a, b) => {\n    return a[key] > b[key]? 1 : -1;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueWith = (l, key) => {\n  let seen = {};\n  return l.filter((v) => {\n    if (seen[v]) return false; // already seen\n    seen[v] = true;\n    return true; // keep going\n  }).sort((a, b) => {\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v) => {\n    return seen[v];\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueWithKey = (l, key) => {\n  let seen = {};\n  return l.filter((v) => {\n    if (seen[v]) return false; // already seen\n    seen[v] = true;\n    return true; // keep going\n  }).sort((a, b) => {\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v) => {\n    return seen[v][key];\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueWithKeys = (l, key) => {\n  let seen = {};\n  return l.filter((v) => {\n    if (seen[v]) return false; // already seen\n    seen[v] = true;\n    return true; // keep going\n  }).sort((a, b) => {\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v) => {\n    return seen[v][key];\n  }).filter((v) => {\n    return seen[v];\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueWithKeysOn = (l, key) => {\n  let seen = {};\n  return l.filter((v) => {\n    if (seen[v]) return false; // already seen\n    seen[v] = true;\n    return true; // keep going\n  }).sort((a, b) => {\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v) => {\n    return seen[v][key];\n  }).filter((v) => {\n    return seen[v];\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueWithKeysOnKey = (l, key) => {\n  let seen = {};\n  return l.filter((v) => {\n    if (seen[v]) return false; // already seen\n    seen[v] = true;\n    return true; // keep going\n  }).sort((a, b) => {\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v) => {\n    return seen[v][key];\n  }).filter((v) => {\n    return seen[v];\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueWithKeysOnKeys = (l, key) => {\n  let seen = {};\n  return l.filter((v) => {\n    if (seen[v]) return false; // already seen\n    seen[v] = true;\n    return true; // keep going\n  }).sort((a, b) => {\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v) => {\n    return seen[v][key];\n  }).filter((v) => {\n    return seen[v];\n  }).filter((v) => {\n    return seen[v];\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueWithKeysOnKeysOn = (l, key) => {\n  let seen = {};\n  return l.filter((v) => {\n    if (seen[v]) return false; // already seen\n    seen[v] = true;\n    return true; // keep going\n  }).sort((a, b) => {\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v) => {\n    return seen[v][key];\n  }).filter((v) => {\n    return seen[v];\n  }).filter((v) => {\n    return seen[v];\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueWithKeysOnKeysOnKey = (l, key) => {\n  let seen = {};\n  return l.filter((v) => {\n    if (seen[v]) return false; // already seen\n    seen[v] = true;\n    return true; // keep going\n  }).sort((a, b) => {\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v) => {\n    return seen[v][key];\n  }).filter((v) => {\n    return seen[v];\n  }).filter((v) => {\n    return seen[v];\n  }).filter((v) => {\n    return seen[v];\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueWithKeysOnKeysOnKeys = (l, key) => {\n  let seen = {};\n  return l.filter((v) => {\n    if (seen[v]) return false; // already seen\n    seen[v] = true;\n    return true; // keep going\n  }).sort((a, b) => {\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v) => {\n    return seen[v][key];\n  }).filter((v) => {\n    return seen[v];\n  }).filter((v) => {\n    return seen[v];\n  }).filter((v) => {\n    return seen[v];\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueWithKeysOnKeysOnKeysOn = (l, key) => {\n  let seen = {};\n  return l.filter((v) => {\n    if (seen[v]) return false; // already seen\n    seen[v] = true;\n    return true; // keep going\n  }).sort((a, b) => {\n    return a[key] > b[key]? 1 : -1;\n  }).filter((v) => {\n    return seen[v][key];\n  }).filter((v) => {\n    return seen[v];\n  }).filter((v) => {\n    return seen[v];\n  }).filter((v) => {\n    return seen[v];\n  }).filter((v) => {\n    return seen[v];\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, "}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> min_element([1, 2, 3])\n  1\n  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst min_element = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return average of elements in list.\n  >>> average([1, 2, 3])\n  1.5\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3.3333333333333335\n  */\nconst average = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count += 1;\n  }\n  return sum / count;\n};\n\n/*Return median of elements in list.\n  >>> median([1, 2, 3])\n  3\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst median = (l) => {\n  let mid = 0;\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count += 1;\n    if (count % 2 === 0) {\n      mid = sum / 2;\n    }\n  }\n  return mid;\n};\n\n/*Return mode of elements in list.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst mode = (l) => {\n  let mode = 0;\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count += 1;\n    if (count % 2 === 0) {\n      mode = sum / count;\n    }\n  }\n  return mode;\n};\n\n/*Return standard deviation of elements in list.\n  >>> std([1, 2, 3])\n  2.6666666666666665\n  >>> std([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst std = (l) => {\n  let sum = 0;\n  let count = 0;\n  let sum2 = 0;\n  let count = 0;\n  let sum3 = 0;\n  let count = 0;\n  let sum4 = 0;\n  let count = 0;\n  let sum5 = 0;\n  let count = 0;\n  let sum6 = 0;\n  let count = 0;\n  let sum7 = 0;\n  let count = 0;\n  let sum8 = 0;\n  let count = 0;\n  let sum9 = 0;\n  let count = 0;\n  let sum10 = 0;\n  let count = 0;\n  let sum11 = 0;\n  let count = 0;\n  let sum12 = 0;\n  let count = 0;\n  let sum13 = 0;\n  let count = 0;\n  let sum14 = 0;\n  let count = 0;\n  let sum15 = 0;\n  let count = 0;\n  let sum16 = 0;\n  let count = 0;\n  let sum17 = 0;\n  let count = 0;\n  let sum18 = 0;\n  let count = 0;\n  let sum19 = 0;\n  let count = 0;\n  let sum20 = 0;\n  let count = 0;\n  let sum21 = 0;\n  let count = 0;\n  let sum22 = 0;\n  let count = 0;\n  let sum23 = 0;\n  let count = 0;\n  let sum24 = 0;\n  let count = 0;\n  let sum25 = 0;\n  let count = 0;\n  let sum26 = 0;\n  let count = 0;\n  let sum27 = 0;\n  let count = 0;\n  let sum28 = 0;\n  let count = 0;\n  let sum29 = 0;\n  let count = 0;\n  let sum30 = 0;\n  let count = 0;\n  let sum31 = 0;\n  let count = 0;\n  let sum32 = 0;\n  let count = 0;\n  let sum33 = 0;\n  let count = 0;\n  let sum34 = 0;\n  let count = 0;\n  let sum35 = 0;\n  let count = 0;\n  let sum36 = 0;\n  let count = 0;\n  let sum37 = 0;\n  let count = 0;\n  let sum38 = 0;\n  let count = 0;\n  let sum39 = 0;\n  let count = 0;\n  let sum40 = 0;\n  let count = 0;\n  let sum41 = 0;\n  let count = 0;\n  let sum42 = 0;\n  let count = 0;\n  let sum43 = 0;\n  let count = 0;\n  let sum44 = 0;\n  let count = 0;\n  let sum45 = 0;\n  let count = 0;\n  let sum46 = 0;\n  let count = 0;\n  let sum47 = 0;\n  let count = 0;\n  let sum48 = 0;\n  let count = 0;\n  let sum49 = 0;\n  let count = 0;\n  let sum50 = 0;\n  let count = 0;\n  let sum51 = 0;\n  let count = 0;\n  let sum52 = 0;\n  let count = 0;\n  let sum53 = 0;\n  let count = 0;\n  let sum54 = 0;\n  let count = 0;\n  let sum55 = 0;\n  let count = 0;\n  let sum56 = 0;\n  let count = 0;\n  let sum57 = 0;\n  let count = 0;\n  let sum58 = 0;\n  let count = 0;\n  let sum59 = 0;\n  let count = 0;\n  let sum60 = 0;\n  let count = 0;\n  let sum61 = 0;\n  let count = 0;\n  let sum62 = 0;\n  let count = 0;\n  let sum63 = 0;\n  let count = 0;\n  let sum64 = 0;\n  let count = 0;\n  let sum65 = 0;\n  let count = 0;\n  let sum66 = 0;\n  let count = 0;\n  let sum67 = 0;\n  let count = 0;\n  let sum68 = 0;\n  let count = 0;\n  let sum69 = 0;\n  let count = 0;\n  let sum70 = 0;\n  let count = 0;\n  let sum71 = 0;\n  let count = 0;\n  let sum72 = 0;\n  let count = 0;\n  let sum73 = 0;\n  let count = 0;\n  let sum74 = 0;\n  let count = 0;\n  let sum75 = 0;\n  let count = 0;\n  let sum76 = 0;\n  let count = 0;\n  let sum77 = 0;\n  let count = 0;\n  let sum78 = 0;\n  let count = 0;\n  let sum79 = 0;\n  let count = 0;\n  let sum80 = 0;\n  let count = 0;\n  let sum81 = 0;\n  let count = 0;\n  let sum82 = 0;\n  let count = 0;\n  let sum83 = 0;\n  let count = 0;\n  let sum84 = 0;\n  let count = 0;\n  let sum85 = 0;\n  let count = 0;\n  let sum86 = 0;\n  let count = 0;\n  let sum87 = 0;\n  let count = 0;\n  let sum88 = 0;\n  let count = 0;\n  let sum89 = 0;\n  let count = 0;\n  let sum90 = 0;\n  let count = 0;\n  let sum91 = 0;\n  let count = 0;\n  let sum92 = 0;\n  let count = 0;\n  let sum93 = 0;\n  let count = 0;\n  let sum94 = 0;\n  let count = 0;\n  let sum95 = 0;\n  let count = 0;\n  let sum96 = 0;\n  let count = 0;\n  let sum97 = 0;\n  let count = 0;\n  let sum98 = 0;\n  let count = 0;\n  let sum99 = 0;\n  let count = 0;\n  let sum100 = 0;\n  let count = 0;\n  let sum101 = 0;\n  let count = 0;\n  let sum102 = 0;\n  let count = 0;\n  let sum103 = 0;\n  let count = 0;\n  let sum104 = 0;\n  let count = 0;\n  let sum105 = 0;\n  let count = 0;\n  let sum106 = 0;\n  let count = 0;\n  let sum107 = 0;\n  let count = 0;\n  let sum108 = 0;\n  let count = 0;\n  let sum109 = 0;\n  let count = 0;\n  let sum110 = 0;\n  let count = 0;\n  let sum111 = 0;\n  let count = 0;\n  let sum112 = 0;\n  let count = 0;\n  let sum113 = 0;\n  let count = 0;\n  let sum114 = 0;\n  let count = 0;\n  let sum115 = 0;\n  let count = 0;\n  let sum116 = 0;\n  let count = 0;\n  let sum117 = 0;\n  let count = 0;\n  let sum118 = 0;\n  let count = 0;\n  let sum119 = 0;\n  let count = 0;\n  let sum120 = 0;\n  let count = 0;\n  let sum121 = 0;\n  let count = 0;\n  let sum122 = 0;\n  let count = 0;\n  let sum123 = 0;\n  let count = 0;\n  let sum"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % 10 === 7 && n % 100 === 11) {\n      count++;\n    }\n    if (n % 10 === 11) {\n      count++;\n    }\n    if (n % 10 === 13) {\n      count++;\n    }\n    if (n % 100 === 11) {\n      count++;\n    }\n    if (n % 100 === 13) {\n      count++;\n    }\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return count;\n};\n\n/*\n  >>> fizz_buzz(10)\n  0\n  >>> fizz_buzz(20)\n  0\n  >>> fizz_buzz(30)\n  0\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(70)\n  0\n  >>> fizz_buzz(80)\n  0\n  >>> fizz_buzz(90)\n  0\n  >>> fizz_buzz(100)\n  0\n  >>> fizz_buzz(200)\n  0\n  >>> fizz_buzz(300)\n  0\n  >>> fizz_buzz(400)\n  0\n  >>> fizz_buzz(500)\n  0\n  >>> fizz_buzz(600)\n  0\n  >>> fizz_buzz(700)\n  0\n  >>> fizz_buzz(800)\n  0\n  >>> fizz_buzz(900)\n  0\n  >>> fizz_buzz(1000)\n  0\n  >>> fizz_buzz(1100)\n  0\n  >>> fizz_buzz(1200)\n  0\n  >>> fizz_buzz(1300)\n  0\n  >>> fizz_buzz(1400)\n  0\n  >>> fizz_buzz(1500)\n  0\n  >>> fizz_buzz(1600)\n  0\n  >>> fizz_buzz(1700)\n  0\n  >>> fizz_buzz(1800)\n  0\n  >>> fizz_buzz(1900)\n  0\n  >>> fizz_buzz(2000)\n  0\n  >>> fizz_buzz(2100)\n  0\n  >>> fizz_buzz(2200)\n  0\n  >>> fizz_buzz(2300)\n  0\n  >>> fizz_buzz(2400)\n  0\n  >>> fizz_buzz(2500)\n  0\n  >>> fizz_buzz(2600)\n  0\n  >>> fizz_buzz(2700)\n  0\n  >>> fizz_buzz(2800)\n  0\n  >>> fizz_buzz(2900)\n  0\n  >>> fizz_buzz(3100)\n  0\n  >>> fizz_buzz(32000)\n  0\n  >>> fizz_buzz(33000)\n  0\n  >>> fizz_buzz(34000)\n  0\n  >>> fizz_buzz(35000)\n  0\n  >>> fizz_buzz(36000)\n  0\n  >>> fizz_buzz(37000)\n  0\n  >>> fizz_buzz(38000)\n  0\n  >>> fizz_buzz(39000)\n  0\n  >>> fizz_buzz(4000)\n  0\n  >>> fizz_buzz(41000)\n  0\n  >>> fizz_buzz(42000)\n  0\n  >>> fizz_buzz(43000)\n  0\n  >>> fizz_buzz(44000)\n  0\n  >>> fizz_buzz(45000)\n  0\n  >>> fizz_buzz(46000)\n  0\n  >>> fizz_buzz(47000)\n  0\n  >>> fizz_buzz(48000)\n  0\n  >>> fizz_buzz(49000)\n  0\n  >>> fizz_buzz(5000)\n  0\n  >>> fizz_buzz(51000)\n  0\n  >>> fizz_buzz(52000)\n  0\n  >>> fizz_buzz(53000)\n  0\n  >>> fizz_buzz(54000)\n  0\n  >>> fizz_buzz(55000)\n  0\n  >>> fizz_buzz(56000)\n  0\n  >>> fizz_buzz(57000)\n  0\n  >>> fizz_buzz(58000)\n  0\n  >>> fizz_buzz(59000)\n  0\n  >>> fizz_buzz(6000)\n  0\n  >>> fizz_buzz(61000)\n  0\n  >>> fizz_buzz(62000)\n  0\n  >>> fizz_buzz(63000)\n  0\n  >>> fizz_buzz(64000)\n  0\n  >>> fizz_buzz(65000)\n  0\n  >>> fizz_buzz(66000)\n  0\n  >>> fizz_buzz(67000)\n  0\n  >>> fizz_buzz(68000)\n  0\n  >>> fizz_buzz(69000)\n  0\n  >>> fizz_buzz(7000)\n  0\n  >>> fizz_buzz(71000)\n  0\n  >>> fizz_buzz(72000)\n  0\n  >>> fizz_buzz(73000)\n  0\n  >>> fizz_buzz(74000)\n  0\n  >>> fizz_buzz(75000)\n  0\n  >>> fizz_buzz(76000)\n  0\n  >>> fizz_buzz(77000)\n  0\n  >>> fizz_buzz(78000)\n  0\n  >>> fizz_buzz(79000)\n  0\n  >>> fizz_buzz(8000)\n  0\n  >>> fizz_buzz(81000)\n  0\n  >>> fizz_buzz(82000)\n  0\n  >>> fizz_buzz(83000)\n  0\n  >>> fizz_buzz(84000)\n  0\n  >>> fizz_buzz(85000)\n  0\n  >>> fizz_buzz(86000)\n  0\n  >>> fizz_buzz(87000)\n  0\n  >>> fizz_buzz(88000)\n  0\n  >>> fizz_buzz(89000)"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sort_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sort_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_evenodd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  >>> sort_evenodd([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  */\nconst sort_evenodd_reversed = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd_reversed([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  >>> sort_evenodd_reversed([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  */\nconst sort_evenodd_reversed_reversed = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd_reversed_reversed([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  >>> sort_evenodd_reversed_reversed([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  */\nconst sort_evenodd_reversed_reversed_reversed = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd_reversed_reversed_reversed([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  >>> sort_evenodd_reversed_reversed_reversed([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  */\nconst sort_evenodd_reversed_reversed_reversed_reversed = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd_reversed_reversed_reversed_reversed([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  >>> sort_evenodd_reversed_reversed_reversed_reversed([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  */\nconst sort_evenodd_reversed_reversed_reversed_reversed_reversed = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd_reversed_reversed_reversed_reversed_reversed([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  >>> sort_evenodd_reversed_reversed_reversed_reversed_reversed([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  */\nconst sort_evenodd_reversed_reversed_reversed_reversed_reversed_reversed = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_evenodd_reversed_reversed_reversed_reversed_reversed_reversed([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  >>> sort_evenodd_reversed_reversed_reversed_reversed_reversed_reversed([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  */\nconst sort_evenodd_reversed_reversed_reversed_reversed_reversed_reversed = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push("}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic_groups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_groups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic_group_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_group_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic_group_group_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_group_group_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic_group_group_group_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_group_group_group_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "<|endoftext|>/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  let prime = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      prime = prime * i;\n    }\n  }\n  return prime;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(10)\n  true\n  >>> is_prime(11)\n  false\n  >>> is_prime(12)\n  false\n  >>> is_prime(13)\n  false\n  >>> is_prime(14)\n  false\n  >>> is_prime(15)\n  false\n  >>> is_prime(16)\n  false\n  >>> is_prime(17)\n  false\n  >>> is_prime(18)\n  false\n  >>> is_prime(19)\n  false\n  >>> is_prime(20)\n  false\n  >>> is_prime(21)\n  false\n  >>> is_prime(22)\n  false\n  >>> is_prime(23)\n  false\n  >>> is_prime(24)\n  false\n  >>> is_prime(25)\n  false\n  >>> is_prime(26)\n  false\n  >>> is_prime(27)\n  false\n  >>> is_prime(28)\n  false\n  >>> is_prime(29)\n  false\n  >>> is_prime(30)\n  false\n  >>> is_prime(31)\n  false\n  >>> is_prime(32)\n  false\n  >>> is_prime(33)\n  false\n  >>> is_prime(34)\n  false\n  >>> is_prime(35)\n  false\n  >>> is_prime(36)\n  false\n  >>> is_prime(37)\n  false\n  >>> is_prime(38)\n  false\n  >>> is_prime(39)\n  false\n  >>> is_prime(40)\n  false\n  >>> is_prime(41)\n  false\n  >>> is_prime(42)\n  false\n  >>> is_prime(43)\n  false\n  >>> is_prime(44)\n  false\n  >>> is_prime(45)\n  false\n  >>> is_prime(46)\n  false\n  >>> is_prime(47)\n  false\n  >>> is_prime(48)\n  false\n  >>> is_prime(49)\n  false\n  >>> is_prime(50)\n  false\n  >>> is_prime(51)\n  false\n  >>> is_prime(52)\n  false\n  >>> is_prime(53)\n  false\n  >>> is_prime(54)\n  false\n  >>> is_prime(55)\n  false\n  >>> is_prime(56)\n  false\n  >>> is_prime(57)\n  false\n  >>> is_prime(58)\n  false\n  >>> is_prime(59)\n  false\n  >>> is_prime(60)\n  false\n  >>> is_prime(61)\n  false\n  >>> is_prime(62)\n  false\n  >>> is_prime(63)\n  false\n  >>> is_prime(64)\n  false\n  >>> is_prime(65)\n  false\n  >>> is_prime(66)\n  false\n  >>> is_prime(67)\n  false\n  >>> is_prime(68)\n  false\n  >>> is_prime(69)\n  false\n  >>> is_prime(70)\n  false\n  >>> is_prime(71)\n  false\n  >>> is_prime(72)\n  false\n  >>> is_prime(73)\n  false\n  >>> is_prime(74)\n  false\n  >>> is_prime(75)\n  false\n  >>> is_prime(76)\n  false\n  >>> is_prime(77)\n  false\n  >>> is_prime(78)\n  false\n  >>> is_prime(79)\n  false\n  >>> is_prime(80)\n  false\n  >>> is_prime(81)\n  false\n  >>> is_prime(82)\n  false\n  >>> is_prime(83)\n  false\n  >>> is_prime(84)\n  false\n  >>> is_prime(85)\n  false\n  >>> is_prime(86)\n  false\n  >>> is_prime(87)\n  false\n  >>> is_prime(88)\n  false\n  >>> is_prime(89)\n  false\n  >>> is_prime(90)\n  false\n  >>> is_prime(91)\n  false\n  >>> is_prime(92)\n  false\n  >>> is_prime(93)\n  false\n  >>> is_prime(94)\n  false\n  >>> is_prime(95)\n  false\n  >>> is_prime(96)\n  false\n  >>> is_prime(97)\n  false\n  >>> is_prime(98)\n  false\n  >>> is_prime(99)\n  false\n  >>> is_prime(100)\n  false\n  >>> is_prime(101)\n  false\n  >>> is_prime(102)\n  false\n  >>> is_prime(103)\n  false\n  >>> is_prime(104)\n  false\n  >>> is_prime(105)\n  false\n  >>> is_prime(106)\n  false\n  >>> is_prime(107)\n  false\n  >>> is_prime(108)\n  false\n  >>> is_prime(109)\n  false\n  >>> is_prime(110)\n  false\n  >>> is_prime(111)\n  false\n  >>> is_prime(112)\n  false\n  >>> is_prime(113)\n  false\n  >>> is_prime(114)\n  false\n  >>> is_prime(115)\n  false\n  >>> is_prime(116)\n  false\n  >>> is_prime(117)\n  false\n  >>> is_prime(118)\n  false\n  >>> is_prime(119)\n  false\n  >>> is_prime(120)\n  false\n  >>> is_prime(121)\n  false\n  >>> is_prime(122)\n  false\n  >>> is_prime(123)\n  false\n  >>> is_prime(124)\n  false\n  >>> is_prime(125)\n  false\n  >>> is_prime(126)\n  false\n  >>> is_prime(127)\n  false\n  >>> is_prime(128)\n  false\n  >>> is_prime(129)\n  false\n  >>> is_prime(130)\n  false\n  >>> is_prime(131)\n  false\n  >>> is_prime(132)\n  false\n  >>> is_prime(133)\n  false\n  >>> is_prime(134)\n  false\n  >>> is_prime(135)\n  false\n  >>> is_prime(136)\n  false\n  >>> is_prime(137)\n  false\n  >>> is_prime(138)\n  false\n  >>> is_prime(139)\n  false\n  "}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "<|endoftext|>/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_prime takes an integer as an input, and returns true if the number is\n  prime, and false otherwise.\n\n  >>> is_prime(7)\n  true\n  >>> is_prime(10)\n  false\n  >>> is_prime(15)\n  false\n  >>> is_prime(20)\n  false\n  >>> is_prime(25)\n  false\n  >>> is_prime(30)\n  false\n  >>> is_prime(35)\n  false\n  >>> is_prime(50)\n  false\n  >>> is_prime(55)\n  false\n  >>> is_prime(60)\n  false\n  >>> is_prime(65)\n  false\n  >>> is_prime(70)\n  false\n  >>> is_prime(75)\n  false\n  >>> is_prime(80)\n  false\n  >>> is_prime(85)\n  false\n  >>> is_prime(90)\n  false\n  >>> is_prime(95)\n  false\n  >>> is_prime(100)\n  false\n  >>> is_prime(105)\n  false\n  >>> is_prime(110)\n  false\n  >>> is_prime(115)\n  false\n  >>> is_prime(120)\n  false\n  >>> is_prime(125)\n  false\n  >>> is_prime(130)\n  false\n  >>> is_prime(135)\n  false\n  >>> is_prime(140)\n  false\n  >>> is_prime(145)\n  false\n  >>> is_prime(150)\n  false\n  >>> is_prime(155)\n  false\n  >>> is_prime(160)\n  false\n  >>> is_prime(165)\n  false\n  >>> is_prime(170)\n  false\n  >>> is_prime(175)\n  false\n  >>> is_prime(180)\n  false\n  >>> is_prime(185)\n  false\n  >>> is_prime(190)\n  false\n  >>> is_prime(195)\n  false\n  >>> is_prime(200)\n  false\n  >>> is_prime(205)\n  false\n  >>> is_prime(210)\n  false\n  >>> is_prime(215)\n  false\n  >>> is_prime(220)\n  false\n  >>> is_prime(225)\n  false\n  >>> is_prime(230)\n  false\n  >>> is_prime(235)\n  false\n  >>> is_prime(240)\n  false\n  >>> is_prime(245)\n  false\n  >>> is_prime(250)\n  false\n  >>> is_prime(255)\n  false\n  >>> is_prime(260) \n  false\n  >>> is_prime(265)\n  false\n  >>> is_prime(270)\n  false\n  >>> is_prime(275)\n  false\n  >>> is_prime(280)\n  false\n  >>> is_prime(285)\n  false\n  >>> is_prime(290)\n  false\n  >>> is_prime(295)\n  false\n  >>> is_prime(300)\n  false\n  >>> is_prime(305)\n  false\n  >>> is_prime(310)\n  false\n  >>> is_prime(315)\n  false\n  >>> is_prime(320)\n  false\n  >>> is_prime(325)\n  false\n  >>> is_prime(330)\n  false\n  >>> is_prime(335)\n  false\n  >>> is_prime(340)\n  false\n  >>> is_prime(345)\n  false\n  >>> is_prime(350)\n  false\n  >>> is_prime(355)\n  false\n  >>> is_prime(360)\n  false\n  >>> is_prime(365)\n  false\n  >>> is_prime(370)\n  false\n  >>> is_prime(375)\n  false\n  >>> is_prime(380)\n  false\n  >>> is_prime(385)\n  false\n  >>> is_prime(390)\n  false\n  >>> is_prime(395)\n  false\n  >>> is_prime(410)\n  false\n  >>> is_prime(415)\n  false\n  >>> is_prime(420)\n  false\n  >>> is_prime(425)\n  false\n  >>> is_prime(430)\n  false\n  >>> is_prime(435)\n  false\n  >>> is_prime(440)\n  false\n  >>> is_prime(445)\n  false\n  >>> is_prime(450)\n  false\n  >>> is_prime(455)\n  false\n  >>> is_prime(460)\n  false\n  >>> is_prime(465)\n  false\n  >>> is_prime(470)\n  false\n  >>> is_prime(475)\n  false\n  >>> is_prime(480)\n  false\n  >>> is_prime(485)\n  false\n  >>> is_prime(490)\n  false\n  >>> is_prime(495)\n  false\n  >>> is_prime(500)\n  false\n  >>> is_prime(505)\n  false\n  >>> is_prime(510)\n  false\n  >>> is_prime(515)\n  false\n  >>> is_prime(520)\n  false\n  >>> is_prime(525)\n  false\n  >>> is_prime(530)\n  false\n  >>> is_prime(535)\n  false\n  >>> is_prime(540)\n  false\n  >>> is_prime(545)\n  false\n  >>> is_prime(550) \n  false\n  >>> is_prime(555)\n  false\n  >>> is_prime(560)\n  false\n  >>> is_prime(565)\n  false\n  >>> is_prime(570)\n  false\n  >>> is_prime(575)\n  false\n  >>> is_prime(580)\n  false\n  >>> is_prime(585)\n  false\n  >>> is_prime(590)\n  false\n  >>> is_prime(595)\n  false\n  >>> is_prime(600)\n  false\n  >>> is_prime(605)\n  false\n  >>> is_prime(610)\n  false\n  >>> is_prime(615)\n  false\n  >>> is_prime(620)\n  false\n  >>> is_prime(625)\n  false\n  >>> is_prime(630)\n  false\n  >>> is_prime(635)\n  false\n  >>> is_prime(640)\n  false\n  >>> is_prime(645)\n  false\n  >>> is_prime(650)"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    if (cars[i].speed > cars[i + 1].speed) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a road network, find all possible roads starting at any car.\n  A road is a sequence of roads starting at a car.\n\n  For example, given the following roads:\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n  10\n  11\n  12\n  13\n  14\n  15\n  16\n  17\n  18\n  19\n  20\n  21\n  22\n  23\n  24\n  25\n  26\n  27\n  28\n  29\n  30\n  31\n  32\n  33\n  34\n  35\n  36\n  37\n  38\n  39\n  40\n  41\n  42\n  43\n  44\n  45\n  46\n  47\n  48\n  49\n  50\n  51\n  52\n  53\n  54\n  55\n  56\n  57\n  58\n  59\n  60\n  61\n  62\n  63\n  64\n  65\n  66\n  67\n  68\n  69\n  70\n  71\n  72\n  73\n  74\n  75\n  76\n  77\n  78\n  79\n  80\n  81\n  82\n  83\n  84\n  85\n  86\n  87\n  88\n  89\n  90\n  91\n  92\n  93\n  94\n  95\n  96\n  97\n  98\n  99\n  100\n  101\n  102\n  103\n  104\n  105\n  106\n  107\n  108\n  109\n  110\n  111\n  112\n  113\n  114\n  115\n  116\n  117\n  118\n  119\n  120\n  121\n  122\n  123\n  124\n  125\n  126\n  127\n  128\n  129\n  130\n  131\n  132\n  133\n  134\n  135\n  136\n  137\n  138\n  139\n  140\n  141\n  142\n  143\n  144\n  145\n  146\n  147\n  148\n  149\n  150\n  151\n  152\n  153\n  154\n  155\n  156\n  157\n  158\n  159\n  160\n  161\n  162\n  163\n  164\n  165\n  166\n  167\n  168\n  169\n  170\n  171\n  172\n  173\n  174\n  175\n  176\n  177\n  178\n  179\n  180\n  181\n  182\n  183\n  184\n  185\n  186\n  187\n  188\n  189\n  190\n  191\n  192\n  193\n  194\n  195\n  196\n  197\n  198\n  199\n  200\n  201\n  202\n  203\n  204\n  205\n  206\n  207\n  208\n  209\n  210\n  211\n  212\n  213\n  214\n  215\n  216\n  217\n  218\n  219\n  220\n  221\n  222\n  223\n  224\n  225\n  226\n  227\n  228\n  229\n  230\n  231\n  232\n  233\n  234\n  235\n  236\n  237\n  238\n  239\n  240\n  241\n  242\n  243\n  244\n  245\n  246\n  247\n  248\n  249\n  250\n  251\n  252\n  253\n  254\n  255\n  256\n  257\n  258\n  259\n  260\n  261\n  262\n  263\n  264\n  265\n  266\n  267\n  268\n  269\n  270\n  271\n  272\n  273\n  274\n  275\n  276\n  277\n  278\n  279\n  280\n  281\n  282\n  283\n  284\n  285\n  286\n  287\n  288\n  289\n  290\n  291\n  292\n  293\n  294\n  295\n  296\n  297\n  298\n  299\n  300\n  301\n  302\n  303\n  304\n  305\n  306\n  307\n  308\n  309\n  310\n  311\n  312\n  313\n  314\n  315\n  316\n  317\n  318\n  319\n  320\n  321\n  322\n  323\n  324\n  325\n  326\n  327\n  328\n  329\n  330\n  331\n  332\n  333\n  334\n  335\n  336\n  337\n  338\n  339\n  340\n  341\n  342\n  343\n  344\n  345\n  346\n  347\n  348\n  349\n  350\n  351\n  352\n  353\n  354\n  355\n  356\n  357\n  358\n  359\n  360\n  361\n  362\n  363\n  364\n  365\n  366\n  367\n  368\n  369\n  370\n  371\n  372\n  373\n  374\n  375\n  376\n  377\n  378\n  379\n  380\n  381\n  382\n  383\n  384\n  385\n  386\n  387\n  388\n  389\n  390\n  391\n  392\n  393\n  394\n  395\n  396\n  397\n  398\n  399\n  400\n  401\n  402\n  403\n  404\n  405\n  406\n  407\n  408\n  409\n  "}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i + 1;\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i - 1;\n  }\n  return res;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i + 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i - 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse_reverse = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i + 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse_reverse = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i - 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse_reverse_2 = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i + 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse_reverse_2 = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i - 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse_reverse_3 = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i + 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse_reverse_3 = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i - 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse_reverse_4 = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i + 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse_reverse_4 = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i - 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse_reverse_5 = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i + 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse_reverse_5 = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i - 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse_reverse_6 = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i + 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reverse_reverse_6 = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i - 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_reverse_reverse_7 = (l) => {\n  let res = new Array(l.length);\n  for (let i = 0; i < l.length; i++) {\n    res[i] = i + 1;\n  }\n  return res.reverse();\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "<|endoftext|>/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  is_palindrome takes an integer as an input, and returns true if the\n  integer is a palindrome, and false otherwise.\n  >>> is_palindrome(123)\n  true\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(123)\n"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  let result = '';\n  let power = 0;\n  while (x > 0) {\n    result += x.toString(base);\n    x = x % base;\n    power++;\n  }\n  return result + x.toString(base);\n};\n\n/*\n  Convert a string to a number.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, return NaN.\n  If the string is not a number, "}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(5, 2)\n  4.5\n  */\nconst triangle_area_low = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low(5, 3)\n  3.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 3)\n  2.5\n  */\nconst triangle_area_low_high = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area_low_high(5, 2)\n"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(10)\n  4140243599\n  >>> fibonacci(11)\n  2432902008\n  >>> fibonacci(12)\n  3435973836\n  >>> fibonacci(13)\n  68719476736\n  >>> fibonacci(14)\n  90737110497\n  >>> fibonacci(15)\n  181469594097\n  >>> fibonacci(16)\n  3435973836\n  >>> fibonacci(17)\n  68719476736\n  >>> fibonacci(18)\n  90737110497\n  >>> fibonacci(19)\n  181469594097\n  >>> fibonacci(20)\n  3435973836\n  >>> fibonacci(21)\n  68719476736\n  >>> fibonacci(22)\n  90737110497\n  >>> fibonacci(23)\n  181469594097\n  >>> fibonacci(24)\n  3435973836\n  >>> fibonacci(25)\n  68719476736\n  >>> fibonacci(26)\n  90737110497\n  >>> fibonacci(27)\n  181469594097\n  >>> fibonacci(28)\n  3435973836\n  >>> fibonacci(29)\n  68719476736\n  >>> fibonacci(30)\n  90737110497\n  >>> fibonacci(31)\n  181469594097\n  >>> fibonacci(32)\n  3435973836\n  >>> fibonacci(33)\n  68719476736\n  >>> fibonacci(34)\n  90737110497\n  >>> fibonacci(35)\n  181469594097\n  >>> fibonacci(36)\n  3435973836\n  >>> fibonacci(37)\n  68719476736\n  >>> fibonacci(38)\n  90737110497\n  >>> fibonacci(39)\n  181469594097\n  >>> fibonacci(40)\n  3435973836\n  >>> fibonacci(41)\n  68719476736\n  >>> fibonacci(42)\n  90737110497\n  >>> fibonacci(43)\n  181469594097\n  >>> fibonacci(44)\n  3435973836\n  >>> fibonacci(45)\n  68719476736\n  >>> fibonacci(46)\n  90737110497\n  >>> fibonacci(47)\n  181469594097\n  >>> fibonacci(48)\n  3435973836\n  >>> fibonacci(49)\n  68719476736\n  >>> fibonacci(50)\n  90737110497\n  >>> fibonacci(51)\n  181469594097\n  >>> fibonacci(52)\n  3435973836\n  >>> fibonacci(53)\n  68719476736\n  >>> fibonacci(54)\n  90737110497\n  >>> fibonacci(55)\n  181469594097\n  >>> fibonacci(56)\n  3435973836\n  >>> fibonacci(57)\n  68719476736\n  >>> fibonacci(58)\n  90737110497\n  >>> fibonacci(59)\n  181469594097\n  >>> fibonacci(60)\n  3435973836\n  >>> fibonacci(61)\n  68719476736\n  >>> fibonacci(62)\n  90737110497\n  >>> fibonacci(63)\n  181469594097\n  >>> fibonacci(64)\n  3435973836\n  >>> fibonacci(65)\n  68719476736\n  >>> fibonacci(66)\n  90737110497\n  >>> fibonacci(67)\n  181469594097\n  >>> fibonacci(68)\n  3435973836\n  >>> fibonacci(69)\n  68719476736\n  >>> fibonacci(70)\n  90737110497\n  >>> fibonacci(71)\n  181469594097\n  >>> fibonacci(72)\n  3435973836\n  >>> fibonacci(73)\n  68719476736\n  >>> fibonacci(74)\n  90737110497\n  >>> fibonacci(75)\n  181469594097\n  >>> fibonacci(76)\n  3435973836\n  >>> fibonacci(77)\n  68719476736\n  >>> fibonacci(78)\n  90737110497\n  >>> fibonacci(79)\n  181469594097\n  >>> fibonacci(80)\n  3435973836\n  >>> fibonacci(81)\n  6871947"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n % 2 === 0) {\n    n -= 1\n  }\n  let mid = Math.floor(n/2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid, l.length)\n  let median = median(left)\n  let right = median(right)\n  return right + left\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst "}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length(3, 'aba')\n  true\n  >>> is_palindrome_length(3, 'aaaaa')\n  true\n  >>> is_palindrome_length(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_2(3, 'aba')\n  true\n  >>> is_palindrome_length_2(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_2(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_2 = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_3(3, 'aba')\n  true\n  >>> is_palindrome_length_3(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_3(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_3 = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_4(3, 'aba')\n  true\n  >>> is_palindrome_length_4(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_4(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_4 = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_5(3, 'aba')\n  true\n  >>> is_palindrome_length_5(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_5(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_5 = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_6(3, 'aba')\n  true\n  >>> is_palindrome_length_6(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_6(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_6 = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_7(3, 'aba')\n  true\n  >>> is_palindrome_length_7(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_7(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_7 = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_8(3, 'aba')\n  true\n  >>> is_palindrome_length_8(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_8(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_8 = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_9(3, 'aba')\n  true\n  >>> is_palindrome_length_9(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_9(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_9 = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_10(3, 'aba')\n  true\n  >>> is_palindrome_length_10(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_10(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_10 = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_11(3, 'aba')\n  true\n  >>> is_palindrome_length_11(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_11(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_11 = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_12(3, 'aba')\n  true\n  >>> is_palindrome_length_12(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_12(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_12 = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_13(3, 'aba')\n  true\n  >>> is_palindrome_length_13(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_13(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_13 = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_14(3, 'aba')\n  true\n  >>> is_palindrome_length_14(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_14(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_14 = (length, text) => {\n  return text.split('').reverse().slice(0, length).join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> is_palindrome_length_15(3, 'aba')\n  true\n  >>> is_palindrome_length_15(3, 'aaaaa')\n  true\n  >>> is_palindrome_length_15(3, 'zbcd')\n  false\n  */\nconst is_palindrome_length_15 = (length, "}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modp requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  if (p === 2) {\n    return n & 1;\n  }\n  if (p === 3) {\n    return n & 2;\n  }\n  if (p === 4) {\n    return n & 4;\n  }\n  if (p === 5) {\n    return n & 8;\n  }\n  if (p === 6) {\n    return n & 16;\n  }\n  if (p === 7) {\n    return n & 32;\n  }\n  if (p === 8) {\n    return n & 64;\n  }\n  if (p === 9) {\n    return n & 128;\n  }\n  if (p === 10) {\n    return n & 256;\n  }\n  if (p === 11) {\n    return n & 512;\n  }\n  if (p === 12) {\n    return n & 1024;\n  }\n  if (p === 13) {\n    return n & 2048;\n  }\n  if (p === 14) {\n    return n & 4096;\n  }\n  if (p === 15) {\n    return n & 8192;\n  }\n  if (p === 16) {\n    return n & 16384;\n  }\n  if (p === 17) {\n    return n & 32768;\n  }\n  if (p === 18) {\n    return n & 65536;\n  }\n  if (p === 19) {\n    return n & 131072;\n  }\n  if (p === 20) {\n    return n & 262144;\n  }\n  if (p === 21) {\n    return n & 524288;\n  }\n  if (p === 22) {\n    return n & 1048576;\n  }\n  if (p === 23) {\n    return n & 2097152;\n  }\n  if (p === 24) {\n    return n & 4194304;\n  }\n  if (p === 25) {\n    return n & 8388608;\n  }\n  if (p === 26) {\n    return n & 16777216;\n  }\n  if (p === 27) {\n    return n & 33554432;\n  }\n  if (p === 28) {\n    return n & 67108864;\n  }\n  if (p === 29) {\n    return n & 134217728;\n  }\n  if (p === 30) {\n    return n & 268435456;\n  }\n  if (p === 31) {\n    return n & 536870912;\n  }\n  if (p === 32) {\n    return n & 1073741824;\n  }\n  if (p === 33) {\n    return n & 2147483648;\n  }\n  if (p === 34) {\n    return n & 4294967296;\n  }\n  if (p === 35) {\n    return n & 8388607;\n  }\n  if (p === 36) {\n    return n & 16777215;\n  }\n  if (p === 37) {\n    return n & 33554431;\n  }\n  if (p === 38) {\n    return n & 67108863;\n  }\n  if (p === 39) {\n    return n & 134217727;\n  }\n  if (p === 40) {\n    return n & 268435452;\n  }\n  if (p === 41) {\n    return n & 536870911;\n  }\n  if (p === 42) {\n    return n & 1073741823;\n  }\n  if (p === 43) {\n    return n & 2147483650;\n  }\n  if (p === 44) {\n    return n & 4294967295;\n  }\n  if (p === 45) {\n    return n & 8388606;\n  }\n  if (p === 46) {\n    return n & 16777216;\n  }\n  if (p === 47) {\n    return n & 33554430;\n  }\n  if (p === 48) {\n    return n & 67108862;\n  }\n  if (p === 49) {\n    return n & 134217725;\n  }\n  if (p === 50) {\n    return n & 268435451;\n  }\n  if (p === 51) {\n    return n & 536870910;\n  }\n  if (p === 52) {\n    return n & 1073741822;\n  }\n  if (p === 53) {\n    return n & 2147483649;\n  }\n  if (p === 54) {\n    return n & 4294967294;\n  }\n  if (p === 55) {\n    return n & 8388605;\n  }\n  if (p === 56) {\n    return n & 16777215;\n  }\n  if (p === 57) {\n    return n & 33554429;\n  }\n  if (p === 58) {\n    return n & 67108861;\n  }\n  if (p === 59) {\n    return n & 134217724;\n  }\n  if (p === 60) {\n    return n & 268435450;\n  }\n  if (p === 61) {\n    return n & 53687099;\n  }\n  if (p === 62) {\n    return n & 1073741823;\n  }\n  if (p === 63) {\n    return n & 2147483651;\n  }\n  if (p === 64) {\n    return n & 4294967293;\n  }\n  if (p === 65) {\n    return n & 8388604;\n  }\n  if (p === 66) {\n    return n & 16777216;\n  }\n  if (p === 67) {\n    return n & 33554428;\n  }\n  if (p === 68) {\n    return n & 67108860;\n  }\n  if (p === 69) {\n    return n & 134217723;\n  }\n  if (p === 70) {\n    return n & 268435449;\n  }\n  if (p === 71) {\n    return n & 53687098;\n  }\n  if (p === 72) {\n    return n & 1073741822;\n  }\n  if (p === 73) {\n    return n & 2147483652;\n  }\n  if (p === 74) {\n    return n & 4294967292;\n  }\n  if (p === 75) {\n    return n & 8388603;\n  }\n  if (p === 76) {\n    return n & 16777215;\n  }\n  if (p === 77) {\n    return n & 33554427;\n  }\n  if (p === 78) {\n    return n & 671088600;\n  }\n  if (p === 79) {\n    return n & 134217722;\n  }\n  if (p === 80) {\n    return n & 268435448;\n  }\n  if (p === 81) {\n    return n & 53687097;\n  }\n  if (p === 82) {\n    return n & 1073741821;\n  }\n  if (p === 83) {\n    return n & 2147483653;\n  }\n  if (p === 84) {\n    return n & 4294967291;\n  }\n  if (p === 85) {\n    return n & 8388602;\n  }\n  if (p === 86) {\n    return n & 16777216;\n  }\n  if (p === 87) {\n    return n & 33554425;\n  }\n  if (p === 88) {\n    return n & 671088599;\n  }\n  if (p === 89) {\n    return n & 134217719;\n  }\n  if (p === 90) {\n    return n & 268435449;\n  }\n  if (p === 9"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift_reverse function. Returns decoded string.\n  */\nconst decodeShift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \""}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "<|endoftext|>/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  let vowels = text.split('').filter(x => /[aeiou]/i.test(x));\n  return vowels.join('');\n};\n\n/*\n  is_vowel is a function that takes string and returns boolean value if string contains vowels.\n  >>> is_vowel('')\n  false\n  >>> is_vowel(\"abcdef\\nghijklm\")\n  true\n  >>> is_vowel('abcdef')\n  true\n  >>> is_vowel('aaaaa')\n  false\n  >>> is_vowel('aaBAA')\n  true\n  >>> is_vowel('zbcd')\n  false\n  */\nconst is_vowel = (text) => {\n  let vowels = text.split('').filter(x => /[aeiou]/i.test(x));\n  return vowels.length > 0;\n};\n\n/*\n  is_alphabet is a function that takes string and returns boolean value if string contains alphabet.\n  >>> is_alphabet('')\n  false\n  >>> is_alphabet(\"abcdef\\nghijklm\")\n  true\n  >>> is_alphabet('abcdef')\n  true\n  >>> is_alphabet('aaaaa')\n  false\n  >>> is_alphabet('aaBAA')\n  true\n  >>> is_alphabet('zbcd')\n  false\n  */\nconst is_alphabet = (text) => {\n  let alphabet = text.split('').filter(x => /[a-zA-Z]/i.test(x));\n  return alphabet.length > 0;\n};\n\n/*\n  is_digit is a function that takes string and returns boolean value if string contains digits.\n  >>> is_digit('')\n  false\n  >>> is_digit(\"abcdef\\nghijklm\")\n  true\n  >>> is_digit('abcdef')\n  true\n  >>> is_digit('aaaaa')\n  false\n  >>> is_digit('aaBAA')\n  true\n  >>> is_digit('zbcd')\n  false\n  */\nconst is_digit = (text) => {\n  let digits = text.split('').filter(x => /[0-9]/i.test(x));\n  return digits.length > 0;\n};\n\n/*\n  is_alphabet_and_digit is a function that takes string and returns boolean value if string contains alphabet and digits.\n  >>> is_alphabet_and_digit('')\n  false\n  >>> is_alphabet_and_digit(\"abcdef\\nghijklm\")\n  true\n  >>> is_alphabet_and_digit('abcdef')\n  true\n  >>> is_alphabet_and_digit('aaaaa')\n  false\n  >>> is_alphabet_and_digit('aaBAA')\n  true\n  >>> is_alphabet_and_digit('zbcd')\n  false\n  */\nconst is_alphabet_and_digit = (text) => {\n  let alphabet = text.split('').filter(x => /[a-zA-Z]/i.test(x));\n  let digits = text.split('').filter(x => /[0-9]/i.test(x));\n  return alphabet.length > 0 && digits.length > 0;\n};\n\n/*\n  is_alphabet_and_digit is a function that takes string and returns boolean value if string contains alphabet and digits.\n  >>> is_alphabet_and_digit('')\n  false\n  >>> is_alphabet_and_digit(\"abcdef\\nghijklm\")\n  true\n  >>> is_alphabet_and_digit('abcdef')\n  true\n  >>> is_alphabet_and_digit('aaaaa')\n  false\n  >>> is_alphabet_and_digit('aaBAA')\n  true\n  >>> is_alphabet_and_digit('zbcd')\n  false\n  */\nconst is_alphabet_and_digit = (text) => {\n  let alphabet = text.split('').filter(x => /[a-zA-Z]/i.test(x));\n  let digits = text.split('').filter(x => /[0-9]/i.test(x));\n  return alphabet.length > 0 && digits.length > 0;\n};\n\n/*\n  is_alphabet_and_digit is a function that takes string and returns boolean value if string contains alphabet and digits.\n  >>> is_alphabet_and_digit('')\n  false\n  >>> is_alphabet_and_digit(\"abcdef\\nghijklm\")\n  true\n  >>> is_alphabet_and_digit('abcdef')\n  true\n  >>> is_alphabet_and_digit('aaaaa')\n  false\n  >>> is_alphabet_and_digit('aaBAA')\n  true\n  >>> is_alphabet_and_digit('zbcd')\n  false\n  */\nconst is_alphabet_and_digit = (text) => {\n  let alphabet = text.split('').filter(x => /[a-zA-Z]/i.test(x));\n  let digits = text.split('').filter(x => /[0-9]/i.test(x));\n  return alphabet.length > 0 && digits.length > 0;\n};\n\n/*\n  is_alphabet_and_digit is a function that takes string and returns boolean value if string contains alphabet and digits.\n  >>> is_alphabet_and_digit('')\n  false\n  >>> is_alphabet_and_digit(\"abcdef\\nghijklm\")\n  true\n  >>> is_alphabet_and_digit('abcdef')\n  true\n  >>> is_alphabet_and_digit('aaaaa')\n  false\n  >>> is_alphabet_and_digit('aaBAA')\n  true\n  >>> is_alphabet_and_digit('zbcd')\n  false\n  */\nconst is_alphabet_and_digit = (text) => {\n  let alphabet = text.split('').filter(x => /[a-zA-Z]/i.test(x));\n  let digits = text.split('').filter(x => /[0-9]/i.test(x));\n  return alphabet.length > 0 && digits.length > 0;\n};\n\n/*\n  is_alphabet_and_digit is a function that takes string and returns boolean value if string contains alphabet and digits.\n  >>> is_alphabet_and_digit('')\n  false\n  >>> is_alphabet_and_digit(\"abcdef\\nghijklm\")\n  true\n  >>> is_alphabet_and_digit('abcdef')\n  true\n  >>> is_alphabet_and_digit('aaaaa')\n  false\n  >>> is_alphabet_and_digit('aaBAA')\n  true\n  >>> is_alphabet_and_digit('zbcd')\n  false\n  */\nconst is_alphabet_and_digit = (text) => {\n  let alphabet = text.split('').filter(x => /[a-zA-Z]/i.test(x));\n  let digits = text.split('').filter(x => /[0-9]/i.test(x));\n  return alphabet.length > 0 && digits.length > 0;\n};\n\n/*\n  is_alphabet_and_digit is a function that takes string and returns boolean value if string contains alphabet and digits.\n  >>> is_alphabet_and_digit('')\n  false\n  >>> is_alphabet_and_digit(\"abcdef\\nghijklm\")\n  true\n  >>> is_alphabet_and_digit('abcdef')\n  true\n  >>> is_alphabet_and_digit('aaaaa')\n  false\n  >>> is_alphabet_and_digit('aaBAA')\n  true\n  >>> is_alphabet_and_digit('zbcd')\n  false\n  */\nconst is_alphabet_and_digit = (text) => {\n  let alphabet = text.split('').filter(x => /[a-zA-Z]/i.test(x));\n  let digits = text.split('').filter(x => /[0-9]/i.test(x));\n  return alphabet.length > 0 && digits.length > 0;\n};\n\n/*\n  is_alphab"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> below_threshold([1, 2, 4, 10], 5)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n*/\nconst below_threshold_2 = l => {\n  return l.every(n => n < 5);\n};\n\n/*\n  >>> below_threshold_2([1, 2, 4, 10])\n  true\n  >>> below_threshold_2([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_3 = l => {\n  return l.every(n => n < 20);\n};\n\n/*\n  >>> below_threshold_3([1, 2, 4, 10])\n  true\n  >>> below_threshold_3([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_4 = l => {\n  return l.every(n => n < 40);\n};\n\n/*\n  >>> below_threshold_4([1, 2, 4, 10])\n  true\n  >>> below_threshold_4([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_5 = l => {\n  return l.every(n => n < 50);\n};\n\n/*\n  >>> below_threshold_5([1, 2, 4, 10])\n  true\n  >>> below_threshold_5([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_6 = l => {\n  return l.every(n => n < 60);\n};\n\n/*\n  >>> below_threshold_6([1, 2, 4, 10])\n  true\n  >>> below_threshold_6([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_7 = l => {\n  return l.every(n => n < 70);\n};\n\n/*\n  >>> below_threshold_7([1, 2, 4, 10])\n  true\n  >>> below_threshold_7([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_8 = l => {\n  return l.every(n => n < 80);\n};\n\n/*\n  >>> below_threshold_8([1, 2, 4, 10])\n  true\n  >>> below_threshold_8([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_9 = l => {\n  return l.every(n => n < 90);\n};\n\n/*\n  >>> below_threshold_9([1, 2, 4, 10])\n  true\n  >>> below_threshold_9([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_10 = l => {\n  return l.every(n => n < 100);\n};\n\n/*\n  >>> below_threshold_10([1, 2, 4, 10])\n  true\n  >>> below_threshold_10([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_11 = l => {\n  return l.every(n => n < 1000);\n};\n\n/*\n  >>> below_threshold_11([1, 2, 4, 10])\n  true\n  >>> below_threshold_11([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_12 = l => {\n  return l.every(n => n < 10000);\n};\n\n/*\n  >>> below_threshold_12([1, 2, 4, 10])\n  true\n  >>> below_threshold_12([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_13 = l => {\n  return l.every(n => n < 100000);\n};\n\n/*\n  >>> below_threshold_13([1, 2, 4, 10])\n  true\n  >>> below_threshold_13([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_14 = l => {\n  return l.every(n => n < 1000000);\n};\n\n/*\n  >>> below_threshold_14([1, 2, 4, 10])\n  true\n  >>> below_threshold_14([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_15 = l => {\n  return l.every(n => n < 10000000);\n};\n\n/*\n  >>> below_threshold_15([1, 2, 4, 10])\n  true\n  >>> below_threshold_15([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_16 = l => {\n  return l.every(n => n < 100000000);\n};\n\n/*\n  >>> below_threshold_16([1, 2, 4, 10])\n  true\n  >>> below_threshold_16([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_17 = l => {\n  return l.every(n => n < 1000000000);\n};\n\n/*\n  >>> below_threshold_17([1, 2, 4, 10])\n  true\n  >>> below_threshold_17([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_18 = l => {\n  return l.every(n => n < 10000000000);\n};\n\n/*\n  >>> below_threshold_18([1, 2, 4, 10])\n  true\n  >>> below_threshold_18([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_19 = l => {\n  return l.every(n => n < 100000000000);\n};\n\n/*\n  >>> below_threshold_19([1, 2, 4, 10])\n  true\n  >>> below_threshold_19([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_20 = l => {\n  return l.every(n => n < 1000000000000);\n};\n\n/*\n  >>> below_threshold_20([1, 2, 4, 10])\n  true\n  >>> below_threshold_20([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_21 = l => {\n  return l.every(n => n < 10000000000000);\n};\n\n/*\n  >>> below_threshold_21([1, 2, 4, 10])\n  true\n  >>> below_threshold_21([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_22 = l => {\n  return l.every(n => n < 100000000000000);\n};\n\n/*\n  >>> below_threshold_22([1, 2, 4, 10])\n  true\n  >>> below_threshold_22([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_23 = l => {\n  return l.every(n => n < 1000000000000000);\n};\n\n/*\n  >>> below_threshold_23([1, 2, 4, 10])\n  true\n  >>> below_threshold_23([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_24 = l => {\n  return l.every(n => n < 10000000000000000);\n};\n\n/*\n  >>> below_threshold_24([1, 2, 4, 10])\n  true\n  >>> below_threshold_24([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_25 = l => {\n  return l.every(n => n < 100000000000000000);\n};\n\n/*\n  >>> below_threshold_25([1, 2, 4, 10])\n  true\n  >>> below_threshold_25([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_26 = l => {\n  return l.every(n => n < 100000000000000000 * 2);\n};\n\n/*\n  >>> below_threshold_26([1, 2, 4, 10])\n  true\n  >>> below_threshold_26([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_27 = l => {\n  return l.every(n => n < 100000000000000000 * 3);\n};\n\n/*\n  >>> below_threshold_27([1, 2, 4, 10])\n  true\n  >>> below_threshold_27([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_28 = l => {\n  return l.every(n => n < 100000000000000000 * 4);\n};\n\n/*\n  >>> below_threshold_28([1, 2, 4, 10])\n  true\n  >>> below_threshold_28([1, 20, 4, 10])\n  false\n*/\nconst below_threshold_29 = l => {\n  return l.every(n => n < 100000000000000000"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  3\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  3\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst mod = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst power = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPower = (a, b) => {\n  return mod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same length.\n  >>> same_length('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_length('abcd', 'dddddddabc')\n  true\n  >>> same_length('dddddddabc', 'abcd')\n  true\n  >>> same_length('eabcd', 'dddddddabc')\n  false\n  >>> same_length('abcd', 'dddddddabce')\n  false\n  >>> same_length('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_length = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same capitalization.\n  >>> same_upper('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_upper('abcd', 'dddddddabc')\n  true\n  >>> same_upper('dddddddabc', 'abcd')\n  true\n  >>> same_upper('eabcd', 'dddddddabc')\n  false\n  >>> same_upper('abcd', 'dddddddabce')\n  false\n  >>> same_upper('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_upper = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same lowercase.\n  >>> same_lowercase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_lowercase('abcd', 'dddddddabc')\n  true\n  >>> same_lowercase('dddddddabc', 'abcd')\n  true\n  >>> same_lowercase('eabcd', 'dddddddabc')\n  false\n  >>> same_lowercase('abcd', 'dddddddabce')\n  false\n  >>> same_lowercase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_lowercase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same number.\n  >>> same_number('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_number('abcd', 'dddddddabc')\n  true\n  >>> same_number('dddddddabc', 'abcd')\n  true\n  >>> same_number('eabcd', 'dddddddabc')\n  false\n  >>> same_number('abcd', 'dddddddabce')\n  false\n  >>> same_number('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_number = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same symbol.\n  >>> same_symbol('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_symbol('abcd', 'dddddddabc')\n  true\n  >>> same_symbol('dddddddabc', 'abcd')\n  true\n  >>> same_symbol('eabcd', 'dddddddabc')\n  false\n  >>> same_symbol('abcd', 'dddddddabce')\n  false\n  >>> same_symbol('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_symbol = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same symbol.\n  >>> same_symbol('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_symbol('abcd', 'dddddddabc')\n  true\n  >>> same_symbol('dddddddabc', 'abcd')\n  true\n  >>> same_symbol('eabcd', 'dddddddabc')\n  false\n  >>> same_symbol('abcd', 'dddddddabce')\n  false\n  >>> same_symbol('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_symbols = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same capitalization.\n  >>> same_upper('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_upper('abcd', 'dddddddabc')\n  true\n  >>> same_upper('dddddddabc', 'abcd')\n  true\n  >>> same_upper('eabcd', 'dddddddabc')\n  false\n  >>> same_upper('abcd', 'dddddddabce')\n  false\n  >>> same_upper('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_uppers = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same lowercase.\n  >>> same_lowercase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_lowercase('abcd', 'dddddddabc')\n  true\n  >>> same_lowercase('dddddddabc', 'abcd')\n  true\n  >>> same_lowercase('eabcd', 'dddddddabc')\n  false\n  >>> "}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci("}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const opening_brackets = brackets.split(\"<\");\n  const closing_brackets = brackets.split(\">\");\n  return opening_brackets.every(opening => closing_brackets.every(closing => opening === closing));\n};\n\n/**\n * Given a string, return true if it contains only letters.\n *\n * >>> is_letters(\"hello\")\n * true\n * >>> is_letters(\"helloworld\")\n * false\n */\nconst is_letters = str => {\n  return /[a-zA-Z]/.test(str);\n};\n\n/**\n * Given a string, return true if it contains only numbers.\n *\n * >>> is_numbers(\"hello\")\n * true\n * >>> is_numbers(\"helloworld\")\n * false\n */\nconst is_numbers = str => {\n  return /[0-9]/.test(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n *\n * >>> is_letters_and_numbers(\"hello\")\n * true\n * >>> is_letters_and_numbers(\"helloworld\")\n * false\n */\nconst is_letters_and_numbers = str => {\n  return is_letters(str) && is_numbers(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers and is all caps.\n *\n * >>> is_letters_and_numbers_and_all_caps(\"hello\")\n * true\n * >>> is_letters_and_numbers_and_all_caps(\"helloworld\")\n * false\n */\nconst is_letters_and_numbers_and_all_caps = str => {\n  return is_letters_and_numbers(str) && is_all_caps(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers and is all caps and is all lower case.\n *\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case(\"hello\")\n * true\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case(\"helloworld\")\n * false\n */\nconst is_letters_and_numbers_and_all_caps_and_all_lower_case = str => {\n  return is_letters_and_numbers_and_all_caps(str) && is_all_caps_and_all_lower_case(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers and is all caps and is all lower case and has at least one uppercase letter.\n *\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter(\"hello\")\n * true\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter(\"helloworld\")\n * false\n */\nconst is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter = str => {\n  return is_letters_and_numbers_and_all_caps_and_all_lower_case(str) && has_one_uppercase_letter(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers and is all caps and is all lower case and has at least one uppercase letter and at least one lowercase letter.\n *\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter(\"hello\")\n * true\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter(\"helloworld\")\n * false\n */\nconst is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter = str => {\n  return is_letters_and_numbers_and_all_caps_and_all_lower_case(str) && has_one_uppercase_letter_and_one_lowercase_letter(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers and is all caps and is all lower case and has at least one uppercase letter and at least one lowercase letter and at least one number.\n *\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter_and_one_number(\"hello\")\n * true\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter_and_one_number(\"helloworld\")\n * false\n */\nconst is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter_and_one_number = str => {\n  return is_letters_and_numbers_and_all_caps_and_all_lower_case(str) && has_one_uppercase_letter_and_one_lowercase_letter_and_one_number(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers and is all caps and is all lower case and has at least one uppercase letter and at least one lowercase letter and at least one number and at least one special character.\n *\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter_and_one_number_and_one_special_character(\"hello\")\n * true\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter_and_one_number_and_one_special_character(\"helloworld\")\n * false\n */\nconst is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter_and_one_number_and_one_special_character = str => {\n  return is_letters_and_numbers_and_all_caps_and_all_lower_case(str) && has_one_uppercase_letter_and_one_lowercase_letter_and_one_number_and_one_special_character(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers and is all caps and is all lower case and has at least one uppercase letter and at least one lowercase letter and at least one number and at least one special character.\n *\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter_and_one_number_and_one_special_character_and_one_special_character(\"hello\")\n * true\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter_and_one_number_and_one_special_character_and_one_special_character(\"helloworld\")\n * false\n */\nconst is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter_and_one_number_and_one_special_character_and_one_special_character = str => {\n  return is_letters_and_numbers_and_all_caps_and_all_lower_case(str) && has_one_uppercase_letter_and_one_lowercase_letter_and_one_number_and_one_special_character_and_one_special_character(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers and is all caps and is all lower case and has at least one uppercase letter and at least one lowercase letter and at least one number and at least one special character.\n *\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter_and_one_number_and_one_special_character_and_one_special_character_and_one_special_character(\"hello\")\n * true\n * >>> is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter_and_one_number_and_one_special_character_and_one_special_character_and_one_special_character_and_one_special_character(\"helloworld\")\n * false\n */\nconst is_letters_and_numbers_and_all_caps_and_all_lower_case_and_has_one_uppercase_letter_and_one_lowercase_letter_and_one_number_and_one_special_character_and_one_special_character_and_one_special_character_and_"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let l = l.reverse();\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j--;\n    } else if (l[j] > l[i]) {\n      j--;\n    } else {\n      k++;\n      if (k === j) {\n        return true;\n      }\n    }\n  }\n};\n\n/*\n  >>> isPositive(10)\n  true\n  >>> isPositive(-10)\n  false\n  >>> isPositive(0)\n  false\n  >>> isPositive(NaN)\n  false\n  >>> isPositive(Infinity)\n  false\n  >>> isPositive(-Infinity)\n  false\n  >>> isPositive([])\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})\n  false\n  >>> isPositive({})"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  let i = 2;\n  let prime_factor = 1;\n  while (n % i!== 0) {\n    prime_factor *= i;\n    i++;\n  }\n  return prime_factor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n that divides n.\n  Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_for_n = n => {\n  let i = 2;\n  let prime_factor = 1;\n  while (n % i!== 0) {\n    prime_factor *= i;\n    i++;\n  }\n  return prime_factor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n that divides n.\n  Assume n > 1 and is not a prime.\n  >>> largest_prime_factor_for_n(13195)\n  29\n  >>> largest_prime_factor_for_n(2048)\n  2\n  */\nconst largest_prime_factor_for_n_for_n = n => {\n  let i = 2;\n  let prime_factor = 1;\n  while (n % i!== 0) {\n    prime_factor *= i;\n    i++;\n  }\n  return prime_factor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n that divides n.\n  Assume n > 1 and is not a prime.\n  >>> largest_prime_factor_for_n_for_n(13195)\n  29\n  >>> largest_prime_factor_for_n_for_n(2048)\n  2\n  */\nconst largest_prime_factor_for_n_for_n_for_n = n => {\n  let i = 2;\n  let prime_factor = 1;\n  while (n % i!== 0) {\n    prime_factor *= i;\n    i++;\n  }\n  return prime_factor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n that divides n.\n  Assume n > 1 and is not a prime.\n  >>> largest_prime_factor_for_n_for_n_for_n(13195)\n  29\n  >>> largest_prime_factor_for_n_for_n_for_n(2048)\n  2\n  */\nconst largest_prime_factor_for_n_for_n_for_n_for_n = n => {\n  let i = 2;\n  let prime_factor = 1;\n  while (n % i!== 0) {\n    prime_factor *= i;\n    i++;\n  }\n  return prime_factor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n that divides n.\n  Assume n > 1 and is not a prime.\n  >>> largest_prime_factor_for_n_for_n_for_n_for_n(13195)\n  29\n  >>> largest_prime_factor_for_n_for_n_for_n_for_n(2048)\n  2\n  */\nconst largest_prime_factor_for_n_for_n_for_n_for_n_for_n = n => {\n  let i = 2;\n  let prime_factor = 1;\n  while (n % i!== 0) {\n    prime_factor *= i;\n    i++;\n  }\n  return prime_factor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n that divides n.\n  Assume n > 1 and is not a prime.\n  >>> largest_prime_factor_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_n_for_"}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "<|endoftext|>/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers_recur(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur_recur = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers_recur_recur(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur_recur_recur = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers_recur_recur_recur(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur_recur_recur_recur = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers_recur_recur_recur_recur(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur_recur_recur_recur_recur = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers_recur_recur_recur_recur_recur(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur_recur_recur_recur_recur_recur = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers_recur_recur_recur_recur_recur_recur(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur_recur = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur_recur(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur_recur_recur = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur_recur_recur(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur(n - 1) + n;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It uses recursion.\n * It can be called with any positive integer n.\n * It returns 0 when n is 0.\n */\nconst sum_of_all_numbers_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur_recur = (n) => {\n"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const opening_brackets = brackets.split(\"(\").filter((bracket) => bracket.length > 0);\n  const closing_brackets = brackets.split(\")\").filter((bracket) => bracket.length > 0);\n  return opening_brackets.every((bracket) => closing_brackets.includes(bracket));\n};\n\n/**\n * Given a string, return true if the string is a valid Python expression.\n *\n * Valid Python expressions consist of only alphanumeric characters and \"-\" and\n * \"+\". An expression can contain any number of \"-\" and \"+\" characters.\n *\n * >>> is_valid_python(\"1 + 2\")\n * true\n * >>> is_valid_python(\"1 + 2 - 3\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5)\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6\")\n * true\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7\")\n * true\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32\")\n * false\n * >>> is_valid_python(\"1 + 2 - 3 * (4 - 5) + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33\")\n * false\n * >>> is_valid_"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length\n  let d = new Array(n)\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    sum = xs[i] * xs[k]\n    k = k + 1\n    if (k >= n) {\n      break\n    }\n    sum = xs[i] * xs[k]\n    i = i + 1\n    j = j + 1\n  }\n  d[0] = sum\n  d[1] = xs[0]\n  d[2] = xs[1]\n  d[3] = xs[2]\n  d[4] = xs[3]\n  d[5] = xs[4]\n  return d\n}\n\n// A function to convert a polynomial to a string.\nconst toString = (xs) => {\n  let n = xs.length\n  let s = ''\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    sum = xs[i] * xs[k]\n    k = k + 1\n    if (k >= n) {\n      break\n    }\n    sum = xs[i] * xs[k]\n    i = i + 1\n    j = j + 1\n  }\n  s = sum.toFixed(2) + 'x^' + j\n  return s\n}\n\n// A function to convert a polynomial to a string.\nconst toPolynomial = (xs) => {\n  let n = xs.length\n  let s = ''\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    sum = xs[i] * xs[k]\n    k = k + 1\n    if (k >= n) {\n      break\n    }\n    sum = xs[i] * xs[k]\n    i = i + 1\n    j = j + 1\n  }\n  s = sum.toFixed(2) + 'x^' + j\n  return s\n}\n\n// A function to convert a polynomial to a string.\nconst toPolynomialString = (xs) => {\n  let n = xs.length\n  let s = ''\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    sum = xs[i] * xs[k]\n    k = k + 1\n    if (k >= n) {\n      break\n    }\n    sum = xs[i] * xs[k]\n    i = i + 1\n    j = j + 1\n  }\n  s = sum.toFixed(2) + 'x^' + j\n  return s\n}\n\n// A function to convert a polynomial to a string.\nconst toPolynomialString2 = (xs) => {\n  let n = xs.length\n  let s = ''\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    sum = xs[i] * xs[k]\n    k = k + 1\n    if (k >= n) {\n      break\n    }\n    sum = xs[i] * xs[k]\n    i = i + 1\n    j = j + 1\n  }\n  s = sum.toFixed(2) + 'x^' + j\n  return s\n}\n\n// A function to convert a polynomial to a string.\nconst toPolynomialString3 = (xs) => {\n  let n = xs.length\n  let s = ''\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    sum = xs[i] * xs[k]\n    k = k + 1\n    if (k >= n) {\n      break\n    }\n    sum = xs[i] * xs[k]\n    i = i + 1\n    j = j + 1\n  }\n  s = sum.toFixed(2) + 'x^' + j\n  return s\n}\n\n// A function to convert a polynomial to a string.\nconst toPolynomialString4 = (xs) => {\n  let n = xs.length\n  let s = ''\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    sum = xs[i] * xs[k]\n    k = k + 1\n    if (k >= n) {\n      break\n    }\n    sum = xs[i] * xs[k]\n    i = i + 1\n    j = j + 1\n  }\n  s = sum.toFixed(2) + 'x^' + j\n  return s\n}\n\n// A function to convert a polynomial to a string.\nconst toPolynomialString5 = (xs) => {\n  let n = xs.length\n  let s = ''\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    sum = xs[i] * xs[k]\n    k = k + 1\n    if (k >= n) {\n      break\n    }\n    sum = xs[i] * xs[k]\n    i = i + 1\n    j = j + 1\n  }\n  s = sum.toFixed(2) + 'x^' + j\n  return s\n}\n\n// A function to convert a polynomial to a string.\nconst toPolynomialString6 = (xs) => {\n  let n = xs.length\n  let s = ''\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    sum = xs[i] * xs[k]\n    k = k + 1\n    if (k >= n) {\n      break\n    }\n    sum = xs[i] * xs[k]\n    i = i + 1\n    j = j + 1\n  }\n  s = sum.toFixed(2) + 'x^' + j\n  return s\n}\n\n// A function to convert a polynomial to a string.\nconst toPolynomialString7 = (xs) => {\n  let n = xs.length\n  let s = ''\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    sum = xs[i] * xs[k]\n    k = k + 1\n    if (k >= n) {\n      break\n    }\n    sum = xs[i] * xs[k]\n    i = i + 1\n    j = j + 1\n  }\n  s = sum.toFixed(2) + 'x^' + j\n  return s\n}\n\n// A function to convert a polynomial to a string.\nconst toPolynomialString8 = (xs) => {\n  let n = xs.length\n  let s = ''\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    sum = xs[i] * xs[k]\n    k = k + 1\n    if (k >= n) {\n      break\n    }\n    sum = xs[i] * xs[k]\n    i = i + 1\n    j = j + 1\n  }\n  s = sum.toFixed(2) + 'x^' + j\n  return s\n}\n\n// A function to convert a polynomial to a string.\nconst toPolynomialString9 = (xs) => {\n  let n = xs.length\n  let s = ''\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    sum = xs[i] * xs[k]\n    k = k + 1\n    if (k >= n) {\n      break\n    }\n    sum = xs[i] * xs[k]\n    i = i + 1\n    j = j + 1\n  }\n  s = sum.toFixed(2) + 'x^' + j\n  return s\n}\n\n// A function to convert a polynomial to a string.\nconst toPolynomialString10 = (xs) => {\n  let n = xs.length\n  let s = ''\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    sum = xs[i] * xs[k]\n    k = k + 1\n    if (k >= n) {\n      break\n    }\n    sum = xs[i] * xs[k]\n    i = i + 1\n    j = j + 1\n  }\n  s = sum.toFixed(2) + 'x^' + j\n  return s\n}\n\n// A function to convert a polynomial to a string.\nconst toPolynomialString11 = (xs) => {\n  let n = xs.length\n  let s = ''\n  let i = 0\n  let j = 1\n  let k = 0\n  let sum = 0\n  while (i < n) {\n    "}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "<|endoftext|>/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_last_vowel = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_last_vowel_and_last_vowel = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_last_vowel_and_last_vowel_and_last_vowel = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_last_vowel_and_last_vowel_and_last_vowel_and_last_vowel = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_last_vowel_and_last_vowel_and_last_vowel_and_last_vowel_and_last_vowel = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_last_vowel_and_last_vowel_and_last_vowel_and_last_vowel_and_last_vowel_and_last_vowel = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n    if("}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  const digits = x.toString(10).split('').reverse();\n  return digits.slice(shift).reverse().join('');\n};\n\n/*\n  Convert a number to a string in base 10. Round the result to two decimal\n  places and return it as a string.\n  >>> to_base10(12345)\n  \"1.2345\"\n  >>> to_base10(12345.678)\n  \"1.23456\"\n  >>> to_base10(12345.6789)\n  \"1.234568\"\n  >>> to_base10(12345.67890)\n  \"1.2345679\"\n  >>> to_base10(12345.67891)\n  \"1.234568\"\n  >>> to_base10(12345.67892)\n  \"1.234568\"\n  >>> to_base10(12345.67893)\n  \"1.234568\"\n  >>> to_base10(12345.67894)\n  \"1.234568\"\n  >>> to_base10(12345.67895)\n  \"1.234568\"\n  >>> to_base10(12345.67896)\n  \"1.234568\"\n  >>> to_base10(12345.67897)\n  \"1.234568\"\n  >>> to_base10(12345.67898)\n  \"1.234568\"\n  >>> to_base10(12345.67899)\n  \"1.234568\"\n  >>> to_base10(1234567.89)\n  \"1.234567\"\n  >>> to_base10(1234567.890)\n  \"1.234567\"\n  >>> to_base10(1234567.891)\n  \"1.234567\"\n  >>> to_base10(1234567.892)\n  \"1.234567\"\n  >>> to_base10(1234567.893)\n  \"1.234567\"\n  >>> to_base10(1234567.894)\n  \"1.234567\"\n  >>> to_base10(1234567.895)\n  \"1.234567\"\n  >>> to_base10(1234567.896)\n  \"1.234567\"\n  >>> to_base10(1234567.897)\n  \"1.234567\"\n  >>> to_base10(1234567.898)\n  \"1.234567\"\n  >>> to_base10(1234567.899)\n  \"1.234567\"\n  >>> to_base10(1234567.900)\n  \"1.234567\"\n  >>> to_base10(1234567.91)\n  \"1.234567\"\n  >>> to_base10(1234567.92)\n  \"1.234567\"\n  >>> to_base10(1234567.93)\n  \"1.234567\"\n  >>> to_base10(1234567.94)\n  \"1.234567\"\n  >>> to_base10(1234567.95)\n  \"1.234567\"\n  >>> to_base10(1234567.96)\n  \"1.234567\"\n  >>> to_base10(1234567.97)\n  \"1.234567\"\n  >>> to_base10(1234567.98)\n  \"1.234567\"\n  >>> to_base10(1234567.99)\n  \"1.234567\"\n  >>> to_base10(1234568.00)\n  \"1.234568\"\n  >>> to_base10(1234568.01)\n  \"1.234568\"\n  >>> to_base10(1234568.02)\n  \"1.234568\"\n  >>> to_base10(1234568.03)\n  \"1.234568\"\n  >>> to_base10(1234568.04)\n  \"1.234568\"\n  >>> to_base10(1234568.05)\n  \"1.234568\"\n  >>> to_base10(1234568.06)\n  \"1.234568\"\n  >>> to_base10(1234568.07)\n  \"1.234568\"\n  >>> to_base10(1234568.08)\n  \"1.234568\"\n  >>> to_base10(1234568.09)\n  \"1.234568\"\n  >>> to_base10(1234568.10)\n  \"1.234568\"\n  >>> to_base10(1234568.11)\n  \"1.234568\"\n  >>> to_base10(1234568.12)\n  \"1.234568\"\n  >>> to_base10(1234568.13)\n  \"1.234568\"\n  >>> to_base10(1234568.14)\n  \"1.234568\"\n  >>> to_base10(1234568.15)\n  \"1.234568\"\n  >>> to_base10(1234568.16)\n  \"1.234568\"\n  >>> to_base10(1234568.17)\n  \"1.234568\"\n  >>> to_base10(1234568.18)\n  \"1.234568\"\n  >>> to_base10(1234568.19)\n  \"1.234568\"\n  >>> to_base10(1234568.20)\n  \"1.234568\"\n  >>> to_base10(1234568.21)\n  \"1.234568\"\n  >>> to_base10(1234568.22)\n  \"1.234568\"\n  >>> to_base10(1234568.23)\n  \"1.234568\"\n  >>> to_base10(1234568.24)\n  \"1.234568\"\n  >>> to_base10(1234568.25)\n  \"1.234568\"\n  >>> to_base10(1234568.26)\n  \"1.234568\"\n  >>> to_base10(1234568.27)\n  \"1.234568\"\n  >>> to_base10(1234568.28)\n  \"1.234568\"\n  >>> to_base10(1234568.29)\n  \"1.234568\"\n  >>> to_base10(1234568.30)\n  \"1.234568\"\n  >>> to_base10(1234568.31)\n  \"1.234568\"\n  >>> to_base10(1234568.32)\n  \"1.234568\"\n  >>> to_base10(1234568.33)\n  \"1.234568\"\n  >>> to_base10(1234568.34)\n  \"1.234568\"\n  >>> to_base10(1234568.35)\n  \"1.234568\"\n  >>> to_base10(1234568.36)\n  \"1.234568\"\n  >>> to_base10(1234568.37)\n  \"1.234568\"\n  >>> to_base10(1234568.38)\n  \"1.234568\"\n  >>> to_base10(1234568.39)\n  \"1.234568\"\n  >>> to_base10(1234568.4)\n  \"1.234568\"\n  >>> to_base10(1234568.5)\n  \"1.234568\"\n  >>> to_base10(1234568.6)\n  \"1.234568\"\n  >>> to_base10(1234568.7)\n  \"1.234568\"\n  >>> to_base10"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) + 97;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 95;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lowercase characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) + 95;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 95;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lowercase characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) + 95;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) + 95;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lowercase characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += "}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let sum = 0;\n  let count = 0;\n  let fruits = [];\n  let fruits_array = [];\n  let fruits_array2 = [];\n  let fruits_array3 = [];\n  let fruits_array4 = [];\n  let fruits_array5 = [];\n  let fruits_array6 = [];\n  let fruits_array7 = [];\n  let fruits_array8 = [];\n  let fruits_array9 = [];\n  let fruits_array10 = [];\n  let fruits_array11 = [];\n  let fruits_array12 = [];\n  let fruits_array13 = [];\n  let fruits_array14 = [];\n  let fruits_array15 = [];\n  let fruits_array16 = [];\n  let fruits_array17 = [];\n  let fruits_array18 = [];\n  let fruits_array19 = [];\n  let fruits_array20 = [];\n  let fruits_array21 = [];\n  let fruits_array22 = [];\n  let fruits_array23 = [];\n  let fruits_array24 = [];\n  let fruits_array25 = [];\n  let fruits_array26 = [];\n  let fruits_array27 = [];\n  let fruits_array28 = [];\n  let fruits_array29 = [];\n  let fruits_array30 = [];\n  let fruits_array31 = [];\n  let fruits_array32 = [];\n  let fruits_array33 = [];\n  let fruits_array34 = [];\n  let fruits_array35 = [];\n  let fruits_array36 = [];\n  let fruits_array37 = [];\n  let fruits_array38 = [];\n  let fruits_array39 = [];\n  let fruits_array40 = [];\n  let fruits_array41 = [];\n  let fruits_array42 = [];\n  let fruits_array43 = [];\n  let fruits_array44 = [];\n  let fruits_array45 = [];\n  let fruits_array46 = [];\n  let fruits_array47 = [];\n  let fruits_array48 = [];\n  let fruits_array49 = [];\n  let fruits_array50 = [];\n  let fruits_array51 = [];\n  let fruits_array52 = [];\n  let fruits_array53 = [];\n  let fruits_array54 = [];\n  let fruits_array55 = [];\n  let fruits_array56 = [];\n  let fruits_array57 = [];\n  let fruits_array58 = [];\n  let fruits_array59 = [];\n  let fruits_array60 = [];\n  let fruits_array61 = [];\n  let fruits_array62 = [];\n  let fruits_array63 = [];\n  let fruits_array64 = [];\n  let fruits_array65 = [];\n  let fruits_array66 = [];\n  let fruits_array67 = [];\n  let fruits_array68 = [];\n  let fruits_array69 = [];\n  let fruits_array70 = [];\n  let fruits_array71 = [];\n  let fruits_array72 = [];\n  let fruits_array73 = [];\n  let fruits_array74 = [];\n  let fruits_array75 = [];\n  let fruits_array76 = [];\n  let fruits_array77 = [];\n  let fruits_array78 = [];\n  let fruits_array79 = [];\n  let fruits_array80 = [];\n  let fruits_array81 = [];\n  let fruits_array82 = [];\n  let fruits_array83 = [];\n  let fruits_array84 = [];\n  let fruits_array85 = [];\n  let fruits_array86 = [];\n  let fruits_array87 = [];\n  let fruits_array88 = [];\n  let fruits_array89 = [];\n  let fruits_array90 = [];\n  let fruits_array91 = [];\n  let fruits_array92 = [];\n  let fruits_array93 = [];\n  let fruits_array94 = [];\n  let fruits_array95 = [];\n  let fruits_array96 = [];\n  let fruits_array97 = [];\n  let fruits_array98 = [];\n  let fruits_array99 = [];\n  let fruits_array100 = [];\n  let fruits_array101 = [];\n  let fruits_array102 = [];\n  let fruits_array103 = [];\n  let fruits_array104 = [];\n  let fruits_array105 = [];\n  let fruits_array106 = [];\n  let fruits_array107 = [];\n  let fruits_array108 = [];\n  let fruits_array109 = [];\n  let fruits_array110 = [];\n  let fruits_array111 = [];\n  let fruits_array112 = [];\n  let fruits_array113 = [];\n  let fruits_array114 = [];\n  let fruits_array115 = [];\n  let fruits_array116 = [];\n  let fruits_array117 = [];\n  let fruits_array118 = [];\n  let fruits_array119 = [];\n  let fruits_array120 = [];\n  let fruits_array121 = [];\n  let fruits_array122 = [];\n  let fruits_array123 = [];\n  let fruits_array124 = [];\n  let fruits_array125 = [];\n  let fruits_array126 = [];\n  let fruits_array127 = [];\n  let fruits_array128 = [];\n  let fruits_array129 = [];\n  let fruits_array130 = [];\n  let fruits_array131 = [];\n  let fruits_array132 = [];\n  let fruits_array133 = [];\n  let fruits_array134 = [];\n  let fruits_array135 = [];\n  let fruits_array136 = [];\n  let fruits_array137 = [];\n  let fruits_array138 = [];\n  let fruits_array139 = [];\n  let fruits_array140 = [];\n  let fruits_array141 = [];\n  let fruits_array142 = [];\n  let fruits_array143 = [];\n  let fruits_array144 = [];\n  let fruits_array145 = [];\n  let fruits_array146 = [];\n  let fruits_array147 = [];\n  let fruits_array148 = [];\n  let fruits_array149 = [];\n  let fruits_array150 = [];\n  let fruits_array151 = [];\n  let fruits_array152 = [];\n  let fruits_array153 = [];\n  let fruits_array154 = [];\n  let fruits_array155 = [];\n  let fruits_array156 = [];\n  let fruits_array157 = [];\n  let fruits_array158 = [];\n  let fruits_array159 = [];\n  let fruits_array160 = [];\n  let fruits_array161 = [];\n  let fruits_array162 = [];\n  let fruits_array163 = [];\n  let fruits_array164 = [];\n  let fruits_array165 = [];\n  let fruits_array166 = [];\n  let fruits_array167 = [];\n  let fruits_array168 = [];\n  let fruits_array169 = [];\n  let fruits_array170 = [];\n  let fruits_array171 = [];\n  let fruits_array172 = [];\n  let fruits_array173 = [];\n  let fruits_array174 = [];\n  let fruits_array175 = [];\n  let fruits_array176 = [];\n  let fruits_array177 = [];\n  let fruits_array178 = [];\n  let fruits_array179 = [];\n  let fruits_array180 = [];\n  let fruits_array181 = [];\n  let fruits_array182 = [];\n  let fruits_array183 = [];\n  let fruits_array184 = [];\n  let fruits_array185"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      min = Math.min(min, arr[i]);\n      max = Math.max(max, arr[i]);\n      minIndex = i;\n      maxIndex = i;\n    }\n  }\n  return [min, maxIndex];\n};\n\n// Given an array representing a tree with non-negative integer nodes,\n// your task is to return the minimum value from the tree.\n// The minimum value should be the node with the smallest value.\n// If multiple nodes with the same minimum value are found return the node that has smallest index.\n\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n//     Input: []\n//     Output: []\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n// Example 2:\n//     Input: [4, 2, 3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n//     Input: [1, 2, 3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n// Example 1:\n//     Input: [4, 2, 3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n//     Input: [1, 2, 3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n//     Input: []\n//     Output: []\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n// Note:\n//     nodes.length will be at most 10000.\n//     node.value will be at most 100.\n// Related Topics\n// Tree\n// Tree-Node\n// Tree-Node-Min\n// Tree-Node-Max\n// Tree-Node-Min-Max\n// Tree-Node-Min-Max-Index\n// Tree-Node-Min-Max-Index-Min\n// Tree-Node-Min-Max-Index-Max\n// Tree-Node-Min-Max-Index-Min-Max\n// Tree-Node-Min-Max-Index-Min-Max-Index\n// Tree-Node-Min-Max-Index-Min-Max-Index-Min\n// Tree-Node-Min-Max-Index-Min-Max-Index-Max-Index\n// Tree-Node-Min-Max-Index-Min-Max-Index-Min-Max-Index-Max\n// Tree-Node-Min-Max-Index-Min-Max-Index-Min-Max-Index-Max-Index\n// Tree-Node-Min-Max-Index-Min-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index\n// Tree-Node-Min-Max-Index-Min-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index\n// Tree-Node-Min-Max-Index-Min-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index\n// Tree-Node-Min-Max-Index-Min-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index\n// Tree-Node-Min-Max-Index-Min-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index-Min-Max-Index-Max-Index"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let "}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  let sorted = lst.sort((a, b) => a - b);\n  let res = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] > sorted[i + 1]) {\n      res.push(sorted[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a string, return a list of all unique characters in it.\n\n  Examples:\n  unique_chars('abc') == ['a', 'b', 'c']\n  unique_chars('abcabc') == ['a', 'b', 'c']\n  unique_chars('abcabcabc') == ['a', 'b', 'c']\n  unique_chars('abcabcabcabc') == ['a', 'b', 'c']\n  unique_chars('abcabcabcabcabc') == ['a', 'b', 'c']\n  */\nconst unique_chars = (str) => {\n  let chars = [];\n  for (let i = 0; i < str.length; i++) {\n    if (chars.indexOf(str[i]) === -1) {\n      chars.push(str[i]);\n    }\n  }\n  return chars;\n};\n\n/*\n  Given a string, return a list of all unique words in it.\n\n  Examples:\n  unique_words('abc') == ['a', 'b', 'c']\n  unique_words('abcabc') == ['a', 'b', 'c']\n  unique_words('abcabcabc') == ['a', 'b', 'c']\n  unique_words('abcabcabcabc') == ['a', 'b', 'c']\n  unique_words('abcabcabcabcabc') == ['a', 'b', 'c']\n  */\nconst unique_words = (str) => {\n  let words = [];\n  for (let i = 0; i < str.length; i++) {\n    if (words.indexOf(str[i]) === -1) {\n      words.push(str[i]);\n    }\n  }\n  return words;\n};\n\n/*\n  Given a string, return a list of all unique numbers in it.\n\n  Examples:\n  unique_numbers('abc') == [1, 2, 3]\n  unique_numbers('abcabc') == [1, 2, 3]\n  unique_numbers('abcabcabc') == [1, 2, 3]\n  unique_numbers('abcabcabcabc') == [1, 2, 3]\n  unique_numbers('abcabcabcabcabc') == [1, 2, 3]\n  */\nconst unique_numbers = (str) => {\n  let numbers = [];\n  for (let i = 0; i < str.length; i++) {\n    if (numbers.indexOf(str[i]) === -1) {\n      numbers.push(str[i]);\n    }\n  }\n  return numbers;\n};\n\n/*\n  Given a string, return a list of all unique prefixes in it.\n\n  Examples:\n  unique_prefixes('abc') == ['a', 'b', 'c']\n  unique_prefixes('abcabc') == ['a', 'b', 'c']\n  unique_prefixes('abcabcabc') == ['a', 'b', 'c']\n  unique_prefixes('abcabcabcabc') == ['a', 'b', 'c']\n  unique_prefixes('abcabcabcabcabc') == ['a', 'b', 'c']\n  */\nconst unique_prefixes = (str) => {\n  let prefixes = [];\n  for (let i = 0; i < str.length; i++) {\n    if (prefixes.indexOf(str[i]) === -1) {\n      prefixes.push(str[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  Given a string, return a list of all unique suffixes in it.\n\n  Examples:\n  unique_suffixes('abc') == ['c', 'b', 'a']\n  unique_suffixes('abcabc') == ['c', 'b', 'a']\n  unique_suffixes('abcabcabc') == ['c', 'b', 'a']\n  unique_suffixes('abcabcabcabc') == ['c', 'b', 'a']\n  unique_suffixes('abcabcabcabcabc') == ['c', 'b', 'a']\n  */\nconst unique_suffixes = (str) => {\n  let suffixes = [];\n  for (let i = 0; i < str.length; i++) {\n    if (suffixes.indexOf(str[i]) === -1) {\n      suffixes.push(str[i]);\n    }\n  }\n  return suffixes;\n};\n\n/*\n  Given a string, return a list of all unique words in it.\n\n  Examples:\n  unique_words('abc') == ['a', 'b', 'c']\n  unique_words('abcabc') == ['a', 'b', 'c']\n  unique_words('abcabcabc') == ['a', 'b', 'c']\n  unique_words('abcabcabcabc') == ['a', 'b', 'c']\n  unique_words('abcabcabcabcabc') == ['a', 'b', 'c']\n  */\nconst unique_words = (str) => {\n  let words = [];\n  for (let i = 0; i < str.length; i++) {\n    if (words.indexOf(str[i]) === -1) {\n      words.push(str[i]);\n    }\n  }\n  return words;\n};\n\n/*\n  Given a string, return a list of all unique numbers in it.\n\n  Examples:\n  unique_numbers('abc') == [1, 2, 3]\n  unique_numbers('abcabc') == [1, 2, 3]\n  unique_numbers('abcabcabc') == [1, 2, 3]\n  unique_numbers('abcabcabcabc') == [1, 2, 3]\n  unique_numbers('abcabcabcabcabc') == [1, 2, 3]\n  */\nconst unique_numbers = (str) => {\n  let numbers = [];\n  for (let i = 0; i < str.length; i++) {\n    if (numbers.indexOf(str[i]) === -1) {\n      numbers.push(str[i]);\n    }\n  }\n  return numbers;\n};\n\n/*\n  Given a string, return a list of all unique prefixes in it.\n\n  Examples:\n  unique_prefixes('abc') == ['a', 'b', 'c']\n  unique_prefixes('abcabc') == ['a', 'b', 'c']\n  unique_prefixes('abcabcabc') == ['a', 'b', 'c']\n  unique_prefixes('abcabcabcabc') == ['a', 'b', 'c']\n  unique_prefixes('abcabcabcabcabc') == ['a', 'b', 'c']\n  */\nconst unique_prefixes = (str) => {\n  let prefixes = [];\n  for (let i = 0; i < str.length; i++) {\n    if (prefixes.indexOf(str[i]) === -1) {\n      prefixes.push(str[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  Given a string, return a list of all unique suffixes in it.\n\n  Examples:\n  unique_suffixes('abc') == ['c', 'b', 'a']\n  unique_suffixes('abcabc') == ['c', 'b', 'a']\n  unique_suffixes('abcabcabc') == ['c', 'b', 'a']\n  unique_suffixes('abcabcabcabc') == ['c', 'b', 'a']\n  unique_suffixes('abcabcabcabcabc') == ['c', 'b', 'a']\n  */\nconst unique_suffixes = (str) => {\n  let suffixes = [];\n  for (let i = 0; i < str.length; i++) {\n    if (suffixes.indexOf(str[i]) === -1) {\n      suffixes.push(str[i]);\n    }\n  }\n  return suffixes;\n};\n\n/*\n  Given a string, return a list of all unique words in it.\n\n  Examples:\n  unique_words('abc') == ['a', 'b', 'c']\n  unique_words('abcabc') == ['a', 'b', 'c']\n  unique_words('abcabcabc') == ['a', 'b', 'c']\n  unique_words('abcabcabcabc') == ['a', 'b', 'c']\n  unique_words('abcabcabcabcabc') == ['a', 'b', 'c']\n  */\nconst unique_words = (str) => {\n  let words = [];\n  for (let i = 0; i < str.length; i++) {\n    if (words.indexOf(str[i]) === -1) {\n      words.push(str[i]);\n    }\n  }\n  return words;\n};\n\n/*\n  Given a string, return a list of all unique numbers in it.\n\n  Examples:\n  unique_numbers('abc') == [1, 2, 3]\n  unique_numbers('abcabc') == [1, 2, 3]\n  unique_numbers('abcabcabc') == [1, 2, 3]\n  unique_numbers('abcabcabcabc') == [1, 2, 3]\n  unique_numbers('abcabcabcabcabc') == [1, 2, 3]\n  */\nconst unique_numbers = (str) => {\n  let numbers = [];\n  for (let i = 0; i < str.length; i++) {\n    if (numbers.indexOf(str[i]"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  const abc = ab + c;\n  const acb = ac + b;\n  const bcb = bc + b;\n  const abcb = abcc + b;\n  const acbc = acb + c;\n  const bcbc = bcb + c;\n  const abcbc = abcc + c;\n  const acbd = acb + d;\n  const bcbd = bcb + d;\n  const abcbd = abcc + d;\n  const acbf = acb + f;\n  const bcbf = bcb + f;\n  const abcbf = abcc + f;\n  const acbg = acb + g;\n  const bcbg = bcb + g;\n  const abcbg = abcc + g;\n  const acbg = acb + h;\n  const bcbg = bcb + h;\n  const abcbg = abcc + h;\n  const acbh = acb + i;\n  const bcbh = bcb + i;\n  const abcbh = abcc + i;\n  const acbi = acb + j;\n  const bcbi = bcb + j;\n  const abcbi = abcc + j;\n  const acbj = acb + k;\n  const bcbj = bcb + k;\n  const abcbj = abcc + k;\n  const acbk = acb + l;\n  const bcbk = bcb + l;\n  const abcbk = abcc + l;\n  const acbl = acb + m;\n  const bcbl = bcb + m;\n  const abcbl = abcc + m;\n  const acbm = acb + n;\n  const bcbm = bcb + n;\n  const abcbm = abcc + n;\n  const acbn = acb + o;\n  const bcbn = bcb + o;\n  const abcbn = abcc + o;\n  const acbo = acb + p;\n  const bcbo = bcb + p;\n  const abcbo = abcc + p;\n  const acbq = acb + q;\n  const bcbq = bcb + q;\n  const abcbq = abcc + q;\n  const acbr = acb + r;\n  const bcbr = bcb + r;\n  const abcbr = abcc + r;\n  const acbs = acb + s;\n  const bcbs = bcb + s;\n  const abcbs = abcc + s;\n  const acbt = acb + t;\n  const bcbt = bcb + t;\n  const abcbt = abcc + t;\n  const acbv = acb + v;\n  const bcbv = bcb + v;\n  const abcbv = abcc + v;\n  const acbw = acb + w;\n  const bcbw = bcb + w;\n  const abcbw = abcc + w;\n  const acbx = acb + x;\n  const bcbx = bcb + x;\n  const abcbx = abcc + x;\n  const acby = acb + y;\n  const bcby = bcb + y;\n  const abcby = abcc + y;\n  const acbz = acb + z;\n  const bcbz = bcb + z;\n  const abcbz = abcc + z;\n  const acb5 = acb + 5;\n  const bcb5 = bcb + 5;\n  const abcb5 = abcc + 5;\n  const acb6 = acb + 6;\n  const bcb6 = bcb + 6;\n  const abcb6 = abcc + 6;\n  const acb7 = acb + 7;\n  const bcb7 = bcb + 7;\n  const abcb7 = abcc + 7;\n  const acb8 = acb + 8;\n  const bcb8 = bcb + 8;\n  const abcb8 = abcc + 8;\n  const acb9 = acb + 9;\n  const bcb9 = bcb + 9;\n  const abcb9 = abcc + 9;\n  const acb10 = acb + 10;\n  const bcb10 = bcb + 10;\n  const abcb10 = abcc + 10;\n  const acb11 = acb + 11;\n  const bcb11 = bcb + 11;\n  const abcb11 = abcc + 11;\n  const acb12 = acb + 12;\n  const bcb12 = bcb + 12;\n  const abcb12 = abcc + 12;\n  const acb13 = acb + 13;\n  const bcb13 = bcb + 13;\n  const abcb13 = abcc + 13;\n  const acb14 = acb + 14;\n  const bcb14 = bcb + 14;\n  const abcb14 = abcc + 14;\n  const acb15 = acb + 15;\n  const bcb15 = bcb + 15;\n  const abcb15 = abcc + 15;\n  const acb16 = acb + 16;\n  const bcb16 = bcb + 16;\n  const abcb16 = abcc + 16;\n  const acb17 = acb + 17;\n  const bcb17 = bcb + 17;\n  const abcb17 = abcc + 17;\n  const acb18 = acb + 18;\n  const bcb18 = bcb + 18;\n  const abcb18 = abcc + 18;\n  const acb19 = acb + 19;\n  const bcb19 = bcb + 19;\n  const abcb19 = abcc + 19;\n  const acb20 = acb + 20;\n  const bcb20 = bcb + 20;\n  const abcb20 = abcc + 20;\n  const acb21 = acb + 21;\n  const bcb21 = bcb + 21;\n  const abcb21 = abcc + 21;\n  const acb22 = acb + 22;\n  const bcb22 = bcb + 22;\n  const abcb22 = abcc + 22;\n  const acb23 = acb + 23;\n  const bcb23 = bcb + 23;\n  const abcb23 = abcc + 23;\n  const acb24 = acb + 24;\n  const bcb24 = bcb + 24;\n  const abcb24 = abcc + 24;\n  const acb25 = acb + 25;\n  const bcb25 = bcb + 25;\n  const abcb25 = abcc + 25;\n  const acb26 = acb + 26;\n  const bcb26 = bcb + 26;\n  const abcb26 = abcc + 26;\n  const acb27 = acb + 27;\n  const bcb27 = bcb + 27;\n  const abcb27 = abcc + 27;\n  const acb28 = acb + 28;\n  const bcb28 = bcb + 28;\n  const abcb28 = abcc + 28;\n  const acb29 = acb + 29;\n  const bcb29 = bcb + 29;\n  const abcb29 = abcc + 29;\n  const acb30 = acb + 30;\n  const bcb30 = bcb + 30;\n  const abcb30 = abcc + 30;\n  const acb31 = acb + 31;\n  const bcb31 = bcb + 31;\n  const abcb31 = abcc + 31;\n  const acb32 = acb + 32;\n  const bcb32 = bcb + 32;\n  const abcb32 = abcc + "}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = Math.max(...q.map(w => w));\n  const sumWeight = q.map(w => w).reduce((a, b) => a + b);\n  return sumWeight <= maxWeight;\n};\n\nmodule.exports = will_it_fly;\n\n},{}],7:[function(require,module,exports){\nconst will_it_fly = require('./will_it_fly');\n\nconst will_it_fly2 = (will_it_fly, w) => {\n  const maxWeight = Math.max(...will_it_fly([w], w));\n  const sumWeight = will_it_fly([w], w).reduce((a, b) => a + b);\n  return sumWeight <= maxWeight;\n};\n\nmodule.exports = will_it_fly2;\n\n},{\"./will_it_fly\":6}],8:[function(require,module,exports){\nconst will_it_fly = require('./will_it_fly');\n\nconst will_it_fly3 = (will_it_fly, w) => {\n  const maxWeight = Math.max(...will_it_fly([w], w));\n  const sumWeight = will_it_fly([w], w).reduce((a, b) => a + b);\n  return sumWeight <= maxWeight && will_it_fly([w], w).reduce((a, b) => a + b) === w;\n};\n\nmodule.exports = will_it_fly3;\n\n},{\"./will_it_fly\":6}],9:[function(require,module,exports){\nconst will_it_fly = require('./will_it_fly');\n\nconst will_it_fly4 = (will_it_fly, w) => {\n  const maxWeight = Math.max(...will_it_fly([w], w));\n  const sumWeight = will_it_fly([w], w).reduce((a, b) => a + b);\n  return sumWeight <= maxWeight && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w;\n};\n\nmodule.exports = will_it_fly4;\n\n},{\"./will_it_fly\":6}],10:[function(require,module,exports){\nconst will_it_fly = require('./will_it_fly');\n\nconst will_it_fly5 = (will_it_fly, w) => {\n  const maxWeight = Math.max(...will_it_fly([w], w));\n  const sumWeight = will_it_fly([w], w).reduce((a, b) => a + b);\n  return sumWeight <= maxWeight && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w;\n};\n\nmodule.exports = will_it_fly5;\n\n},{\"./will_it_fly\":6}],11:[function(require,module,exports){\nconst will_it_fly = require('./will_it_fly');\n\nconst will_it_fly6 = (will_it_fly, w) => {\n  const maxWeight = Math.max(...will_it_fly([w], w));\n  const sumWeight = will_it_fly([w], w).reduce((a, b) => a + b);\n  return sumWeight <= maxWeight && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w;\n};\n\nmodule.exports = will_it_fly6;\n\n},{\"./will_it_fly\":6}],12:[function(require,module,exports){\nconst will_it_fly = require('./will_it_fly');\n\nconst will_it_fly7 = (will_it_fly, w) => {\n  const maxWeight = Math.max(...will_it_fly([w], w));\n  const sumWeight = will_it_fly([w], w).reduce((a, b) => a + b);\n  return sumWeight <= maxWeight && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w;\n};\n\nmodule.exports = will_it_fly7;\n\n},{\"./will_it_fly\":6}],13:[function(require,module,exports){\nconst will_it_fly = require('./will_it_fly');\n\nconst will_it_fly8 = (will_it_fly, w) => {\n  const maxWeight = Math.max(...will_it_fly([w], w));\n  const sumWeight = will_it_fly([w], w).reduce((a, b) => a + b);\n  return sumWeight <= maxWeight && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w;\n};\n\nmodule.exports = will_it_fly8;\n\n},{\"./will_it_fly\":6}],14:[function(require,module,exports){\nconst will_it_fly = require('./will_it_fly');\n\nconst will_it_fly9 = (will_it_fly, w) => {\n  const maxWeight = Math.max(...will_it_fly([w], w));\n  const sumWeight = will_it_fly([w], w).reduce((a, b) => a + b);\n  return sumWeight <= maxWeight && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w && will_it_fly([w], w).reduce((a, b) => a + b) === w;\n};\n\nmodule.exports = will_it_fly9;\n\n},{\"./will_it_fly\":6}],15:[function(require,module,exports){\nconst will_it_fly = require('./will_it_fly');\n\nconst will_it_fly10 = (will_it_"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = Math.min(...arr);\n  for (let i = min; i < len - 1; i++) {\n    if (arr[i]!== arr[len - i - 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let max = Math.max(...arr);\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[len - i - 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = Math.min(...arr);\n  for (let i = min; i < len - 1; i++) {\n    if (arr[i]!== arr[len - i - 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let max = Math.max(...arr);\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[len - i - 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = Math.min(...arr);\n  for (let i = min; i < len - 1; i++) {\n    if (arr[i]!== arr[len - i - 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let max = Math.max(...arr);\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[len - i - 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = Math.min(...arr);\n  for (let i = min; i < len - 1; i++) {\n    if (arr[i]!== arr[len - i - 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let max = Math.max(...arr);\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[len - i - 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = Math.min(...arr);\n  for (let i = min; i < len - 1; i++) {\n    if (arr[i]!== arr[len - i - 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let max = Math.max(...arr);\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[len - i - 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindrom"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let count = 0;\n  let result = [];\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        count++;\n      }\n    }\n  }\n  if (count < len1) {\n    result = lst1;\n  } else if (count < len2) {\n    result = lst2;\n  } else {\n    result = lst1;\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_not_match = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let count = 0;\n  let result = [];\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        count++;\n      }\n    }\n  }\n  if (count < len1) {\n    result = lst1;\n  } else if (count < len2) {\n    result = lst2;\n  } else {\n    result = lst1;\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_not_match = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let count = 0;\n  let result = [];\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        count++;\n      }\n    }\n  }\n  if (count < len1) {\n    result = lst1;\n  } else if (count < len2) {\n    result = lst2;\n  } else {\n    result = lst1;\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_not_match = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let count = 0;\n  let result = [];\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        count++;\n      }\n    }\n  }\n  if (count < len1) {\n    result = lst1;\n  } else if (count < len2) {\n    result = lst2;\n  } else {\n    result = lst1;\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not less than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_not_match = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let count = 0;\n  let result = [];\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        count++;\n      }\n    }\n  }\n  if (count < len1) {\n    result = lst1;\n  } else if (count < len2) {\n    result = lst2;\n  } else {\n    result = lst1;\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not greater than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_not_match = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let count = 0;\n  let result = [];\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        count++;\n      }\n    }\n  }\n  if (count < len1) {\n    result = lst1;\n  } else if (count < len2) {\n    result = lst2;\n  } else {\n    result = lst1;\n  }\n  return result;\n};\n\n/*\n  Write a function that "}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let factors = primes.map((p) => a * p);\n  let factors_count = primes.reduce((acc, p) => acc + p, 0);\n  let is_prime = factors_count % 2 === 0;\n  return is_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime_2 = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let factors = primes.map((p) => a * p);\n  let factors_count = primes.reduce((acc, p) => acc + p, 0);\n  let is_prime = factors_count % 2 === 0;\n  return is_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime_2(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime_3 = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let factors = primes.map((p) => a * p);\n  let factors_count = primes.reduce((acc, p) => acc + p, 0);\n  let is_prime = factors_count % 2 === 0;\n  return is_prime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime_3(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime_4 = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 4"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (x === 0) return false;\n  if (n % x === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a prime\n  number and false in other cases.\n  x is a prime number if n%int=0 and n>1\n  For example:\n  is_prime(2) => true\n  is_prime(3) => true\n  is_prime(5) => false\n  is_prime(7) => false\n  is_prime(11) => false\n  */\nconst is_prime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number greater than 1 and false in other cases.\n  x is a prime number if n%int=0 and n>1\n  For example:\n  is_prime(2) => true\n  is_prime(3) => true\n  is_prime(5) => false\n  is_prime(7) => false\n  is_prime(11) => false\n  */\nconst is_prime_greater_than_one = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number greater than 1 and false in other cases.\n  x is a prime number if n%int=0 and n>1\n  For example:\n  is_prime(2) => true\n  is_prime(3) => true\n  is_prime(5) => false\n  is_prime(7) => false\n  is_prime(11) => false\n  */\nconst is_prime_greater_than_one_and_is_prime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number greater than 1 and false in other cases.\n  x is a prime number if n%int=0 and n>1\n  For example:\n  is_prime(2) => true\n  is_prime(3) => true\n  is_prime(5) => false\n  is_prime(7) => false\n  is_prime(11) => false\n  */\nconst is_prime_greater_than_one_and_is_prime_and_is_prime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number greater than 1 and false in other cases.\n  x is a prime number if n%int=0 and n>1\n  For example:\n  is_prime(2) => true\n  is_prime(3) => true\n  is_prime(5) => false\n  is_prime(7) => false\n  is_prime(11) => false\n  */\nconst is_prime_greater_than_one_and_is_prime_and_is_prime_and_is_prime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number greater than 1 and false in other cases.\n  x is a prime number if n%int=0 and n>1\n  For example:\n  is_prime(2) => true\n  is_prime(3) => true\n  is_prime(5) => false\n  is_prime(7) => false\n  is_prime(11) => false\n  */\nconst is_prime_greater_than_one_and_is_prime_and_is_prime_and_is_prime_and_is_prime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number greater than 1 and false in other cases.\n  x is a prime number if n%int=0 and n>1\n  For example:\n  is_prime(2) => true\n  is_prime(3) => true\n  is_prime(5) => false\n  is_prime(7) => false\n  is_prime(11) => false\n  */\nconst is_prime_greater_than_one_and_is_prime_and_is_prime_and_is_prime_and_is_prime_and_is_prime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number greater than 1 and false in other cases.\n  x is a prime number if n%int=0 and n>1\n  For example:\n  is_prime(2) => true\n  is_prime(3) => true\n  is_prime(5) => false\n  is_prime(7) => false\n  is_prime(11) => false\n  */\nconst is_prime_greater_than_one_and_is_prime_and_is_prime_and_is_prime_and_is_prime_and_is_prime_and_is_prime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number greater than 1 and false in other cases.\n  x is a prime number if n%int=0 and n>1\n  For example:\n  is_prime(2) => true\n  is_prime(3) => true\n  is_prime(5) => false\n  is_prime(7) => false\n  is_prime(11) => false\n  */\nconst is_prime_greater_than_one_and_is_prime_and_is_prime_and_is_prime_and_is_prime_and_is_prime_and_is_prime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return "}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0 || a >= Math.pow(2,32)) {\n    return false\n  }\n  let i = a\n  while (i > 0) {\n    if (i % 3 === 0) {\n      return false\n    }\n    i /= 3\n  }\n  return true\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a prime number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isprime(1) ==> true\n  isprime(2) ==> false\n  isprime(3) ==> true\n  isprime(4) ==> false\n  isprime(5) ==> true\n  isprime(6) ==> false\n  isprime(7) ==> false\n  isprime(8) ==> false\n  isprime(9) ==> false\n  isprime(10) ==> false\n  isprime(11) ==> false\n  isprime(12) ==> false\n  isprime(13) ==> false\n  isprime(14) ==> false\n  isprime(15) ==> false\n  isprime(16) ==> false\n  isprime(17) ==> false\n  isprime(18) ==> false\n  isprime(19) ==> false\n  isprime(20) ==> false\n  isprime(21) ==> false\n  isprime(22) ==> false\n  isprime(23) ==> false\n  isprime(24) ==> false\n  isprime(25) ==> false\n  isprime(26) ==> false\n  isprime(27) ==> false\n  isprime(28) ==> false\n  isprime(29) ==> false\n  isprime(31) ==> false\n  isprime(32) ==> false\n  isprime(33) ==> false\n  isprime(34) ==> false\n  isprime(35) ==> false\n  isprime(36) ==> false\n  isprime(37) ==> false\n  isprime(38) ==> false\n  isprime(39) ==> false\n  isprime(41) ==> false\n  isprime(42) ==> false\n  isprime(43) ==> false\n  isprime(44) ==> false\n  isprime(45) ==> false\n  isprime(46) ==> false\n  isprime(47) ==> false\n  isprime(48) ==> false\n  isprime(49) ==> false\n  isprime(50) ==> false\n  isprime(51) ==> false\n  isprime(52) ==> false\n  isprime(53) ==> false\n  isprime(54) ==> false\n  isprime(55) ==> false\n  isprime(56) ==> false\n  isprime(57) ==> false\n  isprime(58) ==> false\n  isprime(59) ==> false\n  isprime(60) ==> false\n  isprime(61) ==> false\n  isprime(62) ==> false\n  isprime(63) ==> false\n  isprime(64) ==> false\n  isprime(65) ==> false\n  isprime(66) ==> false\n  isprime(67) ==> false\n  isprime(68) ==> false\n  isprime(69) ==> false\n  isprime(70) ==> false\n  isprime(71) ==> false\n  isprime(72) ==> false\n  isprime(73) ==> false\n  isprime(74) ==> false\n  isprime(75) ==> false\n  isprime(76) ==> false\n  isprime(77) ==> false\n  isprime(78) ==> false\n  isprime(79) ==> false\n  isprime(80) ==> false\n  isprime(81) ==> false\n  isprime(82) ==> false\n  isprime(83) ==> false\n  isprime(84) ==> false\n  isprime(85) ==> false\n  isprime(86) ==> false\n  isprime(87) ==> false\n  isprime(88) ==> false\n  isprime(89) ==> false\n  isprime(90) ==> false\n  isprime(91) ==> false\n  isprime(92) ==> false\n  isprime(93) ==> false\n  isprime(94) ==> false\n  isprime(95) ==> false\n  isprime(96) ==> false\n  isprime(97) ==> false\n  isprime(98) ==> false\n  isprime(99) ==> false\n  isprime(100) ==> false\n  isprime(101) ==> false\n  isprime(102) ==> false\n  isprime(103) ==> false\n  isprime(104) ==> false\n  isprime(105) ==> false\n  isprime(106) ==> false\n  isprime(107) ==> false\n  isprime(108) ==> false\n  isprime(109) ==> false\n  isprime(110) ==> false\n  isprime(111) ==> false\n  isprime(112) ==> false\n  isprime(113) ==> false\n  isprime(114) ==> false\n  isprime(115) ==> false\n  isprime(116) ==> false\n  isprime(117) ==> false\n  isprime(118) ==> false\n  isprime(119) ==> false\n  isprime(120) ==> false\n  isprime(121) ==> false\n  isprime(122) ==> false\n  isprime(123) ==> false\n  isprime(124) ==> false\n  isprime(125) ==> false\n  isprime(126) ==> false\n  isprime(127) ==> false\n  isprime(128) ==> false\n  isprime(129) ==> false\n  isprime(130) ==> false\n  isprime(131) ==> false\n  isprime(132) ==> false\n  isprime(133) ==> false\n  isprime(134) ==> false\n  isprime(135) ==> false\n  isprime(136) ==> false\n  isprime(137) ==> false\n  isprime(138) ==> false\n  isprime(139) ==> false\n  isprime(140) ==> false\n  isprime(141) ==> false\n  isprime(142) ==> false\n  isprime(143) ==> false\n  isprime(144) ==> false\n  isprime(145) ==> false\n  isprime(146) ==> false\n  isprime(147) ==> false\n  isprime(148) ==> false\n  isprime(149) ==> false\n  isprime(150) ==> false\n  isprime(151) ==> false\n  isprime(152) ==> false\n  isprime(153) ==> false\n  isprime(154) ==> false\n  isprime(155"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let count = 0;\n  let key = '';\n  let numArray = num.split('');\n  for (let i = 0; i < numArray.length; i++) {\n    if (numArray[i].length === 1) {\n      key += numArray[i];\n    } else {\n      if (numArray[i] === '2') {\n        count += 1;\n      } else if (numArray[i] === '3') {\n        count += 2;\n      } else if (numArray[i] === '5') {\n        count += 3;\n      } else if (numArray[i] === '7') {\n        count += 5;\n      } else if (numArray[i] === '11') {\n        count += 7;\n      } else if (numArray[i] === '13') {\n        count += 11;\n      } else if (numArray[i] === '17') {\n        count += 13;\n      } else if (numArray[i] === '19') {\n        count += 17;\n      } else if (numArray[i] === '23') {\n        count += 23;\n      } else if (numArray[i] === '29') {\n        count += 29;\n      } else if (numArray[i] === '31') {\n        count += 31;\n      } else if (numArray[i] === '37') {\n        count += 37;\n      } else if (numArray[i] === '41') {\n        count += 41;\n      } else if (numArray[i] === '43') {\n        count += 43;\n      } else if (numArray[i] === '47') {\n        count += 47;\n      } else if (numArray[i] === '53') {\n        count += 53;\n      } else if (numArray[i] === '57') {\n        count += 57;\n      } else if (numArray[i] === '59') {\n        count += 59;\n      } else if (numArray[i] === '61') {\n        count += 61;\n      } else if (numArray[i] === '67') {\n        count += 67;\n      } else if (numArray[i] === '71') {\n        count += 71;\n      } else if (numArray[i] === '73') {\n        count += 73;\n      } else if (numArray[i] === '79') {\n        count += 79;\n      } else if (numArray[i] === '83') {\n        count += 83;\n      } else if (numArray[i] === '89') {\n        count += 89;\n      } else if (numArray[i] === '97') {\n        count += 97;\n      } else if (numArray[i] === '101') {\n        count += 101;\n      } else if (numArray[i] === '103') {\n        count += 103;\n      } else if (numArray[i] === '107') {\n        count += 107;\n      } else if (numArray[i] === '109') {\n        count += 109;\n      } else if (numArray[i] === '113') {\n        count += 113;\n      } else if (numArray[i] === '117') {\n        count += 117;\n      } else if (numArray[i] === '121') {\n        count += 121;\n      } else if (numArray[i] === '127') {\n        count += 127;\n      } else if (numArray[i] === '129') {\n        count += 129;\n      } else if (numArray[i] === '131') {\n        count += 131;\n      } else if (numArray[i] === '137') {\n        count += 137;\n      } else if (numArray[i] === '139') {\n        count += 139;\n      } else if (numArray[i] === '143') {\n        count += 143;\n      } else if (numArray[i] === '147') {\n        count += 147;\n      } else if (numArray[i] === '151') {\n        count += 151;\n      } else if (numArray[i] === '157') {\n        count += 157;\n      } else if (numArray[i] === '159') {\n        count += 159;\n      } else if (numArray[i] === '163') {\n        count += 163;\n      } else if (numArray[i] === '167') {\n        count += 167;\n      } else if (numArray[i] === '171') {\n        count += 171;\n      } else if (numArray[i] === '177') {\n        count += 177;\n      } else if (numArray[i] === '179') {\n        count += 179;\n      } else if (numArray[i] === '183') {\n        count += 183;\n      } else if (numArray[i] === '187') {\n        count += 187;\n      } else if (numArray[i] === '191') {\n        count += 191;\n      } else if (numArray[i] === '197') {\n        count += 197;\n      } else if (numArray[i] === '199') {\n        count += 199;\n      } else if (numArray[i] === '211') {\n        count += 211;\n      } else if (numArray[i] === '215') {\n        count += 215;\n      } else if (numArray[i] === '217') {\n        count += 217;\n      } else if (numArray[i] === '219') {\n        count += 219;\n      } else if (numArray[i] === '223') {\n        count += 223;\n      } else if (numArray[i] === '227') {\n        count += 227;\n      } else if (numArray[i] === '229') {\n        count += 229;\n      } else if (numArray[i] === '233') {\n        count += 233;\n      } else if (numArray[i] === '239') {\n        count += 239;\n      } else if (numArray[i] === '243') {\n        count += 243;\n      } else if (numArray[i] === '247') {\n        count += 247;\n      } else if (numArray[i] === '251') {\n        count += 251;\n      } else if (numArray[i] === '257') {\n        count += 257;\n      } else if (numArray[i] === '259') {\n        count += 259;\n      } else if (numArray[i] === '263') {\n        count += 263;\n      } else if (numArray[i] === '269') {\n        count += 269;\n      } else if (numArray[i] === '273') {\n        count += 273;\n      } else if (numArray[i] === '277') {\n        count += 277;\n      } else if (numArray[i] === '281') {\n        count += 281;\n      } else if (numArray[i] === '287') {\n        count += 287;\n      } else if (numArray[i] === '291') {\n        count += 291;\n      } else if (numArray[i] === '297') {\n        count += 297;\n      } else if (numArray[i] === '303') {\n        count += 303;\n      } else if (numArray[i] === '307') {\n        count += 307;\n      } else if (numArray[i] === '309') {\n        count += 309;\n      } else if (numArray[i] === '313') {\n        count += 313;\n      } else if (numArray[i] === '317') {\n        count += 317;\n      } else if (numArray[i] === '319') {\n        count += 319;\n      } else if (numArray[i] === '323') {\n        count += 323;\n      } else if (numArray[i] === '327') {\n        count += 327;\n      } else if (numArray[i] === '331') {\n        count += 331;\n      } else if (numArray[i] === '337') {\n        count += 337;\n      } else if (numArray[i] === '339') {\n        count += 339;\n      } else if (numArray[i] === '343') {\n        count += 343;\n      } else if (numArray[i] === '347') {\n        count += 347;\n      } else if (numArray[i] === '349"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  let decimalLength = decimalString.length;\n  let decimalNumber = 0;\n  let decimalNumberString = '';\n\n  for (let i = 0; i < decimalLength; i++) {\n    decimalNumber += decimalString.charCodeAt(i);\n  }\n\n  decimalNumber = decimalNumber % 2;\n  decimalNumberString = decimalNumber? '1' : '0';\n\n  for (let i = 0; i < decimalLength; i++) {\n    binary += decimalNumberString;\n  }\n\n  return binary;\n};\n\n/*\n  You will be given a number in binary format and your task is to convert it to\n  decimal form. The function should return a string, with each character representing a decimal\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  binary_to_decimal('db1111')   # returns 15\n  binary_to_decimal('db100000')   # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryNumber = 0;\n  let binaryNumberString = '';\n\n  for (let i = 0; i < binaryLength; i++) {\n    binaryNumber += binaryString.charCodeAt(i);\n  }\n\n  binaryNumber = binaryNumber % 2;\n  binaryNumberString = binaryNumber? '1' : '0';\n\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryNumberString;\n  }\n\n  return decimal;\n};\n\n/*\n  You will be given a number in decimal form and your task is to convert it to\n  hexadecimal format. The function should return a string, with each character representing a\n  hexadecimal number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_hexadecimal(15)   # returns \"db1111\"\n  decimal_to_hexadecimal(32)   # returns \"db100000\"\n  */\nconst decimal_to_hexadecimal = (decimal) => {\n  let hexadecimal = '';\n  let decimalString = decimal.toString();\n  let decimalLength = decimalString.length;\n  let decimalNumber = 0;\n  let decimalNumberString = '';\n\n  for (let i = 0; i < decimalLength; i++) {\n    decimalNumber += decimalString.charCodeAt(i);\n  }\n\n  decimalNumber = decimalNumber % 2;\n  decimalNumberString = decimalNumber? '1' : '0';\n\n  for (let i = 0; i < decimalLength; i++) {\n    hexadecimal += decimalNumberString;\n  }\n\n  return hexadecimal;\n};\n\n/*\n  You will be given a number in hexadecimal format and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  hexadecimal_to_binary(15)   # returns \"db1111\"\n  hexadecimal_to_binary(32)   # returns \"db100000\"\n  */\nconst hexadecimal_to_binary = hexadecimal => {\n  let binary = '';\n  let hexadecimalString = hexadecimal.toString();\n  let hexadecimalLength = hexadecimalString.length;\n  let hexadecimalNumber = 0;\n  let hexadecimalNumberString = '';\n\n  for (let i = 0; i < hexadecimalLength; i++) {\n    hexadecimalNumber += hexadecimalString.charCodeAt(i);\n  }\n\n  hexadecimalNumber = hexadecimalNumber % 2;\n  hexadecimalNumberString = hexadecimalNumber? '1' : '0';\n\n  for (let i = 0; i < hexadecimalLength; i++) {\n    binary += hexadecimalNumberString;\n  }\n\n  return binary;\n};\n\n/*\n  You will be given a number in binary format and your task is to convert it to\n  decimal format. The function should return a string, with each character representing a decimal\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  binary_to_decimal('db1111')   # returns 15\n  binary_to_decimal('db100000')   # returns 32\n  */\nconst binary_to_decimal = binary => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryNumber = 0;\n  let binaryNumberString = '';\n\n  for (let i = 0; i < binaryLength; i++) {\n    binaryNumber += binaryString.charCodeAt(i);\n  }\n\n  binaryNumber = binaryNumber % 2;\n  binaryNumberString = binaryNumber? '1' : '0';\n\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryNumberString;\n  }\n\n  return decimal;\n};\n\n/*\n  You will be given a number in decimal form and your task is to convert it to\n  hexadecimal format. The function should return a string, with each character representing a\n  hexadecimal number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_hexadecimal(15)   # returns \"db1111\"\n  decimal_to_hexadecimal(32)   # returns \"db100000\"\n  */\nconst decimal_to_hexadecimal = decimal => {\n  let hexadecimal = '';\n  let decimalString = decimal.toString();\n  let decimalLength = decimalString.length;\n  let decimalNumber = 0;\n  let decimalNumberString = '';\n\n  for (let i = 0; i < decimalLength; i++) {\n    decimalNumber += decimalString.charCodeAt(i);\n  }\n\n  decimalNumber = decimalNumber % 2;\n  decimalNumberString = decimalNumber? '1' : '0';\n\n  for (let i = 0; i < decimalLength; i++) {\n    hexadecimal += decimalNumberString;\n  }\n\n  return hexadecimal;\n};\n\n/*\n  You will be given a number in hexadecimal format and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  hexadecimal_to_binary(15)   # returns \"db1111\"\n  hexadecimal_to_binary(32)   # returns \"db100000\"\n  */\nconst hexadecimal_to_binary = hexadecimal => {\n  let binary = '';\n  let hexadecimalString = hexadecimal.toString();\n  let hexadecimalLength = hexadecimalString.length;\n  let hexadecimalNumber = 0;\n  let hexadecimalNumberString = '';\n\n  for (let i = 0; i < hexadecimalLength; i++) {\n    hexadecimalNumber += hexadecimalString.charCodeAt(i);\n  }\n\n  hexadecimalNumber = hexadecimalNumber % 2;\n  hexadecimalNumberString = hexadecimalNumber? '1' : '0';\n\n  for (let i = 0; i < hexadecimalLength; i++) {\n    binary += hexadecimalNumberString;\n  }\n\n  return binary;\n};\n\n/*\n  You will be given a number in binary format and your task is to convert it to\n  decimal format. The function should return a "}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  let is_happy = true;\n  let len = s.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (count === 3) {\n      is_happy = false;\n      break;\n    }\n  }\n  return is_happy;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  is_palindrome(a) => true\n  is_palindrome(aa) => true\n  is_palindrome(abcd) => false\n  is_palindrome(aabb) => true\n  is_palindrome(adb) => false\n  is_palindrome(xyy) => false\n  */\nconst is_palindrome = (s) => {\n  let is_palindrome = true;\n  let len = s.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (count === 2) {\n      is_palindrome = false;\n      break;\n    }\n  }\n  return is_palindrome;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  is_palindrome(a) => false\n  is_palindrome(aa) => false\n  is_palindrome(abcd) => true\n  is_palindrome(aabb) => false\n  is_palindrome(adb) => false\n  is_palindrome(xyy) => false\n  */\nconst is_palindrome_3 = (s) => {\n  let is_palindrome = true;\n  let len = s.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (count === 3) {\n      is_palindrome = false;\n      break;\n    }\n  }\n  return is_palindrome;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  is_palindrome(a) => false\n  is_palindrome(aa) => false\n  is_palindrome(abcd) => true\n  is_palindrome(aabb) => false\n  is_palindrome(adb) => false\n  is_palindrome(xyy) => false\n  */\nconst is_palindrome_2 = (s) => {\n  let is_palindrome = true;\n  let len = s.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (count === 2) {\n      is_palindrome = false;\n      break;\n    }\n  }\n  return is_palindrome;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  is_palindrome(a) => false\n  is_palindrome(aa) => false\n  is_palindrome(abcd) => true\n  is_palindrome(aabb) => false\n  is_palindrome(adb) => false\n  is_palindrome(xyy) => false\n  */\nconst is_palindrome_1 = (s) => {\n  let is_palindrome = true;\n  let len = s.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (count === 3) {\n      is_palindrome = false;\n      break;\n    }\n  }\n  return is_palindrome;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  is_palindrome(a) => false\n  is_palindrome(aa) => false\n  is_palindrome(abcd) => true\n  is_palindrome(aabb) => false\n  is_palindrome(adb) => false\n  is_palindrome(xyy) => false\n  */\nconst is_palindrome_0 = (s) => {\n  let is_palindrome = true;\n  let len = s.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (count === 3) {\n      is_palindrome = false;\n      break;\n    }\n  }\n  return is_palindrome;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  is_palindrome(a) => false\n  is_palindrome(aa) => false\n  is_palindrome(abcd) => true\n  is_palindrome(aabb) => false\n  is_palindrome(adb) => false\n  is_palindrome(xyy) => false\n  */\nconst is_palindrome = (s) => {\n  let is_palindrome = true;\n  let len = s.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (count === 3) {\n      is_palindrome = false;\n      break;\n    }\n  }\n  return is_palindrome;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  is_palindrome(a) => false\n  is_palindrome(aa) => false\n  is_palindrome(abcd) => true\n  is_palindrome(aabb) => false\n  is_palindrome(adb) => false\n  is_palindrome(xyy) => false\n  */\nconst is_palindrome_1 = (s) => {\n  let is_palindrome = true;\n  let len = s.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (count === 2) {\n      is_palindrome = false;\n      break;\n    }\n  }\n  return is_palindrome;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  is_palindrome(a) => false\n  is_palindrome(aa) => false\n  is_palindrome(abcd) => true\n  is_palindrome(aabb) => false\n  is_palindrome(adb) => false\n  is_palindrome(xyy) => false\n  */\nconst is_"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const grades_sorted = grades.sort((a, b) => a - b);\n  const letter_grades = [];\n  let letter_grade;\n  let letter_grade_index;\n  let letter_grade_index2;\n  let letter_grade_index3;\n  let letter_grade_index4;\n  let letter_grade_index5;\n  let letter_grade_index6;\n  let letter_grade_index7;\n  let letter_grade_index8;\n  let letter_grade_index9;\n  let letter_grade_index10;\n  let letter_grade_index11;\n  let letter_grade_index12;\n  let letter_grade_index13;\n  let letter_grade_index14;\n  let letter_grade_index15;\n  let letter_grade_index16;\n  let letter_grade_index17;\n  let letter_grade_index18;\n  let letter_grade_index19;\n  let letter_grade_index20;\n  let letter_grade_index21;\n  let letter_grade_index22;\n  let letter_grade_index23;\n  let letter_grade_index24;\n  let letter_grade_index25;\n  let letter_grade_index26;\n  let letter_grade_index27;\n  let letter_grade_index28;\n  let letter_grade_index29;\n  let letter_grade_index30;\n  let letter_grade_index31;\n  let letter_grade_index32;\n  let letter_grade_index33;\n  let letter_grade_index34;\n  let letter_grade_index35;\n  let letter_grade_index36;\n  let letter_grade_index37;\n  let letter_grade_index38;\n  let letter_grade_index39;\n  let letter_grade_index40;\n  let letter_grade_index41;\n  let letter_grade_index42;\n  let letter_grade_index43;\n  let letter_grade_index44;\n  let letter_grade_index45;\n  let letter_grade_index46;\n  let letter_grade_index47;\n  let letter_grade_index48;\n  let letter_grade_index49;\n  let letter_grade_index50;\n  let letter_grade_index51;\n  let letter_grade_index52;\n  let letter_grade_index53;\n  let letter_grade_index54;\n  let letter_grade_index55;\n  let letter_grade_index56;\n  let letter_grade_index57;\n  let letter_grade_index58;\n  let letter_grade_index59;\n  let letter_grade_index60;\n  let letter_grade_index61;\n  let letter_grade_index62;\n  let letter_grade_index63;\n  let letter_grade_index64;\n  let letter_grade_index65;\n  let letter_grade_index66;\n  let letter_grade_index67;\n  let letter_grade_index68;\n  let letter_grade_index69;\n  let letter_grade_index70;\n  let letter_grade_index71;\n  let letter_grade_index72;\n  let letter_grade_index73;\n  let letter_grade_index74;\n  let letter_grade_index75;\n  let letter_grade_index76;\n  let letter_grade_index77;\n  let letter_grade_index78;\n  let letter_grade_index79;\n  let letter_grade_index80;\n  let letter_grade_index81;\n  let letter_grade_index82;\n  let letter_grade_index83;\n  let letter_grade_index84;\n  let letter_grade_index85;\n  let letter_grade_index86;\n  let letter_grade_index87;\n  let letter_grade_index88;\n  let letter_grade_index89;\n  let letter_grade_index90;\n  let letter_grade_index91;\n  let letter_grade_index92;\n  let letter_grade_index93;\n  let letter_grade_index94;\n  let letter_grade_index95;\n  let letter_grade_index96;\n  let letter_grade_index97;\n  let letter_grade_index98;\n  let letter_grade_index99;\n  let letter_grade_index100;\n  let letter_grade_index101;\n  let letter_grade_index102;\n  let letter_grade_index103;\n  let letter_grade_index104;\n  let letter_grade_index105;\n  let letter_grade_index106;\n  let letter_grade_index107;\n  let letter_grade_index108;\n  let letter_grade_index109;\n  let letter_grade_index110;\n  let letter_grade_index111;\n  let letter_grade_index112;\n  let letter_grade_index113;\n  let letter_grade_index114;\n  let letter_grade_index115;\n  let letter_grade_index116;\n  let letter_grade_index117;\n  let letter_grade_index118;\n  let letter_grade_index119;\n  let letter_grade_index120;\n  let letter_grade_index121;\n  let letter_grade_index122;\n  let letter_grade_index123;\n  let letter_grade_index124;\n  let letter_grade_index125;\n  let letter_grade_index126;\n  let letter_grade_index127;\n  let letter_grade_index128;\n  let letter_grade_index129;\n  let letter_grade_index130;\n  let letter_grade_index131;\n  let letter_grade_index132;\n  let letter_grade_index133;\n  let letter_grade_index134;\n  let letter_grade_index135;\n  let letter_grade_index136;\n  let letter_grade_index137;\n  let letter_grade_index138;\n  let letter_grade_index139;\n  let letter_grade_index140;\n  let letter_grade_index141;\n  let letter_grade_index142;\n  let letter_grade_index143;\n  let letter_grade_index144;\n  let letter_grade_index145;\n  let letter_grade_index146;\n  let letter_grade_index147;\n  let letter_grade_index148;\n  let letter_grade_index149;\n  let letter_grade_index150;\n  let letter_grade_index151;\n  let letter_grade_index152;\n  let letter_grade_index153;\n  let letter_grade_index154;\n  let letter_grade_index155;\n  let letter_grade_index156;\n  let letter_grade_index157;\n  let letter_grade_index158;\n  let letter_grade_index159;\n  let letter_grade_index160;\n  let letter_grade_index161;\n  let letter_grade_index162;\n  let letter_grade_index163;\n  let letter_grade_index164;\n  let letter_grade_index165;\n  let letter_grade_index166;\n  let letter_grade_index167;\n  let letter_grade_index168;\n  let letter_grade_index169;\n  let letter_grade_index170;\n  let letter_grade_index171;\n  let letter_grade_index172;\n  let letter_grade_index173;\n  let letter_grade_index174;\n  let letter_grade_index175;\n  let letter_grade_index176;\n  let letter_grade_index177;\n  let letter_grade_index178;\n  let letter_grade_index179;\n  let letter_grade_index180;\n  let letter_grade_index181;\n  let letter_grade_index182;\n  let letter_grade_index183;\n  let letter_grade_index184;\n  let letter_grade_index185;\n  let letter_grade_index186;\n  let letter_grade_index187;\n  let letter_grade_index188;\n  let "}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('Hello') == true\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_in_middle = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_and_space = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_and_space_in_middle = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_and_space_in_middle_in_middle = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_and_space_in_middle_and_space = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_and_space_in_middle_and_space_in_middle = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_and_space_in_middle_and_space_in_middle_and_space = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_and_space_in_middle_and_space_in_middle_and_space_in_middle = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_and_space_in_middle_and_space_in_middle_and_space_in_middle_and_space = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_and_space_in_middle_and_space_in_middle_and_space_in_middle_and_space_in_middle = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_and_space_in_middle_and_space_in_middle_and_space_in_middle_and_space_in_middle_and_space = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_and_space_in_middle_and_space_in_middle_and_space_in_middle_and_space_in_middle_and_space_in_middle = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') == false\n  */\nconst is_palindrome_with_space_in_middle_and_space_in_middle_and_space_in_middle_and_space_in_middle_and_space_in_middle_and_space_in_"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_zero_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_one_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_zero_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_zero_ends = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst ends_one_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_zero_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_zero_ends = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_one_ends = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_zero_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_zero_ends = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_one_ends = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_zero_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_zero_ends = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_one_ends = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_zero_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_zero_ends = (n) => {\n  let count = 0;"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n    sum += parseInt(binary.charAt(0), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the maximum sum of its digits in binary.\n  \n  Example\n      For N = 1000, the maximum sum of digits will be 1 the output should be \"1\".\n      For N = 150, the maximum sum of digits will be 6 the output should be \"110\".\n      For N = 147, the maximum sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solveMax = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n    sum += parseInt(binary.charAt(0), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the minimum sum of its digits in binary.\n  \n  Example\n      For N = 1000, the minimum sum of digits will be 1 the output should be \"1\".\n      For N = 150, the minimum sum of digits will be 6 the output should be \"110\".\n      For N = 147, the minimum sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solveMin = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n    sum += parseInt(binary.charAt(0), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the maximum sum of its digits in binary.\n  \n  Example\n      For N = 1000, the maximum sum of digits will be 1 the output should be \"1\".\n      For N = 150, the maximum sum of digits will be 6 the output should be \"110\".\n      For N = 147, the maximum sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solveMaxMin = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n    sum += parseInt(binary.charAt(0), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solveSum = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n    sum += parseInt(binary.charAt(0), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the maximum sum of its digits in binary.\n  \n  Example\n      For N = 1000, the maximum sum of digits will be 1 the output should be \"1\".\n      For N = 150, the maximum sum of digits will be 6 the output should be \"110\".\n      For N = 147, the maximum sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solveMaxSum = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n    sum += parseInt(binary.charAt(0), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the minimum sum of its digits in binary.\n  \n  Example\n      For N = 1000, the minimum sum of digits will be 1 the output should be \"1\".\n      For N = 150, the minimum sum of digits will be 6 the output should be \"110\".\n      For N = 147, the minimum sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solveMinSum = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n    sum += parseInt(binary.charAt(0), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the maximum sum of its digits in binary.\n  \n  Example\n      For N = 1000, the maximum sum of digits will be 1 the output should be \"1\".\n      For N = 150, the maximum sum of digits will be 6 the output should be \"110\".\n      For N = 147, the maximum sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solveMaxMinSum = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n    sum += parseInt(binary.charAt(0), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solveSumSum = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n    sum += parseInt(binary.charAt(0), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the maximum sum of its digits in binary.\n  \n  Example\n      For N = 1000, the maximum sum of digits will be 1 the output should be \"1\".\n      For N = 150, the maximum sum of digits will be 6"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i];\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOdd = (lst, odd) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0 && odd === true) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEven = (lst) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0 && odd === true) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst, even) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && even === true) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenEven = (lst) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && even === true) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddOdd = (lst, odd) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && odd === true) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEven = (lst) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && even === true) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddOddEven = (lst) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && odd === true) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddOddOddEven = (lst) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && even === true) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddOddOddOddEven = (lst) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && odd === true) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddOddOddOddOddEven = (lst) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && even === true) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddOddOddOddOddOddEven = (lst) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && odd === true) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddOddOddOddOddOddOddOddEven = (lst) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && even === true) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddOddOddOddOddOddOddOddOddOddEven = (lst) => {\n  let res = lst.slice();\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && odd === true) {\n      res.splice(i, 1);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddO"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  let arr = s.split(' ');\n  arr = arr.sort(() => Math.random() - 0.5);\n  return arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_words = (s) => {\n  let arr = s.split(' ');\n  arr = arr.sort(() => Math.random() - 0.5);\n  return arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_spaces = (s) => {\n  let arr = s.split(' ');\n  arr = arr.sort(() => Math.random() - 0.5);\n  return arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_numbers = (s) => {\n  let arr = s.split(' ');\n  arr = arr.sort(() => Math.random() - 0.5);\n  return arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_letters = (s) => {\n  let arr = s.split(' ');\n  arr = arr.sort(() => Math.random() - 0.5);\n  return arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_symbols = (s) => {\n  let arr = s.split(' ');\n  arr = arr.sort(() => Math.random() - 0.5);\n  return arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_symbols_spaces = (s) => {\n  let arr = s.split(' ');\n  arr = arr.sort(() => Math.random() - 0.5);\n  return arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_symbols_numbers = (s) => {\n  let arr = s.split(' ');\n  arr = arr.sort(() => Math.random() - 0.5);\n  return arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_symbols_letters = (s) => {\n  let arr = s.split(' ');\n  arr = arr.sort(() => Math.random() - 0.5);\n  return arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_symbols_symbols = (s) => {\n  let arr = s.split(' ');\n  arr = arr.sort(() => Math.random() - 0.5);\n  return arr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order "}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let row_index = 0;\n  let col_index = 0;\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row_index, col_index]);\n      row_index++;\n      col_index++;\n    } else {\n      row_index++;\n    }\n    col++;\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_col = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let row_index = 0;\n  let col_index = 0;\n  while (col < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row_index, col_index]);\n      row_index++;\n      col_index++;\n    } else {\n      col_index++;\n    }\n    row++;\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row_col = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let row_index = 0;\n  let col_index = 0;\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row_index, col_index]);\n      row_index++;\n      col_index++;\n    } else {\n      col_index++;\n    }\n    row++;\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row_col_row = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let row_index = 0;\n  let col_index = 0;\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row_index, col_index]);\n      row_index++;\n      col_index++;\n    } else {\n      col_index++;\n    }\n    row++;\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row_col_col_row = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let row_index = 0;\n  let col_index = 0;\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row_index, col_index]);\n      row_index++;\n      col_index++;\n    } else {\n      col_index++;\n    }\n    row++;\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row_col_col_col_row = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let row_index = 0;\n  let col_index = 0;\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row_index, col_index]);\n      row_index++;\n      col_index++;\n    } else {\n      col_index++;\n    }\n    row++;\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  let sortedArray = array.sort((a, b) => {\n    if (a % 2 === 0 && b % 2 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sortedArray;\n};\n\n/**\n * Given an array of non-negative integers, return the maximum element in the array.\n * If the array is empty return -1.\n * If the array contains more than one maximum element return that element.\n * If the array contains only one maximum element return -1.\n * If the array contains no maximum element return -1.\n * If the array contains negative integers return -1.\n * If the array contains negative integers and non-negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and non-negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and non-negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return -1.\n * If the array contains negative integers and non-negative integers and negative integers and negative integers and negative integers and negative integers return "}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i;\n  for (i = 0; i < s.length; i++) {\n    rotated += alphabet[alphabet.indexOf(s.charAt(i))];\n  }\n  return rotated;\n};\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i;\n  for (i = 0; i < s.length; i++) {\n    rotated += alphabet[alphabet.indexOf(s.charAt(i))];\n  }\n  return rotated;\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trim = s => {\n  return s.trim();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimEnd = s => {\n  return s.trimEnd();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimStart = s => {\n  return s.trimStart();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimBoth = s => {\n  return s.trim();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimBothEnd = s => {\n  return s.trimEnd();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimBothStart = s => {\n  return s.trimStart();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimBothBoth = s => {\n  return s.trim();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimBothBothEnd = s => {\n  return s.trimEnd();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimBothBothStart = s => {\n  return s.trimStart();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimBothBothBoth = s => {\n  return s.trim();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimBothBothBothEnd = s => {\n  return s.trimEnd();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimBothBothBothStart = s => {\n  return s.trimStart();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimBothBothBothBothEnd = s => {\n  return s.trimEnd();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimBothBothBothBothStart = s => {\n  return s.trimStart();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  */\nconst trimBothBothBothBothEnd = s => {\n  return s.trimEnd();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  "}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  let min = lst[0];\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_largest() that returns the 1st largest element of the list.\n  Return null if there is no such element.\n  \n  next_largest([1, 2, 3, 4, 5]) == 3\n  next_largest([5, 1, 4, 3, 2]) == 3\n  next_larst([]) == null\n  next_larst([1, 1]) == null\n  */\nconst next_largest = (lst) => {\n  let max = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_random() that returns a random element of the list.\n  Return null if there is no such element.\n  \n  next_random([1, 2, 3, 4, 5]) == 3\n  next_random([5, 1, 4, 3, 2]) == 3\n  next_random([]) == null\n  next_random([1, 1]) == null\n  */\nconst next_random = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_random() that returns a random element of the list.\n  Return null if there is no such element.\n  \n  next_random([1, 2, 3, 4, 5]) == 3\n  next_random([5, 1, 4, 3, 2]) == 3\n  next_random([]) == null\n  next_random([1, 1]) == null\n  */\nconst next_random = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_random() that returns a random element of the list.\n  Return null if there is no such element.\n  \n  next_random([1, 2, 3, 4, 5]) == 3\n  next_random([5, 1, 4, 3, 2]) == 3\n  next_random([]) == null\n  next_random([1, 1]) == null\n  */\nconst next_random = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_random() that returns a random element of the list.\n  Return null if there is no such element.\n  \n  next_random([1, 2, 3, 4, 5]) == 3\n  next_random([5, 1, 4, 3, 2]) == 3\n  next_random([]) == null\n  next_random([1, 1]) == null\n  */\nconst next_random = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_random() that returns a random element of the list.\n  Return null if there is no such element.\n  \n  next_random([1, 2, 3, 4, 5]) == 3\n  next_random([5, 1, 4, 3, 2]) == 3\n  next_random([]) == null\n  next_random([1, 1]) == null\n  */\nconst next_random = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_random() that returns a random element of the list.\n  Return null if there is no such element.\n  \n  next_random([1, 2, 3, 4, 5]) == 3\n  next_random([5, 1, 4, 3, 2]) == 3\n  next_random([]) == null\n  next_random([1, 1]) == null\n  */\nconst next_random = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_random() that returns a random element of the list.\n  Return null if there is no such element.\n  \n  next_random([1, 2, 3, 4, 5]) == 3\n  next_random([5, 1, 4, 3, 2]) == 3\n  next_random([]) == null\n  next_random([1, 1]) == null\n  */\nconst next_random = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_random() that returns a random element of the list.\n  Return null if there is no such element.\n  \n  next_random([1, 2, 3, 4, 5]) == 3\n  next_random([5, 1, 4, 3, 2]) == 3\n  next_random([]) == null\n  next_random([1, 1]) == null\n  */\nconst next_random = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_random() that returns a random element of the list.\n  Return null if there is no such element.\n  \n  next_random([1, 2, 3, 4, 5]) == 3\n  next_random([5, 1, 4, 3, 2]) == 3\n  next_random([]) == null\n  next_random([1, 1]) == null\n  */\nconst next_random = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/*\n  You are "}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of deaths. A death is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_death(\"Hello world\")\n  0\n  >>> is_death(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_death = (S) => {\n  let deaths = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      deaths++;\n    }\n  }\n  return deaths;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religions. A religions is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_religion(\"Hello world\")\n  0\n  >>> is_religion(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_religion = (S) => {\n  let religions = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      religions++;\n    }\n  }\n  return religions;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of sexes. A sexes is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_sexe(\"Hello world\")\n  0\n  >>> is_sexe(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_sexe = (S) => {\n  let sexes = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      sexes++;\n    }\n  }\n  return sexes;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of children. Children are a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_children(\"Hello world\")\n  0\n  >>> is_children(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_children = (S) => {\n  let children = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      children++;\n    }\n  }\n  return children;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of adults. Adults are a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_adults(\"Hello world\")\n  0\n  >>> is_adults(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_adults = (S) => {\n  let adults = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      adults++;\n    }\n  }\n  return adults;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of adults. Adults are a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_adults(\"Hello world\")\n  0\n  >>> is_adults(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_adults = (S) => {\n  let adults = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      adults++;\n    }\n  }\n  return adults;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of adults. Adults are a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_adults(\"Hello world\")\n  0\n  >>> is_adults(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_adults = (S) => {\n  let adults = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      adults++;\n    }\n  }\n  return adults;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of adults. Adults are a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_adults(\"Hello world\")\n  0\n  >>> is_adults(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_adults = (S) => {\n  let adults = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      adults++;\n    }\n  }\n  return adults;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of adults. Adults are a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_adults(\"Hello world\")\n  0\n  >>> is_adults(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_adults = (S) => {\n  let adults = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      adults++;\n    }\n  }\n  return adults;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of adults. Adults are a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_adults(\"Hello world\")\n  0\n  >>> is_adults(\"The sky is blue. The sun is shining. I "}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero = (x, y, z) => {\n  return x === y || x === z || y === z || Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero_or_zero = (x, y, z) => {\n  return x === y || x === z || y === z || Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero_or_zero_or_zero = (x, y, z) => {\n  return x === y || x === z || y === z || Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero_or_zero_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero_or_zero_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero_or_zero_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero_or_zero_or_zero_or_zero = (x, y, z) => {\n  return x === y || x === z || y === z || Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero_or_zero_or_zero_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero_or_zero_or_zero_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero_or_zero_or_zero_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero_or_zero_or_zero_or_zero_or_zero = (x, y, z) => {\n  return x === y || x === z || y === z || Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero = (x, y, z) => {\n  return x === y || x === z || y === z || Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero = (x, y, z) => {\n  return x === y || x === z || y === z || Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero = (x, y, z) => {\n  return x === y || x === z || y === z || Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero = (x, y, z) => {\n  return x === y || x === z || y === z || Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero = (x, y, z) => {\n  return x === y || x === z || y === z || Number.isInteger(x + y + z);\n};\n\n/* Create a function that "}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsIndex = 0;\n  let vowelsCount = 0;\n  let vowelsIndex2 = 0;\n  let vowelsCount2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsCount3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsCount4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsCount5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsCount6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsCount7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsCount8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsCount9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsCount10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsCount11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsCount12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsCount13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsCount14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsCount15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsCount16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsCount17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsCount18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsCount19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsCount20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsCount21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsCount22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsCount23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsCount24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsCount25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsCount26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsCount27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsCount28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsCount29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsCount30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsCount31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsCount32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsCount33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsCount34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsCount35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsCount36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsCount37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsCount38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsCount39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsCount40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsCount41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsCount42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsCount43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsCount44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsCount45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsCount46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsCount47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsCount48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsCount49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsCount50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsCount51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsCount52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsCount53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsCount54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsCount55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsCount56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsCount57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsCount58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsCount59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsCount60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsCount61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsCount62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsCount63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsCount64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsCount65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsCount66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsCount67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsCount68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsCount69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsCount70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsCount71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsCount72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsCount73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsCount74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsCount75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsCount76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsCount77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsCount78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsCount79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsCount80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsCount81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsCount82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsCount83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsCount84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsCount85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsCount86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsCount87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsCount88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsCount89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsCount90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsCount91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsCount92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsCount93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsCount94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsCount95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsCount96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsCount97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsCount98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsCount99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsCount100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsCount101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsCount102 = 0;\n  let vowelsIndex"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let maxPrime = 0;\n  let maxPrimeDigit = 0;\n  let maxPrimeDigitSum = 0;\n  let maxPrimeDigitSum2 = 0;\n  let maxPrimeDigitSum3 = 0;\n  let maxPrimeDigitSum4 = 0;\n  let maxPrimeDigitSum5 = 0;\n  let maxPrimeDigitSum6 = 0;\n  let maxPrimeDigitSum7 = 0;\n  let maxPrimeDigitSum8 = 0;\n  let maxPrimeDigitSum9 = 0;\n  let maxPrimeDigitSum10 = 0;\n  let maxPrimeDigitSum11 = 0;\n  let maxPrimeDigitSum12 = 0;\n  let maxPrimeDigitSum13 = 0;\n  let maxPrimeDigitSum14 = 0;\n  let maxPrimeDigitSum15 = 0;\n  let maxPrimeDigitSum16 = 0;\n  let maxPrimeDigitSum17 = 0;\n  let maxPrimeDigitSum18 = 0;\n  let maxPrimeDigitSum19 = 0;\n  let maxPrimeDigitSum20 = 0;\n  let maxPrimeDigitSum21 = 0;\n  let maxPrimeDigitSum22 = 0;\n  let maxPrimeDigitSum23 = 0;\n  let maxPrimeDigitSum24 = 0;\n  let maxPrimeDigitSum25 = 0;\n  let maxPrimeDigitSum26 = 0;\n  let maxPrimeDigitSum27 = 0;\n  let maxPrimeDigitSum28 = 0;\n  let maxPrimeDigitSum29 = 0;\n  let maxPrimeDigitSum30 = 0;\n  let maxPrimeDigitSum31 = 0;\n  let maxPrimeDigitSum32 = 0;\n  let maxPrimeDigitSum33 = 0;\n  let maxPrimeDigitSum34 = 0;\n  let maxPrimeDigitSum35 = 0;\n  let maxPrimeDigitSum36 = 0;\n  let maxPrimeDigitSum37 = 0;\n  let maxPrimeDigitSum38 = 0;\n  let maxPrimeDigitSum39 = 0;\n  let maxPrimeDigitSum40 = 0;\n  let maxPrimeDigitSum41 = 0;\n  let maxPrimeDigitSum42 = 0;\n  let maxPrimeDigitSum43 = 0;\n  let maxPrimeDigitSum44 = 0;\n  let maxPrimeDigitSum45 = 0;\n  let maxPrimeDigitSum46 = 0;\n  let maxPrimeDigitSum47 = 0;\n  let maxPrimeDigitSum48 = 0;\n  let maxPrimeDigitSum49 = 0;\n  let maxPrimeDigitSum50 = 0;\n  let maxPrimeDigitSum51 = 0;\n  let maxPrimeDigitSum52 = 0;\n  let maxPrimeDigitSum53 = 0;\n  let maxPrimeDigitSum54 = 0;\n  let maxPrimeDigitSum55 = 0;\n  let maxPrimeDigitSum56 = 0;\n  let maxPrimeDigitSum57 = 0;\n  let maxPrimeDigitSum58 = 0;\n  let maxPrimeDigitSum59 = 0;\n  let maxPrimeDigitSum60 = 0;\n  let maxPrimeDigitSum61 = 0;\n  let maxPrimeDigitSum62 = 0;\n  let maxPrimeDigitSum63 = 0;\n  let maxPrimeDigitSum64 = 0;\n  let maxPrimeDigitSum65 = 0;\n  let maxPrimeDigitSum66 = 0;\n  let maxPrimeDigitSum67 = 0;\n  let maxPrimeDigitSum68 = 0;\n  let maxPrimeDigitSum69 = 0;\n  let maxPrimeDigitSum70 = 0;\n  let maxPrimeDigitSum71 = 0;\n  let maxPrimeDigitSum72 = 0;\n  let maxPrimeDigitSum73 = 0;\n  let maxPrimeDigitSum74 = 0;\n  let maxPrimeDigitSum75 = 0;\n  let maxPrimeDigitSum76 = 0;\n  let maxPrimeDigitSum77 = 0;\n  let maxPrimeDigitSum78 = 0;\n  let maxPrimeDigitSum79 = 0;\n  let maxPrimeDigitSum80 = 0;\n  let maxPrimeDigitSum81 = 0;\n  let maxPrimeDigitSum82 = 0;\n  let maxPrimeDigitSum83 = 0;\n  let maxPrimeDigitSum84 = 0;\n  let maxPrimeDigitSum85 = 0;\n  let maxPrimeDigitSum86 = 0;\n  let maxPrimeDigitSum87 = 0;\n  let maxPrimeDigitSum88 = 0;\n  let maxPrimeDigitSum89 = 0;\n  let maxPrimeDigitSum90 = 0;\n  let maxPrimeDigitSum91 = 0;\n  let maxPrimeDigitSum92 = 0;\n  let maxPrimeDigitSum93 = 0;\n  let maxPrimeDigitSum94 = 0;\n  let maxPrimeDigitSum95 = 0;\n  let maxPrimeDigitSum96 = 0;\n  let maxPrimeDigitSum97 = 0;\n  let maxPrimeDigitSum98 = 0;\n  let maxPrimeDigitSum99 = 0;\n  let maxPrimeDigitSum100 = 0;\n  let maxPrimeDigitSum101 = 0;\n  let maxPrimeDigitSum102 = 0;\n  let maxPrimeDigitSum103 = 0;\n  let maxPrimeDigitSum104 = 0;\n  let maxPrimeDigitSum105 = 0;\n  let maxPrimeDigitSum106 = 0;\n  let maxPrimeDigitSum107 = 0;\n  let maxPrimeDigitSum108 = 0;\n  let maxPrimeDigitSum109 = 0;\n  let maxPrimeDigitSum110 = 0;\n  let maxPrimeDigitSum111 = 0;\n  let maxPrimeDigitSum112 = 0;\n  let maxPrimeDigitSum113 = 0;\n  let maxPrimeDigitSum114 = 0;\n  let maxPrimeDigitSum115 = 0;\n  let maxPrimeDigitSum116 = 0;\n  let maxPrimeDigitSum117 = 0;\n  let maxPrimeDigitSum118 = 0;\n  let maxPrimeDigitSum119 = 0;\n  let maxPrimeDigitSum120 = 0;\n  let maxPrimeDigitSum121 = 0;\n  let maxPrimeDigitSum122 = 0;\n  let maxPrimeDigitSum123 = 0;\n  let maxPrimeDigitSum124 = 0;\n  let maxPrimeDigitSum125 = 0;\n  let maxPrimeDigitSum126 = 0;\n  let maxPrimeDigitSum127 = 0;\n  let maxPrimeDigitSum128 = 0;\n  let maxPrimeDigitSum129 = 0;\n  let maxPrimeDigitSum130 = 0;\n  let maxPrimeDigitSum131 = 0;\n  let maxPrimeDigitSum132 = 0;\n  let maxPrimeDigitSum133 = 0;\n  let maxPrimeDigitSum134 = 0;\n  let maxPrimeDigitSum135 = 0;\n  let maxPrimeDigitSum136 = 0;\n  let maxPrimeDigitSum137 = 0;\n  let maxPrimeDigitSum138 = 0;\n  let maxPrimeDigitSum139 = 0;\n  let maxPrimeDigitSum140 = 0;\n  let maxPrimeDigitSum141 = 0;\n  let maxPrimeDigitSum142 = 0;\n  let maxPrimeDigitSum143 = 0;\n  let maxPrimeDigitSum144 = 0;\n  let maxPrimeDigitSum145 = 0;\n  let maxPrimeDigitSum146 = 0;\n  let maxPrimeDigitSum147 = 0;\n  let maxPrimeDigitSum148 = 0;\n  let maxPrimeDigitSum149 = 0;\n  let maxPrime"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key] == null || typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a string, return true if all characters are digits, else return false.\n  The function should return false is the given string contains any non-digit characters.\n  Examples:\n  check_digit_case(\"123\") should return false.\n  check_digit_case(\"12\") should return false.\n  check_digit_case(\"abc\") should return false.\n  check_digit_case(\"abc123\") should return false.\n  check_digit_case(\"abc123abc\") should return false.\n  check_digit_case(\"abc123abc123\") should return false.\n  check_digit_case(\"abc123abc123abc123\") should return false.\n  check_digit_case(\"abc123abc123abc123abc123\") should return false.\n  check_digit_case(\"abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let primes = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      count++;\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let primes = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      count++;\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let primes = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      count++;\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let primes = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      count++;\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let primes = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      count++;\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let primes = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      count++;\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let primes = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      count++;\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let primes = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      count++;\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let primes = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      count++;\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let primes = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      count++;\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  \n  while(b) {\n    product = product * b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 280.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 14.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  \n  while(b) {\n    sum += b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return sum;\n}\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(148, 412) should return -28.\n  difference(19, 28) should return -14.\n  difference(2020, 1851) should return -1851.\n  difference(14,-15) should return -14.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  \n  while(b) {\n    difference = difference + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return difference;\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 28.\n  abs(19, 28) should return 14.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst abs = (a, b) => {\n  let absoluteDifference = 0;\n  \n  while(b) {\n    absoluteDifference = absoluteDifference + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return absoluteDifference;\n}\n\n/*Complete the function that takes two integers and returns \n  the least common multiple of the two integers.\n  Assume the input is always valid.\n  Examples:\n  leastCommonMultiple(148, 412) should return 148.\n  leastCommonMultiple(19, 28) should return 28.\n  leastCommonMultiple(2020, 1851) should return 1851.\n  leastCommonMultiple(14,-15) should return 14.\n  */\nconst leastCommonMultiple = (a, b) => {\n  let leastCommonMultiple = 0;\n  \n  while(b) {\n    leastCommonMultiple = Math.min(leastCommonMultiple, b);\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return leastCommonMultiple;\n}\n\n/*Complete the function that takes two integers and returns \n  the greatest common divisor of the two integers.\n  Assume the input is always valid.\n  Examples:\n  greatestCommonDivisor(148, 412) should return 148.\n  greatestCommonDivisor(19, 28) should return 28.\n  greatestCommonDivisor(2020, 1851) should return 1851.\n  greatestCommonDivisor(14,-15) should return 14.\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let greatestCommonDivisor = 0;\n  \n  while(b) {\n    greatestCommonDivisor = Math.max(greatestCommonDivisor, b);\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return greatestCommonDivisor;\n}\n\n/*Complete the function that takes two integers and returns \n  the least common multiple of the two integers.\n  Assume the input is always valid.\n  Examples:\n  leastCommonMultiple(148, 412) should return 148.\n  leastCommonMultiple(19, 28) should return 28.\n  leastCommonMultiple(2020, 1851) should return 1851.\n  leastCommonMultiple(14,-15) should return 14.\n  */\nconst leastCommonMultiple = (a, b) => {\n  let leastCommonMultiple = 0;\n  \n  while(b) {\n    leastCommonMultiple = Math.min(leastCommonMultiple, b);\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return leastCommonMultiple;\n}\n\n/*Complete the function that takes two integers and returns \n  the greatest common divisor of the two integers.\n  Assume the input is always valid.\n  Examples:\n  greatestCommonDivisor(148, 412) should return 148.\n  greatestCommonDivisor(19, 28) should return 28.\n  greatestCommonDivisor(2020, 1851) should return 1851.\n  greatestCommonDivisor(14,-15) should return 14.\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let greatestCommonDivisor = 0;\n  \n  while(b) {\n    greatestCommonDivisor = Math.max(greatestCommonDivisor, b);\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return greatestCommonDivisor;\n}\n\n/*Complete the function that takes two integers and returns \n  the least common multiple of the two integers.\n  Assume the input is always valid.\n  Examples:\n  leastCommonMultiple(148, 412) should return 148.\n  leastCommonMultiple(19, 28) should return 28.\n  leastCommonMultiple(2020, 1851) should return 1851.\n  leastCommonMultiple(14,-15) should return 14.\n  */\nconst leastCommonMultiple = (a, b) => {\n  let leastCommonMultiple = 0;\n  \n  while(b) {\n    leastCommonMultiple = Math.min(leastCommonMultiple, b);\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return leastCommonMultiple;\n}\n\n/*Complete the function that takes two integers and returns \n  the greatest common divisor of the two integers.\n  Assume the input is always valid.\n  Examples:\n  greatestCommonDivisor(148, 412) should return 148.\n  greatestCommonDivisor(19, 28) should return 28.\n  greatestCommonDivisor(2020, 1851) should return 1851.\n  greatestCommonDivisor(14,-15) should return 14.\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let greatestCommonDivisor = 0;\n  \n  while(b) {\n    greatestCommonDivisor = Math.max(greatestCommonDivisor, b);\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return greatestCommonDivisor;\n}\n\n/*Complete the function that takes two integers and returns \n  the least common multiple of the two integers.\n  Assume the input is always valid.\n  Examples:\n  leastCommonMultiple(148, 412) should return 148.\n  leastCommonMultiple(19, 28) should return 28.\n  leastCommonMultiple(2020, 1851) should return 1851.\n  leastCommonMultiple(14,-15) should return 14.\n  */\nconst leastCommonMultiple = (a, b) => {\n  let leastCommonMultiple = 0;\n  \n  while(b) {\n    leastCommonMultiple = Math.min(leastCommonMultiple, b);\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return leastCommonMultiple;\n"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 0\n  */\nconst count_lower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  count_vowels('aBCdEf') returns 1\n  count_vowels('abcdefg') returns 0\n  count_vowels('dBBE') returns 0\n  */\nconst count_vowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >='' && s[i] <= '~') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in odd indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('aBCdEf') returns 1\n  count_space('abcdefg') returns 0\n  count_space('dBBE') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even "}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer2, fraction2] = fraction.split(\".\");\n  const integerDiff = Math.abs(integer - integer2);\n  const fractionDiff = Math.abs(fraction - fraction2);\n  if (integerDiff < fractionDiff) {\n    return integer;\n  } else {\n    return integer2;\n  }\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_zero = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_zero_and_one = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_two = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_three = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_four = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_five = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_six = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_seven = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_eight = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_nine = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_ten = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_eleven = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_twelve = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_thirteen = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_fourteen = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_fifteen = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_sixteen = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_seventeen = (number) => {\n  const exponent = Math.floor(Math.log(number) / Math.LN2);\n  return Math.pow(2, exponent);\n};\n\n/**\n * Given a number, return its closest power of two\n * Note: This function is only used if the given number is a power of two\n */\nconst closest_power_of_two_including_one_and_eigh"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(0);\n  }\n  for (let i = 1; i < n; i++) {\n    if (n % 2 === 0) {\n      pile[pile.length - 1]++;\n    } else {\n      pile[pile.length - 2]++;\n    }\n  }\n  return pile;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(0);\n  }\n  for (let i = 1; i < n; i++) {\n    if (n % 2 === 0) {\n      pile[pile.length - 1]++;\n    } else {\n      pile[pile.length - 2]++;\n    }\n  }\n  return pile;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(0);\n  }\n  for (let i = 1; i < n; i++) {\n    if (n % 2 === 0) {\n      pile[pile.length - 1]++;\n    } else {\n      pile[pile.length - 2]++;\n    }\n  }\n  return pile;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(0);\n  }\n  for (let i = 1; i < n; i++) {\n    if (n % 2 === 0) {\n      pile[pile.length - 1]++;\n    } else {\n      pile[pile.length - 2]++;\n    }\n  }\n  return pile;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(0);\n  }\n  for (let i = 1; i < n; i++) {\n    if (n % 2 === 0) {\n      pile[pile.length - 1]++;\n    } else {\n      pile[pile.length - 2]++;\n    }\n  }\n  return pile;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(0);\n  }\n  for (let i = 1; i < n; i++) {\n    if (n % 2 === 0) {\n      pile[pile.length - 1]++;\n    } else {\n      pile[pile.length - 2]++;\n    }\n  }\n  return pile;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(0);\n  }\n  for (let i = 1; i < n; i++) {\n    if (n % 2 === 0) {\n      pile[pile.length - 1]++;\n    } else {\n      pile[pile.length - 2]++;\n    }\n  }\n  return pile;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(0);\n  }\n  for (let i = 1; i < n; i++) {\n    if (n % 2 === 0) {\n      pile[pile.length - 1]++;\n    } else {\n      pile[pile.length - 2]++;\n    }\n  }\n  return pile;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(0);\n  }\n  for (let i = 1; i < n; i++) {\n    if (n % 2 === 0) {\n      pile[pile.length - 1]++;\n    } else {\n      pile[pile.length - 2]++;\n    }\n  }\n  return pile"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or space"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp287;\n  let temp288;\n  let temp289;\n  let temp290;\n  let temp291;\n  let temp292;\n  let temp293;\n  let temp294;\n  let temp295;\n  let temp296;\n  let temp297;\n  let temp29"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let sum = 0;\n  let rounded_sum = 0;\n  let rounded_n = n;\n  let rounded_m = m;\n  let rounded_n1 = rounded_n;\n  let rounded_m1 = rounded_m;\n  let rounded_n2 = rounded_n - 1;\n  let rounded_m2 = rounded_m - 1;\n  let rounded_n3 = rounded_n - rounded_m1;\n  let rounded_m3 = rounded_m - rounded_m1;\n  let rounded_n4 = rounded_n - rounded_m2;\n  let rounded_m4 = rounded_m - rounded_m2;\n  let rounded_n5 = rounded_n - rounded_m3;\n  let rounded_m5 = rounded_m - rounded_m3;\n  let rounded_n6 = rounded_n - rounded_m4;\n  let rounded_m6 = rounded_m - rounded_m4;\n  let rounded_n7 = rounded_n - rounded_m5;\n  let rounded_m7 = rounded_m - rounded_m5;\n  let rounded_n8 = rounded_n - rounded_m6;\n  let rounded_m8 = rounded_m - rounded_m6;\n  let rounded_n9 = rounded_n - rounded_m7;\n  let rounded_m9 = rounded_m - rounded_m7;\n  let rounded_n10 = rounded_n - rounded_m8;\n  let rounded_m10 = rounded_m - rounded_m8;\n  let rounded_n11 = rounded_n - rounded_m9;\n  let rounded_m11 = rounded_m - rounded_m9;\n  let rounded_n12 = rounded_n - rounded_m10;\n  let rounded_m12 = rounded_m - rounded_m10;\n  let rounded_n13 = rounded_n - rounded_m11;\n  let rounded_m13 = rounded_m - rounded_m11;\n  let rounded_n14 = rounded_n - rounded_m12;\n  let rounded_m14 = rounded_m - rounded_m12;\n  let rounded_n15 = rounded_n - rounded_m13;\n  let rounded_m15 = rounded_m - rounded_m13;\n  let rounded_n16 = rounded_n - rounded_m14;\n  let rounded_m16 = rounded_m - rounded_m14;\n  let rounded_n17 = rounded_n - rounded_m15;\n  let rounded_m17 = rounded_m - rounded_m15;\n  let rounded_n18 = rounded_n - rounded_m16;\n  let rounded_m18 = rounded_m - rounded_m16;\n  let rounded_n19 = rounded_n - rounded_m17;\n  let rounded_m19 = rounded_m - rounded_m17;\n  let rounded_n20 = rounded_n - rounded_m18;\n  let rounded_m20 = rounded_m - rounded_m18;\n  let rounded_n21 = rounded_n - rounded_m19;\n  let rounded_m21 = rounded_m - rounded_m19;\n  let rounded_n22 = rounded_n - rounded_m20;\n  let rounded_m22 = rounded_m - rounded_m20;\n  let rounded_n23 = rounded_n - rounded_m21;\n  let rounded_m23 = rounded_m - rounded_m21;\n  let rounded_n24 = rounded_n - rounded_m22;\n  let rounded_m24 = rounded_m - rounded_m22;\n  let rounded_n25 = rounded_n - rounded_m23;\n  let rounded_m25 = rounded_m - rounded_m23;\n  let rounded_n26 = rounded_n - rounded_m24;\n  let rounded_m26 = rounded_m - rounded_m24;\n  let rounded_n27 = rounded_n - rounded_m25;\n  let rounded_m27 = rounded_m - rounded_m25;\n  let rounded_n28 = rounded_n - rounded_m26 - 1;\n  let rounded_m28 = rounded_m - rounded_m26 - 1;\n  let rounded_n29 = rounded_n - rounded_m27 - 1;\n  let rounded_m29 = rounded_m - rounded_m27 - 1;\n  let rounded_n30 = rounded_n - rounded_m28 - 1;\n  let rounded_m30 = rounded_m - rounded_m28 - 1;\n  let rounded_n31 = rounded_n - rounded_m29 - 1;\n  let rounded_m31 = rounded_m - rounded_m29 - 1;\n  let rounded_n32 = rounded_n - rounded_m30 - 1;\n  let rounded_m32 = rounded_m - rounded_m30 - 1;\n  let rounded_n33 = rounded_n - rounded_m31 - 1;\n  let rounded_m33 = rounded_m - rounded_m31 - 1;\n  let rounded_n34 = rounded_n - rounded_m32 - 1;\n  let rounded_m34 = rounded_m - rounded_m32 - 1;\n  let rounded_n35 = rounded_n - rounded_m33 - 1;\n  let rounded_m35 = rounded_m - rounded_m33 - 1;\n  let rounded_n36 = rounded_n - rounded_m34 - 1;\n  let rounded_m36 = rounded_m - rounded_m34 - 1;\n  let rounded_n37 = rounded_n - rounded_m35 - 1;\n  let rounded_m37 = rounded_m - rounded_m35 - 1;\n  let rounded_n38 = rounded_n - rounded_m36 - 1;\n  let rounded_m38 = rounded_m - rounded_m36 - 1;\n  let rounded_n39 = rounded_n - rounded_m37 - 1;\n  let rounded_m39 = rounded_m - rounded_m37 - 1;\n  let rounded_n40 = rounded_n - rounded_m38 - 1;\n  let rounded_m40 = rounded_m - rounded_m38 - 1;\n  let rounded_n41 = rounded_n - rounded_m39 - 1;\n  let rounded_m41 = rounded_m - rounded_m39 - 1;\n  let rounded_n42 = rounded_n - rounded_m40 - 1;\n  let rounded_m42 = rounded_m - rounded_m40 - 1;\n  let rounded_n43 = rounded_n - rounded_m41 - 1;\n  let rounded_m43 = rounded_m - rounded_m41 - 1;\n  let rounded_n44 = rounded_n - rounded_m42 - 1;\n  let rounded_m44 = rounded_m - rounded_m42 - 1;\n  let rounded_n45 = rounded_n - rounded_m43 - 1;\n  let rounded_m45 = rounded_m - rounded_m43 - 1;\n  let rounded_n46 = rounded_n - rounded_m44 - 1;\n  let rounded_m46 = rounded_m - rounded_m44 - 1;\n  let rounded_n47 = rounded_n - rounded_m45 - 1;\n  let rounded_m47 = rounded_m - rounded_m45 - 1;\n  let rounded_n48 = rounded_n - rounded_m46 - 1;\n  let rounded_m48 = rounded_m - rounded_m46 - 1;\n"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  let result = [];\n  let digit = 0;\n  let digits = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      digits.push(x[i]);\n    } else {\n      digit = 0;\n    }\n    \n    while (digit < digits.length) {\n      if (digits[digit] === 0) {\n        digits[digit] = 1;\n        digit += 1;\n      } else {\n        digit = 0;\n      }\n    }\n    \n    if (digit === digits.length) {\n      result.push(digit);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has at least one odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_digits = (x) => {\n  let result = [];\n  let digit = 0;\n  let digits = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      digits.push(x[i]);\n    } else {\n      digit = 0;\n    }\n    \n    while (digit < digits.length) {\n      if (digits[digit] === 1) {\n        digits[digit] = 0;\n        digit += 1;\n      } else {\n        digit = 0;\n      }\n    }\n    \n    if (digit === digits.length) {\n      result.push(digit);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has at least one even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_even_digits = (x) => {\n  let result = [];\n  let digit = 0;\n  let digits = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      digits.push(x[i]);\n    } else {\n      digit = 0;\n    }\n    \n    while (digit < digits.length) {\n      if (digits[digit] === 0) {\n        digits[digit] = 1;\n        digit += 1;\n      } else {\n        digit = 0;\n      }\n    }\n    \n    if (digit === digits.length) {\n      result.push(digit);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has at least one odd digit and at least one even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_and_even = unique_digits(unique_odd_digits(unique_even_digits(x)));\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has at least one odd digit and at least one even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_and_odd = unique_digits(unique_odd_digits(unique_even_digits(x)));\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has at least one odd digit and at least one even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_and_even = unique_digits(unique_odd_digits(unique_even_digits(x)));\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has at least one odd digit and at least one even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_and_odd = unique_digits(unique_odd_digits(unique_even_digits(x)));\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has at least one odd digit and at least one even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_and_even = unique_digits(unique_odd_digits(unique_even_digits(x)));\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has at least one odd digit and at least one even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_and_odd = unique_digits(unique_odd_digits(unique_even_digits(x)));\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has at least one odd digit and at least one even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_and_even = unique_digits(unique_odd_digits(unique_even_digits(x)));\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has at least one odd digit and at least one even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_and_odd = unique_digits(unique_odd_digits(unique_even_digits(x)));\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has at least one odd digit and at least one even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_and_even = unique_digits(unique_odd_digits(unique_even_digits(x)));\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has at least one odd digit and at least one even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  let len = arr.length;\n  let res = [];\n  let i;\n  for (i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_name = (arr) => {\n  let len = arr.length;\n  let res = [];\n  let i;\n  for (i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_number = (arr) => {\n  let len = arr.length;\n  let res = [];\n  let i;\n  for (i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_symbol = (arr) => {\n  let len = arr.length;\n  let res = [];\n  let i;\n  for (i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_symbols = (arr) => {\n  let len = arr.length;\n  let res = [];\n  let i;\n  for (i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_symbols_reverse = (arr) => {\n  let len = arr.length;\n  let res = [];\n  let i;\n  for (i = len - 1; i >= 0; i--) {\n    res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_symbols_reverse2 = (arr) => {\n  let len = arr.length;\n"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common "}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const even_palindromes = Array.from({ length: n }, (_, i) => n % 2 === 0);\n  const odd_palindromes = Array.from({ length: n }, (_, i) => n % 2!== 0);\n  return [...even_palindromes,...odd_palindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(2, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const even_palindromes = Array.from({ length: n }, (_, i) => n % 2 === 0);\n  const odd_palindromes = Array.from({ length: n }, (_, i) => n % 2!== 0);\n  return [...even_palindromes,...odd_palindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(3, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (3, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const even_palindromes = Array.from({ length: n }, (_, i) => n % 2 === 0);\n  const odd_palindromes = Array.from({ length: n }, (_, i) => n % 2!== 0);\n  return [...even_palindromes,...odd_palindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(4, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (4, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (6, 8)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. six of them are even, and 8 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const even_palindromes = Array.from({ length: n }, (_, i) => n % 2 === 0);\n  const odd_palindromes = Array.from({ length: n }, (_, i) => n % 2!== 0);\n  return [...even_palindromes,...odd_palindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(5, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (5, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (8, 10)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. six of them are even, and 10 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const even_palindromes = Array.from({ length: n }, (_, i) => n % 2 === 0);\n  const odd_palindromes = Array.from({ length: n }, (_, i) => n % 2!== 0);\n  return [...even_palindromes,...odd_palindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(6, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (6, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (10, 8)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. six of them are even, and 8 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const even_palindromes = Array.from({ length: n }, (_, i) => n % 2 === 0);\n  const odd_palindromes = Array.from({ length: n }, (_, i) => n % 2!== 0);\n  return [...even_palindromes,...odd_palindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(7, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (7, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (15, 16)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. six of them are even, and 16 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindro"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "<|endoftext|>/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      result += num;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_evens which takes an array of integers and returns\n  the number of elements which has an even number of digits:\n  e.g. -123 has even number of digits: 1, 2, and 3.\n  >>> count_evens([]) == 0\n  >>> count_evens([-1, 11, -11]) == 1\n  >>> count_evens([1, 1, 2]) == 2\n  */\nconst count_evens = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num % 2 === 0) {\n      result += num;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_odds which takes an array of integers and returns\n  the number of elements which has an odd number of digits:\n  e.g. -123 has odd number of digits: 1, 2, and 3.\n  >>> count_odds([]) == 0\n  >>> count_odds([-1, 11, -11]) == 1\n  >>> count_odds([1, 1, 2]) == 2\n  */\nconst count_odds = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num % 2!== 1) {\n      result += num;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_zeros which takes an array of integers and returns\n  the number of elements which has zero number of digits:\n  e.g. -123 has zero number of digits: 1, 2, and 3.\n  >>> count_zeros([]) == 0\n  >>> count_zeros([-1, 11, -11]) == 1\n  >>> count_zeros([1, 1, 2]) == 2\n  */\nconst count_zeros = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num === 0) {\n      result += num;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_ones which takes an array of integers and returns\n  the number of elements which has one number of digits:\n  e.g. -123 has one number of digits: 1, 2, and 3.\n  >>> count_ones([]) == 0\n  >>> count_ones([-1, 11, -11]) == 1\n  >>> count_ones([1, 1, 2]) == 2\n  */\nconst count_ones = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      result += num;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_negatives which takes an array of integers and\n  returns an array of integers whose elements are the negative of each\n  element in the original array:\n  e.g. -123 has negative of -12: -1, 1, and 3.\n  >>> count_negatives([]) == []\n  >>> count_negatives([-1, 11, -11]) == [-1, 1, 3]\n  >>> count_negatives([1, 1, 2]) == [-1, 1, 2]\n  */\nconst count_negatives = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_positives which takes an array of integers and\n  returns an array of integers whose elements are the positive of each\n  element in the original array:\n  e.g. -123 has positive of 12: 1, 1, and 3.\n  >>> count_positives([]) == []\n  >>> count_positives([-1, 11, -11]) == [1, 1, 3]\n  >>> count_positives([1, 1, 2]) == [1, 1, 2]\n  */\nconst count_positives = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num > 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_negatives_odd and count_positives_odd which\n  takes an array of integers and returns an array of integers whose\n  elements are the negative and positive of their respective elements:\n  e.g. -123 has negative of -12: -1, 1, and 3.\n  >>> count_negatives_odd([]) == []\n  >>> count_negatives_odd([-1, 11, -11]) == [-1, 1, 3]\n  >>> count_negatives_odd([1, 1, 2]) == [-1, 1, 2]\n  >>> count_positives_odd([]) == []\n  >>> count_positives_odd([-1, 11, -11]) == [1, 1, 3]\n  >>> count_positives_odd([1, 1, 2]) == [1, 1, 2]\n  */\nconst count_negatives_odd = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      result.push(num);\n    }\n    if (num > 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_negatives_even and count_positives_even which\n  takes an array of integers and returns an array of integers whose\n  elements are the negative and positive of their respective elements:\n  e.g. -123 has negative of -12: -1, 1, and 3.\n  >>> count_negatives_even([]) == []\n  >>> count_negatives_even([-1, 11, -11]) == [-1, 1, 3]\n  >>> count_negatives_even([1, 1, 2]) == [-1, 1, 2]\n  >>> count_positives_even([]) == []\n  >>> count_positives_even([-1, 11, -11]) == [1, 1, 3]\n  >>> count_positives_even([1, 1, 2]) == [1, 1, 2]\n  */\nconst count_negatives_even = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      result.push(num);\n    }\n    if (num > 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_odd_evens which takes an array of integers and\n  returns an array of integers whose elements are the odd and\n  even number of digits:\n  e.g. -123 has odd number of digits: 1, 2, and 3.\n  >>> count_odd_evens([]) == []\n  >>> count_odd_evens([-1, 11, -11]) == [-1, 1, 3]\n  >>> count_odd_evens([1, 1, 2]) == [-1, 1, 2]\n  */\nconst count_odd_evens = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num % 2 === 0) {\n      result.push(num);\n    }\n    if (num % 2 === 1) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_odd_negatives which takes an array of integers and\n  returns an array of integers whose elements are the negative of each\n  element in the original array:\n  e.g. -123 has negative of -12: -1, 1, and 3.\n  >>> count_odd_negatives([]) == []\n  >>> count_odd_negatives([-1, 11, -11]) == [-1, 1, 3]\n  >>> count_odd_negatives([1, 1, 2]) == [-1, 1, 2]\n  */\nconst count_odd_negatives = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num % 2!== 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_odd_positives which takes an array of integers and\n  returns an array of integers whose elements are the positive of each\n  element in the original array:\n  e.g. -123 "}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  let arr1 = arr.slice(0);\n  let arr2 = arr.slice(0);\n  let arr3 = arr.slice(0);\n  let arr4 = arr.slice(0);\n  let arr5 = arr.slice(0);\n  let arr6 = arr.slice(0);\n  let arr7 = arr.slice(0);\n  let arr8 = arr.slice(0);\n  let arr9 = arr.slice(0);\n  let arr10 = arr.slice(0);\n  let arr11 = arr.slice(0);\n  let arr12 = arr.slice(0);\n  let arr13 = arr.slice(0);\n  let arr14 = arr.slice(0);\n  let arr15 = arr.slice(0);\n  let arr16 = arr.slice(0);\n  let arr17 = arr.slice(0);\n  let arr18 = arr.slice(0);\n  let arr19 = arr.slice(0);\n  let arr20 = arr.slice(0);\n  let arr21 = arr.slice(0);\n  let arr22 = arr.slice(0);\n  let arr23 = arr.slice(0);\n  let arr24 = arr.slice(0);\n  let arr25 = arr.slice(0);\n  let arr26 = arr.slice(0);\n  let arr27 = arr.slice(0);\n  let arr28 = arr.slice(0);\n  let arr29 = arr.slice(0);\n  let arr30 = arr.slice(0);\n  let arr31 = arr.slice(0);\n  let arr32 = arr.slice(0);\n  let arr33 = arr.slice(0);\n  let arr34 = arr.slice(0);\n  let arr35 = arr.slice(0);\n  let arr36 = arr.slice(0);\n  let arr37 = arr.slice(0);\n  let arr38 = arr.slice(0);\n  let arr39 = arr.slice(0);\n  let arr40 = arr.slice(0);\n  let arr41 = arr.slice(0);\n  let arr42 = arr.slice(0);\n  let arr43 = arr.slice(0);\n  let arr44 = arr.slice(0);\n  let arr45 = arr.slice(0);\n  let arr46 = arr.slice(0);\n  let arr47 = arr.slice(0);\n  let arr48 = arr.slice(0);\n  let arr49 = arr.slice(0);\n  let arr50 = arr.slice(0);\n  let arr51 = arr.slice(0);\n  let arr52 = arr.slice(0);\n  let arr53 = arr.slice(0);\n  let arr54 = arr.slice(0);\n  let arr55 = arr.slice(0);\n  let arr56 = arr.slice(0);\n  let arr57 = arr.slice(0);\n  let arr58 = arr.slice(0);\n  let arr59 = arr.slice(0);\n  let arr60 = arr.slice(0);\n  let arr61 = arr.slice(0);\n  let arr62 = arr.slice(0);\n  let arr63 = arr.slice(0);\n  let arr64 = arr.slice(0);\n  let arr65 = arr.slice(0);\n  let arr66 = arr.slice(0);\n  let arr67 = arr.slice(0);\n  let arr68 = arr.slice(0);\n  let arr69 = arr.slice(0);\n  let arr70 = arr.slice(0);\n  let arr71 = arr.slice(0);\n  let arr72 = arr.slice(0);\n  let arr73 = arr.slice(0);\n  let arr74 = arr.slice(0);\n  let arr75 = arr.slice(0);\n  let arr76 = arr.slice(0);\n  let arr77 = arr.slice(0);\n  let arr78 = arr.slice(0);\n  let arr79 = arr.slice(0);\n  let arr80 = arr.slice(0);\n  let arr81 = arr.slice(0);\n  let arr82 = arr.slice(0);\n  let arr83 = arr.slice(0);\n  let arr84 = arr.slice(0);\n  let arr85 = arr.slice(0);\n  let arr86 = arr.slice(0);\n  let arr87 = arr.slice(0);\n  let arr88 = arr.slice(0);\n  let arr89 = arr.slice(0);\n  let arr90 = arr.slice(0);\n  let arr91 = arr.slice(0);\n  let arr92 = arr.slice(0);\n  let arr93 = arr.slice(0);\n  let arr94 = arr.slice(0);\n  let arr95 = arr.slice(0);\n  let arr96 = arr.slice(0);\n  let arr97 = arr.slice(0);\n  let arr98 = arr.slice(0);\n  let arr99 = arr.slice(0);\n  let arr100 = arr.slice(0);\n  let arr101 = arr.slice(0);\n  let arr102 = arr.slice(0);\n  let arr103 = arr.slice(0);\n  let arr104 = arr.slice(0);\n  let arr105 = arr.slice(0);\n  let arr106 = arr.slice(0);\n  let arr107 = arr.slice(0);\n  let arr108 = arr.slice(0);\n  let arr109 = arr.slice(0);\n  let arr110 = arr.slice(0);\n  let arr111 = arr.slice(0);\n  let arr112 = arr.slice(0);\n  let arr113 = arr.slice(0);\n  let arr114 = arr.slice(0);\n  let arr115 = arr.slice(0);\n  let arr116 = arr.slice(0);\n  let arr117 = arr.slice(0);\n  let arr118 = arr.slice(0);\n  let arr119 = arr.slice(0);\n  let arr120 = arr.slice(0);\n  let arr121 = arr.slice(0);\n  let arr122 = arr.slice(0);\n  let arr123 = arr.slice(0);\n  let arr124 = arr.slice(0);\n  let arr125 = arr.slice(0);\n  let arr126 = arr.slice(0);\n  let arr127 = arr.slice(0);\n  let arr128 = arr.slice(0);\n  let arr129 = arr.slice(0);\n  let arr130 = arr.slice(0);\n  let arr131 = arr.slice(0);\n  let arr132 = arr.slice(0);\n  let arr133 = arr.slice(0);\n  let arr134 = arr.slice(0);\n  let arr135 = arr.slice(0);\n  let arr136 = arr.slice(0);\n  let arr137 = arr.slice(0);\n  let arr138 = arr.slice(0);\n  let arr139 = arr.slice(0);\n  let arr140 = arr.slice(0);\n  let arr141 = arr.slice(0);\n  let arr142 = arr.slice(0);\n  let arr143 = arr.slice(0);\n  let arr144 = arr.slice(0);\n  let arr145 = arr.slice(0);\n  let arr146 = arr.slice(0);\n  let arr147 = arr.slice(0);\n  let arr148 = arr.slice(0);\n  let arr149 = arr.slice(0);\n  let arr150 = arr.slice(0);\n  let arr151 = arr.slice(0);\n  let arr152 = arr.slice(0);\n  let arr153 = arr.slice(0);\n  let arr154 = arr.slice(0);\n  let arr155 = arr.slice(0);\n  let arr156 = arr.slice(0);\n  let arr157 = arr.slice(0);\n  let arr158 = arr.slice(0);\n  let arr159 = arr.slice(0);\n  let arr160 = arr.slice(0);\n  let arr161 = arr.slice(0);\n  let arr162 = arr.slice(0);\n  let arr163 = "}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length < lst2.length) {\n    console.log(\"The lists cannot be empty\");\n  } else {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i] % 2!== lst2[i] % 2) {\n        console.log(\"The lists cannot be exchanged.\");\n        result = \"NO\";\n        break;\n      } else {\n        console.log(\"The lists can be exchanged.\");\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is composed of all the even numbers from that array.\n  For example:\n  evens([1, 2, 3, 4]) => [1, 3, 5]\n  evens([1, 2, 3, 4]) => [1, 2]\n  evens([1, 2, 3, 4]) => []\n  It is assumed that the input array will be non-empty.\n  */\nconst evens = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is composed of all the odd numbers from that array.\n  For example:\n  odds([1, 2, 3, 4]) => [1, 4, 3]\n  odds([1, 2, 3, 4]) => [1, 3, 2]\n  odds([1, 2, 3, 4]) => []\n  It is assumed that the input array will be non-empty.\n  */\nconst odds = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is composed of all the numbers from that array that are even.\n  For example:\n  evens([1, 2, 3, 4]) => [1, 2]\n  evens([1, 2, 3, 4]) => []\n  It is assumed that the input array will be non-empty.\n  */\nconst evenNumbers = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is composed of all the numbers from that array that are odd.\n  For example:\n  odds([1, 2, 3, 4]) => [1, 4, 3]\n  odds([1, 2, 3, 4]) => []\n  It is assumed that the input array will be non-empty.\n  */\nconst oddNumbers = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is composed of all the numbers from that array that are even\n  and odd.\n  For example:\n  evenNumbers([1, 2, 3, 4]) => [1, 2]\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  It is assumed that the input array will be non-empty.\n  */\nconst allNumbers = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is composed of all the numbers from that array that are even\n  and odd.\n  For example:\n  evenNumbers([1, 2, 3, 4]) => [1, 2]\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  It is assumed that the input array will be non-empty.\n  */\nconst allEvenNumbers = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is composed of all the numbers from that array that are even\n  and odd.\n  For example:\n  evenNumbers([1, 2, 3, 4]) => [1, 2]\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  It is assumed that the input array will be non-empty.\n  */\nconst allOddNumbers = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is composed of all the numbers from that array that are even\n  and odd.\n  For example:\n  evenNumbers([1, 2, 3, 4]) => [1, 2]\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  It is assumed that the input array will be non-empty.\n  */\nconst allNumbersAndOddNumbers = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is composed of all the numbers from that array that are even\n  and odd.\n  For example:\n  evenNumbers([1, 2, 3, 4]) => [1, 2]\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  It is assumed that the input array will be non-empty.\n  */\nconst allNumbersAndEvenNumbers = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is composed of all the numbers from that array that are even\n  and odd.\n  For example:\n  evenNumbers([1, 2, 3, 4]) => [1, 2]\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  It is assumed that the input array will be non-empty.\n  */\nconst allNumbersAndOddNumbersAndEvenNumbers = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is composed of all the numbers from that array that are even\n  and odd.\n  For example:\n  evenNumbers([1, 2, 3, 4]) => [1, 2]\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  It is assumed that the input array will be non-empty.\n  */\nconst allNumbersAndOddNumbersAndEvenNumbers = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  numbers that is composed of all the numbers from that array that are even\n  and odd.\n  For example:\n  evenNumbers([1, 2, 3, 4]) => [1, 2]\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  It is assumed that the input array will be non-empty.\n  */\nconst allNumbersAndOddNumbersAndEvenNumbersAndEvenNumbers = (arr) => {\n"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b "}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (s[i] === s[j]) {\n      result += s[i];\n      i++;\n      j--;\n    } else {\n      result += s[j];\n      j++;\n    }\n  }\n  if (i === len) {\n    isPalindrome = false;\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\nconst reverse_sub_string = (s, n) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (s[i] === s[n]) {\n      result += s[i];\n      i++;\n      j--;\n    } else {\n      result += s[j];\n      j++;\n    }\n  }\n  if (i === len) {\n    isPalindrome = false;\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\nconst reverse_sub_string_with_n = (s, n) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (s[i] === s[n]) {\n      result += s[i];\n      i++;\n      j--;\n    } else {\n      result += s[j];\n      j++;\n    }\n  }\n  if (i === len) {\n    isPalindrome = false;\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\nconst reverse_sub_string_with_n_and_n = (s, n) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (s[i] === s[n]) {\n      result += s[i];\n      i++;\n      j--;\n    } else {\n      result += s[j];\n      j++;\n    }\n  }\n  if (i === len) {\n    isPalindrome = false;\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\nconst reverse_sub_string_with_n_and_n_and_n = (s, n) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (s[i] === s[n]) {\n      result += s[i];\n      i++;\n      j--;\n    } else {\n      result += s[j];\n      j++;\n    }\n  }\n  if (i === len) {\n    isPalindrome = false;\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\nconst reverse_sub_string_with_n_and_n_and_n_and_n = (s, n) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (s[i] === s[n]) {\n      result += s[i];\n      i++;\n      j--;\n    } else {\n      result += s[j];\n      j++;\n    }\n  }\n  if (i === len) {\n    isPalindrome = false;\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\nconst reverse_sub_string_with_n_and_n_and_n_and_n_and_n = (s, n) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (s[i] === s[n]) {\n      result += s[i];\n      i++;\n      j--;\n    } else {\n      result += s[j];"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let odd = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        odd++;\n      }\n    }\n    result.push(odd);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> even_count(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_count(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_count = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let even = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '0') {\n        even++;\n      }\n    }\n    result.push(even);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_even_count = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let odd = 0;\n    let even = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        odd++;\n      } else if (str.charAt(j) === '0') {\n        even++;\n      }\n    }\n    result.push(odd);\n    result.push(even);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> even_count(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_count(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_even_count = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let odd = 0;\n    let even = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        odd++;\n      } else if (str.charAt(j) === '0') {\n        even++;\n      }\n    }\n    result.push(odd);\n    result.push(even);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_odd_count = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let odd = 0;\n    let even = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        odd++;\n      } else if (str.charAt(j) === '0') {\n        even++;\n      }\n    }\n    result.push(odd);\n    result.push(even);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> even_count(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_count(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_odd_count = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let odd = 0;\n    let even = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        odd++;\n      } else if (str.charAt(j) === '0') {\n        even++;\n      }\n    }\n    result.push(odd);\n    result.push(even);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_even_count = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let odd = 0;\n    let even = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        odd++;\n      } else if (str.charAt(j) === '0') {\n        even++;\n      }\n    }\n    result.push(odd);\n    result.push(even);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i "}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let sum = 0;\n  let min = Number.MAX_VALUE;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      sum += nums[i];\n      if (sum < min) {\n        min = sum;\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst max_sub_array_sum = (nums) => {\n  let sum = 0;\n  let max = -Number.MAX_VALUE;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      sum += nums[i];\n      if (sum > max) {\n        max = sum;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_count([2, 3, 4, 1, 2, 4]) == 4\n  min_sub_array_count([-1, -2, -3]) == 3\n  */\nconst min_sub_array_count = (nums) => {\n  let count = 0;\n  let min = Number.MAX_VALUE;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      count += 1;\n      if (count < min) {\n        min = count;\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_count([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_count([-1, -2, -3]) == 3\n  */\nconst max_sub_array_count = (nums) => {\n  let count = 0;\n  let max = -Number.MAX_VALUE;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      count += 1;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-array\n  of nums.\n  Example\n  num_sub_array_count([2, 3, 4, 1, 2, 4]) == 4\n  num_sub_array_count([-1, -2, -3]) == 3\n  */\nconst num_sub_array_count = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-array\n  of nums.\n  Example\n  num_sub_array_count_unique([2, 3, 4, 1, 2, 4]) == 4\n  num_sub_array_count_unique([-1, -2, -3]) == 3\n  */\nconst num_sub_array_count_unique = (nums) => {\n  let count = 0;\n  let unique = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      count += 1;\n      if (count > unique) {\n        unique = count;\n      }\n    }\n  }\n  return unique;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-array\n  of nums.\n  Example\n  num_sub_array_count_unique_unique([2, 3, 4, 1, 2, 4]) == 4\n  num_sub_array_count_unique_unique([-1, -2, -3]) == 3\n  */\nconst num_sub_array_count_unique_unique = (nums) => {\n  let count = 0;\n  let unique = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      count += 1;\n      if (count > unique) {\n        unique = count;\n      }\n    }\n  }\n  return unique;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-array\n  of nums.\n  Example\n  num_sub_array_count_unique_unique_unique([2, 3, 4, 1, 2, 4]) == 4\n  num_sub_array_count_unique_unique_unique([-1, -2, -3]) == 3\n  */\nconst num_sub_array_count_unique_unique_unique = (nums) => {\n  let count = 0;\n  let unique = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      count += 1;\n      if (count > unique) {\n        unique = count;\n      }\n    }\n  }\n  return unique;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-array\n  of nums.\n  Example\n  num_sub_array_count_unique_unique_unique_unique([2, 3, 4, 1, 2, 4]) == 4\n  num_sub_array_count_unique_unique_unique_unique([-1, -2, -3]) == 3\n  */\nconst num_sub_array_count_unique_unique_unique_unique = (nums) => {\n  let count = 0;\n  let unique = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      count += 1;\n      if (count > unique) {\n        unique = count;\n      }\n    }\n  }\n  return unique;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-array\n  of nums.\n  Example\n  num_sub_array_count_unique_unique_unique_unique_unique([2, 3, 4, 1, 2, 4]) == 4\n  num_sub_array_count_unique_unique_unique_unique_unique([-1, -2, -3]) == 3\n  */\nconst num_sub_array_count_unique_unique_unique_unique = (nums) => {\n  let count = 0;\n  let unique = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      count += 1;\n      if (count > unique) {\n        unique = count;\n      }\n    }\n  }\n  return unique;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-array\n  of nums.\n  Example\n  num_sub_array_count_unique_unique_unique_unique_unique([2, 3, 4, 1, 2, 4]) == 4\n  num_sub_array_count_unique_unique_unique_unique_unique([-1, -2, -3]) == 3\n  */\nconst num_sub_array_count_unique_unique_unique_unique_unique = (nums) => {\n  let count = 0;\n  let unique = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      count += 1;\n      if (count > unique) {\n        unique = count;\n      }\n    }\n  }\n  return unique;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-array\n  of nums.\n  Example\n  num_sub_array_count_unique_unique_unique_unique_unique([2, 3, 4, 1, 2, 4]) == 4\n  num_sub_array_count_unique_unique_unique_unique_unique([-1, -2, -3]) == 3\n  */\nconst num_sub_array_count_unique_unique_unique_unique_unique = (nums) => {\n  let count = 0;\n  let unique = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      count += 1;\n      if (count > unique) {\n        unique = count;\n      }\n    }\n  }\n  return unique;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-array\n  of nums.\n  Example\n  num_sub_array_count_unique_unique_unique_unique_unique([2, 3, 4, 1, 2, 4]) == 4\n  num_sub_array_count_unique_unique_unique_unique_unique([-1, -2, -3]) == 3\n  */\nconst num_sub_array_count_unique_unique_unique_unique_unique = (nums) => {\n  let count = 0;\n  let unique = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      count += 1;\n      if (count > unique) {\n        unique = count;\n      }\n    }\n  }\n  return unique;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-array\n  of nums.\n  Example\n  num_sub_array_count_unique_unique_unique_unique_unique([2, 3, 4, 1, 2, 4]) == 4\n  num_sub_array_count_unique_unique_unique_unique_unique"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n    const [rows, cols] = grid.length;\n    const [buckets, buckets_capacity] = buckets(grid, capacity);\n    const result = 0;\n    buckets.forEach((bucket, row) => {\n        bucket.forEach((value, col) => {\n            result += Math.max(value, buckets_capacity[row][col]);\n        });\n    });\n    return result;\n};\n\n/**\n * You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n * and all buckets have the same capacity.\n * Your task is to use the buckets to empty the wells.\n * Output the number of times you need to lower the buckets.\n\n * Example 1:\n *     Input: \n *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         bucket_capacity : 1\n *     Output: 6\n\n * Example 2:\n *     Input: \n *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         bucket_capacity : 2\n *     Output: 5\n * \n * Example 3:\n *     Input: \n *         grid : [[0,0,0], [0,0,0]]\n *         bucket_capacity : 5\n *     Output: 0\n * \n * Constraints:\n *     * all wells have the same length\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= capacity <= 10\n */\nconst max_fill2 = grid => {\n    const [rows, cols] = grid.length;\n    const [buckets, buckets_capacity] = buckets(grid, 1);\n    const result = 0;\n    buckets.forEach((bucket, row) => {\n        bucket.forEach((value, col) => {\n            result += Math.max(value, buckets_capacity[row][col]);\n        });\n    });\n    return result;\n};\n\n/**\n * You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n * and all buckets have the same capacity.\n * Your task is to use the buckets to empty the wells.\n * Output the number of times you need to lower the buckets.\n\n * Example 1:\n *     Input: \n *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         bucket_capacity : 1\n *     Output: 6\n\n * Example 2:\n *     Input: \n *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         bucket_capacity : 2\n *     Output: 5\n * \n * Example 3:\n *     Input: \n *         grid : [[0,0,0], [0,0,0]]\n *         bucket_capacity : 5\n *     Output: 0\n * \n * Constraints:\n *     * all wells have the same length\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= capacity <= 10\n */\nconst max_fill3 = grid => {\n    const [rows, cols] = grid.length;\n    const [buckets, buckets_capacity] = buckets(grid, 5);\n    const result = 0;\n    buckets.forEach((bucket, row) => {\n        bucket.forEach((value, col) => {\n            result += Math.max(value, buckets_capacity[row][col]);\n        });\n    });\n    return result;\n};\n\n/**\n * You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n * and all buckets have the same capacity.\n * Your task is to use the buckets to empty the wells.\n * Output the number of times you need to lower the buckets.\n\n * Example 1:\n *     Input: \n *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         bucket_capacity : 1\n *     Output: 6\n\n * Example 2:\n *     Input: \n *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         bucket_capacity : 2\n *     Output: 5\n * \n * Example 3:\n *     Input: \n *         grid : [[0,0,0], [0,0,0]]\n *         bucket_capacity : 5\n *     Output: 0\n * \n * Constraints:\n *     * all wells have the same length\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= capacity <= 10\n */\nconst max_fill4 = grid => {\n    const [rows, cols] = grid.length;\n    const [buckets, buckets_capacity] = buckets(grid, 10);\n    const result = 0;\n    buckets.forEach((bucket, row) => {\n        bucket.forEach((value, col) => {\n            result += Math.max(value, buckets_capacity[row][col]);\n        });\n    });\n    return result;\n};\n\n/**\n * You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n * and all buckets have the same capacity.\n * Your task is to use the buckets to empty the wells.\n * Output the number of times you need to lower the buckets.\n\n * Example 1:\n *     Input: \n *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         bucket_capacity : 1\n *     Output: 6\n\n * Example 2:\n *     Input: \n *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         bucket_capacity : 2\n *     Output: 5\n * \n * Example 3:\n *     Input: \n *         grid : [[0,0,0], [0,0,0]]\n *         bucket_capacity : 5\n *     Output: 0\n * \n * Constraints:\n *     * all wells have the same length\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= capacity <= 10\n */\nconst max_fill5 = grid => {\n    const [rows, cols] = grid.length;\n    const [buckets, buckets_capacity] = buckets(grid, 10);\n    const result = 0;\n    buckets.forEach((bucket, row) => {\n        bucket.forEach((value, col) => {\n            result += Math.max(value, buckets_capacity[row][col]);\n        });\n    });\n    return result;\n};\n\n/**\n * You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sort_array_descending = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_ascending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sort_array_reverse = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_descending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sort_array_reverse_ascending = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_descending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_ascending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_ascending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_ascending_inplace = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_ascending_inplace_descending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_ascending = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_descending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_ascending = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_descending = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_descending_inplace = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_descending_inplace_descending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_descending_inplace_reverse_ascending_inplace = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_descending_inplace_reverse_ascending_inplace_descending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_descending_inplace_reverse_ascending_inplace_descending_inplace = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_descending_inplace_reverse_ascending_inplace_descending_inplace_descending_inplace_descending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_descending_inplace_reverse_ascending_inplace_descending_inplace_descending_inplace_descending_inplace = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_descending_inplace_reverse_ascending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_descending_inplace_reverse_ascending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_descending_inplace_reverse_ascending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_descending_inplace_reverse_ascending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\nconst sort_array_reverse_inplace_reverse_descending_inplace_reverse_ascending_inplace_reverse_descending_inplace_reverse_ascending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_descending_inplace_desc"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  let words = s.split(\" \");\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let count = 0;"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowels_index = vowels.indexOf(word[0]);\n  let vowels_length = vowels.length;\n  let vowels_left = word.length - vowels_length;\n  let vowels_right = word.length - vowels_length - 1;\n  let vowels_middle = vowels_left + vowels_right / 2;\n  let vowels_left_index = vowels.indexOf(word[vowels_left]);\n  let vowels_right_index = vowels.indexOf(word[vowels_right]);\n  let vowels_middle_index = vowels.indexOf(word[vowels_middle]);\n  let vowels_left_length = vowels.length;\n  let vowels_right_length = vowels.length;\n  let vowels_middle_length = vowels.length;\n  let vowels_left_middle = vowels_left_index + vowels_left_length / 2;\n  let vowels_right_middle = vowels_right_index + vowels_right_length / 2;\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle]);\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle = vowels_left_middle + vowels_left_middle_index;\n  let vowels_right_middle = vowels_right_middle + vowels_right_middle_index;\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle = vowels_left_middle + vowels_left_middle_index;\n  let vowels_right_middle = vowels_right_middle + vowels_right_middle_index;\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle = vowels_left_middle + vowels_left_middle_index;\n  let vowels_right_middle = vowels_right_middle + vowels_right_middle_index;\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle = vowels_left_middle + vowels_left_middle_index;\n  let vowels_right_middle = vowels_right_middle + vowels_right_middle_index;\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle = vowels_left_middle + vowels_left_middle_index;\n  let vowels_right_middle = vowels_right_middle + vowels_right_middle_index;\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle = vowels_left_middle + vowels_left_middle_index;\n  let vowels_right_middle = vowels_right_middle + vowels_right_middle_index;\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle = vowels_left_middle + vowels_left_middle_index;\n  let vowels_right_middle = vowels_right_middle + vowels_right_middle_index;\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle = vowels_left_middle + vowels_left_middle_index;\n  let vowels_right_middle = vowels_right_middle + vowels_right_middle_index;\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle = vowels_left_middle + vowels_left_middle_index;\n  let vowels_right_middle = vowels_right_middle + vowels_right_middle_index;\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle = vowels_left_middle + vowels_left_middle_index;\n  let vowels_right_middle = vowels_right_middle + vowels_right_middle_index;\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle = vowels_left_middle + vowels_left_middle_index;\n  let vowels_right_middle = vowels_right_middle + vowels_right_middle_index;\n  let vowels_left_middle_index = vowels.indexOf(word[vowels_left_middle_index]);\n  let vowels_right_middle_index = vowels.indexOf(word[vowels_right_middle_index]);\n  let vowels_left_middle_index = vowels."}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  let result = 'No'\n  let stack = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (max < arr[i]) {\n      max = arr[i];\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePositiveIntegers = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueNegativeIntegers = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePositiveIntegersInArray = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueNegativeIntegersInArray = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array-with-duplicates/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePositiveIntegersInArrayWithDuplicates = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers-in-an-array-with-duplicates/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueNegativeIntegersInArrayWithDuplicates = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array-with-duplicates-in-reverse/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePositiveIntegersInArrayWithDuplicatesReverse = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers-in-an-array-with-duplicates-in-reverse/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueNegativeIntegersInArrayWithDuplicatesReverse = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array-with-duplicates-in-reverse-with-duplicates/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePositiveIntegersInArrayWithDuplicatesReverseWithDuplicates = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers-in-an-array-with-duplicates-in-reverse-with-duplicates/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueNegativeIntegersInArrayWithDuplicatesReverseWithDuplicates = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array-with-duplicates-in-reverse-with-duplicates-in-reverse/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePositiveIntegersInArrayWithDuplicatesReverseWithDuplicatesReverse = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers-in-an-array-with-duplicates-in-reverse-with-duplicates-in-reverse/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueNegativeIntegersInArrayWithDuplicatesReverseWithDuplicatesReverse = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array-with-duplicates-in-reverse-with-duplicates-in-reverse-with-duplicates/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePositiveIntegersInArrayWithDuplicatesReverseWithDuplicatesReverseWithDuplicates = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers-in-an-array-with-duplicates-in-reverse-with-duplicates-in-reverse-with-duplicates/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueNegativeIntegersInArrayWithDuplicatesReverseWithDuplicatesReverseWithDuplicates = function(nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count = i;\n    }\n  }\n  return "}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome. \n  \n  A palindrome is a number that reads the same backward as forward, \n  but in reverse.\n  \n  Example\n  \n  Input: 12\n  Output: true\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: true\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: 321\n  Output: false\n  \n  Input: "}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let carry = 0;\n  while (i < arr.length) {\n    if (arr[i] >= 10) {\n      sum += arr[i] * Math.pow(10, k - j);\n      carry = 0;\n      j++;\n    } else {\n      sum += arr[i];\n      carry++;\n    }\n    i++;\n  }\n  return sum + carry;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findSumOfTwoDigits = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= 9) {\n      sum += curr.val;\n      curr = curr.next;\n    } else {\n      curr = curr.next;\n    }\n  }\n  return sum + findSumOfTwoDigits(head, k - 1);\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findSumOfTwoDigitsRecursive = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= 9) {\n      sum += curr.val;\n      curr = curr.next;\n    } else {\n      curr = curr.next;\n    }\n  }\n  return sum + findSumOfTwoDigitsRecursive(head, k - 1);\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findSumOfTwoDigitsRecursive2 = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= 9) {\n      sum += curr.val;\n      curr = curr.next;\n    } else {\n      curr = curr.next;\n    }\n  }\n  return sum + findSumOfTwoDigitsRecursive2(head, k - 1);\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findSumOfTwoDigitsRecursive3 = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= 9) {\n      sum += curr.val;\n      curr = curr.next;\n    } else {\n      curr = curr.next;\n    }\n  }\n  return sum + findSumOfTwoDigitsRecursive3(head, k - 1);\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findSumOfTwoDigitsRecursive4 = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= 9) {\n      sum += curr.val;\n      curr = curr.next;\n    } else {\n      curr = curr.next;\n    }\n  }\n  return sum + findSumOfTwoDigitsRecursive4(head, k - 1);\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findSumOfTwoDigitsRecursive5 = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= 9) {\n      sum += curr.val;\n      curr = curr.next;\n    } else {\n      curr = curr.next;\n    }\n  }\n  return sum + findSumOfTwoDigitsRecursive5(head, k - 1);\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findSumOfTwoDigitsRecursive6 = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= 9) {\n      sum += curr.val;\n      curr = curr.next;\n    } else {\n      curr = curr.next;\n    }\n  }\n  return sum + findSumOfTwoDigitsRecursive6(head, k - 1);\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findSumOfTwoDigitsRecursive7 = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= 9) {\n      sum += curr.val;\n      curr = curr.next;\n    } else {\n      curr = curr.next;\n    }\n  }\n  return sum + findSumOfTwoDigitsRecursive7(head, k - 1);\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar findSumOfTwoDigitsRecursive8 = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val <= 9) {\n      sum += curr.val;\n      curr = curr.next;\n    } else {\n      curr = curr.next;\n    }\n  }\n  return sum + findSumOfTwoDigitsRecursive8(head, k - 1);\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n = n / 2;\n    } else {\n      i = i + 1;\n      n = n / 2;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so the even numbers are only 1, 5, 16, and 8.\n  */\nconst get_even_collatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n = n / 2;\n    } else {\n      i = i + 1;\n      n = n / 2;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_prime_collatz(5) returns [1, 5, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [1, 5, 7, 11, 13, 17, 19, 21, 23, 25, 27, 29], \n  so the prime numbers are only 1, 5, 7, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997].\n  */\nconst get_prime_collatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n = n / 2;\n    } else {\n      i = i + 1;\n      n = n / 2;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the composite numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_composite_collatz(5) returns [1, 5, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [1, 5, 7, 11, 13, 17, 19, 21, 23, 25, 27, 29], \n  so the composite numbers are only 1, 5, 7, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 77"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  const date_regex = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return date_regex.test(date);\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_time = (date) => {\n  const date_regex = /^(0[0-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$/;\n  return date_regex.test(date);\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  const date_regex = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return date_regex.test(date);\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_time = (date) => {\n  const date_regex = /^(0[0-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$/;\n  return date_regex.test(date);\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  const date_regex = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return date_regex.test(date);\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_time = (date) => {\n  const date_regex = /^(0[0-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$/;\n  return date_regex.test(date);\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.split(' ');\n  const wordCounts = {};\n  words.forEach((word) => {\n    wordCounts[word] = wordCounts[word] || 0;\n    wordCounts[word]++;\n  });\n  return Object.keys(wordCounts).map((key) => {\n    return wordCounts[key];\n  });\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_odd = (txt) => {\n  const words = txt.split(' ');\n  const wordCounts = {};\n  words.forEach((word) => {\n    wordCounts[word] = wordCounts[word] || 0;\n    wordCounts[word]++;\n  });\n  return Object.keys(wordCounts).map((key) => {\n    return wordCounts[key];\n  });\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_even = (txt) => {\n  const words = txt.split(' ');\n  const wordCounts = {};\n  words.forEach((word) => {\n    wordCounts[word] = wordCounts[word] || 0;\n    wordCounts[word]++;\n  });\n  return Object.keys(wordCounts).map((key) => {\n    return wordCounts[key];\n  });\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_odd_even = (txt) => {\n  const words = txt.split(' ');\n  const wordCounts = {};\n  words.forEach((word) => {\n    wordCounts[word] = wordCounts[word] || 0;\n    wordCounts[word]++;\n  });\n  return Object.keys(wordCounts).map((key) => {\n    return wordCounts[key];\n  });\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_odd_odd = (txt) => {\n  const words = txt.split(' ');\n  const wordCounts = {};\n  words.forEach((word) => {\n    wordCounts[word] = wordCounts[word] || 0;\n    wordCounts[word]++;\n  });\n  return Object.keys(wordCounts).map((key) => {\n    return wordCounts[key];\n  });\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_odd_even = (txt) => {\n  const words = txt.split(' ');\n  const wordCounts = {};\n  words.forEach((word) => {\n    wordCounts[word] = wordCounts[word] || 0;\n    wordCounts[word]++;\n  });\n  return Object.keys(wordCounts).map((key) => {\n    return wordCounts[key];\n  });\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_odd_odd_even = (txt) => {\n  const words = txt.split(' ');\n  const wordCounts = {};\n  words.forEach((word) => {\n    wordCounts[word] = wordCounts[word] || 0;\n    wordCounts[word]++;\n  });\n  return Object.keys(wordCounts).map((key) => {\n    return wordCounts[key];\n  });\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_odd_odd_odd_even = (txt) => {\n  const words = txt.split(' ');\n  const wordCounts = {};\n  words.forEach((word) => {\n    wordCounts[word] = wordCounts[word] || 0;\n    wordCounts[word]++;\n  });\n  return Object.keys(wordCounts).map((key) => {\n    return wordCounts[key];\n  });\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  "}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_descending = (lst) => {\n  let sorted = false\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same number, return false. Assume no negative numbers\n  and only integers.\n  Examples\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_and_descending = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted && is_descending(lst)\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same number, return false. Assume no negative numbers\n  and only integers.\n  Examples\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_and_descending_and_unique = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted && is_sorted_and_descending(lst) && is_unique(lst)\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same number, return false. Assume no negative numbers\n  and only integers.\n  Examples\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_and_descending_and_unique_and_unique = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted && is_sorted_and_descending(lst) && is_sorted_and_unique(lst) && is_unique(lst)\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same number, return false. Assume no negative numbers\n  and only integers.\n  Examples\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_and_descending_and_unique_and_unique_and_unique = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted && is_sorted_and_descending(lst) && is_sorted_and_sorted_and_unique(lst) && is_sorted_and_unique(lst)\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same number, return false. Assume no negative numbers\n  and only integers.\n  Examples\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_and_descending_and_unique_and_unique_and_unique_and_unique = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted && is_sorted_and_descending(lst) && is_sorted_and_sorted_and_unique_and_unique(lst) && is_sorted_and_unique(lst)\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same number, return false. Assume no negative numbers\n  and only integers.\n  Examples\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ true\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  is_sorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_and_descending_and_unique_and_unique_and_unique_and_unique_and_unique = (lst) => {\n  let sorted = false\n  for (let i = 0; i < "}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let result = false;\n  if (interval1.length < interval2.length) {\n    result = false;\n  } else if (interval1.length > interval2.length) {\n    result = true;\n  } else if (interval1[0] < interval2[0]) {\n    result = false;\n  } else if (interval1[0] > interval2[0]) {\n    result = true;\n  }\n  return result;\n};\n\n/*\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] intervals\n  [output] primeNumber\n  [input] "}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let result = 0\n  for (let i = 0; i < arr.length; i++) {\n    result += arr[i] * Math.sign(arr[i])\n  }\n  return result\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> square_signs([1, 2, 2, -4]) == 9\n  >>> square_signs([0, 1]) == 0\n  >>> square_signs([]) == null\n  */\nconst square_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let result = 0\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * arr[i]) * Math.sign(arr[i])\n  }\n  return result\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs([1, 2, 2, -4]) == 27\n  >>> cube_signs([0, 1]) == 0\n  >>> cube_signs([]) == null\n  */\nconst cube_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let result = 0\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * arr[i]) * arr[i] * Math.sign(arr[i])\n  }\n  return result\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs([1, 2, 2, -4]) == 27\n  >>> cube_signs([0, 1]) == 0\n  >>> cube_signs([]) == null\n  */\nconst cube_signs_2 = cube_signs\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs_2([1, 2, 2, -4]) == 27\n  >>> cube_signs_2([0, 1]) == 0\n  >>> cube_signs_2([]) == null\n  */\nconst cube_signs_3 = cube_signs\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs_3([1, 2, 2, -4]) == 27\n  >>> cube_signs_3([0, 1]) == 0\n  >>> cube_signs_3([]) == null\n  */\nconst cube_signs_4 = cube_signs\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs_4([1, 2, 2, -4]) == 27\n  >>> cube_signs_4([0, 1]) == 0\n  >>> cube_signs_4([]) == null\n  */\nconst cube_signs_5 = cube_signs\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs_5([1, 2, 2, -4]) == 27\n  >>> cube_signs_5([0, 1]) == 0\n  >>> cube_signs_5([]) == null\n  */\nconst cube_signs_6 = cube_signs\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs_6([1, 2, 2, -4]) == 27\n  >>> cube_signs_6([0, 1]) == 0\n  >>> cube_signs_6([]) == null\n  */\nconst cube_signs_7 = cube_signs\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs_7([1, 2, 2, -4]) == 27\n  >>> cube_signs_7([0, 1]) == 0\n  >>> cube_signs_7([]) == null\n  */\nconst cube_signs_8 = cube_signs\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs_8([1, 2, 2, -4]) == 27\n  >>> cube_signs_8([0, 1]) == 0\n  >>> cube_signs_8([]) == null\n  */\nconst cube_signs_9 = cube_signs\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs_9([1, 2, 2, -4]) == 27\n  >>> cube_signs_9([0, 1]) == 0\n  >>> cube_signs_9([]) == null\n  */\nconst cube_signs_10 = cube_signs\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs_10([1, 2, 2, -4]) == 27\n  >>> cube_signs_10([0, 1]) == 0\n  >>> cube_signs_10([]) == null\n  */\nconst cube_signs_11 = cube_signs\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs_11([1, 2, 2, -4]) == 27\n  >>> cube_signs_11([0, 1]) == 0\n  >>> cube_signs_11([]) == null\n  */\nconst cube_signs_12 = cube_signs\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: "}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  let lst_A = new Array(grid.length).fill(0);\n  let lst_B = new Array(grid.length).fill(0);\n  let lst_C = new Array(grid.length).fill(0);\n  let lst_D = new Array(grid.length).fill(0);\n  let lst_E = new Array(grid.length).fill(0);\n  let lst_F = new Array(grid.length).fill(0);\n  let lst_G = new Array(grid.length).fill(0);\n  let lst_H = new Array(grid.length).fill(0);\n  let lst_I = new Array(grid.length).fill(0);\n  let lst_J = new Array(grid.length).fill(0);\n  let lst_K = new Array(grid.length).fill(0);\n  let lst_L = new Array(grid.length).fill(0);\n  let lst_M = new Array(grid.length).fill(0);\n  let lst_N = new Array(grid.length).fill(0);\n  let lst_O = new Array(grid.length).fill(0);\n  let lst_P = new Array(grid.length).fill(0);\n  let lst_Q = new Array(grid.length).fill(0);\n  let lst_R = new Array(grid.length).fill(0);\n  let lst_S = new Array(grid.length).fill(0);\n  let lst_T = new Array(grid.length).fill(0);\n  let lst_U = new Array(grid.length).fill(0);\n  let lst_V = new Array(grid.length).fill(0);\n  let lst_W = new Array(grid.length).fill(0);\n  let lst_X = new Array(grid.length).fill(0);\n  let lst_Y = new Array(grid.length).fill(0);\n  let lst_Z = new Array(grid.length).fill(0);\n  let lst_a = new Array(grid.length).fill(0);\n  let lst_b = new Array(grid.length).fill(0);\n  let lst_c = new Array(grid.length).fill(0);\n  let lst_d = new Array(grid.length).fill(0);\n  let lst_e = new Array(grid.length).fill(0);\n  let lst_f = new Array(grid.length).fill(0);\n  let lst_g = new Array(grid.length).fill(0);\n  let lst_h = new Array(grid.length).fill(0);\n  let lst_i = new Array(grid.length).fill(0);\n  let lst_j = new Array(grid.length).fill(0);\n  let lst_k = new Array(grid.length).fill(0);\n  let lst_l = new Array(grid.length).fill(0);\n  let lst_m = new Array(grid.length).fill(0);\n  let lst_n = new Array(grid.length).fill(0);\n  let lst_o = new Array(grid.length).fill(0);\n  let lst_p = new Array(grid.length).fill(0);\n  let lst_q = new Array(grid.length).fill(0);\n  let lst_r = new Array(grid.length).fill(0);\n  let lst_s = new Array(grid.length).fill(0);\n  let lst_t = new Array(grid.length).fill(0);\n  let lst_u = new Array(grid.length).fill(0);\n  let lst_v = new Array(grid.length).fill(0);\n  let lst_w = new Array(grid.length).fill(0);\n  let lst_x = new Array(grid.length).fill(0);\n  let lst_y = new Array(grid.length).fill(0);\n  let lst_z = new Array(grid.length).fill(0);\n\n  let lst_A = new Array(grid.length).fill(0);\n  let lst_B = new Array(grid.length).fill(0);\n  let lst_C = new Array(grid.length).fill(0);\n  let lst_D = new Array(grid.length).fill(0);\n  let lst_E = new Array(grid.length).fill(0);\n  let lst_F = new Array(grid.length).fill(0);\n  let lst_G = new Array(grid.length).fill(0);\n  let lst_H = new Array(grid.length).fill(0);\n  let lst_I = new Array(grid.length).fill(0);\n  let lst_J = new Array(grid.length).fill(0);\n  let lst_K = new Array(grid.length).fill(0);\n  let lst_L = new Array(grid.length).fill(0);\n  let lst_M = new Array(grid.length).fill(0);\n  let lst_N = new Array(grid.length).fill(0);\n  let lst_O = new Array(grid.length).fill(0);\n  let lst_P = new Array(grid.length).fill(0);\n  let lst_Q = new Array(grid.length).fill(0);\n  let lst_R = new Array(grid.length).fill(0);\n  let lst_S = new Array(grid.length).fill(0);\n  let lst_T = new Array(grid.length).fill(0);\n  let lst_U = new Array(grid.length).fill(0);\n  let lst_V = new Array(grid.length).fill(0);\n  let lst_W = new Array(grid.length).fill(0);\n  let lst_X = new Array(grid.length).fill(0);\n  let lst_Y = new Array(grid.length).fill(0);\n  let lst_Z = new Array(grid.length).fill(0);\n  let lst_a = new Array(grid.length).fill(0);\n  let lst_b = new Array(grid.length).fill(0);\n  let lst_c = new Array(grid.length).fill(0);\n  let lst_d = new Array(grid.length).fill(0);\n  let lst_e = new Array(grid.length).fill(0);\n  let lst_f = new Array(grid.length).fill(0);\n  let lst_g = new Array(grid.length).fill(0);\n  let lst_h = new Array(grid.length).fill(0);\n  let lst_i = new Array(grid.length).fill(0);\n  let lst_j = new Array(grid.length).fill(0);\n  let lst_k = new Array(grid.length).fill(0);\n  let lst_l = new Array(grid.length).fill(0);\n  let lst_m = new Array(grid.length).fill(0);\n  let lst_n = new Array(grid.length).fill(0);\n  let lst_o = new Array(grid.length).fill(0);\n  let lst_p = new Array(grid.length).fill(0);\n  let lst_q = new Array(grid.length).fill(0);\n  let lst_r = new Array(grid.length).fill(0);\n  let lst_s = new Array(grid.length).fill(0);\n  let lst_t = new Array(grid.length).fill(0);\n  let lst_u = new Array(grid.length).fill(0);\n  let lst_v = new Array(grid.length).fill(0);\n  let lst_w = new Array(grid.length).fill"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a non-negative integer n, return a list of all the prime factors of n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst primeFactors = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the natural numbers.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst naturalNumbers = (n) => {\n  const result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the positive integers \n  less than or equal to n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst positiveIntegers = (n) => {\n  const result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the positive integers \n  greater than or equal to n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst positiveIntegersGreaterThan = (n) => {\n  const result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the positive integers \n  less than or equal to n and greater than or equal to n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst positiveIntegersLessThanOrEqualTo = (n) => {\n  const result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the positive integers \n  greater than or equal to n and less than or equal to n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst positiveIntegersGreaterThanOrEqualTo = (n) => {\n  const result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the positive integers \n  less than or equal to n and greater than or equal to n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst positiveIntegersLessThan = (n) => {\n  const result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the positive integers \n  less than or equal to n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst positiveIntegersGreaterThan = (n) => {\n  const result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the positive integers \n  less than or equal to n and greater than or equal to n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst positiveIntegersLessThanOrEqualTo = (n) => {\n  const result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the positive integers \n  greater than or equal to n and less than or equal to n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst positiveIntegersGreaterThanOrEqualTo = (n) => {\n  const result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the positive integers \n  less than or equal to n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst positiveIntegersLessThan = (n) => {\n  const result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the positive integers \n  greater than or equal to n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst positiveIntegersGreaterThan = (n) => {\n  const result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the positive integers \n  less than or equal to n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst positiveIntegersLessThanOrEqualTo = (n) => {\n  const result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the positive integers \n  greater than or equal to n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  Note: This function is an O(n) operation.\n  */\nconst positiveIntegersGreaterThanOrEqualTo = (n) => {\n  const result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all the positive integers \n  less than or equal to n.\n  For example, given n = 7, return [2, 3, 5, 7].\n  "}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits2 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits3 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 10); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits4 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 100); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits5 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 1000); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits6 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 10000); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits7 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 100000); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits8 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 1000000); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits9 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 10000000); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits10 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 100000000); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits11 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 1000000000); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits12 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 1000000000000); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits13 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 1000000000000000); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits14 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 10000000000000000); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits15 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 100000000000000000); i >= 0; i -= 2) {\n    sum += n % 10 * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digit"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /\\[(?:[^\\]]*)\\]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /\\[(?:[^\\]]*)\\]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /\\[(?:[^\\]]*)\\]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /\\[(?:[^\\]]*)\\]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /\\[(?:[^\\]]*)\\]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /\\[(?:[^\\]]*)\\]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /\\[(?:[^\\]]*)\\]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /\\[(?:[^\\]]*)\\]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /\\[(?:[^\\]]*)\\]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_2 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_3 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_4 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_5 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_6 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_7 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_8 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_9 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_10 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_11 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_12 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_13 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_14 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_15 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_16 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_17 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_18 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_19 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_20 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_21 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_22 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_23 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_24 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_25 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_26 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_27 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_28 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_29 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_30 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_31 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_32 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_33 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_34 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_35 = (lst, round) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, round);\n  });\n  return Math.ceil(sum);\n};\n\nconst sum_squares_36 = (lst, "}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  const last_char = txt.charAt(txt.length - 1);\n  return last_char.match(/[a-zA-Z]/);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_number(\"apple pie\") ➞ false\n  check_if_last_char_is_a_number(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_number(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_number(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_number = (txt) => {\n  const last_char = txt.charAt(txt.length - 1);\n  return last_char.match(/[0-9]/);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_punctuation(\"apple pie\") ➞ false\n  check_if_last_char_is_a_punctuation(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_punctuation(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_punctuation(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_punctuation = (txt) => {\n  const last_char = txt.charAt(txt.length - 1);\n  return last_char.match(/[!?.,;:&]/);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a space and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_space(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_space = (txt) => {\n  const last_char = txt.charAt(txt.length - 1);\n  return last_char === \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a capital letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_capital(\"apple pie\") ➞ false\n  check_if_last_char_is_a_capital(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_capital(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_capital(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_capital = (txt) => {\n  const last_char = txt.charAt(txt.length - 1);\n  return last_char.match(/[A-Z]/);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a small letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_small(\"apple pie\") ➞ false\n  check_if_last_char_is_a_small(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_small(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_small(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_small = (txt) => {\n  const last_char = txt.charAt(txt.length - 1);\n  return last_char.match(/[a-z]/);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and a capital letter\n  and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_number_and_a_capital(\"apple pie\") ➞ false\n  check_if_last_char_is_a_number_and_a_capital(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_number_and_a_capital(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_number_and_a_capital(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_number_and_a_capital = (txt) => {\n  const last_char = txt.charAt(txt.length - 1);\n  return last_char.match(/[0-9A-Z]/);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and a small letter\n  and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_number_and_a_small(\"apple pie\") ➞ false\n  check_if_last_char_is_a_number_and_a_small(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_number_and_a_small(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_number_and_a_small(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_number_and_a_small = (txt) => {\n  const last_char = txt.charAt(txt.length - 1);\n  return last_char.match(/[0-9a-z]/);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and a capital letter\n  and a small letter\n  and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_number_and_a_capital_and_a_small(\"apple pie\") ➞ false\n  check_if_last_char_is_a_number_and_a_capital_and_a_small(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_number_and_a_capital_and_a_small(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_number_and_a_capital_and_a_small(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_number_and_a_capital_and_a_small = (txt) => {\n  const last_char = txt.charAt(txt.length - 1);\n  return last_char.match(/[0-9A-Za-za-z]/);\n};\n\n/* Create a function that returns true if the last character\n  of a "}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  while (true) {\n    if (arr[i] >= arr[j]) {\n      j = i;\n    } else {\n      i = j;\n    }\n    if (j === arr.length) {\n      return -1;\n    }\n  }\n};\n\n/*\n  Given an array of integers, return an array which contains all possible pairs\n  of integers which can be arranged such that no two integers are the same.\n\n  Examples:\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs([1,2,3]) = [[1,2],[2,3],[3,1]]\n  pairs(["}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const max_val = lst.reduce((a, b) => Math.max(a, b), 0);\n  const min_val = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(val => (val > max_val)? null : (val < min_val)? null : val);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_reversed = (lst, max_val) => {\n  const min_val = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(val => (val < min_val)? null : (val > max_val)? null : val);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_reversed_reversed = (lst, max_val) => {\n  const min_val = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(val => (val < min_val)? null : (val > max_val)? null : val);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_reversed_reversed_reversed = (lst, max_val) => {\n  const min_val = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(val => (val < min_val)? null : (val > max_val)? null : val);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_reversed_reversed_reversed_reversed = (lst, max_val) => {\n  const min_val = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(val => (val < min_val)? null : (val > max_val)? null : val);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_reversed_reversed_reversed_reversed_reversed = (lst, max_val) => {\n  const min_val = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(val => (val < min_val)? null : (val > max_val)? null : val);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_reversed_reversed_reversed_reversed_reversed_reversed = (lst, max_val) => {\n  const min_val = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(val => (val < min_val)? null : (val > max_val)? null : val);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (lst, max_val) => {\n  const min_val = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(val => (val < min_val)? null : (val > max_val)? null : val);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (lst, max_val) => {\n  const min_val = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(val => (val < min_val)? null : (val > max_val)? null : val);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (lst, max_val) => {\n  const min_val = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(val => (val"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum === bNum) {\n    return a\n  }\n  if (aNum > bNum) {\n    return b\n  }\n  return a\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_two(1, 2.5) ➞ 2.5\n  compare_two(1, \"2,3\") ➞ \"2,3\"\n  compare_two(\"5,1\", \"6\") ➞ \"6\"\n  compare_two(\"1\", 1) ➞ null\n  */\nconst compare_two = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum === bNum) {\n    return a\n  }\n  if (aNum < bNum) {\n    return b\n  }\n  return a\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_three(1, 2.5) ➞ 2.5\n  compare_three(1, \"2,3\") ➞ \"2,3\"\n  compare_three(\"5,1\", \"6\") ➞ \"6\"\n  compare_three(\"1\", 1) ➞ null\n  */\nconst compare_three = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum === bNum) {\n    return a\n  }\n  if (aNum < bNum) {\n    return b\n  }\n  return a\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_four(1, 2.5) ➞ 2.5\n  compare_four(1, \"2,3\") ➞ \"2,3\"\n  compare_four(\"5,1\", \"6\") ➞ \"6\"\n  compare_four(\"1\", 1) ➞ null\n  */\nconst compare_four = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum === bNum) {\n    return a\n  }\n  if (aNum < bNum) {\n    return b\n  }\n  return a\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_five(1, 2.5) ➞ 2.5\n  compare_five(1, \"2,3\") ➞ \"2,3\"\n  compare_five(\"5,1\", \"6\") ➞ \"6\"\n  compare_five(\"1\", 1) ➞ null\n  */\nconst compare_five = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum === bNum) {\n    return a\n  }\n  if (aNum < bNum) {\n    return b\n  }\n  return a\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_six(1, 2.5) ➞ 2.5\n  compare_six(1, \"2,3\") ➞ \"2,3\"\n  compare_six(\"5,1\", \"6\") ➞ \"6\"\n  compare_six(\"1\", 1) ➞ null\n  */\nconst compare_six = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\") {\n    return b\n  }\n  if (b === \"\") {\n    return a\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum === bNum) {\n    return a\n  }\n  if (aNum < bNum) {\n    return b\n  }\n  return a\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_seven(1, 2.5) ➞ 2.5\n  compare_seven(1, \"2,3\") ➞ \"2,3\"\n  compare_seven(\"5,1\", \"6\") ➞ \"6\"\n  compare_seven(\"1\", 1) ➞ null\n  */"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_even(-4) == false\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == true\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_even(4) == true\n  is_equal_to_sum_even(6) == true\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == false\n  is_equal_to_sum_even(-6) == true\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_even(-4) == true\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == false\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == false\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == false\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_even(-4) == false\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == false\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_even(-4) == false\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_even(-4) == false\n  is_equal_to_sum_even(-6) == false\n  is_equal_to_sum_even(-8) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 1 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  if (n <= 0) return 1;\n  return n * special_factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial = (limit) => {\n  if (limit <= 0) return 1;\n  return limit * factorial(limit - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial_up_to_limit = (limit) => {\n  if (limit <= 0) return 1;\n  return limit * factorial_up_to_limit(limit - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial_up_to_limit_and_remainder = (limit) => {\n  if (limit <= 0) return 1;\n  return limit * factorial_up_to_limit_and_remainder(limit - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial_up_to_limit_and_remainder_and_remainder = (limit) => {\n  if (limit <= 0) return 1;\n  return limit * factorial_up_to_limit_and_remainder_and_remainder(limit - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial_up_to_limit_and_remainder_and_remainder_and_remainder = (limit) => {\n  if (limit <= 0) return 1;\n  return limit * factorial_up_to_limit_and_remainder_and_remainder_and_remainder(limit - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder = (limit) => {\n  if (limit <= 0) return 1;\n  return limit * factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder(limit - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder = (limit) => {\n  if (limit <= 0) return 1;\n  return limit * factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder(limit - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder = (limit) => {\n  if (limit <= 0) return 1;\n  return limit * factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder(limit - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder = (limit) => {\n  if (limit <= 0) return 1;\n  return limit * factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder(limit - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder = (limit) => {\n  if (limit <= 0) return 1;\n  return limit * factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder(limit - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder = (limit) => {\n  if (limit <= 0) return 1;\n  return limit * factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder(limit - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder = (limit) => {\n  if (limit <= 0) return 1;\n  return limit * factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder(limit - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder = (limit) => {\n  if (limit <= 0) return 1;\n  return limit * factorial_up_to_limit_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder_and_remainder(limit - 1);\n};\n\n/*\n  A function that returns the factorial of a positive integer up to a specified limit.\n  If the limit is not specified, it will return the factorial of 1 up to a specified limit.\n  If the limit is not positive, it will throw an error.\n  */\nconst factorial_up_to_limit_and_remainder_and_remainder_and_"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  return text.replace(/\\s/g, \"_\")\n   .replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst first_word = (text) => {\n  return text.split(\" \")[0];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst last_word = (text) => {\n  return text.split(\" \")[text.length - 1];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst first_letter = (text) => {\n  return text.split(\" \")[0];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst last_letter = (text) => {\n  return text.split(\" \")[text.length - 1];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst first_word = (text) => {\n  return text.split(\" \")[0];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst last_word = (text) => {\n  return text.split(\" \")[text.length - 1];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst first_letter = (text) => {\n  return text.split(\" \")[0];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst last_letter = (text) => {\n  return text.split(\" \")[text.length - 1];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst first_word = (text) => {\n  return text.split(\" \")[0];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst last_word = (text) => {\n  return text.split(\" \")[text.length - 1];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst first_letter = (text) => {\n  return text.split(\" \")[0];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst last_letter = (text) => {\n  return text.split(\" \")[text.length - 1];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst first_word = (text) => {\n  return text.split(\" \")[0];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst last_word = (text) => {\n  return text.split(\" \")[text.length - 1];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst first_letter = (text) => {\n  return text.split(\" \")[0];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst last_letter = (text) => {\n  return text.split(\" \")[text.length - 1];\n}\n\n/*\n  Given a string text, return the first word after removing any \n  leading or trailing spaces.\n  \n  first_word(\"Example\") == \"Example\"\n  first_word(\"Example 1\") == \"Example\"\n  first_word(\" Example 2\") == \"Example\"\n  first_word(\" Example   3\") == \"Example\"\n  */\nconst first_word = (text) => {\n  return text.split(\" \")[0];\n}\n\n/*\n  Given a string text, return the first word after "}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const file_name_length = file_name.length;\n  const file_name_dot_position = file_name.indexOf(\".\");\n  const file_name_dot_position = file_name_dot_position > -1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 3? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 1? file_name_dot_position : file_name.length;\n  const file_name_dot_position = file_name_dot_position > 0? file_name_dot_position : file_name.length;\n  const file_name_dot_position = "}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall square it if its index is a multiple of 3 and \n  will cube it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst square = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_cube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_square = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_cube_square = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_square_square = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_cube_square_square = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square it if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_square_square = (lst) => {\n  let "}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let prime = true;\n  let primes = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let newWords = [];\n  let newWord = \"\";\n  let "}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [num, denom] = x.split('/')\n  const [num2, num3] = num.split('/')\n  const [num4, num5] = num3.split('/')\n  const [num6, num7] = num5.split('/')\n  const [num8, num9] = num7.split('/')\n  const [num10, num11] = num9.split('/')\n  const [num12, num13] = num11.split('/')\n  const [num14, num15] = num13.split('/')\n  const [num16, num17] = num15.split('/')\n  const [num18, num19] = num17.split('/')\n  const [num20, num21] = num19.split('/')\n  const [num22, num23] = num21.split('/')\n  const [num24, num25] = num23.split('/')\n  const [num26, num27] = num25.split('/')\n  const [num28, num29] = num27.split('/')\n  const [num30, num31] = num29.split('/')\n  const [num32, num33] = num31.split('/')\n  const [num34, num35] = num33.split('/')\n  const [num36, num37] = num35.split('/')\n  const [num38, num39] = num37.split('/')\n  const [num40, num41] = num39.split('/')\n  const [num42, num43] = num41.split('/')\n  const [num44, num45] = num43.split('/')\n  const [num46, num47] = num45.split('/')\n  const [num48, num49] = num46.split('/')\n  const [num50, num51] = num47.split('/')\n  const [num52, num53] = num49.split('/')\n  const [num54, num55] = num51.split('/')\n  const [num56, num57] = num55.split('/')\n  const [num58, num59] = num57.split('/')\n  const [num60, num61] = num59.split('/')\n  const [num62, num63] = num61.split('/')\n  const [num64, num65] = num62.split('/')\n  const [num66, num67] = num63.split('/')\n  const [num68, num69] = num64.split('/')\n  const [num70, num71] = num65.split('/')\n  const [num72, num73] = num66.split('/')\n  const [num74, num75] = num67.split('/')\n  const [num76, num77] = num68.split('/')\n  const [num78, num79] = num69.split('/')\n  const [num80, num81] = num71.split('/')\n  const [num82, num83] = num72.split('/')\n  const [num84, num85] = num73.split('/')\n  const [num86, num87] = num74.split('/')\n  const [num88, num89] = num75.split('/')\n  const [num90, num91] = num76.split('/')\n  const [num92, num93] = num77.split('/')\n  const [num94, num95] = num78.split('/')\n  const [num96, num97] = num79.split('/')\n  const [num98, num99] = num81.split('/')\n  const [num100, num101] = num82.split('/')\n  const [num102, num103] = num83.split('/')\n  const [num104, num105] = num84.split('/')\n  const [num106, num107] = num85.split('/')\n  const [num108, num109] = num86.split('/')\n  const [num110, num111] = num87.split('/')\n  const [num112, num113] = num88.split('/')\n  const [num114, num115] = num89.split('/')\n  const [num116, num117] = num91.split('/')\n  const [num118, num119] = num92.split('/')\n  const [num120, num121] = num93.split('/')\n  const [num122, num123] = num94.split('/')\n  const [num124, num125] = num95.split('/')\n  const [num126, num127] = num96.split('/')\n  const [num128, num129] = num97.split('/')\n  const [num130, num131] = num98.split('/')\n  const [num132, num133] = num99.split('/')\n  const [num134, num135] = num100.split('/')\n  const [num136, num137] = num101.split('/')\n  const [num138, num139] = num102.split('/')\n  const [num140, num141] = num103.split('/')\n  const [num142, num143] = num104.split('/')\n  const [num144, num145] = num105.split('/')\n  const [num146, num147] = num106.split('/')\n  const [num148, num149] = num107.split('/')\n  const [num150, num151] = num108.split('/')\n  const [num152, num153] = num109.split('/')\n  const [num154, num155] = num110.split('/')\n  const [num156, num157] = num111.split('/')\n  const [num158, num159] = num112.split('/')\n  const [num160, num161] = num113.split('/')\n  const [num162, num163] = num114.split('/')\n  const [num164, num165] = num115.split('/')\n  const [num166, num167] = num116.split('/')\n  const [num168, num169] = num117.split('/')\n  const [num170, num171] = num118.split('/')\n  const [num172, num173] = num119.split('/')\n  const [num174, num175] = num120.split('/')\n  const [num176, num177] = num121.split('/')\n  const [num178, num179] = num122.split('/')\n  const [num180, num181] = num123.split('/')\n  const [num182, num183] = num124.split('/')\n  const [num184, num185] = num125.split('/')\n  const [num186, num187] = num126.split('/')\n  const [num188, num189] = num127.split('/')\n  const [num190, num191] = num128.split('/')\n  const [num192, num193] = num129.split('/')\n  const [num194, num195] = num130.split('/')\n  const [num196, num197] = num131.split('/')\n  const [num198, num199] = num132.split('/')\n  const [num200, num201] = num133.split('/')\n  const [num202, num203] = num134.split('/')\n  const [num204, num205] = num135.split('/')\n  const [num206, num207] = num136.split('/')\n  const [num208, num209] = num137.split('/')\n  const [num210, num211] = num138.split('/')\n  const [num212, num213] = num139.split('/')\n  const [num214, num215] = num140.split('/')\n  const [num216, num217] = num141.split('/')\n  const [num218, num219] = num142.split('/')\n  const [num220, num221] = num143.split('/')\n  const [num222, num223] = num144.split('/')\n  const [num224, num225] = num145.split('/')\n  const [num226, num227] = num146.split('/')"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const a_digit = a % 10\n    const b_digit = b % 10\n    return a_digit > b_digit? 1 : -1\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const a_digit = a % 10\n    const b_digit = b % 10\n    return a_digit < b_digit? 1 : -1\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const a_digit = a % 10\n    const b_digit = b % 10\n    return a_digit < b_digit? 1 : -1\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const a_digit = a % 10\n    const b_digit = b % 10\n    return a_digit > b_digit? 1 : -1\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const a_digit = a % 10\n    const b_digit = b % 10\n    return a_digit < b_digit? 1 : -1\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const a_digit = a % 10\n    const b_digit = b % 10\n    return a_digit > b_digit? 1 : -1\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const a_digit = a % 10\n    const b_digit = b % 10\n    return a_digit < b_digit? 1 : -1\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const a_digit = a % 10\n    const b_digit = b % 10\n    return a_digit > b_digit? 1 : -1\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return num"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_even = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 0) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_even = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] % 2 === 0) {\n          count += 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] % 2 === 1) {\n          count += 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_even = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] % 2 === 1) {\n          if (nums[i] % 2 === 0) {\n            count += 1;\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_odd_even = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] % 2 === 1) {\n          if (nums[i] % 2 === 1) {\n            if (nums[i] % 2 === 0) {\n              count += 1;\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_odd_odd_even = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] % 2 === 1) {\n          if (nums[i] % 2 === 1) {\n            if (nums[i] % 2 === 1) {\n              if (nums[i] % 2 === 0) {\n                count += 1;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_odd_odd_odd_even = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] % 2 === 1) {\n          if (nums[i] % 2 === 1) {\n            if (nums[i] % 2 === 1) {\n              if (nums[i] % 2 === 1) {\n                if (nums[i] % 2 === 1) {\n                  if (nums[i] % 2 === 0) {\n                    count += 1;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter_odd_odd_odd_odd_odd_odd_even = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] % 2 === 1) {\n          if (nums[i] % 2 === 1) {\n            if (nums[i] % 2 === 1) {\n              if (nums[i] % 2 === 1) {\n                if (nums[i] % 2 === 1) {\n                  if (nums[i] % 2 === 1) {\n                    if (nums[i] % 2 === 1) {\n                      if (nums[i] % 2 === 1) {\n                        if (nums[i] % 2 === 1) {\n                          if (nums[i] % 2 === 1) {\n                            if (nums[i] % 2 === 1) {\n                              if (nums[i] % 2 === 1) {\n                                if (nums[i] % 2 === 1) {\n                                  if (nums[i] % 2 === 1) {\n                                    if (nums[i] % 2 === 1) {\n                                      if (nums[i] "}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter((i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_2 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter((i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_3 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter((i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_4 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter((i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_5 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter((i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_6 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter((i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_7 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter((i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_8 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter((i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_9 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter((i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: "}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planetsBetweenOrbits = [];\n  let planetsBetweenOrbitsByDistance = [];\n  let distanceBetweenPlanets = [];\n  let distanceBetweenPlanetsByDistance = [];\n  let distanceBetweenPlanetsByDistanceByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetNameByPlanetName = [];\n  let distanceBetweenPlanetsByDistanceByPlanetNameByPlanetNameBy"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return [...new Set(sum)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_sum([aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sorted_list_sum([ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return [...new Set(product)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_product([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sorted_list_product([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_length = (lst) => {\n  let length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      length += 1;\n    }\n  }\n  return [...new Set(length)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_length([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sorted_list_length([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_length_squared = (lst) => {\n  let length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      length += 1;\n    }\n  }\n  return [...new Set(length * length)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_length_squared([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sorted_list_length_squared([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return [...new Set(product)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_product([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sorted_list_product([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return [...new Set(product)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_product([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sorted_list_product([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return [...new Set(product)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_product([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sorted_list_product([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, "}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 5. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 7. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 9. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 9 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 11. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 13. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 13 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 15. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 15 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 17. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 17 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 19. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 19 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 21. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 21 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 23. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 23 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 25. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 25 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 27. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 27 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 29. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 29 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 31. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 31 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 35. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst) {\n    return 0;\n  }"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score2, score3, score4, score5, score6] = guess;\n  const [score1, score2, score3, score4, score5, score6] = game;\n  const [score1, score"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_class = class_name;\n  let extension_extensions = extensions;\n  let extension_length = extensions.length;\n  let extension_i;\n  let extension_strength_i;\n  let extension_strength_total;\n  let extension_extension_total;\n  let extension_extension_strength;\n  let extension_extension_strength_total;\n  let extension_extension_extension_total;\n  let extension_extension_extension_strength;\n  let extension_extension_extension_strength_total;\n  let extension_extension_extension_extension_total;\n  let extension_extension_extension_extension_strength;\n  let extension_extension_extension_extension_strength_total;\n  let extension_extension_extension_extension_extension_total;\n  let extension_extension_extension_extension_extension_strength;\n  let extension_extension_extension_extension_extension_strength_total;\n  let extension_extension_extension_extension_extension_extension_total;\n  let extension_extension_extension_extension_extension_extension_strength;\n  let extension_extension_extension_extension_extension_extension_strength_total;\n  let extension_extension_extension_extension_extension_extension_extension_total;\n  let extension_extension_extension_extension_extension_extension_extension_strength;\n  let extension_extension_extension_extension_extension_extension_extension_strength_total;\n  let extension_extension_extension_extension_extension_extension_extension_extension_total;\n  let extension_extension_extension_extension_extension_extension_extension_extension_strength;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_strength_total;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_total;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_strength;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_strength_total;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_total;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_strength;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_strength_total;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_total;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_strength;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_strength_total;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_total;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_strength;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_strength_total;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_total;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_strength;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  let a1 = a.split('')\n  let b1 = b.split('')\n  let len = Math.max(a1.length, b1.length)\n  let result = []\n  for (let i = 0; i < len; i++) {\n    let a1 = a1.slice(i)\n    let b1 = b1.slice(i)\n    let rot1 = a1.rotate(a1.length)\n    let rot2 = b1.rotate(a1.length)\n    let rot3 = a1.rotate(a1.length)\n    let rot4 = b1.rotate(a1.length)\n    let rot5 = a1.rotate(a1.length)\n    let rot6 = b1.rotate(a1.length)\n    let rot7 = a1.rotate(a1.length)\n    let rot8 = b1.rotate(a1.length)\n    let rot9 = a1.rotate(a1.length)\n    let rot10 = b1.rotate(a1.length)\n    let rot11 = a1.rotate(a1.length)\n    let rot12 = b1.rotate(a1.length)\n    let rot13 = a1.rotate(a1.length)\n    let rot14 = b1.rotate(a1.length)\n    let rot15 = a1.rotate(a1.length)\n    let rot16 = b1.rotate(a1.length)\n    let rot17 = a1.rotate(a1.length)\n    let rot18 = b1.rotate(a1.length)\n    let rot19 = a1.rotate(a1.length)\n    let rot20 = b1.rotate(a1.length)\n    let rot21 = a1.rotate(a1.length)\n    let rot22 = b1.rotate(a1.length)\n    let rot23 = a1.rotate(a1.length)\n    let rot24 = b1.rotate(a1.length)\n    let rot25 = a1.rotate(a1.length)\n    let rot26 = b1.rotate(a1.length)\n    let rot27 = a1.rotate(a1.length)\n    let rot28 = b1.rotate(a1.length)\n    let rot29 = a1.rotate(a1.length)\n    let rot30 = b1.rotate(a1.length)\n    let rot31 = a1.rotate(a1.length)\n    let rot32 = b1.rotate(a1.length)\n    let rot33 = a1.rotate(a1.length)\n    let rot34 = b1.rotate(a1.length)\n    let rot35 = a1.rotate(a1.length)\n    let rot36 = b1.rotate(a1.length)\n    let rot37 = a1.rotate(a1.length)\n    let rot38 = b1.rotate(a1.length)\n    let rot39 = a1.rotate(a1.length)\n    let rot40 = b1.rotate(a1.length)\n    let rot41 = a1.rotate(a1.length)\n    let rot42 = b1.rotate(a1.length)\n    let rot43 = a1.rotate(a1.length)\n    let rot44 = b1.rotate(a1.length)\n    let rot45 = a1.rotate(a1.length)\n    let rot46 = b1.rotate(a1.length)\n    let rot47 = a1.rotate(a1.length)\n    let rot48 = b1.rotate(a1.length)\n    let rot49 = a1.rotate(a1.length)\n    let rot50 = b1.rotate(a1.length)\n    let rot51 = a1.rotate(a1.length)\n    let rot52 = b1.rotate(a1.length)\n    let rot53 = a1.rotate(a1.length)\n    let rot54 = b1.rotate(a1.length)\n    let rot55 = a1.rotate(a1.length)\n    let rot56 = b1.rotate(a1.length)\n    let rot57 = a1.rotate(a1.length)\n    let rot58 = b1.rotate(a1.length)\n    let rot59 = a1.rotate(a1.length)\n    let rot60 = b1.rotate(a1.length)\n    let rot61 = a1.rotate(a1.length)\n    let rot62 = b1.rotate(a1.length)\n    let rot63 = a1.rotate(a1.length)\n    let rot64 = b1.rotate(a1.length)\n    let rot65 = a1.rotate(a1.length)\n    let rot66 = b1.rotate(a1.length)\n    let rot67 = a1.rotate(a1.length)\n    let rot68 = b1.rotate(a1.length)\n    let rot69 = a1.rotate(a1.length)\n    let rot70 = b1.rotate(a1.length)\n    let rot71 = a1.rotate(a1.length)\n    let rot72 = b1.rotate(a1.length)\n    let rot73 = a1.rotate(a1.length)\n    let rot74 = b1.rotate(a1.length)\n    let rot75 = a1.rotate(a1.length)\n    let rot76 = b1.rotate(a1.length)\n    let rot77 = a1.rotate(a1.length)\n    let rot78 = b1.rotate(a1.length)\n    let rot79 = a1.rotate(a1.length)\n    let rot80 = b1.rotate(a1.length)\n    let rot81 = a1.rotate(a1.length)\n    let rot82 = b1.rotate(a1.length)\n    let rot83 = a1.rotate(a1.length)\n    let rot84 = b1.rotate(a1.length)\n    let rot85 = a1.rotate(a1.length)\n    let rot86 = b1.rotate(a1.length)\n    let rot87 = a1.rotate(a1.length)\n    let rot88 = b1.rotate(a1.length)\n    let rot89 = a1.rotate(a1.length)\n    let rot90 = b1.rotate(a1.length)\n    let rot91 = a1.rotate(a1.length)\n    let rot92 = b1.rotate(a1.length)\n    let rot93 = a1.rotate(a1.length)\n    let rot94 = b1.rotate(a1.length)\n    let rot95 = a1.rotate(a1.length)\n    let rot96 = b1.rotate(a1.length)\n    let rot97 = a1.rotate(a1.length)\n    let rot98 = b1.rotate(a1.length)\n    let rot99 = a1.rotate(a1.length)\n    let rot100 = b1.rotate(a1.length)\n    let rot101 = a1.rotate(a1.length)\n    let rot102 = b1.rotate(a1.length)\n    let rot103 = a1.rotate(a1.length)\n    let rot104 = b1.rotate(a1.length)\n    let rot105 = a1.rotate(a1.length)\n    let rot106 = b1.rotate(a1.length)\n    let rot107 = a1.rotate(a1.length)\n    let rot108 = b1.rotate(a1.length)\n    let rot109 = a1.rotate(a1.length)\n    let rot110 = b1.rotate(a1.length)\n    let rot111 = a1.rotate(a1.length)\n    let rot112 = b1.rotate(a1.length)\n    let rot113 = a1.rotate(a1.length)\n    let rot114 = b1.rotate(a1.length)\n    let rot115 = a1.rotate(a1.length)\n    let rot116 = b1.rotate(a1.length)\n    let rot117 = a1.rotate(a1.length)\n    let rot118 = b1.rotate(a1.length)\n    let rot119 = a1.rotate(a1.length)\n    let rot120 = b1.rotate(a1.length)\n    let rot121 = a1.rotate(a1.length)\n    let rot122 = b1.rotate(a1.length)\n    let rot123 = a1.rotate(a1.length)\n    let rot124 = b1.rotate(a1.length)\n    let rot125 = a1.rotate(a1.length)\n    let rot126 = b1.rotate(a1.length)\n    let rot127 = a1.rotate(a1.length)\n    let rot128 = b1.rotate(a1.length)\n    let rot129 = a1.rotate(a1.length)\n    let rot130 = b1.rotate(a1.length)\n    let rot131 = a1.rotate(a1.length)\n    let rot132 = b1.rotate"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let even = 0;\n  let odd = 0;\n  let digit;\n  do {\n    digit = num % 10;\n    num = Math.floor(num / 10);\n    even = even + digit % 2;\n    odd = odd + digit / 2;\n  } while (num > 0);\n  return [even, odd];\n};\n\n/*Given a string, return an array that has all the characters in that string.\n\n   Example:\n      all_chars(\"hello\") ==> ['h', 'e', 'l', 'l', 'o']\n      all_chars(\"hello, world\") ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst all_chars = (str) => {\n  let chars = [];\n  for (let i = 0; i < str.length; i++) {\n    chars.push(str[i]);\n  }\n  return chars;\n};\n\n/*Given a string, return an array that has all the words in that string.\n\n   Example:\n      all_words(\"hello\") ==> ['hello', 'world']\n      all_words(\"hello, world\") ==> ['hello', 'world', 'hello', 'world']\n  */\nconst all_words = (str) => {\n  let words = [];\n  for (let i = 0; i < str.length; i++) {\n    words.push(str[i]);\n  }\n  return words;\n};\n\n/*Given a string, return an array that has all the numbers in that string.\n\n   Example:\n      all_numbers(\"hello\") ==> ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n      all_numbers(\"hello, world\") ==> ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'd']\n  */\nconst all_numbers = (str) => {\n  let numbers = [];\n  for (let i = 0; i < str.length; i++) {\n    numbers.push(str[i]);\n  }\n  return numbers;\n};\n\n/*Given a string, return an array that has all the letters in that string.\n\n   Example:\n      all_letters(\"hello\") ==> ['h', 'e', 'l', 'l', 'o']\n      all_letters(\"hello, world\") ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst all_letters = (str) => {\n  let letters = [];\n  for (let i = 0; i < str.length; i++) {\n    letters.push(str[i]);\n  }\n  return letters;\n};\n\n/*Given a string, return an array that has all the words in that string.\n\n   Example:\n      all_words(\"hello\") ==> ['hello', 'world']\n      all_words(\"hello, world\") ==> ['hello', 'world', 'hello', 'world']\n  */\nconst all_words = (str) => {\n  let words = [];\n  for (let i = 0; i < str.length; i++) {\n    words.push(str[i]);\n  }\n  return words;\n};\n\n/*Given a string, return an array that has all the numbers in that string.\n\n   Example:\n      all_numbers(\"hello\") ==> ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n      all_numbers(\"hello, world\") ==> ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'd']\n  */\nconst all_numbers = (str) => {\n  let numbers = [];\n  for (let i = 0; i < str.length; i++) {\n    numbers.push(str[i]);\n  }\n  return numbers;\n};\n\n/*Given a string, return an array that has all the letters in that string.\n\n   Example:\n      all_letters(\"hello\") ==> ['h', 'e', 'l', 'l', 'o']\n      all_letters(\"hello, world\") ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst all_letters = (str) => {\n  let letters = [];\n  for (let i = 0; i < str.length; i++) {\n    letters.push(str[i]);\n  }\n  return letters;\n};\n\n/*Given a string, return an array that has all the words in that string.\n\n   Example:\n      all_words(\"hello\") ==> ['hello', 'world']\n      all_words(\"hello, world\") ==> ['hello', 'world', 'hello', 'world']\n  */\nconst all_words = (str) => {\n  let words = [];\n  for (let i = 0; i < str.length; i++) {\n    words.push(str[i]);\n  }\n  return words;\n};\n\n/*Given a string, return an array that has all the numbers in that string.\n\n   Example:\n      all_numbers(\"hello\") ==> ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n      all_numbers(\"hello, world\") ==> ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'd']\n  */\nconst all_numbers = (str) => {\n  let numbers = [];\n  for (let i = 0; i < str.length; i++) {\n    numbers.push(str[i]);\n  }\n  return numbers;\n};\n\n/*Given a string, return an array that has all the letters in that string.\n\n   Example:\n      all_letters(\"hello\") ==> ['h', 'e', 'l', 'l', 'o']\n      all_letters(\"hello, world\") ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst all_letters = (str) => {\n  let letters = [];\n  for (let i = 0; i < str.length; i++) {\n    letters.push(str[i]);\n  }\n  return letters;\n};\n\n/*Given a string, return an array that has all the words in that string.\n\n   Example:\n      all_words(\"hello\") ==> ['hello', 'world']\n      all_words(\"hello, world\") ==> ['hello', 'world', 'hello', 'world']\n  */\nconst all_words = (str) => {\n  let words = [];\n  for (let i = 0; i < str.length; i++) {\n    words.push(str[i]);\n  }\n  return words;\n};\n\n/*Given a string, return an array that has all the numbers in that string.\n\n   Example:\n      all_numbers(\"hello\") ==> ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n      all_numbers(\"hello, world\") ==> ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'd']\n  */\nconst all_numbers = (str) => {\n  let numbers = [];\n  for (let i = 0; i < str.length; i++) {\n    numbers.push(str[i]);\n  }\n  return numbers;\n};\n\n/*Given a string, return an array that has all the letters in that string.\n\n   Example:\n      all_letters(\"hello\") ==> ['h', 'e', 'l', 'l', 'o']\n      all_letters(\"hello, world\") ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst all_letters = (str) => {\n  let letters = [];\n  for (let i = 0; i < str.length; i++) {\n    letters.push(str[i]);\n  }\n  return letters;\n};\n\n/*Given a string, return an array that has all the words in that string.\n\n   Example:\n      all_words(\"hello\") ==> ['hello', 'world']\n      all_words(\"hello, world\") ==> ['hello', 'world', 'hello', 'world']\n  */\nconst all_words = (str) => {\n  let words = [];\n  for (let i = 0; i < str.length; i++) {\n    words.push(str[i]);\n  }\n  return words;\n};\n\n/*Given a string, return an array that has all the numbers in that string.\n\n   Example:\n      all_numbers(\"hello\") ==> ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n      all_numbers(\"hello, world\") ==> ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'd']\n  */\nconst all_numbers = (str) => {\n  let numbers = [];\n  for (let i = 0; i < str.length; i++) {\n    numbers.push(str[i]);\n  }\n  return numbers;\n};\n\n/*Given a string, return an array that has all the letters in that string.\n\n   Example:\n      all_letters(\"hello\") ==> ['h', 'e', 'l', 'l', 'o']\n      all_letters(\"hello, world\") ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\n"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  let roman = '';\n  let remainder = number % 100;\n  let remainder2 = remainder % 10;\n  let remainder3 = remainder % 5;\n  let remainder4 = remainder % 1;\n\n  if (remainder2 === 1 && remainder3 === 1 && remainder4 === 1) {\n    roman = 'ix';\n  } else if (remainder2 === 1 && remainder3 === 1 && remainder4 === 2) {\n    roman = 'xix';\n  } else if (remainder2 === 1 && remainder3 === 2 && remainder4 === 1) {\n    roman = 'cli';\n  } else if (remainder2 === 1 && remainder3 === 2 && remainder4 === 2) {\n    roman = 'cde';\n  } else if (remainder2 === 2 && remainder3 === 1 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 2 && remainder3 === 1 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 2 && remainder3 === 2 && remainder4 === 1) {\n    roman = 'cde';\n  } else if (remainder2 === 2 && remainder3 === 2 && remainder4 === 2) {\n    roman = 'ix';\n  } else if (remainder2 === 2 && remainder3 === 3 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 2 && remainder3 === 3 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 2 && remainder3 === 3 && remainder4 === 3) {\n    roman = 'cde';\n  } else if (remainder2 === 3 && remainder3 === 1 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 3 && remainder3 === 1 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 3 && remainder3 === 2 && remainder4 === 1) {\n    roman = 'cde';\n  } else if (remainder2 === 3 && remainder3 === 2 && remainder4 === 2) {\n    roman = 'ix';\n  } else if (remainder2 === 3 && remainder3 === 3 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 3 && remainder3 === 3 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 3 && remainder3 === 3 && remainder4 === 3) {\n    roman = 'cde';\n  } else if (remainder2 === 4 && remainder3 === 1 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 4 && remainder3 === 1 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 4 && remainder3 === 2 && remainder4 === 1) {\n    roman = 'cde';\n  } else if (remainder2 === 4 && remainder3 === 2 && remainder4 === 2) {\n    roman = 'ix';\n  } else if (remainder2 === 4 && remainder3 === 3 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 4 && remainder3 === 3 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 4 && remainder3 === 3 && remainder4 === 3) {\n    roman = 'cde';\n  } else if (remainder2 === 5 && remainder3 === 1 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 5 && remainder3 === 1 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 5 && remainder3 === 2 && remainder4 === 1) {\n    roman = 'cde';\n  } else if (remainder2 === 5 && remainder3 === 2 && remainder4 === 2) {\n    roman = 'ix';\n  } else if (remainder2 === 5 && remainder3 === 3 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 5 && remainder3 === 3 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 5 && remainder3 === 3 && remainder4 === 3) {\n    roman = 'cde';\n  } else if (remainder2 === 6 && remainder3 === 1 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 6 && remainder3 === 1 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 6 && remainder3 === 2 && remainder4 === 1) {\n    roman = 'cde';\n  } else if (remainder2 === 6 && remainder3 === 2 && remainder4 === 2) {\n    roman = 'ix';\n  } else if (remainder2 === 6 && remainder3 === 3 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 6 && remainder3 === 3 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 6 && remainder3 === 3 && remainder4 === 3) {\n    roman = 'cde';\n  } else if (remainder2 === 7 && remainder3 === 1 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 7 && remainder3 === 1 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 7 && remainder3 === 2 && remainder4 === 1) {\n    roman = 'cde';\n  } else if (remainder2 === 7 && remainder3 === 2 && remainder4 === 2) {\n    roman = 'ix';\n  } else if (remainder2 === 7 && remainder3 === 3 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 7 && remainder3 === 3 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 7 && remainder3 === 3 && remainder4 === 3) {\n    roman = 'cde';\n  } else if (remainder2 === 8 && remainder3 === 1 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 8 && remainder3 === 1 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 8 && remainder3 === 2 && remainder4 === 1) {\n    roman = 'cde';\n  } else if (remainder2 === 8 && remainder3 === 2 && remainder4 === 2) {\n    roman = 'ix';\n  } else if (remainder2 === 8 && remainder3 === 3 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === 8 && remainder3 === 3 && remainder4 === 2) {\n    roman = 'cli';\n  } else if (remainder2 === 8 && remainder3 === 3 && remainder4 === 3) {\n    roman = 'cde';\n  } else if (remainder2 === 9 && remainder3 === 1 && remainder4 === 1) {\n    roman = 'xix';\n  } else if (remainder2 === "}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the four sides of a rectangle. Return true if the four\n  sides form a square, false otherwise.\n  A square is a rectangle in which all four sides are equal.\n  Example:\n  square_rectangle(3, 4, 5) == true\n  square_rectangle(1, 2, 3) == false\n  */\nconst square_rectangle = (a, b, c) => {\n  const ac = a + c;\n  const bc = b + c;\n  const acb = ac + bc;\n  return acb >= 0;\n};\n\n/*\n Given the lengths of the two sides of a rectangle. Return true if the two\n  sides form a right-angled rectangle, false otherwise.\n  A right-angled rectangle is a rectangle in which one side is right angle or\n  90 degree.\n  Example:\n  right_angle_rectangle(3, 4, 5) == true\n  right_angle_rectangle(1, 2, 3) == false\n  */\nconst right_angle_rectangle = (a, b) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the two sides of a circle. Return true if the two\n  sides form a circle, false otherwise.\n  A circle is a circle in which all two sides are equal.\n  Example:\n  circle(3, 4, 5) == true\n  circle(1, 2, 3) == false\n  */\nconst circle = (a, b) => {\n  const ac = a + c;\n  const bc = b + c;\n  const acb = ac + bc;\n  return acb >= 0;\n};\n\n/*\n Given the lengths of the three sides of a circle. Return true if the three\n  sides form a circle, false otherwise.\n  A circle is a circle in which all three sides are equal.\n  Example:\n  circle(3, 4, 5) == true\n  circle(1, 2, 3) == false\n  */\nconst circle = (a, b, c) => {\n  const ac = a + c;\n  const bc = b + c;\n  const acb = ac + bc;\n  return acb >= 0;\n};\n\n/*\n Given the lengths of the four sides of a circle. Return true if the four\n  sides form a circle, false otherwise.\n  A circle is a circle in which all four sides are equal.\n  Example:\n  circle(3, 4, 5) == true\n  circle(1, 2, 3) == false\n  */\nconst circle = (a, b, c) => {\n  const ac = a + c;\n  const bc = b + c;\n  const acb = ac + bc;\n  return acb >= 0;\n};\n\n/*\n Given the lengths of the two sides of a triangle. Return true if the two\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the two sides of a rectangle. Return true if the two\n  sides form a right-angled rectangle, false otherwise.\n  A right-angled rectangle is a rectangle in which one side is right angle or\n  90 degree.\n  Example:\n  right_angle_rectangle(3, 4, 5) == true\n  right_angle_rectangle(1, 2, 3) == false\n  */\nconst right_angle_rectangle = (a, b) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the two sides of a circle. Return true if the two\n  sides form a circle, false otherwise.\n  A circle is a circle in which all two sides are equal.\n  Example:\n  circle(3, 4, 5) == true\n  circle(1, 2, 3) == false\n  */\nconst circle = (a, b) => {\n  const ac = a + c;\n  const bc = b + c;\n  const acb = ac + bc;\n  return acb >= 0;\n};\n\n/*\n Given the lengths of the three sides of a circle. Return true if the three\n  sides form a circle, false otherwise.\n  A circle is a circle in which all three sides are equal.\n  Example:\n  circle(3, 4, 5) == true\n  circle(1, 2, 3) == false\n  */\nconst circle = (a, b, c) => {\n  const ac = a + c;\n  const bc = b + c;\n  const acb = ac + bc;\n  return acb >= 0;\n};\n\n/*\n Given the lengths of the four sides of a circle. Return true if the four\n  sides form a circle, false otherwise.\n  A circle is a circle in which all four sides are equal.\n  Example:\n  circle(3, 4, 5) == true\n  circle(1, 2, 3) == false\n  */\nconst circle = (a, b, c) => {\n  const ac = a + c;\n  const bc = b + c;\n  const acb = ac + bc;\n  return acb >= 0;\n};\n\n/*\n Given the lengths of the two sides of a triangle. Return true if the two\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the two sides of a rectangle. Return true if the two\n  sides form a right-angled rectangle, false otherwise.\n  A right-angled rectangle is a rectangle in which one side is right angle or\n  90 degree.\n  Example:\n  right_angle_rectangle(3, 4, 5) == true\n  right_angle_rectangle(1, 2, 3) == false\n  */\nconst right_angle_rectangle = (a, b) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the two sides of a circle. Return true if the two\n  sides form a circle, false otherwise.\n  A circle is a circle in which all two sides are equal.\n  Example:\n  circle(3, 4, 5) == true\n  circle(1, 2, 3) == false\n  */\nconst circle = (a, b) => {\n  const ac = a + c;\n  const bc = b + c;\n  const acb = ac + bc;\n  return acb >= 0;\n};\n\n/*\n Given the lengths of the three sides of a circle. Return true if the three\n  sides form a circle, false otherwise.\n  A circle is a circle in which all three sides are equal.\n  Example:\n  circle(3, 4, 5) == true\n  circle(1, 2, 3) == false\n  */\nconst "}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let maxWordChar = 0;\n  let maxCharChar = 0;\n  let maxCharWord = \"\";\n  let maxWordCharWord = \"\";\n  let maxWordCharWordChar = \"\";\n  let maxWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordChar = \"\";\n  let maxWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordChar = \"\";\n  let maxWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need));\n  const carrotLeft = carrots - remaining;\n  const carrotEaten = carrots - need;\n  const carrotRemaining = carrots - remaining;\n  const carrotRemainingEaten = carrotRemaining - carrotEaten;\n  const carrotRemainingEatenRemaining = carrotRemainingEaten - remaining;\n  const carrotRemainingEatenRemainingEaten = carrotRemainingEatenRemaining - carrotRemainingEatenRemaining;\n  const carrotRemainingEatenRemainingEatenRemaining = carrotRemainingEatenRemainingEaten - carrotRemainingEatenRemaining;\n  const carrotRemainingEatenRemainingEatenRemainingEaten = carrotRemainingEatenRemainingEatenRemainingEaten - remaining;\n  const carrotRemainingEatenRemainingEatenRemainingEatenRemaining = carrotRemainingEatenRemainingEatenRemainingEaten - carrotRemainingEatenRemainingEatenRemaining;\n  const carrotRemainingEatenRemainingEatenRemainingEatenRemainingEaten = carrotRemainingEatenRemainingEatenRemainingEatenRemainingEaten - remaining;\n  const carrotRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEaten = carrotRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEaten - carrotRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemaining;\n  const carrotRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEaten = carrotRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEaten - remaining;\n  const carrotRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEaten = carrotRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEat"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  let result = 0;\n  let operator_count = 0;\n  let operands_count = 0;\n  \n  for(let i = 0; i < operator.length; i++) {\n    operator_count += operator[i];\n  }\n  \n  for(let i = 0; i < operand.length; i++) {\n    operands_count += operand[i];\n  }\n  \n  if(operator_count === 1 && operands_count === 1) {\n    result = operand[0];\n  }\n  else if(operator_count === 1 && operands_count === 0) {\n    result = operator[0];\n  }\n  else if(operator_count > 1 && operands_count === 1) {\n    result = operand[0] * operator[0];\n  }\n  else if(operator_count > 1 && operands_count === 0) {\n    result = operator[0] * operand[0];\n  }\n  else if(operator_count > 1 && operands_count > 1) {\n    result = operand[0] * operator[0] * operand[1];\n  }\n  else if(operator_count > 1 && operands_count === 1) {\n    result = operand[0] * operator[0] * operand[1];\n  }\n  else if(operator_count > 1 && operands_count > 1) {\n    result = operand[0] * operator[0] * operand[1] * operand[2];\n  }\n  else if(operator_count > 1 && operands_count === 2) {\n    result = operand[0] * operator[0] * operand[1] * operand[2];\n  }\n  else if(operator_count > 1 && operands_count === 3) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3];\n  }\n  else if(operator_count > 1 && operands_count === 4) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4];\n  }\n  else if(operator_count > 1 && operands_count === 5) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5];\n  }\n  else if(operator_count > 1 && operands_count === 6) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6];\n  }\n  else if(operator_count > 1 && operands_count === 7) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7];\n  }\n  else if(operator_count > 1 && operands_count === 8) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8];\n  }\n  else if(operator_count > 1 && operands_count === 9) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8] * operand[9];\n  }\n  else if(operator_count > 1 && operands_count === 10) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8] * operand[9] * operand[10];\n  }\n  else if(operator_count > 1 && operands_count === 11) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8] * operand[9] * operand[10] * operand[11];\n  }\n  else if(operator_count > 1 && operands_count === 12) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8] * operand[9] * operand[10] * operand[11] * operand[12];\n  }\n  else if(operator_count > 1 && operands_count === 13) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8] * operand[9] * operand[10] * operand[11] * operand[12] * operand[13];\n  }\n  else if(operator_count > 1 && operands_count === 14) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8] * operand[9] * operand[10] * operand[11] * operand[12] * operand[13] * operand[14];\n  }\n  else if(operator_count > 1 && operands_count === 15) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8] * operand[9] * operand[10] * operand[11] * operand[12] * operand[13] * operand[14] * operand[15];\n  }\n  else if(operator_count > 1 && operands_count === 16) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8] * operand[9] * operand[10] * operand[11] * operand[12] * operand[13] * operand[14] * operand[15] * operand[16];\n  }\n  else if(operator_count > 1 && operands_count === 17) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8] * operand[9] * operand[10] * operand[11] * operand[12] * operand[13] * operand[14] * operand[15] * operand[16] * operand[17];\n  }\n  else if(operator_count > 1 && operands_count === 18) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8] * operand[9] * operand[10] * operand[11] * operand[12] * operand[13] * operand[14] * operand[15] * operand[16] * operand[17] * operand[18];\n  }\n  else if(operator_count > 1 && operands_count === 19) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8] * operand[9] * operand[10] * operand[11] * operand[12] * operand[13] * operand[14] * operand[15] * operand[16] * operand[17] * operand[18] * operand[19];\n  }\n  else if(operator_count > 1 && operands_count === 20) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8] * operand[9] * operand[10] * operand[11] * operand[12] * operand[13] * operand[14] * operand[15] * operand[16] * operand[17] * operand[18] * operand[19] * operand[20];\n  }\n  else if(operator_count > 1 && operands_count === 21) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4] * operand[5] * operand[6] * operand[7] * operand[8] * operand[9] * operand[10] * operand[11] * operand[12] * operand[13] * operand[14] * operand[15] * operand[16] * operand[17] * operand[18] * operand[19] * operand[20] * operand[21];\n  }\n  else if(operator_count > 1 && operands_count === 22) {\n    result = operand[0] * operator[0] * operand[1] * operand[2] * operand[3] * operand[4"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  let len = s.length;\n  let i;\n  let j;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp287;\n  let temp288;\n  let temp289;\n  let temp"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha512').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_224 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha3_224').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_224('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_256 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha3_256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_384 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha3_384').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_384('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_512 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha3_512').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_224_224 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha3_224_224').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_224_224('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_224_256 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha3_224_256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_224_256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_224_384 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha3_224_384').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_224_384('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_224_512 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha3_224_512').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_256_256 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha3_256_256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_256_256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_256_384 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha3_256_384').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha3_256_384('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_sha3_256_512 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha3_256_512"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  let result = [];\n  let i = a;\n  let j = 0;\n  let k = 0;\n  while (i < b) {\n    if (i % 2 === 0) {\n      result.push(j);\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * ASCII code.\n */\nconst ascii_encode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * ASCII code except the character at index i.\n */\nconst ascii_encode_except = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    if (i!== str.length - 1) {\n      result += String.fromCharCode(str.charCodeAt(i));\n    } else {\n      result += str[i];\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * ASCII code except the character at index i, except the character at index\n * i + 1.\n */\nconst ascii_encode_except_1 = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    if (i!== str.length - 1 && i!== str.length - 2) {\n      result += String.fromCharCode(str.charCodeAt(i));\n    } else {\n      result += str[i];\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * ASCII code except the character at index i, except the character at index\n * i + 1, except the character at index i + 2.\n */\nconst ascii_encode_except_2 = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    if (i!== str.length - 1 && i!== str.length - 2 &&\n        i!== str.length - 3) {\n      result += String.fromCharCode(str.charCodeAt(i));\n    } else {\n      result += str[i];\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * ASCII code except the character at index i, except the character at index\n * i + 1, except the character at index i + 2, except the character at index\n * i + 3, except the character at index i + 4, except the character at index\n * i + 5, except the character at index i + 6, except the character at index\n * i + 7, except the character at index i + 8, except the character at index\n * i + 9, except the character at index i + 10, except the character at index\n * i + 11, except the character at index i + 12, except the character at index\n * i + 13, except the character at index i + 14, except the character at index\n * i + 15, except the character at index i + 16, except the character at index\n * i + 17, except the character at index i + 18, except the character at index\n * i + 19, except the character at index i + 20, except the character at index\n * i + 21, except the character at index i + 22, except the character at index\n * i + 23, except the character at index i + 24, except the character at index\n * i + 25, except the character at index i + 26, except the character at index\n * i + 27, except the character at index i + 28, except the character at index\n * i + 29, except the character at index i + 30, except the character at index\n * i + 31, except the character at index i + 32, except the character at index\n * i + 33, except the character at index i + 34, except the character at index\n * i + 35, except the character at index i + 36, except the character at index\n * i + 37, except the character at index i + 38, except the character at index\n * i + 39, except the character at index i + 40, except the character at index\n * i + 41, except the character at index i + 42, except the character at index\n * i + 43, except the character at index i + 44, except the character at index\n * i + 45, except the character at index i + 46, except the character at index\n * i + 47, except the character at index i + 48, except the character at index\n * i + 49, except the character at index i + 50, except the character at index\n * i + 51, except the character at index i + 52, except the character at index\n * i + 53, except the character at index i + 54, except the character at index\n * i + 55, except the character at index i + 56, except the character at index\n * i + 57, except the character at index i + 58, except the character at index\n * i + 59, except the character at index i + 60, except the character at index\n * i + 61, except the character at index i + 62, except the character at index\n * i + 63, except the character at index i + 64, except the character at index\n * i + 65, except the character at index i + 66, except the character at index\n * i + 67, except the character at index i + 68, except the character at index\n * i + 69, except the character at index i + 70, except the character at index\n * i + 71, except the character at index i + 72, except the character at index\n * i + 73, except the character at index i + 74, except the character at index\n * i + 75, except the character at index i + 76, except the character at index\n * i + 77, except the character at index i + 78, except the character at index\n * i + 79, except the character at index i + 80, except the character at index\n * i + 81, except the character at index i + 82, except the character at index\n * i + 83, except the character at index i + 84, except the character at index\n * i + 85, except the character at index i + 86, except the character at index\n * i + 87, except the character at index i + 88, except the character at index\n * i + 89, except the character at index i + 90, except the character at index\n * i + 91, except the character at index i + 92, except the character at index\n * i + 93, except the character at index i + 94, except the character at index\n * i + 95, except the character at index i + 96, except the character at index\n * i + 97, except the character at index i + 98, except the character at index\n * i + 99, except the character at index i + 100, except the character at index\n * i + 101, except the character at index i + 102, except the character at index\n * i + 103, except the character at index i + 104, except the character at index\n * i + 105, except the character at index i + 106, except the character at index\n * i + 107, except the character at index i + 108, except the character at index\n * i + 109, except the character at index i + 110, except the character at index\n * i + 111, except the character at index i + 112, except the character at index\n * i + 113, except the character at index i + 114, except the character at index\n * i + 115, except the character at index i + 116, except the character at index\n * i + 117, except the character at index i + 118, except the character at index\n * i + 119, except the character at index i + 120, except the character at index\n * i + 121, except the character at index i + 122, except the character at index\n * i + 123, except the character at index i + 124, except the "}
