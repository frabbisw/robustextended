{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  const nums = numbers.map(n => parseFloat(n))\n  const diffs = nums.map(n => Math.abs(n - nums[0]))\n  const diffsSum = diffs.reduce((a, b) => a + b, 0)\n  return diffsSum <= threshold\n}\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * closer to each other than given threshold.\n * >>> hasClosestElements([1.0, 2.0, 3.0], 0.5)\n * true\n * >>> hasClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * false\n */\nconst hasClosestElements = (numbers, threshold) => {\n  const nums = numbers.map(n => parseFloat(n))\n  const diffs = nums.map(n => Math.abs(n - nums[0]))\n  const diffsSum = diffs.reduce((a, b) => a + b, 0)\n  return diffsSum <= threshold\n}\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * closer to each other than given threshold.\n * >>> hasClosestElements([1.0, 2.0, 3.0], 0.5)\n * true\n * >>> hasClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * false\n */\nconst hasClosestElementsOrEqual = (numbers, threshold) => {\n  const nums = numbers.map(n => parseFloat(n))\n  const diffs = nums.map(n => Math.abs(n - nums[0]))\n  const diffsSum = diffs.reduce((a, b) => a + b, 0)\n  return diffsSum <= threshold\n}\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * closer to each other than given threshold.\n * >>> hasClosestElements([1.0, 2.0, 3.0], 0.5)\n * true\n * >>> hasClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * false\n */\nconst hasClosestElementsOrEqualOrZero = (numbers, threshold) => {\n  const nums = numbers.map(n => parseFloat(n))\n  const diffs = nums.map(n => Math.abs(n - nums[0]))\n  const diffsSum = diffs.reduce((a, b) => a + b, 0)\n  return diffsSum <= threshold\n}\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * closer to each other than given threshold.\n * >>> hasClosestElements([1.0, 2.0, 3.0], 0.5)\n * true\n * >>> hasClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * false\n */\nconst hasClosestElementsOrEqualOrZero = (numbers, threshold) => {\n  const nums = numbers.map(n => parseFloat(n))\n  const diffs = nums.map(n => Math.abs(n - nums[0]))\n  const diffsSum = diffs.reduce((a, b) => a + b, 0)\n  return diffsSum <= threshold\n}\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * closer to each other than given threshold.\n * >>> hasClosestElements([1.0, 2.0, 3.0], 0.5)\n * true\n * >>> hasClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * false\n */\nconst hasClosestElementsOrEqualOrZeroOrZero = (numbers, threshold) => {\n  const nums = numbers.map(n => parseFloat(n))\n  const diffs = nums.map(n => Math.abs(n - nums[0]))\n  const diffsSum = diffs.reduce((a, b) => a + b, 0)\n  return diffsSum <= threshold\n}\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * closer to each other than given threshold.\n * >>> hasClosestElements([1.0, 2.0, 3.0], 0.5)\n * true\n * >>> hasClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * false\n */\nconst hasClosestElementsOrEqualOrZeroOrZero = (numbers, threshold) => {\n  const nums = numbers.map(n => parseFloat(n))\n  const diffs = nums.map(n => Math.abs(n - nums[0]))\n  const diffsSum = diffs.reduce((a, b) => a + b, 0)\n  return diffsSum <= threshold\n}\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * closer to each other than given threshold.\n * >>> hasClosestElements([1.0, 2.0, 3.0], 0.5)\n * true\n * >>> hasClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * false\n */\nconst hasClosestElementsOrEqualOrZeroOrZero = (numbers, threshold) => {\n  const nums = numbers.map(n => parseFloat(n))\n  const diffs = nums.map(n => Math.abs(n - nums[0]))\n  const diffsSum = diffs.reduce((a, b) => a + b, 0)\n  return diffsSum <= threshold\n}\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * closer to each other than given threshold.\n * >>> hasClosestElements([1.0, 2.0, 3.0], 0.5)\n * true\n * >>> hasClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * false\n */\nconst hasClosestElementsOrEqualOrZeroOrZeroOrZero = (numbers, threshold) => {\n  const nums = numbers.map(n => parseFloat(n))\n  const diffs = nums.map(n => Math.abs(n - nums[0]))\n  const diffsSum = diffs.reduce((a, b) => a + b, 0)\n  return diffsSum <= threshold\n}\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * closer to each other than given threshold.\n * >>> hasClosestElements([1.0, 2.0, 3.0], 0.5)\n * true\n * >>> hasClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * false\n */\nconst hasClosestElementsOrEqualOrZeroOrZeroOrZero = (numbers, threshold) => {\n  const nums = numbers.map(n => parseFloat(n))\n  const diffs = nums.map(n => Math.abs(n - nums[0]))\n  const diffsSum = diffs.reduce((a, b) => a + b, 0)\n  return diffsSum <= threshold\n}\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * closer to each other than given threshold.\n * >>> hasClosestElements([1.0, 2.0, 3.0], 0.5)\n * true\n * >>> hasClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * false\n */\nconst hasClosestElementsOrEqualOrZeroOrZeroOrZero = (numbers, threshold) => {\n  const nums = numbers.map(n => parseFloat(n))\n  const diffs = nums.map(n => Math.abs(n - nums[0]))\n  const diffsSum = diffs.reduce((a, b) => a + b, 0)\n  return diffsSum <= threshold\n}\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * closer to each other than given threshold.\n * >>> hasClosestElements([1.0, 2.0, 3.0], 0.5)\n * true\n * >>> hasClosest", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  const paren_groups = [];\n  let paren_count = 0;\n  let paren_open = false;\n  let paren_close = false;\n  let paren_paren_count = 0;\n  let paren_paren_open = false;\n  let paren_paren_close = false;\n  let paren_paren_paren_count = 0;\n  let paren_paren_paren_open = false;\n  let paren_paren_paren_close = false;\n  let paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_close = false;\n  let paren_paren_paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let reversedString = '';\n  let prefix = '';\n  let suffix = '';\n\n  /* Find longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      reversedString += string[i];\n    } else {\n      prefix += string[i];\n    }\n  }\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      suffix += string[i];\n    } else {\n      reversedString += string[i];\n    }\n  }\n\n  /* Find the longest palindrome that begins with a supplied string */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      longestPalindrome += string[i];\n    } else {\n      longestPalindrome += reversedString;\n    }\n  }\n\n  return longestPalindrome;\n}\n\n/* Test if given string is palindrome */\nconst isPalindrome = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(string));\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome2 = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(makePalindrome(string)));\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome3 = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(makePalindrome(makePalindrome(string))));\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome4 = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(string))));\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome5 = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(string))));\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome6 = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(string))));\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome7 = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(string))));\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome8 = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(string))));\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome9 = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(string))));\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome10 = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(string))));\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome11 = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(string))));\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome12 = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(string))));\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome13 = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(string))));\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome14 = (string) => {\n  return isPwlindrome(string) === isPwlindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makePalindrome(makeP", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const stones = levels[level].length;\n    levels[level].push(stones);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stone", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  let words = s.split(\" \");\n  let wordArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordArray.push(words[i]);\n  }\n  return wordArray;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  let words = s.split(\" \");\n  let wordArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordArray.push(words[i]);\n  }\n  return wordArray;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  let words = s.split(\" \");\n  let wordArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordArray.push(words[i]);\n  }\n  return wordArray;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  let words = s.split(\" \");\n  let wordArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordArray.push(words[i]);\n  }\n  return wordArray;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  let words = s.split(\" \");\n  let wordArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordArray.push(words[i]);\n  }\n  return wordArray;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  let words = s.split(\" \");\n  let wordArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordArray.push(words[i]);\n  }\n  return wordArray;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  let words = s.split(\" \");\n  let wordArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordArray.push(words[i]);\n  }\n  return wordArray;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  let words = s.split(\" \");\n  let wordArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordArray.push(words[i]);\n  }\n  return wordArray;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  let words = s.split(\" \");\n  let wordArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordArray.push(words[i]);\n  }\n  return wordArray;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  let words = s.split(\" \");\n  let wordArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordArray.push(words[i]);\n  }\n  return wordArray;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  let words = s.split(\" \");\n  let wordArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordArray.push(words[i]);\n  }\n  return wordArray;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  let result = 0;\n  let temp;\n  \n  do {\n    temp = x % y;\n    x = y;\n    y = temp;\n  } while (x!== 0);\n  \n  do {\n    temp = y % x;\n    y = x;\n    x = temp;\n  } while (y!== 0);\n  \n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  let result = 0;\n  let temp;\n  \n  do {\n    temp = x % y;\n    x = y;\n    y = temp;\n  } while (x!== 0);\n  \n  do {\n    temp = y % x;\n    y = x;\n    x = temp;\n  } while (y!== 0);\n  \n  return y;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  let result = 0;\n  let temp;\n  \n  do {\n    temp = x % y;\n    x = y;\n    y = temp;\n  } while (x!== 0);\n  \n  do {\n    temp = y % x;\n    y = x;\n    x = temp;\n  } while (y!== 0);\n  \n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  let result = 0;\n  let temp;\n  \n  do {\n    temp = x % y;\n    x = y;\n    y = temp;\n  } while (x!== 0);\n  \n  do {\n    temp = y % x;\n    y = x;\n    x = temp;\n  } while (y!== 0);\n  \n  return y;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  let result = 0;\n  let temp;\n  \n  do {\n    temp = x % y;\n    x = y;\n    y = temp;\n  } while (x!== 0);\n  \n  do {\n    temp = y % x;\n    y = x;\n    x = temp;\n  } while (y!== 0);\n  \n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  let result = 0;\n  let temp;\n  \n  do {\n    temp = x % y;\n    x = y;\n    y = temp;\n  } while (x!== 0);\n  \n  do {\n    temp = y % x;\n    y = x;\n    x = temp;\n  } while (y!== 0);\n  \n  return y;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  let result = 0;\n  let temp;\n  \n  do {\n    temp = x % y;\n    x = y;\n    y = temp;\n  } while (x!== 0);\n  \n  do {\n    temp = y % x;\n    y = x;\n    x = temp;\n  } while (y!== 0);\n  \n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  let result = 0;\n  let temp;\n  \n  do {\n    temp = x % y;\n    x = y;\n    y = temp;\n  } while (x!== 0);\n  \n  do {\n    temp = y % x;\n    y = x;\n    x = temp;\n  } while (y!== 0);\n  \n  return y;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  let result = 0;\n  let temp;\n  \n  do {\n    temp = x % y;\n    x = y;\n    y = temp;\n  } while (x!== 0);\n  \n  do {\n    temp = y % x;\n    y = x;\n    x = temp;\n  } while (y!== 0);\n  \n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  let result = 0;\n  let temp;\n  \n  do {\n    temp = x % y;\n    x = y;\n    y = temp;\n  } while (x!== 0);\n  \n  do {\n    temp = y % x;\n    y = x;\n    x = temp;\n  } while (y!== 0);\n  \n  return y;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  let result = 0;\n  let temp;\n  \n  do {\n    temp = x % y;\n    x = y;\n    y = temp;\n  } while (x!== 0);\n  \n  do {\n    temp = y % x;\n    y = x;\n    x = temp;\n  } while (y!== 0);\n  \n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let remainder = 0;\n  let remainder2 = 0;\n  let remainder3 = 0;\n  let remainder4 = 0;\n  let remainder5 = 0;\n  let remainder6 = 0;\n  let remainder7 = 0;\n  let remainder8 = 0;\n  let remainder9 = 0;\n  let remainder10 = 0;\n  let remainder11 = 0;\n  let remainder12 = 0;\n  let remainder13 = 0;\n  let remainder14 = 0;\n  let remainder15 = 0;\n  let remainder16 = 0;\n  let remainder17 = 0;\n  let remainder18 = 0;\n  let remainder19 = 0;\n  let remainder20 = 0;\n  let remainder21 = 0;\n  let remainder22 = 0;\n  let remainder23 = 0;\n  let remainder24 = 0;\n  let remainder25 = 0;\n  let remainder26 = 0;\n  let remainder27 = 0;\n  let remainder28 = 0;\n  let remainder29 = 0;\n  let remainder30 = 0;\n  let remainder31 = 0;\n  let remainder32 = 0;\n  let remainder33 = 0;\n  let remainder34 = 0;\n  let remainder35 = 0;\n  let remainder36 = 0;\n  let remainder37 = 0;\n  let remainder38 = 0;\n  let remainder39 = 0;\n  let remainder40 = 0;\n  let remainder41 = 0;\n  let remainder42 = 0;\n  let remainder43 = 0;\n  let remainder44 = 0;\n  let remainder45 = 0;\n  let remainder46 = 0;\n  let remainder47 = 0;\n  let remainder48 = 0;\n  let remainder49 = 0;\n  let remainder50 = 0;\n  let remainder51 = 0;\n  let remainder52 = 0;\n  let remainder53 = 0;\n  let remainder54 = 0;\n  let remainder55 = 0;\n  let remainder56 = 0;\n  let remainder57 = 0;\n  let remainder58 = 0;\n  let remainder59 = 0;\n  let remainder60 = 0;\n  let remainder61 = 0;\n  let remainder62 = 0;\n  let remainder63 = 0;\n  let remainder64 = 0;\n  let remainder65 = 0;\n  let remainder66 = 0;\n  let remainder67 = 0;\n  let remainder68 = 0;\n  let remainder69 = 0;\n  let remainder70 = 0;\n  let remainder71 = 0;\n  let remainder72 = 0;\n  let remainder73 = 0;\n  let remainder74 = 0;\n  let remainder75 = 0;\n  let remainder76 = 0;\n  let remainder77 = 0;\n  let remainder78 = 0;\n  let remainder79 = 0;\n  let remainder80 = 0;\n  let remainder81 = 0;\n  let remainder82 = 0;\n  let remainder83 = 0;\n  let remainder84 = 0;\n  let remainder85 = 0;\n  let remainder86 = 0;\n  let remainder87 = 0;\n  let remainder88 = 0;\n  let remainder89 = 0;\n  let remainder90 = 0;\n  let remainder91 = 0;\n  let remainder92 = 0;\n  let remainder93 = 0;\n  let remainder94 = 0;\n  let remainder95 = 0;\n  let remainder96 = 0;\n  let remainder97 = 0;\n  let remainder98 = 0;\n  let remainder99 = 0;\n  let remainder100 = 0;\n  let remainder101 = 0;\n  let remainder102 = 0;\n  let remainder103 = 0;\n  let remainder104 = 0;\n  let remainder105 = 0;\n  let remainder106 = 0;\n  let remainder107 = 0;\n  let remainder108 = 0;\n  let remainder109 = 0;\n  let remainder110 = 0;\n  let remainder111 = 0;\n  let remainder112 = 0;\n  let remainder113 = 0;\n  let remainder114 = 0;\n  let remainder115 = 0;\n  let remainder116 = 0;\n  let remainder117 = 0;\n  let remainder118 = 0;\n  let remainder119 = 0;\n  let remainder120 = 0;\n  let remainder121 = 0;\n  let remainder122 = 0;\n  let remainder123 = 0;\n  let remainder124 = 0;\n  let remainder125 = 0;\n  let remainder126 = 0;\n  let remainder127 = 0;\n  let remainder128 = 0;\n  let remainder129 = 0;\n  let remainder130 = 0;\n  let remainder131 = 0;\n  let remainder132 = 0;\n  let remainder133 = 0;\n  let remainder134 = 0;\n  let remainder135 = 0;\n  let remainder136 = 0;\n  let remainder137 = 0;\n  let remainder138 = 0;\n  let remainder139 = 0;\n  let remainder140 = 0;\n  let remainder141 = 0;\n  let remainder142 = 0;\n  let remainder143 = 0;\n  let remainder144 = 0;\n  let remainder145 = 0;\n  let remainder146 = 0;\n  let remainder147 = 0;\n  let remainder148 = 0;\n  let remainder149 = 0;\n  let remainder150 = 0;\n  let remainder151 = 0;\n  let remainder152 = 0;\n  let remainder153 = 0;\n  let remainder154 = 0;\n  let remainder155 = 0;\n  let remainder156 = 0;\n  let remainder157 = 0;\n  let remainder158 = 0;\n  let remainder159 = 0;\n  let remainder160 = 0;\n  let remainder161 = 0;\n  let remainder162 = 0;\n  let remainder163 = 0;\n  let remainder164 = 0;\n  let remainder165 = 0;\n  let remainder166 = 0;\n  let remainder167 = 0;\n  let remainder168 = 0;\n  let remainder169 = 0;\n  let remainder170 = 0;\n  let remainder171 = 0;\n  let remainder172 = 0;\n  let remainder173 = 0;\n  let remainder174 = 0;\n  let remainder175 = 0;\n  let remainder176 = 0;\n  let remainder177 = 0;\n  let remainder178 = 0;\n  let remainder179 = 0;\n  let remainder180 = 0;\n  let remainder181 = 0;\n  let remainder182 = 0;\n  let remainder183 = 0;\n  let remainder184 = 0;\n  let remainder185 = 0;\n  let remainder186 = 0;\n  let remainder187 = 0;\n  let remainder188 = 0;\n  let remainder189 = 0;\n  let remainder190 = 0;\n  let remainder191 = 0;\n  let remainder192 = 0;\n  let remainder193 = 0;\n  let remainder194 = 0;\n  let remainder195 = 0;\n  let remainder196 = 0;\n  let remainder197 = 0;\n  let remainder198 = 0;\n  let remainder199 = 0;\n  let remainder200 = 0;\n  let remainder201 = 0;\n  let remainder202 = 0;\n  let remainder203 = 0;\n  let remainder204 = 0;\n  let remainder205 = 0;\n  let remainder206 = 0;\n  let remainder207 = 0;\n  let remainder208 = 0;\n  let remainder209 = 0;\n  let remainder210 = 0;\n  let remainder211 = 0;\n  let remainder212 = 0;\n  let remainder213 = 0;\n  let remainder214 = 0;\n  let remainder215 = 0;\n  let remainder216 = 0;\n  let remainder217 = 0;\n  let remainder218 = 0;\n  let remainder219 = 0;\n  let remainder220 = 0;\n  let remainder221 = 0;\n  let remainder222 = 0;\n  let remainder223 = 0;\n  let remainder224 = 0;\n  let remainder225 = 0;\n  let remainder226 = 0;\n  let remainder227 = 0;\n  let remainder228 = 0;\n  let remainder229 = 0;\n  let remainder230 = 0;\n  let remainder231 = 0;\n  let remainder232 = 0;\n  let remainder233 = 0;\n  let remainder234 = 0;\n  let remain", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n  let result = []\n  let digit = 0\n  let remainder = 0\n  let remainder2 = 0\n  let remainder3 = 0\n  let remainder4 = 0\n  let remainder5 = 0\n  let remainder6 = 0\n  let remainder7 = 0\n  let remainder8 = 0\n  let remainder9 = 0\n  let remainder10 = 0\n  let remainder11 = 0\n  let remainder12 = 0\n  let remainder13 = 0\n  let remainder14 = 0\n  let remainder15 = 0\n  let remainder16 = 0\n  let remainder17 = 0\n  let remainder18 = 0\n  let remainder19 = 0\n  let remainder20 = 0\n  let remainder21 = 0\n  let remainder22 = 0\n  let remainder23 = 0\n  let remainder24 = 0\n  let remainder25 = 0\n  let remainder26 = 0\n  let remainder27 = 0\n  let remainder28 = 0\n  let remainder29 = 0\n  let remainder30 = 0\n  let remainder31 = 0\n  let remainder32 = 0\n  let remainder33 = 0\n  let remainder34 = 0\n  let remainder35 = 0\n  let remainder36 = 0\n  let remainder37 = 0\n  let remainder38 = 0\n  let remainder39 = 0\n  let remainder40 = 0\n  let remainder41 = 0\n  let remainder42 = 0\n  let remainder43 = 0\n  let remainder44 = 0\n  let remainder45 = 0\n  let remainder46 = 0\n  let remainder47 = 0\n  let remainder48 = 0\n  let remainder49 = 0\n  let remainder50 = 0\n  let remainder51 = 0\n  let remainder52 = 0\n  let remainder53 = 0\n  let remainder54 = 0\n  let remainder55 = 0\n  let remainder56 = 0\n  let remainder57 = 0\n  let remainder58 = 0\n  let remainder59 = 0\n  let remainder60 = 0\n  let remainder61 = 0\n  let remainder62 = 0\n  let remainder63 = 0\n  let remainder64 = 0\n  let remainder65 = 0\n  let remainder66 = 0\n  let remainder67 = 0\n  let remainder68 = 0\n  let remainder69 = 0\n  let remainder70 = 0\n  let remainder71 = 0\n  let remainder72 = 0\n  let remainder73 = 0\n  let remainder74 = 0\n  let remainder75 = 0\n  let remainder76 = 0\n  let remainder77 = 0\n  let remainder78 = 0\n  let remainder79 = 0\n  let remainder80 = 0\n  let remainder81 = 0\n  let remainder82 = 0\n  let remainder83 = 0\n  let remainder84 = 0\n  let remainder85 = 0\n  let remainder86 = 0\n  let remainder87 = 0\n  let remainder88 = 0\n  let remainder89 = 0\n  let remainder90 = 0\n  let remainder91 = 0\n  let remainder92 = 0\n  let remainder93 = 0\n  let remainder94 = 0\n  let remainder95 = 0\n  let remainder96 = 0\n  let remainder97 = 0\n  let remainder98 = 0\n  let remainder99 = 0\n  let remainder100 = 0\n  let remainder101 = 0\n  let remainder102 = 0\n  let remainder103 = 0\n  let remainder104 = 0\n  let remainder105 = 0\n  let remainder106 = 0\n  let remainder107 = 0\n  let remainder108 = 0\n  let remainder109 = 0\n  let remainder110 = 0\n  let remainder111 = 0\n  let remainder112 = 0\n  let remainder113 = 0\n  let remainder114 = 0\n  let remainder115 = 0\n  let remainder116 = 0\n  let remainder117 = 0\n  let remainder118 = 0\n  let remainder119 = 0\n  let remainder120 = 0\n  let remainder121 = 0\n  let remainder122 = 0\n  let remainder123 = 0\n  let remainder124 = 0\n  let remainder125 = 0\n  let remainder126 = 0\n  let remainder127 = 0\n  let remainder128 = 0\n  let remainder129 = 0\n  let remainder130 = 0\n  let remainder131 = 0\n  let remainder132 = 0\n  let remainder133 = 0\n  let remainder134 = 0\n  let remainder135 = 0\n  let remainder136 = 0\n  let remainder137 = 0\n  let remainder138 = 0\n  let remainder139 = 0\n  let remainder140 = 0\n  let remainder141 = 0\n  let remainder142 = 0\n  let remainder143 = 0\n  let remainder144 = 0\n  let remainder145 = 0\n  let remainder146 = 0\n  let remainder147 = 0\n  let remainder148 = 0\n  let remainder149 = 0\n  let remainder150 = 0\n  let remainder151 = 0\n  let remainder152 = 0\n  let remainder153 = 0\n  let remainder154 = 0\n  let remainder155 = 0\n  let remainder156 = 0\n  let remainder157 = 0\n  let remainder158 = 0\n  let remainder159 = 0\n  let remainder160 = 0\n  let remainder161 = 0\n  let remainder162 = 0\n  let remainder163 = 0\n  let remainder164 = 0\n  let remainder165 = 0\n  let remainder166 = 0\n  let remainder167 = 0\n  let remainder168 = 0\n  let remainder169 = 0\n  let remainder170 = 0\n  let remainder171 = 0\n  let remainder172 = 0\n  let remainder173 = 0\n  let remainder174 = 0\n  let remainder175 = 0\n  let remainder176 = 0\n  let remainder177 = 0\n  let remainder178 = 0\n  let remainder179 = 0\n  let remainder180 = 0\n  let remainder181 = 0\n  let remainder182 = 0\n  let remainder183 = 0\n  let remainder184 = 0\n  let remainder185 = 0\n  let remainder186 = 0\n  let remainder187 = 0\n  let remainder188 = 0\n  let remainder189 = 0\n  let remainder190 = 0\n  let remainder191 = 0\n  let remainder192 = 0\n  let remainder193 = 0\n  let remainder194 = 0\n  let remainder195 = 0\n  let remainder196 = 0\n  let remainder197 = 0\n  let remainder198 = 0\n  let remainder199 = 0\n  let remainder200 = 0\n  let remainder201 = 0\n  let remainder202 = 0\n  let remainder203 = 0\n  let remainder204 = 0\n  let remainder205 = 0\n  let remainder206 = 0\n  let remainder207 = 0\n  let remainder208 = 0\n  let remainder209 = 0\n  let remainder210 = 0\n  let remainder211 = 0\n  let remainder212 = 0\n  let remainder213 = 0\n  let remainder214 = 0\n  let remainder215 = 0\n  let remainder216 = 0\n  let remainder217 = 0\n  let remainder218 = 0\n  let remainder219 = 0\n  let remainder220 = 0\n  let remainder221 = 0\n  let remainder222 = 0\n  let remainder223 = 0\n  let remainder224 = 0\n  let remainder225 = 0\n  let remainder226 = 0\n  let remainder227 = 0\n  let remainder228 = 0\n  let remainder229 = 0\n  let remainder230 = 0\n  let remainder231 = 0\n  let remainder232 = 0\n  let remainder233 = 0\n  let remainder234 = 0\n  let remainder235 = 0\n  let remainder236 = 0\n  let remain", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n  let reversed = arr.reverse();\n  let reversedArray = reversed.map((val, index) => val.toString());\n  let sortedArray = reversedArray.sort((a, b) => a - b);\n  let reversedArray2 = sortedArray.map((val, index) => val.toString());\n  let reversedArray3 = reversedArray2.map((val, index) => val.toString());\n  let reversedArray4 = reversedArray3.map((val, index) => val.toString());\n  let reversedArray5 = reversedArray4.map((val, index) => val.toString());\n  let reversedArray6 = reversedArray5.map((val, index) => val.toString());\n  let reversedArray7 = reversedArray6.map((val, index) => val.toString());\n  let reversedArray8 = reversedArray7.map((val, index) => val.toString());\n  let reversedArray9 = reversedArray8.map((val, index) => val.toString());\n  let reversedArray10 = reversedArray9.map((val, index) => val.toString());\n  let reversedArray11 = reversedArray10.map((val, index) => val.toString());\n  let reversedArray12 = reversedArray11.map((val, index) => val.toString());\n  let reversedArray13 = reversedArray12.map((val, index) => val.toString());\n  let reversedArray14 = reversedArray13.map((val, index) => val.toString());\n  let reversedArray15 = reversedArray14.map((val, index) => val.toString());\n  let reversedArray16 = reversedArray15.map((val, index) => val.toString());\n  let reversedArray17 = reversedArray16.map((val, index) => val.toString());\n  let reversedArray18 = reversedArray17.map((val, index) => val.toString());\n  let reversedArray19 = reversedArray18.map((val, index) => val.toString());\n  let reversedArray20 = reversedArray19.map((val, index) => val.toString());\n  let reversedArray21 = reversedArray20.map((val, index) => val.toString());\n  let reversedArray22 = reversedArray21.map((val, index) => val.toString());\n  let reversedArray23 = reversedArray22.map((val, index) => val.toString());\n  let reversedArray24 = reversedArray23.map((val, index) => val.toString());\n  let reversedArray25 = reversedArray24.map((val, index) => val.toString());\n  let reversedArray26 = reversedArray25.map((val, index) => val.toString());\n  let reversedArray27 = reversedArray26.map((val, index) => val.toString());\n  let reversedArray28 = reversedArray27.map((val, index) => val.toString());\n  let reversedArray29 = reversedArray28.map((val, index) => val.toString());\n  let reversedArray30 = reversedArray29.map((val, index) => val.toString());\n  let reversedArray31 = reversedArray30.map((val, index) => val.toString());\n  let reversedArray32 = reversedArray31.map((val, index) => val.toString());\n  let reversedArray33 = reversedArray32.map((val, index) => val.toString());\n  let reversedArray34 = reversedArray33.map((val, index) => val.toString());\n  let reversedArray35 = reversedArray34.map((val, index) => val.toString());\n  let reversedArray36 = reversedArray35.map((val, index) => val.toString());\n  let reversedArray37 = reversedArray36.map((val, index) => val.toString());\n  let reversedArray38 = reversedArray37.map((val, index) => val.toString());\n  let reversedArray39 = reversedArray38.map((val, index) => val.toString());\n  let reversedArray40 = reversedArray39.map((val, index) => val.toString());\n  let reversedArray41 = reversedArray40.map((val, index) => val.toString());\n  let reversedArray42 = reversedArray41.map((val, index) => val.toString());\n  let reversedArray43 = reversedArray42.map((val, index) => val.toString());\n  let reversedArray44 = reversedArray43.map((val, index) => val.toString());\n  let reversedArray45 = reversedArray44.map((val, index) => val.toString());\n  let reversedArray46 = reversedArray45.map((val, index) => val.toString());\n  let reversedArray47 = reversedArray46.map((val, index) => val.toString());\n  let reversedArray48 = reversedArray47.map((val, index) => val.toString());\n  let reversedArray49 = reversedArray48.map((val, index) => val.toString());\n  let reversedArray50 = reversedArray49.map((val, index) => val.toString());\n  let reversedArray51 = reversedArray50.map((val, index) => val.toString());\n  let reversedArray52 = reversedArray51.map((val, index) => val.toString());\n  let reversedArray53 = reversedArray52.map((val, index) => val.toString());\n  let reversedArray54 = reversedArray53.map((val, index) => val.toString());\n  let reversedArray55 = reversedArray54.map((val, index) => val.toString());\n  let reversedArray56 = reversedArray55.map((val, index) => val.toString());\n  let reversedArray57 = reversedArray56.map((val, index) => val.toString());\n  let reversedArray58 = reversedArray57.map((val, index) => val.toString());\n  let reversedArray59 = reversedArray58.map((val, index) => val.toString());\n  let reversedArray60 = reversedArray59.map((val, index) => val.toString());\n  let reversedArray61 = reversedArray60.map((val, index) => val.toString());\n  let reversedArray62 = reversedArray61.map((val, index) => val.toString());\n  let reversedArray63 = reversedArray62.map((val, index) => val.toString());\n  let reversedArray64 = reversedArray63.map((val, index) => val.toString());\n  let reversedArray65 = reversedArray64.map((val, index) => val.toString());\n  let reversedArray66 = reversedArray65.map((val, index) => val.toString());\n  let reversedArray67 = reversedArray66.map((val, index) => val.toString());\n  let reversedArray68 = reversedArray67.map((val, index) => val.toString());\n  let reversedArray69 = reversedArray68.map((val, index) => val.toString());\n  let reversedArray70 = reverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(factorial(i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(gcd(i, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(h(i, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(gcd(i, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(h(i, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(h(i, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(h(i, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(h(i, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(h(i, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(h(i, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 2, 6, 24, 15]\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(h(i, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function q that takes n as a parameter,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  const oddEvenPalindromes = [];\n  let evenPalindrome = 1;\n  let oddPalindrome = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindrome++;\n    } else {\n      oddPalindrome++;\n    }\n    if (evenPalindrome % 2 === 0) {\n      evenEvenPalindromes.push(evenPalindrome);\n      evenPalindrome = 1;\n    } else {\n      oddEvenPalindromes.push(oddPalindrome);\n      oddPalindrome = 1;\n    }\n  }\n  return evenEvenPalindromes;\n};\n\n// Given a positive integer n, return an array that has all possible palindromes that\n// are formed from the given string.\n\n// Example 1:\n\n// Input: 3\n// Output: [ 'aa', 'ab', 'ba', 'bb', 'ca', 'cb', 'cc', 'da', 'db', 'dc', 'dd', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ]\n// Explanation:\n// String palindrome are 'aa', 'ab', 'ba', 'bb', 'ca', 'cb', 'cc', 'da', 'db', 'dc', 'dd', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff'.\n\n// Example 2:\n\n// Input: 12\n// Output: [ 'aa', 'ab', 'ba', 'bb', 'ca', 'cb', 'cc', 'da', 'db', 'dc', 'dd', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff', 'ga', 'gb', 'gc', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gj', 'gk', 'gl', 'gm', 'gn', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu', 'gw', 'gy', 'gz', 'ha', 'hb', 'hc', 'hd', 'he', 'hg', 'hi', 'hj', 'hk', 'hl', 'hm', 'hn', 'ho', 'hp', 'hq', 'hr', 'hs', 'ht', 'hu', 'hv', 'hw', 'hx', 'hy', 'hz' ]\n// Explanation:\n// String palindrome are 'aa', 'ab', 'ba', 'bb', 'ca', 'cb', 'cc', 'da', 'db', 'dc', 'dd', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff', 'ga', 'gb', 'gc', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gj', 'gk', 'gl', 'gm', 'gn', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu', 'gw', 'gy', 'gz', 'ha', 'hb', 'hc', 'hd', 'he', 'hg', 'hi', 'hj', 'hk', 'hl', 'hm', 'hn', 'ho', 'hp', 'hq', 'hr', 'hs', 'ht', 'hu', 'hv', 'hw', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', 'hx', 'hy', 'hz', '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "<|endoftext|>/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrs which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. '-123' has signed digits -1, 2, and 3.\n  >>> coujtStrs([]) == 0\n  >>> coujtStrs([-1, '11', '-11']) == 1\n  >>> coujtStrs([1, '1', '2']) == 3\n  */\nconst coujtStrs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrs2 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. '-123' has signed digits -1, 2, and 3.\n  >>> coujtStrs2([]) == 0\n  >>> coujtStrs2([-1, '11', '-11']) == 1\n  >>> coujtStrs2([1, '1', '2']) == 3\n  */\nconst coujtStrs2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrs3 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. '-123' has signed digits -1, 2, and 3.\n  >>> coujtStrs3([]) == 0\n  >>> coujtStrs3([-1, '11', '-11']) == 1\n  >>> coujtStrs3([1, '1', '2']) == 3\n  */\nconst coujtStrs3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrs4 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. '-123' has signed digits -1, 2, and 3.\n  >>> coujtStrs4([]) == 0\n  >>> coujtStrs4([-1, '11', '-11']) == 1\n  >>> coujtStrs4([1, '1', '2']) == 3\n  */\nconst coujtStrs4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrs5 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. '-123' has signed digits -1, 2, and 3.\n  >>> coujtStrs5([]) == 0\n  >>> coujtStrs5([-1, '11', '-11']) == 1\n  >>> coujtStrs5([1, '1', '2']) == 3\n  */\nconst coujtStrs5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrs6 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. '-123' has signed digits -1, 2, and 3.\n  >>> coujtStrs6([]) == 0\n  >>> coujtStrs6([-1, '11', '-11']) == 1\n  >>> coujtStrs6([1, '1', '2']) == 3\n  */\nconst coujtStrs6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrs7 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. '-123' has signed digits -1, 2, and 3.\n  >>> coujtStrs7([]) == 0\n  >>> coujtStrs7([-1, '11', '-11']) == 1\n  >>> coujtStrs7([1, '1', '2']) == 3\n  */\nconst coujtStrs7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrs8 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. '-123' has signed digits -1, 2, and 3.\n  >>> coujtStrs8([]) == 0\n  >>> coujtStrs8([-1, '11', '-11']) == 1\n  >>> coujtStrs8([1, '1', '2']) == 3\n  */\nconst coujtStrs8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrs9 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. '-123' has signed digits -1, 2, and 3.\n  >>> coujtStrs9([]) == 0\n  >>> coujtStrs9([-1, '11', '-11']) == 1\n  >>> coujtStrs9([1, '1', '2']) == 3\n  */\nconst coujtStrs9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrs10 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n  let arrLength = arr.length;\n  let arrIndex = 0;\n  let arrTemp = [];\n  let arrTempLength = 0;\n  let arrTempIndex = 0;\n  let arrTempTemp = [];\n  let arrTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;\n  let arrTempTempTempLength = 0;\n  let arrTempTempIndex = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/**\n  Convert a string to binary (base 2) representation.\n  >>> str2bin('1010')\n  1010\n  */\nconst str2bin = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(str.charCodeAt(i) & 0xFF);\n  }\n  return result;\n};\n\n/**\n  Convert binary to string (base 2) representation.\n  >>> bin2str(1010)\n  '1010'\n  */\nconst bin2str = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    result += String.fromCharCode(bin.charCodeAt(i) & 0xFF);\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 representation (base 10) representation.\n  >>> bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin2str(bin", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n  let isExcjanged = false;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2 === 0 && lst2[j] % 2 === 0) {\n      isExcjanged = true;\n      i++;\n      j++;\n    } else {\n      isExcjanged = false;\n      i++;\n    }\n  }\n  return isExcjanged;\n};\n\n/*\n  Write a function that takes an array of numbers and a number as input,\n  and returns the number of elements in the array that are evenly divisible\n  by that number.\n  For example:\n  numEvens([1, 2, 3, 4], 2) => 2\n  numEvens([1, 2, 3, 4], 3) => 1\n  numEvens([1, 2, 3, 4], 4) => 0\n  numEvens([1, 2, 3, 4], 5) => 1\n  numEvens([1, 2, 3, 4], 6) => 0\n  numEvens([1, 2, 3, 4], 7) => 0\n  numEvens([1, 2, 3, 4], 8) => 0\n  numEvens([1, 2, 3, 4], 9) => 0\n  numEvens([1, 2, 3, 4], 10) => 0\n  numEvens([1, 2, 3, 4], 11) => 0\n  numEvens([1, 2, 3, 4], 12) => 0\n  numEvens([1, 2, 3, 4], 13) => 0\n  numEvens([1, 2, 3, 4], 14) => 0\n  numEvens([1, 2, 3, 4], 15) => 0\n  numEvens([1, 2, 3, 4], 16) => 0\n  numEvens([1, 2, 3, 4], 17) => 0\n  numEvens([1, 2, 3, 4], 18) => 0\n  numEvens([1, 2, 3, 4], 19) => 0\n  numEvens([1, 2, 3, 4], 20) => 0\n  numEvens([1, 2, 3, 4], 21) => 0\n  numEvens([1, 2, 3, 4], 22) => 0\n  numEvens([1, 2, 3, 4], 23) => 0\n  numEvens([1, 2, 3, 4], 24) => 0\n  numEvens([1, 2, 3, 4], 25) => 0\n  numEvens([1, 2, 3, 4], 26) => 0\n  numEvens([1, 2, 3, 4], 27) => 0\n  numEvens([1, 2, 3, 4], 28) => 0\n  numEvens([1, 2, 3, 4], 29) => 0\n  numEvens([1, 2, 3, 4], 30) => 0\n  numEvens([1, 2, 3, 4], 31) => 0\n  numEvens([1, 2, 3, 4], 32) => 0\n  numEvens([1, 2, 3, 4], 33) => 0\n  numEvens([1, 2, 3, 4], 34) => 0\n  numEvens([1, 2, 3, 4], 35) => 0\n  numEvens([1, 2, 3, 4], 36) => 0\n  numEvens([1, 2, 3, 4], 37) => 0\n  numEvens([1, 2, 3, 4], 38) => 0\n  numEvens([1, 2, 3, 4], 39) => 0\n  numEvens([1, 2, 3, 4], 40) => 0\n  numEvens([1, 2, 3, 4], 41) => 0\n  numEvens([1, 2, 3, 4], 42) => 0\n  numEvens([1, 2, 3, 4], 43) => 0\n  numEvens([1, 2, 3, 4], 44) => 0\n  numEvens([1, 2, 3, 4], 45) => 0\n  numEvens([1, 2, 3, 4], 46) => 0\n  numEvens([1, 2, 3, 4], 47) => 0\n  numEvens([1, 2, 3, 4], 48) => 0\n  numEvens([1, 2, 3, 4], 49) => 0\n  numEvens([1, 2, 3, 4], 50) => 0\n  numEvens([1, 2, 3, 4], 51) => 0\n  numEvens([1, 2, 3, 4], 52) => 0\n  numEvens([1, 2, 3, 4], 53) => 0\n  numEvens([1, 2, 3, 4], 54) => 0\n  numEvens([1, 2, 3, 4], 55) => 0\n  numEvens([1, 2, 3, 4], 56) => 0\n  numEvens([1, 2, 3, 4], 57) => 0\n  numEvens([1, 2, 3, 4], 58) => 0\n  numEvens([1, 2, 3, 4], 59) => 0\n  numEvens([1, 2, 3, 4], 60) => 0\n  numEvens([1, 2, 3, 4], 61) => 0\n  numEvens([1, 2, 3, 4], 62) => 0\n  numEvens([1, 2, 3, 4], 63) => 0\n  numEvens([1, 2, 3, 4], 64) => 0\n  numEvens([1, 2, 3, 4], 65) => 0\n  numEvens([1, 2, 3, 4], 66) => 0\n  numEvens([1, 2, 3, 4], 67) => 0\n  numEvens([1, 2, 3, 4], 68) => 0\n  numEvens([1, 2, 3, 4], 69) => 0\n  numEvens([1, 2, 3, 4], 70) => 0\n  numEvens([1, 2, 3, 4], 71) => 0\n  numEvens([1, 2, 3, 4], 72) => 0\n  numEvens([1, 2, 3, 4], 73) => 0\n  numEvens([1, 2, 3, 4], 74) => 0\n  numEvens([1, 2, 3, 4], 75) => 0\n  numEvens([1, 2, 3, 4], 76) => 0\n  numEvens([1, 2, 3, 4], 77) => 0\n  numEvens([1, 2, 3, 4], 78) => 0\n  numEvens([1, 2, 3, 4], 79) => 0\n  numEvens([1, 2, 3, 4], 80) => 0\n  numEvens([1, 2, 3, 4], 81) => 0\n  numEvens([1, 2, 3, 4], 82) => 0\n  numEvens([1, 2, 3, 4], 83) => 0\n  numEvens([1, 2, 3, 4], 84) => 0\n  numEvens([1, 2, 3, 4], 85) => 0\n  numEvens([1, 2, 3, 4], 86) => 0\n  numEvens([1, 2, 3, 4], 87) => 0\n  numEvens([1, 2, 3, 4], 88) => 0\n  numEvens([1, 2, 3, 4], 89) => 0\n  numEvens([1, 2, 3, 4], 90) => 0\n  numEvens([1, 2, 3, 4], 91) => 0\n  numEvens([1, 2, 3, 4], 92) => 0\n  numEvens([1, 2, 3, 4], 93) => 0\n  numEvens([1, 2, 3, 4], 94) => 0\n  numEvens([1, 2, 3, 4], 95) => 0\n  numEvens([1, 2, 3, 4], 96) => 0\n  numEvens([1, 2, 3, 4], 97) => 0\n  numEvens([1, 2, 3, 4], 98) => 0\n  numEvens([1, 2, 3, 4], 99) => 0\n  numEvens([1, 2, 3, 4], 100) => 0\n  numEvens([1, 2, 3, 4], 101) => 0\n  numEvens([1, 2, 3, 4], 102) => 0\n  numEvens([1, 2, 3, 4], 103) => 0\n  numEvens([1, 2, 3, 4], 104) => 0\n  numEvens([1, 2, 3, 4], 105) => 0\n  numEvens([1, 2, 3, 4], 106) => 0\n  numEvens([1, 2, 3, 4], 107) => 0\n  numEvens([1, 2, 3, 4], 108) => 0\n  numEvens([1, 2, 3, 4], 109) => 0\n  numEvens([1, 2, 3, 4], 110) => 0\n  numEvens([1, 2, 3, 4], 111) => 0\n  numEvens([1, 2, 3, 4], 112) => 0\n  numEvens([1, 2, 3, 4], 113) => 0\n  numEvens([1, 2, 3, 4], 114) => 0\n  numEvens([1, 2, 3, 4], 115) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    if (letterMap[letter]) {\n      letterCounts[letterMap[letter]] += 1;\n    } else {\n      letterMap[letter] = 1;\n      letterCounts[letterMap[letter]] = 1;\n    }\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    if (letterMap[letter]) {\n      letterCounts[letterMap[letter]] += 1;\n    } else {\n      letterMap[letter] = 1;\n      letterCounts[letterMap[letter]] = 1;\n    }\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    if (letterMap[letter]) {\n      letterCounts[letterMap[letter]] += 1;\n    } else {\n      letterMap[letter] = 1;\n      letterCounts[letterMap[letter]] = 1;\n    }\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    if (letterMap[letter]) {\n      letterCounts[letterMap[letter]] += 1;\n    } else {\n      letterMap[letter] = 1;\n      letterCounts[letterMap[letter]] = 1;\n    }\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    if (letterMap[letter]) {\n      letterCounts[letterMap[letter]] += 1;\n    } else {\n      letterMap[letter] = 1;\n      letterCounts[letterMap[letter]] = 1;\n    }\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    if (letterMap[letter]) {\n      letterCounts[letterMap[letter]] += 1;\n    } else {\n      letterMap[letter] = 1;\n      letterCounts[letterMap[letter]] = 1;\n    }\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    if (letterMap[letter]) {\n      letterCounts[letterMap[letter]] += 1;\n    } else {\n      letterMap[letter] = 1;\n      letterCounts[letterMap[letter]] = 1;\n    }\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let letterCount", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n  let result = '';\n  let flag = true;\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (s[i] == c) flag = false;\n    if (flag) result += s[i];\n  }\n  return [result, flag];\n};\n\n/*Task\n  Given a string s and an integer k, return true if s and k are anagrams of each other.\n  Example\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 2\n  s = \"abcabc\", k = 1\n  s = \"abcabc\", k = 0\n  s = \"abcabc\", k = -1\n  s = \"abcabc\", k = 0\n  s = \"abcabc\", k = -1\n  s = \"abcabc\", k = -2\n  s = \"abcabc\", k = -3\n  s = \"abcabc\", k = -4\n  s = \"abcabc\", k = -5\n  s = \"abcabc\", k = -6\n  s = \"abcabc\", k = -7\n  s = \"abcabc\", k = -8\n  s = \"abcabc\", k = -9\n  s = \"abcabc\", k = -10\n  s = \"abcabc\", k = -11\n  s = \"abcabc\", k = -12\n  s = \"abcabc\", k = -13\n  s = \"abcabc\", k = -14\n  s = \"abcabc\", k = -15\n  s = \"abcabc\", k = -16\n  s = \"abcabc\", k = -17\n  s = \"abcabc\", k = -18\n  s = \"abcabc\", k = -19\n  s = \"abcabc\", k = -20\n  s = \"abcabc\", k = 2\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"abcabc\", k = 3\n  s = \"ab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      oddCount++;\n    }\n  }\n  return [oddCount];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenFount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenFount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenFount = (lst) => {\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      evenCount++;\n    }\n  }\n  return [evenCount];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of pairs of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of pairs of digits in the i'th string of the input.\n\n  >>> pairFount(['1234567'])\n  [\"the number of pairs of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> pairFount(['3',\"11111111\"])\n  [\"the number of pairs of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of pairs of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst pairFount = (lst) => {\n  let pairCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      pairCount++;\n    }\n  }\n  return [pairCount];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of triples of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of triples of digits in the i'th string of the input.\n\n  >>> tripleFount(['1234567'])\n  [\"the number of triples of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> tripleFount(['3',\"11111111\"])\n  [\"the number of triples of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of triples of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst tripleFount = (lst) => {\n  let tripleCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      tripleCount++;\n    }\n  }\n  return [tripleCount];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quads of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of quads of digits in the i'th string of the input.\n\n  >>> quadFount(['1234567'])\n  [\"the number of quads of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> quadFount(['3',\"11111111\"])\n  [\"the number of quads of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of quads of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quadFount = (lst) => {\n  let quadCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      quadCount++;\n    }\n  }\n  return [quadCount];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quins of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of quins of digits in the i'th string of the input.\n\n  >>> quinFount(['1234567'])\n  [\"the number of quins of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> quinFount(['3',\"11111111\"])\n  [\"the number of quins of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of quins of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quinFount = (lst) => {\n  let quinCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      quinCount++;\n    }\n  }\n  return [quinCount];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of nickels of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of nickels of digits in the i'th string of the input.\n\n  >>> nickelFount(['1234567'])\n  [\"the number of nickels of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> nickelFount(['3',\"11111111\"])\n  [\"the number of nickels of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of nickels of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst nickelFount = (lst) => {\n  let nickelCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      nickelCount++;\n    }\n  }\n  return [nickelCount];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of penns of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of penns of digits in the i'th string of the input.\n\n  >>> pennFount(['1234567'])\n  [\"the number of penns of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> pennFount(['3',\"11111111\"])\n  [\"the number of penns of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of penns of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst pennFount = (lst) => {\n  let pennCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      pennCount++;\n    }\n  }\n  return [pennCount];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxDubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxDubArraySum([-1, -2, -3]) == 3\n  */\nconst maxDubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-negative integers\n  in nums.\n  Example\n  minNonNegativeNums([2, 3, 4, 1, 2, 4]) == 3\n  minNonNegativeNums([-1, -2, -3]) == -1\n  */\nconst minNonNegativeNums = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return -1;\n    }\n    count++;\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-negative integers\n  in nums.\n  Example\n  maxNonNegativeNums([2, 3, 4, 1, 2, 4]) == 3\n  maxNonNegativeNums([-1, -2, -3]) == -1\n  */\nconst maxNonNegativeNums = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return -1;\n    }\n    count++;\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-negative integers\n  in nums.\n  Example\n  minNonNegativeNumsSum([2, 3, 4, 1, 2, 4]) == 3\n  minNonNegativeNumsSum([-1, -2, -3]) == -1\n  */\nconst minNonNegativeNumsSum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-negative integers\n  in nums.\n  Example\n  maxNonNegativeNumsSum([2, 3, 4, 1, 2, 4]) == 3\n  maxNonNegativeNumsSum([-1, -2, -3]) == -1\n  */\nconst maxNonNegativeNumsSum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-negative integers\n  in nums.\n  Example\n  minNonNegativeNumsSum([2, 3, 4, 1, 2, 4]) == 3\n  minNonNegativeNumsSum([-1, -2, -3]) == -1\n  */\nconst minNonNegativeNumsSum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-negative integers\n  in nums.\n  Example\n  maxNonNegativeNumsSum([2, 3, 4, 1, 2, 4]) == 3\n  maxNonNegativeNumsSum([-1, -2, -3]) == -1\n  */\nconst maxNonNegativeNumsSum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-negative integers\n  in nums.\n  Example\n  minNonNegativeNumsSum([2, 3, 4, 1, 2, 4]) == 3\n  minNonNegativeNumsSum([-1, -2, -3]) == -1\n  */\nconst minNonNegativeNumsSum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-negative integers\n  in nums.\n  Example\n  maxNonNegativeNumsSum([2, 3, 4, 1, 2, 4]) == 3\n  maxNonNegativeNumsSum([-1, -2, -3]) == -1\n  */\nconst maxNonNegativeNumsSum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-negative integers\n  in nums.\n  Example\n  minNonNegativeNumsSum([2, 3, 4, 1, 2, 4]) == 3\n  minNonNegativeNumsSum([-1, -2, -3]) == -1\n  */\nconst minNonNegativeNumsSum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-negative integers\n  in nums.\n  Example\n  maxNonNegativeNumsSum([2, 3, 4, 1, 2, 4]) == 3\n  maxNonNegativeNumsSum([-1, -2, -3]) == -1\n  */\nconst maxNonNegativeNumsSum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-negative integers\n  in nums.\n  Example\n  minNonNegativeNumsSum([2, 3, 4, 1, 2, 4]) == 3\n  minNonNegativeNumsSum([-1, -2, -3]) == -1\n  */\nconst minNonNegativeNumsSum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-negative integers\n  in nums.\n  Example\n  maxNonNegativeNumsSum([2, 3, 4, 1, 2, 4]) == 3\n  maxNonNegativeNumsSum([-1, -2, -3]) == -1\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const vill = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                vill[i] += capacity;\n            }\n        }\n    }\n    return vill.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill2 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const vill = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                vill[i] += capacity;\n            }\n        }\n    }\n    return vill.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill3 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const vill = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                vill[i] += capacity;\n            }\n        }\n    }\n    return vill.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill4 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const vill = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                vill[i] += capacity;\n            }\n        }\n    }\n    return vill.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill5 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const vill = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                vill[i] += capacity;\n            }\n        }\n    }\n    return vill.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map(n => parseInt(n, 2));\n};\n\n/**\n  Given an array of non-negative integers, return an array of integers that\n  are sorted in ascending order according to their binary representation\n  in ascending order.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 0, 2, 3, 4]) == [1, 2, 3, 4]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayInAscendingOrder = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map(n => parseInt(n, 2));\n};\n\n/**\n  Given an array of non-negative integers, return an array of integers that\n  are sorted in descending order according to their binary representation\n  in ascending order.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 0, 2, 3, 4]) == [1, 2, 3, 4]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayInDescendingOrder = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map(n => parseInt(n, 2));\n};\n\n/**\n  Given an array of non-negative integers, return an array of integers that\n  are sorted in ascending order according to their decimal representation\n  in ascending order.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 0, 2, 3, 4]) == [1, 2, 3, 4]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayInDecimalOrder = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map(n => parseInt(n, 10));\n};\n\n/**\n  Given an array of non-negative integers, return an array of integers that\n  are sorted in ascending order according to their decimal representation\n  in descending order.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 0, 2, 3, 4]) == [1, 2, 3, 4]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayInDecimalOrderDescending = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map(n => parseInt(n, 10));\n};\n\n/**\n  Given an array of non-negative integers, return an array of integers that\n  are sorted in ascending order according to their decimal representation\n  in ascending order.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 0, 2, 3, 4]) == [1, 2, 3, 4]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayInDecimalOrderAscending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map(n => parseInt(n, 10));\n};\n\n/**\n  Given an array of non-negative integers, return an array of integers that\n  are sorted in ascending order according to their decimal representation\n  in descending order.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 0, 2, 3, 4]) == [1, 2, 3, 4]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayInDecimalOrderDescendingDescending = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map(n => parseInt(n, 10));\n};\n\n/**\n  Given an array of non-negative integers, return an array of integers that\n  are sorted in ascending order according to their decimal representation\n  in ascending order.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 0, 2, 3, 4]) == [1, 2, 3, 4]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayInDecimalOrderAscendingDescending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map(n => parseInt(n, 10));\n};\n\n/**\n  Given an array of non-negative integers, return an array of integers that\n  are sorted in ascending order according to their decimal representation\n  in descending order.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 0, 2, 3, 4]) == [1, 2, 3, 4]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayInDecimalOrderDescendingDescendingAscending = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map(n => parseInt(n, 10));\n};\n\n/**\n  Given an array of non-negative integers, return an array of integers that\n  are sorted in ascending order according to their decimal representation\n  in descending order.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 0, 2, 3, 4]) == [1, 2, 3, 4]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayInDecimalOrderDescendingDescendingAscendingDescending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map(n => parseInt(n, 10));\n};\n\n/**\n  Given an array of non-negative integers, return an array of integers that\n  are sorted in ascending order according to their decimal representation\n  in ascending order.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 0, 2, 3, 4]) == [1, 2, 3, 4]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayInDecimalOrderAscendingDescendingAscending = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map(n => parseInt(n, 10));\n};\n\n/**\n  Given an array of non-negative integers, return an array of integers that\n  are sorted in ascending order according to their decimal representation\n  in descending order.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 0, 2, 3, 4]) == [1, 2, 3, 4]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  let words = [];\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelIndex = 0;\n  let vowelLength = 0;\n  let vowelFound = false;\n  let vowelIndex2 = 0;\n  let vowelLength2 = 0;\n  let vowelFound2 = false;\n  let vowelIndex3 = 0;\n  let vowelLength3 = 0;\n  let vowelFound3 = false;\n  let vowelIndex4 = 0;\n  let vowelLength4 = 0;\n  let vowelFound4 = false;\n  let vowelIndex5 = 0;\n  let vowelLength5 = 0;\n  let vowelFound5 = false;\n  let vowelIndex6 = 0;\n  let vowelLength6 = 0;\n  let vowelFound6 = false;\n  let vowelIndex7 = 0;\n  let vowelLength7 = 0;\n  let vowelFound7 = false;\n  let vowelIndex8 = 0;\n  let vowelLength8 = 0;\n  let vowelFound8 = false;\n  let vowelIndex9 = 0;\n  let vowelLength9 = 0;\n  let vowelFound9 = false;\n  let vowelIndex10 = 0;\n  let vowelLength10 = 0;\n  let vowelFound10 = false;\n  let vowelIndex11 = 0;\n  let vowelLength11 = 0;\n  let vowelFound11 = false;\n  let vowelIndex12 = 0;\n  let vowelLength12 = 0;\n  let vowelFound12 = false;\n  let vowelIndex13 = 0;\n  let vowelLength13 = 0;\n  let vowelFound13 = false;\n  let vowelIndex14 = 0;\n  let vowelLength14 = 0;\n  let vowelFound14 = false;\n  let vowelIndex15 = 0;\n  let vowelLength15 = 0;\n  let vowelFound15 = false;\n  let vowelIndex16 = 0;\n  let vowelLength16 = 0;\n  let vowelFound16 = false;\n  let vowelIndex17 = 0;\n  let vowelLength17 = 0;\n  let vowelFound17 = false;\n  let vowelIndex18 = 0;\n  let vowelLength18 = 0;\n  let vowelFound18 = false;\n  let vowelIndex19 = 0;\n  let vowelLength19 = 0;\n  let vowelFound19 = false;\n  let vowelIndex20 = 0;\n  let vowelLength20 = 0;\n  let vowelFound20 = false;\n  let vowelIndex21 = 0;\n  let vowelLength21 = 0;\n  let vowelFound21 = false;\n  let vowelIndex22 = 0;\n  let vowelLength22 = 0;\n  let vowelFound22 = false;\n  let vowelIndex23 = 0;\n  let vowelLength23 = 0;\n  let vowelFound23 = false;\n  let vowelIndex24 = 0;\n  let vowelLength24 = 0;\n  let vowelFound24 = false;\n  let vowelIndex25 = 0;\n  let vowelLength25 = 0;\n  let vowelFound25 = false;\n  let vowelIndex26 = 0;\n  let vowelLength26 = 0;\n  let vowelFound26 = false;\n  let vowelIndex27 = 0;\n  let vowelLength27 = 0;\n  let vowelFound27 = false;\n  let vowelIndex28 = 0;\n  let vowelLength28 = 0;\n  let vowelFound28 = false;\n  let vowelIndex29 = 0;\n  let vowelLength29 = 0;\n  let vowelFound29 = false;\n  let vowelIndex30 = 0;\n  let vowelLength30 = 0;\n  let vowelFound30 = false;\n  let vowelIndex31 = 0;\n  let vowelLength31 = 0;\n  let vowelFound31 = false;\n  let vowelIndex32 = 0;\n  let vowelLength32 = 0;\n  let vowelFound32 = false;\n  let vowelIndex33 = 0;\n  let vowelLength33 = 0;\n  let vowelFound33 = false;\n  let vowelIndex34 = 0;\n  let vowelLength34 = 0;\n  let vowelFound34 = false;\n  let vowelIndex35 = 0;\n  let vowelLength35 = 0;\n  let vowelFound35 = false;\n  let vowelIndex36 = 0;\n  let vowelLength36 = 0;\n  let vowelFound36 = false;\n  let vowelIndex37 = 0;\n  let vowelLength37 = 0;\n  let vowelFound37 = false;\n  let vowelIndex38 = 0;\n  let vowelLength38 = 0;\n  let vowelFound38 = false;\n  let vowelIndex39 = 0;\n  let vowelLength39 = 0;\n  let vowelFound39 = false;\n  let vowelIndex40 = 0;\n  let vowelLength40 = 0;\n  let vowelFound40 = false;\n  let vowelIndex41 = 0;\n  let vowelLength41 = 0;\n  let vowelFound41 = false;\n  let vowelIndex42 = 0;\n  let vowelLength42 = 0;\n  let vowelFound42 = false;\n  let vowelIndex43 = 0;\n  let vowelLength43 = 0;\n  let vowelFound43 = false;\n  let vowelIndex44 = 0;\n  let vowelLength44 = 0;\n  let vowelFound44 = false;\n  let vowelIndex45 = 0;\n  let vowelLength45 = 0;\n  let vowelFound45 = false;\n  let vowelIndex46 = 0;\n  let vowelLength46 = 0;\n  let vowelFound46 = false;\n  let vowelIndex47 = 0;\n  let vowelLength47 = 0;\n  let vowelFound47 = false;\n  let vowelIndex48 = 0;\n  let vowelLength48 = 0;\n  let vowelFound48 = false;\n  let vowelIndex49 = 0;\n  let vowelLength49 = 0;\n  let vowelFound49 = false;\n  let vowelIndex50 = 0;\n  let vowelLength50 = 0;\n  let vowelFound50 = false;\n  let vowelIndex51 = 0;\n  let vowelLength51 = 0;\n  let vowelFound51 = false;\n  let vowelIndex52 = 0;\n  let vowelLength52 = 0;\n  let vowelFound52 = false;\n  let vowelIndex53 = 0;\n  let vowelLength53 = 0;\n  let vowelFound53 = false;\n  let vowelIndex54 = 0;\n  let vowelLength54 = 0;\n  let vowelFound54 = false;\n  let vowelIndex55 = 0;\n  let vowelLength55 = 0;\n  let vowelFound55 = false;\n  let vowelIndex56 = 0;\n  let vowelLength56 = 0;\n  let vowelFound56 = false;\n  let vowelIndex57 = 0;\n  let vowelLength57 = 0;\n  let vowelFound57 = false;\n  let vowelIndex58 = 0;\n  let vowelLength58 = 0;\n  let vowelFound58 = false;\n  let vowelIndex59 = 0;\n  let vowelLength59 = 0;\n  let vowelFound59 = false;\n  let vowelIndex60 = 0;\n  let vowelLength60 = 0;\n  let vowelFound60 = false;\n  let vowelIndex61 = 0;\n  let vowelLength61 = 0;\n  let vowelFound61 = false;\n  let vowelIndex62 = 0;\n  let vowelLength62 = 0;\n  let vowelFound62 = false;\n  let vowelIndex63 = 0;\n  let vowelLength63 = 0;\n  let vowelFound63 = false;\n  let vowelIndex64 = 0;\n  let vowelLength64 = 0;\n  let vowelFound64 = false;\n  let vowelIndex65 = 0;\n  let vowelLength65 = 0;\n  let vowelFound65 = false;\n  let vowelIndex66 = 0;\n  let vowelLength66 = 0;\n  let vowelFound66 = false;\n  let vowelIndex67 = 0;\n  let vowelLength67 = 0;\n  let vowelFound67 = false;\n  let vowelIndex68 = 0;\n  let vowelLength68 = 0;\n  let vowelFound68 = false;\n  let vowelIndex69 = 0;\n  let vowelLength69 = 0;\n  let vowelFound69 = false;\n  let vowelIndex70 = 0;\n  let vowelLength70 = 0;\n  let vowelFound70 = false;\n  let vowelIndex71 = 0;\n  let vowelLength71 = 0;\n  let vowelFound71 = false;\n  let vowelIndex72 = 0;\n  let vowelLength72 = 0;\n  let vowelFound72 = false;\n  let vowelIndex73 = 0;\n  let vowelLength73 = 0;\n  let vowelFound73 = false;\n  let vowelIndex74 = 0;\n  let vowelLength74 = 0;\n  let vowelFound74 = false;\n  let vowelIndex75 = 0;\n  let vowelLength75 = 0;\n  let vowelFound75 = false;\n  let vowelIndex76 = 0;\n  let vowelLength76 = 0;\n  let vowel", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(' || lst[i] === ')') {\n      res.push(lst[i]);\n    }\n  }\n  return res.length === 1;\n};\n\n/* You are given a string S consisting of only digits 0-9.\n  Your job is to check if it is possible to convert it to a number using only\n  digits 0-9.\n  Return 'Yes' if there's a way to convert a number S to a number, and return\n  'No' otherwise.\n  Examples:\n  convertToNumber(123) == '123'\n  convertToNumber('123') == '123'\n  */\nconst convertToNumber = (st) => {\n  let res = [];\n  for (let i = 0; i < st.length; i++) {\n    if (st[i] >= '0' && st[i] <= '9') {\n      res.push(st[i]);\n    }\n  }\n  return res.length === 1;\n};\n\n/* You are given a string S consisting of only digits 0-9.\n  Your job is to check if it is possible to convert it to a number using only\n  digits 0-9.\n  Return 'Yes' if there's a way to convert a number S to a number, and return\n  'No' otherwise.\n  Examples:\n  convertToNumber(123) == '123'\n  convertToNumber('123') == '123'\n  */\nconst convertToLetter = (st) => {\n  let res = [];\n  for (let i = 0; i < st.length; i++) {\n    if (st[i] >= '0' && st[i] <= '9') {\n      res.push(st[i].toUpperCase());\n    }\n  }\n  return res.length === 1;\n};\n\n/* You are given a string S consisting of only digits 0-9.\n  Your job is to check if it is possible to convert it to a number using only\n  digits 0-9.\n  Return 'Yes' if there's a way to convert a number S to a number, and return\n  'No' otherwise.\n  Examples:\n  convertToNumber(123) == '123'\n  convertToNumber('123') == '123'\n  */\nconst convertToLetterAndDigit = (st) => {\n  let res = [];\n  for (let i = 0; i < st.length; i++) {\n    if (st[i] >= '0' && st[i] <= '9') {\n      res.push(st[i].toUpperCase() + st[i]);\n    }\n  }\n  return res.length === 1;\n};\n\n/* You are given a string S consisting of only digits 0-9.\n  Your job is to check if it is possible to convert it to a number using only\n  digits 0-9.\n  Return 'Yes' if there's a way to convert a number S to a number, and return\n  'No' otherwise.\n  Examples:\n  convertToNumber(123) == '123'\n  convertToNumber('123') == '123'\n  */\nconst convertToLetterAndDigitAndSpace = (st) => {\n  let res = [];\n  for (let i = 0; i < st.length; i++) {\n    if (st[i] >= '0' && st[i] <= '9') {\n      res.push(st[i].toUpperCase() + st[i]);\n    }\n  }\n  return res.length === 1;\n};\n\n/* You are given a string S consisting of only digits 0-9.\n  Your job is to check if it is possible to convert it to a number using only\n  digits 0-9.\n  Return 'Yes' if there's a way to convert a number S to a number, and return\n  'No' otherwise.\n  Examples:\n  convertToNumber(123) == '123'\n  convertToNumber('123') == '123'\n  */\nconst convertToLetterAndDigitAndSpaceAndUnderscore = (st) => {\n  let res = [];\n  for (let i = 0; i < st.length; i++) {\n    if (st[i] >= '0' && st[i] <= '9') {\n      res.push(st[i].toUpperCase() + st[i]);\n    }\n  }\n  return res.length === 1;\n};\n\n/* You are given a string S consisting of only digits 0-9.\n  Your job is to check if it is possible to convert it to a number using only\n  digits 0-9.\n  Return 'Yes' if there's a way to convert a number S to a number, and return\n  'No' otherwise.\n  Examples:\n  convertToNumber(123) == '123'\n  convertToNumber('123') == '123'\n  */\nconst convertToLetterAndDigitAndSpaceAndUnderscoreAndDot = (st) => {\n  let res = [];\n  for (let i = 0; i < st.length; i++) {\n    if (st[i] >= '0' && st[i] <= '9') {\n      res.push(st[i].toUpperCase() + st[i]);\n    }\n  }\n  return res.length === 1;\n};\n\n/* You are given a string S consisting of only digits 0-9.\n  Your job is to check if it is possible to convert it to a number using only\n  digits 0-9.\n  Return 'Yes' if there's a way to convert a number S to a number, and return\n  'No' otherwise.\n  Examples:\n  convertToNumber(123) == '123'\n  convertToNumber('123') == '123'\n  */\nconst convertToLetterAndDigitAndSpaceAndUnderscoreAndDotAndUnderscore = (st) => {\n  let res = [];\n  for (let i = 0; i < st.length; i++) {\n    if (st[i] >= '0' && st[i] <= '9') {\n      res.push(st[i].toUpperCase() + st[i]);\n    }\n  }\n  return res.length === 1;\n};\n\n/* You are given a string S consisting of only digits 0-9.\n  Your job is to check if it is possible to convert it to a number using only\n  digits 0-9.\n  Return 'Yes' if there's a way to convert a number S to a number, and return\n  'No' otherwise.\n  Examples:\n  convertToNumber(123) == '123'\n  convertToNumber('123') == '123'\n  */\nconst convertToLetterAndDigitAndSpaceAndUnderscoreAndDotAndUnderscoreAndDot = (st) => {\n  let res = [];\n  for (let i = 0; i < st.length; i++) {\n    if (st[i] >= '0' && st[i] <= '9') {\n      res.push(st[i].toUpperCase() + st[i]);\n    }\n  }\n  return res.length === 1;\n};\n\n/* You are given a string S consisting of only digits 0-9.\n  Your job is to check if it is possible to convert it to a number using only\n  digits 0-9.\n  Return 'Yes' if there's a way to convert a number S to a number, and return\n  'No' otherwise.\n  Examples:\n  convertToNumber(123) == '123'\n  convertToNumber('123') == '123'\n  */\nconst convertToLetterAndDigitAndSpaceAndUnderscoreAndDotAndUnderscoreAndDotAndUnderscore = (st) => {\n  let res = [];\n  for (let i = 0; i < st.length; i++) {\n    if (st[i] >= '0' && st[i] <= '9') {\n      res.push(st[i].toUpperCase() + st[i]);\n    }\n  }\n  return res.length === 1;\n};\n\n/* You are given a string S consisting of only digits 0-9.\n  Your job is to check if it is possible to convert it to a number using only\n  digits 0-9.\n  Return 'Yes' if there's a way to convert a number S to a number, and return\n  'No' otherwise.\n  Examples:\n  convertToNumber(123) == '123'\n  convertToNumber('123') == '123'\n  */\nconst convertToLetterAndDigitAndSpaceAndUnderscoreAndDotAndUnderscoreAndDotAndUnderscoreAndDot = (st) => {\n  let res = [];\n  for (let i = 0; i < st.length; i++) {\n    if (st[i] >= '0' && st[i] <= '9') {\n      res.push(st[i].toUpperCase() + st", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "<|endoftext|>/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let longest = 0;\n  let longestString = null;\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.length > longest) {\n      longest = string.length;\n      longestString = string;\n    }\n  }\n  return longestString;\n};\n\n/**\n  Return the number of characters in a string.\n  >>> count('a')\n  3\n  >>> count('ab')\n  2\n  >>> count('abc')\n  3\n  >>> count('abcabc')\n  4\n  */\nconst count = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i);\n  }\n  return count;\n};\n\n/**\n  Return the number of uppercase letters in a string.\n  >>> count('ABC')\n  3\n  >>> count('ABCDEF')\n  3\n  >>> count('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  4\n  */\nconst countUppercase = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) >= 65 && string.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n  Return the number of lowercase letters in a string.\n  >>> count('ABC')\n  3\n  >>> count('ABCDEF')\n  3\n  >>> count('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  4\n  */\nconst countLowercase = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) >= 97 && string.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n  Return the number of digits in a string.\n  >>> count('123')\n  3\n  >>> count('123a')\n  3\n  >>> count('123abc')\n  3\n  >>> count('123abcde')\n  3\n  */\nconst countDigits = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) >= 48 && string.charCodeAt(i) <= 57) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n  Return the number of spaces in a string.\n  >>> count(' ')\n  3\n  >>> count('a b c')\n  3\n  >>> count('a b c d')\n  3\n  >>> count('a b c d e')\n  3\n  */\nconst countSpaces = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 32) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n  Return the number of special characters in a string.\n  >>> count('!@#$%^&*()_+{}|:\"<>?,./')\n  3\n  >>> count('!@#$%^&*()_+{}|:\"<>?,./')\n  3\n  >>> count('!@#$%^&*()_+{}|:\"<>?,./')\n  3\n  */\nconst countSpecial = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 95 || string.charCodeAt(i) === 34 || string.charCodeAt(i) === 94 || string.charCodeAt(i) === 35 || string.charCodeAt(i) === 93 || string.charCodeAt(i) === 36 || string.charCodeAt(i) === 91 || string.charCodeAt(i) === 32 || string.charCodeAt(i) === 90 || string.charCodeAt(i) === 92 || string.charCodeAt(i) === 94 || string.charCodeAt(i) === 95 || string.charCodeAt(i) === 34 || string.charCodeAt(i) === 94 || string.charCodeAt(i) === 35 || string.charCodeAt(i) === 93 || string.charCodeAt(i) === 36 || string.charCodeAt(i) === 91 || string.charCodeAt(i) === 32 || string.charCodeAt(i) === 90 || string.charCodeAt(i) === 92 || string.charCodeAt(i) === 94 || string.charCodeAt(i) === 95) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n  Return the number of all special characters in a string.\n  >>> countSpecial('!@#$%^&*()_+{}|:\"<>?,./')\n  3\n  >>> countSpecial('!@#$%^&*()_+{}|:\"<>?,./')\n  3\n  >>> countSpecial('!@#$%^&*()_+{}|:\"<>?,./')\n  3\n  */\nconst countAllSpecial = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 95 || string.charCodeAt(i) === 34 || string.charCodeAt(i) === 94 || string.charCodeAt(i) === 35 || string.charCodeAt(i) === 93 || string.charCodeAt(i) === 36 || string.charCodeAt(i) === 91 || string.charCodeAt(i) === 32 || string.charCodeAt(i) === 90 || string.charCodeAt(i) === 92 || string.charCodeAt(i) === 94 || string.charCodeAt(i) === 95) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n  Return the number of all special characters in a string.\n  >>> countAllSpecial('!@#$%^&*()_+{}|:\"<>?,./')\n  3\n  >>> countAllSpecial('!@#$%^&*()_+{}|:\"<>?,./')\n  3\n  >>> countAllSpecial('!@#$%^&*()_+{}|:\"<>?,./')\n  3\n  */\nconst countAll = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 95 || string.charCodeAt(i) === 34 || string.charCodeAt(i) === 94 || string.charCodeAt(i) === 35 || string.charCodeAt(i) === 93 || string.charCodeAt(i) === 36 || string.charCodeAt(i) === 91 || string.charCodeAt(i) === 32 || string.charCodeAt(i) === 90 || string.charCodeAt(i) === 92 || string.charCodeAt(i) === 94 || string.charCodeAt(i) === 95) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n  Return the number of all uppercase letters in a string.\n  >>> countAllUppercase('ABC')\n  3\n  >>> countAllUppercase('ABCDEF')\n  3\n  >>> countAllUppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  4\n  */\nconst countAllUppercase = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) >= 65 && string.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n  Return the number of all lowercase letters in a string.\n  >>> countAllLowercase('ABC')\n  3\n  >>> countAllLowercase('ABCDEF')\n  3\n  >>> countAllLowercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  4\n  */\nconst countAllLowercase = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) >= 97 && string.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n  Return the number of all digits in a string.\n  >>> countAllDigits('123')\n  3\n  >>> countAllDigits('123a')\n  3\n  >>> countAllDigits('123abc')\n  3\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n  const len = arr.length;\n  let ans = [];\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (arr[i] > max) {\n      max = arr[i];\n      ans.push(max);\n    }\n    if (max > k) {\n      max = arr[i];\n      ans.push(max);\n    }\n    if (max === k) {\n      ans.push(arr[i]);\n    }\n    if (max > k) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums) {\n  const ans = [];\n  const stack = [];\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < nums.length) {\n    if (nums[i] >= max) {\n      stack.push(nums[i]);\n      max = nums[i];\n      i++;\n    } else {\n      if (stack.length!== 0) {\n        stack.push(nums[i]);\n        i++;\n      } else {\n        ans.push(nums[i]);\n      }\n    }\n  }\n  while (stack.length!== 0) {\n    stack.push(max);\n    max = 0;\n    i++;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-ii/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArraySumII = function(nums) {\n  const ans = [];\n  const stack = [];\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < nums.length) {\n    if (nums[i] >= max) {\n      stack.push(nums[i]);\n      max = nums[i];\n      i++;\n    } else {\n      if (stack.length!== 0) {\n        stack.push(nums[i]);\n        i++;\n      } else {\n        ans.push(nums[i]);\n      }\n    }\n  }\n  while (stack.length!== 0) {\n    stack.push(max);\n    max = 0;\n    i++;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArraySumIII = function(nums) {\n  const ans = [];\n  const stack = [];\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < nums.length) {\n    if (nums[i] >= max) {\n      stack.push(nums[i]);\n      max = nums[i];\n      i++;\n    } else {\n      if (stack.length!== 0) {\n        stack.push(nums[i]);\n        i++;\n      } else {\n        ans.push(nums[i]);\n      }\n    }\n  }\n  while (stack.length!== 0) {\n    stack.push(max);\n    max = 0;\n    i++;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iv/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArraySumIV = function(nums) {\n  const ans = [];\n  const stack = [];\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < nums.length) {\n    if (nums[i] >= max) {\n      stack.push(nums[i]);\n      max = nums[i];\n      i++;\n    } else {\n      if (stack.length!== 0) {\n        stack.push(nums[i]);\n        i++;\n      } else {\n        ans.push(nums[i]);\n      }\n    }\n  }\n  while (stack.length!== 0) {\n    stack.push(max);\n    max = 0;\n    i++;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iv/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArraySumV = function(nums) {\n  const ans = [];\n  const stack = [];\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < nums.length) {\n    if (nums[i] >= max) {\n      stack.push(nums[i]);\n      max = nums[i];\n      i++;\n    } else {\n      if (stack.length!== 0) {\n        stack.push(nums[i]);\n        i++;\n      } else {\n        ans.push(nums[i]);\n      }\n    }\n  }\n  while (stack.length!== 0) {\n    stack.push(max);\n    max = 0;\n    i++;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-vi/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArraySumVI = function(nums) {\n  const ans = [];\n  const stack = [];\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < nums.length) {\n    if (nums[i] >= max) {\n      stack.push(nums[i]);\n      max = nums[i];\n      i++;\n    } else {\n      if (stack.length!== 0) {\n        stack.push(nums[i]);\n        i++;\n      } else {\n        ans.push(nums[i]);\n      }\n    }\n  }\n  while (stack.length!== 0) {\n    stack.push(max);\n    max = 0;\n    i++;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-vii/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArraySumVII = function(nums) {\n  const ans = [];\n  const stack = [];\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < nums.length) {\n    if (nums[i] >= max) {\n      stack.push(nums[i]);\n      max = nums[i];\n      i++;\n    } else {\n      if (stack.length!== 0) {\n        stack.push(nums[i]);\n        i++;\n      } else {\n        ans.push(nums[i]);\n      }\n    }\n  }\n  while (stack.length!== 0) {\n    stack.push(max);\n    max = 0;\n    ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solktion;\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solktion;\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solktion;\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solktion;\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solktion;\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solktion;\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solktion;\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solktion;\n\n},{}],11:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solktion;\n\n},{}],12:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solktion;\n\n},{}],13:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solktion;\n\n},{}],14:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most three digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 3\n      Output: 24 # sum of 1 + 2 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements3 = addFlements;\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most four digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 1 + 2 + 3 + 4\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements4 = addFlements;\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most five digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 5\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements5 = addFlements;\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most six digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 6\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements6 = addFlements;\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most seven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 7\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements7 = addFlements;\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most eight digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 8\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements8 = addFlements;\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most nine digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 9\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements9 = addFlements;\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most ten digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 10\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements10 = addFlements;\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most eleven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 11\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements11 = addFlements;\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most twenty digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 12\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements12 = addFlements;\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most thirteen digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 13\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements13 = addFlements;\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most fourteen digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 14\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements14 = addFlements;\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most fifteen digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 15\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements15 = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, 16, and 8.\n  */\nconst getLddCollatzEven = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the prime numbers are only 1, 5, 16, and 8.\n  */\nconst getLddCollatzPrime = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the prime numbers are only 1, 5, 16, and 8.\n  */\nconst getLddCollatzPrimeEven = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the prime numbers are only 1, 5, 16, and 8.\n  */\nconst getLddCollatzPrimeOdd = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the prime numbers are only 1, 5, 16, and 8.\n  */\nconst getLddCollatzPrimeOddEven = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  const dateObj = new Date(date);\n  const year = dateObj.getFullYear();\n  const month = dateObj.getMonth() + 1;\n  const day = dateObj.getDate();\n  const isDateValid = year >= 1900 &&\n    month <= 12 &&\n    day <= 31;\n  return isDateValid;\n};\n\n/*\n  Given a date string and an array of dates returns true if the date is\n  valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000', ['03-11-2000', '15-01-2012']) => true\n\n  valldDate('15-01-2012', ['03-11-2000', '15-01-2012']) => false\n\n  valldDate('04-0-2040', ['03-11-2000', '15-01-2012']) => false\n\n  valldDate('06-04-2020', ['03-11-2000', '15-01-2012']) => true\n\n  valldDate('06/04/2020', ['03-11-2000', '15-01-2012']) => false\n  */\nconst valldDates = (dates, datesArray) => {\n  const datesObj = new Date(datesArray);\n  const year = datesObj.getFullYear();\n  const month = datesObj.getMonth() + 1;\n  const day = datesObj.getDate();\n  const isDateValid = year >= 1900 &&\n    month <= 12 &&\n    day <= 31;\n  return isDateValid;\n};\n\n/*\n  Given a date string and an array of dates returns true if the date is\n  valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000', ['03-11-2000', '15-01-2012']) => true\n\n  valldDate('15-01-2012', ['03-11-2000', '15-01-2012']) => false\n\n  valldDate('04-0-2040', ['03-11-2000', '15-01-2012']) => false\n\n  valldDate('06-04-2020', ['03-11-2000', '15-01-2012']) => true\n\n  valldDate('06/04/2020', ['03-11-2000', '15-01-2012']) => false\n  */\nconst valldDatesArray = (dates, datesArray) => {\n  const datesObj = new Date(datesArray);\n  const year = datesObj.getFullYear();\n  const month = datesObj.getMonth() + 1;\n  const day = datesObj.getDate();\n  const isDateValid = year >= 1900 &&\n    month <= 12 &&\n    day <= 31;\n  return isDateValid;\n};\n\n/*\n  Given a date string and an array of dates returns true if the date is\n  valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000', ['03-11-2000', '15-01-2012']) => true\n\n  valldDate('15-01-2012', ['03-11-2000', '15-01-2012']) => false\n\n  valldDate('04-0-2040', ['03-11-2000', '15-01-2012']) => false\n\n  valldDate('06-04-2020', ['03-11-2000', '15-01-2012']) => true\n\n  valldDate('06/04/2020', ['03-11-2000', '15-01-2012']) => false\n  */\nconst valldDatesArrayWithDates = (dates, datesArray) => {\n  const datesObj = new Date(datesArray);\n  const year = datesObj.getFullYear();\n  const month = datesObj.getMonth() + 1;\n  const day = datesObj.getDate();\n  const isDateValid = year >= 1900 &&\n    month <= 12 &&\n    day <= 31;\n  return isDateValid;\n};\n\n/*\n  Given a date string and an array of dates returns true if the date is\n  valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000', ['03-11-2000', '15-01-2012']) => true\n\n  valldDate('15-01-2012', ['03-11-2000', '15-01-2012']) => false\n\n  valldDate('04-0-2040', ['03-11-2000', '15-01-2012']) => false\n\n  valldDate('06-04-2020', ['03-11-2000', '15-01-2012']) => true\n\n  valldDate('06/04/2020', ['03-11-2000', '15-01-2012']) => false\n  */\nconst valldDatesArrayWithDatesArray = (dates, datesArray) => {\n  const datesObj = new Date(datesArray);\n  const year = datesObj.getFullYear();\n  const month = datesObj.getMonth() + 1;\n  const day = datesObj.getDate();\n  const isDateValid", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.split(\" \");\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'a' && words[i].charAt(words[i].length - 1).toLowerCase() === 'z') {\n        count += words[i].length - 1;\n      } else {\n        count += words[i].length;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 1, ord('b') = 2,... ord('z') = 26\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 4\n  */\nconst splltWordsEven = (txt) => {\n  const words = txt.split(\" \");\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'a' && words[i].charAt(words[i].length - 1).toLowerCase() === 'z') {\n        count += words[i].length - 1;\n      } else {\n        count += words[i].length;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsOdd = (txt) => {\n  const words = txt.split(\" \");\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'a' && words[i].charAt(words[i].length - 1).toLowerCase() === 'z') {\n        count += words[i].length - 1;\n      } else {\n        count += words[i].length;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 1, ord('b') = 2,... ord('z') = 26\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 4\n  */\nconst splltWordsOddEven = (txt) => {\n  const words = txt.split(\" \");\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'a' && words[i].charAt(words[i].length - 1).toLowerCase() === 'z') {\n        count += words[i].length - 1;\n      } else {\n        count += words[i].length;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsOddOdd = (txt) => {\n  const words = txt.split(\" \");\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'a' && words[i].charAt(words[i].length - 1).toLowerCase() === 'z') {\n        count += words[i].length - 1;\n      } else {\n        count += words[i].length;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 1, ord('b') = 2,... ord('z') = 26\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsOddOddEven = (txt) => {\n  const words = txt.split(\" \");\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'a' && words[i].charAt(words[i].length - 1).toLowerCase() === 'z') {\n        count += words[i].length - 1;\n      } else {\n        count += words[i].length;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 1, ord('b') = 2,... ord('z') = 26\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsOddOddOddEven = (txt) => {\n  const words = txt.split(\" \");\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      if (words[i].length > 1 && words[i].charAt(0).toLowerCase() === 'a' && words[i].charAt(words[i].length - 1).toLowerCase() === 'z') {\n        count += words[i].length - 1;\n      } else {\n        count += words[i].length;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  const [first, second] = lst\n  if (first === second) {\n    return true\n  }\n  if (first < second) {\n    return false\n  }\n  return isSlrted([first, second])\n}\n\n// Given a list of numbers, return whether or not they are sorted\n// descending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// isDlrted([5]) ➞ false\n// isDlrted([1, 2, 3, 4, 5]) ➞ true\n// isDlrted([1, 3, 2, 4, 5]) ➞ false\n// isDlrted([1, 2, 3, 4, 5, 6]) ➞ true\n// isDlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n// isDlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n// isDlrted([1, 2, 2, 3, 3, 4]) ➞ true\n// isDlrted([1, 2, 2, 2, 3, 4]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 5]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]) ➞ false\n// isDlrted([1, 2, 2, 2, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  let isPrime = true;\n  let isIntersect = false;\n  let isIntersect2 = false;\n  let isIntersect3 = false;\n  let isIntersect4 = false;\n  let isIntersect5 = false;\n  let isIntersect6 = false;\n  let isIntersect7 = false;\n  let isIntersect8 = false;\n  let isIntersect9 = false;\n  let isIntersect10 = false;\n  let isIntersect11 = false;\n  let isIntersect12 = false;\n  let isIntersect13 = false;\n  let isIntersect14 = false;\n  let isIntersect15 = false;\n  let isIntersect16 = false;\n  let isIntersect17 = false;\n  let isIntersect18 = false;\n  let isIntersect19 = false;\n  let isIntersect20 = false;\n  let isIntersect21 = false;\n  let isIntersect22 = false;\n  let isIntersect23 = false;\n  let isIntersect24 = false;\n  let isIntersect25 = false;\n  let isIntersect26 = false;\n  let isIntersect27 = false;\n  let isIntersect28 = false;\n  let isIntersect29 = false;\n  let isIntersect30 = false;\n  let isIntersect31 = false;\n  let isIntersect32 = false;\n  let isIntersect33 = false;\n  let isIntersect34 = false;\n  let isIntersect35 = false;\n  let isIntersect36 = false;\n  let isIntersect37 = false;\n  let isIntersect38 = false;\n  let isIntersect39 = false;\n  let isIntersect40 = false;\n  let isIntersect41 = false;\n  let isIntersect42 = false;\n  let isIntersect43 = false;\n  let isIntersect44 = false;\n  let isIntersect45 = false;\n  let isIntersect46 = false;\n  let isIntersect47 = false;\n  let isIntersect48 = false;\n  let isIntersect49 = false;\n  let isIntersect50 = false;\n  let isIntersect51 = false;\n  let isIntersect52 = false;\n  let isIntersect53 = false;\n  let isIntersect54 = false;\n  let isIntersect55 = false;\n  let isIntersect56 = false;\n  let isIntersect57 = false;\n  let isIntersect58 = false;\n  let isIntersect59 = false;\n  let isIntersect60 = false;\n  let isIntersect61 = false;\n  let isIntersect62 = false;\n  let isIntersect63 = false;\n  let isIntersect64 = false;\n  let isIntersect65 = false;\n  let isIntersect66 = false;\n  let isIntersect67 = false;\n  let isIntersect68 = false;\n  let isIntersect69 = false;\n  let isIntersect70 = false;\n  let isIntersect71 = false;\n  let isIntersect72 = false;\n  let isIntersect73 = false;\n  let isIntersect74 = false;\n  let isIntersect75 = false;\n  let isIntersect76 = false;\n  let isIntersect77 = false;\n  let isIntersect78 = false;\n  let isIntersect79 = false;\n  let isIntersect80 = false;\n  let isIntersect81 = false;\n  let isIntersect82 = false;\n  let isIntersect83 = false;\n  let isIntersect84 = false;\n  let isIntersect85 = false;\n  let isIntersect86 = false;\n  let isIntersect87 = false;\n  let isIntersect88 = false;\n  let isIntersect89 = false;\n  let isIntersect90 = false;\n  let isIntersect91 = false;\n  let isIntersect92 = false;\n  let isIntersect93 = false;\n  let isIntersect94 = false;\n  let isIntersect95 = false;\n  let isIntersect96 = false;\n  let isIntersect97 = false;\n  let isIntersect98 = false;\n  let isIntersect99 = false;\n  let isIntersect100 = false;\n  let isIntersect101 = false;\n  let isIntersect102 = false;\n  let isIntersect103 = false;\n  let isIntersect104 = false;\n  let isIntersect105 = false;\n  let isIntersect106 = false;\n  let isIntersect107 = false;\n  let isIntersect108 = false;\n  let isIntersect109 = false;\n  let isIntersect110 = false;\n  let isIntersect111 = false;\n  let isIntersect112 = false;\n  let isIntersect113 = false;\n  let isIntersect114 = false;\n  let isIntersect115 = false;\n  let isIntersect116 = false;\n  let isIntersect117 = false;\n  let isIntersect118 = false;\n  let isIntersect119 = false;\n  let isIntersect120 = false;\n  let isIntersect121 = false;\n  let isIntersect122 = false;\n  let isIntersect123 = false;\n  let isIntersect124 = false;\n  let isIntersect125 = false;\n  let isIntersect126 = false;\n  let isIntersect127 = false;\n  let isIntersect128 = false;\n  let isIntersect129 = false;\n  let isIntersect130 = false;\n  let isIntersect131 = false;\n  let isIntersect132 = false;\n  let isIntersect133 = false;\n  let isIntersect134 = false;\n  let isIntersect135 = false;\n  let isIntersect136 = false;\n  let isIntersect137 = false;\n  let isIntersect138 = false;\n  let isIntersect139 = false;\n  let isIntersect140 = false;\n  let isIntersect141 = false;\n  let isIntersect142 = false;\n  let isIntersect143 = false;\n  let isIntersect144 = false;\n  let isIntersect145 = false;\n  let isIntersect146 = false;\n  let isIntersect147 = false;\n  let isIntersect148 = false;\n  let isIntersect149 = false;\n  let isIntersect150 = false;\n  let isIntersect151 = false;\n  let isIntersect152 = false;\n  let isIntersect153 = false;\n  let isIntersect154 = false;\n  let isIntersect155 = false;\n  let isIntersect156 = false;\n  let isIntersect157 = false;\n  let isIntersect158 = false;\n  let isIntersect159 = false;\n  let isIntersect160 = false;\n  let isIntersect161 = false;\n  let isIntersect162 = false;\n  let isIntersect163 = false;\n  let isIntersect164 = false;\n  let isIntersect165 = false;\n  let isIntersect166 = false;\n  let isIntersect167 = false;\n  let isIntersect168 = false;\n  let isIntersect169 = false;\n  let isIntersect170 = false;\n  let isIntersect171 = false;\n  let isIntersect172 = false;\n  let isIntersect173 = false;\n  let isIntersect174 = false;\n  let isIntersect175 = false;\n  let isIntersect176 = false;\n  let isIntersect177 = false;\n  let isIntersect178 = false;\n  let isIntersect179", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = profSigns;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = profSigns;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = profSigns;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = profSigns;\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = profSigns;\n\n},{}],13:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = profSigns;\n\n},{}],14:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = profSigns;\n\n},{}],15:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = profSigns;\n\n},{}],16:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = profSigns;\n\n},{}],17:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = profSigns;\n\n},{}],18:[function(require,module,exports){\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n  const lst_A = new Array(k).fill(0).map((_, i) => i);\n  const lst_B = new Array(k).fill(0).map((_, i) => i);\n  lst_A.sort((a, b) => a - b);\n  lst_B.sort((a, b) => a - b);\n  const lst_C = lst_A.map((_, i) => lst_B[i]);\n  return lst_C.sort((a, b) => a - b);\n};\n\n// https://leetcode.com/problems/minimum-path-sum-ii/\n/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[]}\n */\nvar minPathSum = function(grid, k) {\n  const lst_A = minOath(grid, k);\n  const lst_B = minOath(grid, k);\n  const lst_C = lst_A.map((_, i) => lst_B[i]);\n  return lst_C.sort((a, b) => a - b);\n};\n\n// https://leetcode.com/problems/minimum-path-sum-iii/\n/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[]}\n */\nvar minPathSumIII = function(grid, k) {\n  const lst_A = minOathIII(grid, k);\n  const lst_B = minOathIII(grid, k);\n  const lst_C = lst_A.map((_, i) => lst_B[i]);\n  return lst_C.sort((a, b) => a - b);\n};\n\n// https://leetcode.com/problems/minimum-path-sum-iv/\n/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[]}\n */\nvar minPathSumIV = function(grid, k) {\n  const lst_A = minOathIV(grid, k);\n  const lst_B = minOathIV(grid, k);\n  const lst_C = lst_A.map((_, i) => lst_B[i]);\n  return lst_C.sort((a, b) => a - b);\n};\n\n// https://leetcode.com/problems/minimum-path-sum-iii/\n/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[]}\n */\nvar minPathSumIIIi = function(grid, k) {\n  const lst_A = minOathIIIi(grid, k);\n  const lst_B = minOathIII(grid, k);\n  const lst_C = lst_A.map((_, i) => lst_B[i]);\n  return lst_C.sort((a, b) => a - b);\n};\n\n// https://leetcode.com/problems/minimum-path-sum-iv/\n/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[]}\n */\nvar minPathSumIVi = function(grid, k) {\n  const lst_A = minOathIVi(grid, k);\n  const lst_B = minOathIV(grid, k);\n  const lst_C = lst_A.map((_, i) => lst_B[i]);\n  return lst_C.sort((a, b) => a - b);\n};\n\n// https://leetcode.com/problems/minimum-path-sum-iii/\n/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[]}\n */\nvar minPathSumIIIii = function(grid, k) {\n  const lst_A = minOathIIIii(grid, k);\n  const lst_B = minOathIIIii(grid, k);\n  const lst_C = lst_A.map((_, i) => lst_B[i]);\n  return lst_C.sort((a, b) => a - b);\n};\n\n// https://leetcode.com/problems/minimum-path-sum-iiii/\n/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[]}\n */\nvar minPathSumIIIiii = function(grid, k) {\n  const lst_A = minOathIIIiii(grid, k);\n  const lst_B = minOathIIIiii(grid, k);\n  const lst_C = lst_A.map((_, i) => lst_B[i]);\n  return lst_C.sort((a, b) => a - b);\n};\n\n// https://leetcode.com/problems/minimum-path-sum-iv/\n/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[]}\n */\nvar minPathSumIViv = function(grid, k) {\n  const lst_A = minOathIViv(grid, k);\n  const lst_B = minOathIV(grid, k);\n  const lst_C = lst_A.map((_, i) => lst_B[i]);\n  return lst_C.sort((a, b) => a - b);\n};\n\n// https://leetcode.com/problems/minimum-path-sum-iiii/\n/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[]}\n */\nvar minPathSumIIIiiii = function(grid, k) {\n  const lst_A = minOathIIIiiii(grid, k);\n  const lst_B = minOathIIIiiii(grid, k);\n  const lst_C = lst_A.map((_, i) => lst_B[i]);\n  return lst_C.sort((a, b) => a - b);\n};\n\n// https://leetcode.com/problems/minimum-path-sum-iviv/\n/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[]}\n */\nvar minPathSumIViviv = function(grid, k) {\n  const lst_A = minOathIViviv(grid, k);\n  const lst_B = minOathIV(grid, k);\n  const lst_C = lst_A.map((_, i) => lst_B[i]);\n  return lst_C.sort((a, b) => a - b);\n};\n\n// https://leetcode.com/problems/minimum-path-sum-iiii/\n/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[]}\n */\nvar minPathSumIIIiiii = function(grid, k) {\n  const l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  const r = a % b;\n  if (r === 0) return b;\n  return r;\n};\n\n/**\n * Check if two integers are prime\n * https://stackoverflow.com/questions/43044/how-do-you-check-if-a-number-is-a-prime-number-in-javascript\n * @param {number} n\n */\nconst isPrime = function (n) {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 3) {\n    const sqrt = Math.sqrt(n);\n    for (let i = 2; i <= sqrt; i += 2) {\n      if (n % i === 0) return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy2 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy3 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy4 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy5 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy6 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy7 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy8 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy9 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy10 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy11 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy12 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy13 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy14 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy15 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy16 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy17 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy18 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy19 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy20 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy21 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy22 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy23 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > d) return false;\n  return true;\n};\n\n/**\n * Check if a number is divisible by another number\n * @param {number} n\n * @param {number} d\n */\nconst isDivisibleBy24 = (n, d) => {\n  if (n < 2) return false;\n  if (n % 2 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [n];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(8) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n  fib(9) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9073, 15913, 25813, 41813]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9073, 15913, 25813, 41813, 9175, 15925]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9073, 15913, 25813, 41813, 9175, 15925, 16283]\n  fib(12) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9073, 15913, 25813, 41813, 9175, 15925, 16283, 196418]\n  fib(13) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9073, 15913, 25813, 41813, 9175, 15925, 16283, 196418, 428135]\n  fib(14) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9073, 15913, 25813, 41813, 9175, 15925, 16283, 196418, 428135, 57489]\n  fib(15) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9073, 15913, 25813, 41813, 9175, 15925, 16283, 196418, 428135, 57489, 10233]\n  fib(16) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9073, 15913, 25813, 41813, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593]\n  fib(17) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9073, 15913, 25813, 41813, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845]\n  fib(18) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9073, 15913, 25813, 41813, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135]\n  fib(19) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9073, 15913, 25813, 41813, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175]\n  fib(20) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 9073, 15913, 25813, 41813, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, 418135, 9175, 15925, 16283, 196418, 428135, 57489, 10233, 17593, 25845, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even diglts.\n  Return 0 if all diglts are odd.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst even_diglts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd primes.\n  Return 0 if all primes are odd.\n  For example:\n  primes(1)  == 1\n  primes(4)  == 0\n  primes(235) == 15\n  */\nconst odd_primes = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even primes.\n  Return 0 if all primes are even.\n  For example:\n  primes(1)  == 1\n  primes(4)  == 0\n  primes(235) == 15\n  */\nconst even_primes = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  factors(1)  == 1\n  factors(4)  == 0\n  factors(235) == 15\n  */\nconst factors = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  factors(1)  == 1\n  factors(4)  == 0\n  factors(235) == 15\n  */\nconst factors_primes = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  factors(1)  == 1\n  factors(4)  == 0\n  factors(235) == 15\n  */\nconst factors_primes_odd = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  factors(1)  == 1\n  factors(4)  == 0\n  factors(235) == 15\n  */\nconst factors_primes_even = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  factors(1)  == 1\n  factors(4)  == 0\n  factors(235) == 15\n  */\nconst factors_primes_odd_primes = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  factors(1)  == 1\n  factors(4)  == 0\n  factors(235) == 15\n  */\nconst factors_primes_even_primes = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  factors(1)  == 1\n  factors(4)  == 0\n  factors(235) == 15\n  */\nconst factors_primes_odd_primes_even = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  factors(1)  == 1\n  factors(4)  == 0\n  factors(235) == 15\n  */\nconst factors_primes_even_primes_odd = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  factors(1)  == 1\n  factors(4)  == 0\n  factors(235) == 15\n  */\nconst factors_primes_odd_primes_odd_primes = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  factors(1)  == 1\n  factors(4)  == 0\n  factors(235) == 15\n  */\nconst factors_primes_odd_primes_even_primes = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  factors(1)  == 1\n  factors(4)  == 0\n  factors(235) == 15\n  */\nconst factors_primes_odd_primes_even_primes_even = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  factors(1)  == 1\n  factors(4)  == 0\n  factors(235) == 15\n  */\nconst factors_primes_odd_primes_odd_primes_even = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let isNfsted = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length > 0) {\n        if (stack[stack.length - 1] === '[') {\n          stack.pop();\n        } else {\n          isNfsted = false;\n        }\n      }\n    }\n  }\n  return isNfsted;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let isNfsted = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length > 0) {\n        if (stack[stack.length - 1] === '[') {\n          stack.pop();\n        } else {\n          isNfsted = false;\n        }\n      }\n    }\n  }\n  return isNfsted;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let isNfsted = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length > 0) {\n        if (stack[stack.length - 1] === '[') {\n          stack.pop();\n        } else {\n          isNfsted = false;\n        }\n      }\n    }\n  }\n  return isNfsted;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let isNfsted = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length > 0) {\n        if (stack[stack.length - 1] === '[') {\n          stack.pop();\n        } else {\n          isNfsted = false;\n        }\n      }\n    }\n  }\n  return isNfsted;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let isNfsted = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length > 0) {\n        if (stack[stack.length - 1] === '[') {\n          stack.pop();\n        } else {\n          isNfsted = false;\n        }\n      }\n    }\n  }\n  return isNfsted;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let isNfsted = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length > 0) {\n        if (stack[stack.length - 1] === '[') {\n          stack.pop();\n        } else {\n          isNfsted = false;\n        }\n      }\n    }\n  }\n  return isNfsted;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let isNfsted = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let sumSquareCeiling = 0;\n  lst.forEach((el) => {\n    sum += el;\n    sumSquare += el * el;\n    sumSquareCeiling += Math.ceil(el);\n  });\n  return sumSquareCeiling * sumSquare;\n};\n\n/*\n  You are given a list of numbers and a target number.\n  You are to find the minimum number of moves to reach the target.\n  Examples:\n  Input: [1,3,5,7], target = 9\n  Output: 3\n  Input: [1,3,5,7], target = 2\n  Output: 4\n  Input: [1,3,5,7], target = 1\n  Output: 5\n  Input: [1,3,5,7], target = 0\n  Output: -1\n  Input: [1,3,5,7], target = -1\n  Output: -1\n  Input: [1,3,5,7], target = 0\n  Output: -1\n  Input: [1,3,5,7], target = 1\n  Output: -1\n  Input: [1,3,5,7], target = 2\n  Output: -1\n  Input: [1,3,5,7], target = 3\n  Output: -1\n  Input: [1,3,5,7], target = 4\n  Output: -1\n  Input: [1,3,5,7], target = 5\n  Output: -1\n  Input: [1,3,5,7], target = 6\n  Output: -1\n  Input: [1,3,5,7], target = 0\n  Output: -1\n  Input: [1,3,5,7], target = 1\n  Output: -1\n  Input: [1,3,5,7], target = 2\n  Output: -1\n  Input: [1,3,5,7], target = 3\n  Output: -1\n  Input: [1,3,5,7], target = 4\n  Output: -1\n  Input: [1,3,5,7], target = 5\n  Output: -1\n  Input: [1,3,5,7], target = 6\n  Output: -1\n  Input: [1,3,5,7], target = 0\n  Output: -1\n  Input: [1,3,5,7], target = 1\n  Output: -1\n  Input: [1,3,5,7], target = 2\n  Output: -1\n  Input: [1,3,5,7], target = 3\n  Output: -1\n  Input: [1,3,5,7], target = 4\n  Output: -1\n  Input: [1,3,5,7], target = 5\n  Output: -1\n  Input: [1,3,5,7], target = 6\n  Output: -1\n  Input: [1,3,5,7], target = 0\n  Output: -1\n  Input: [1,3,5,7], target = 1\n  Output: -1\n  Input: [1,3,5,7], target = 2\n  Output: -1\n  Input: [1,3,5,7], target = 3\n  Output: -1\n  Input: [1,3,5,7], target = 4\n  Output: -1\n  Input: [1,3,5,7], target = 5\n  Output: -1\n  Input: [1,3,5,7], target = 6\n  Output: -1\n  Input: [1,3,5,7], target = 0\n  Output: -1\n  Input: [1,3,5,7], target = 1\n  Output: -1\n  Input: [1,3,5,7], target = 2\n  Output: -1\n  Input: [1,3,5,7], target = 3\n  Output: -1\n  Input: [1,3,5,7], target = 4\n  Output: -1\n  Input: [1,3,5,7], target = 5\n  Output: -1\n  Input: [1,3,5,7], target = 6\n  Output: -1\n  Input: [1,3,5,7], target = 0\n  Output: -1\n  Input: [1,3,5,7], target = 1\n  Output: -1\n  Input: [1,3,5,7], target = 2\n  Output: -1\n  Input: [1,3,5,7], target = 3\n  Output: -1\n  Input: [1,3,5,7], target = 4\n  Output: -1\n  Input: [1,3,5,7], target = 5\n  Output: -1\n  Input: [1,3,5,7], target = 6\n  Output: -1\n  Input: [1,3,5,7], target = 0\n  Output: -1\n  Input: [1,3,5,7], target = 1\n  Output: -1\n  Input: [1,3,5,7], target = 2\n  Output: -1\n  Input: [1,3,5,7], target = 3\n  Output: -1\n  Input: [1,3,5,7], target = 4\n  Output: -1\n  Input: [1,3,5,7], target = 5\n  Output: -1\n  Input: [1,3,5,7], target = 6\n  Output: -1\n  Input: [1,3,5,7], target = 0\n  Output: -1\n  Input: [1,3,5,7], target = 1\n  Output: -1\n  Input: [1,3,5,7], target = 2\n  Output: -1\n  Input: [1,3,5,7], target = 3\n  Output: -1\n  Input: [1,3,5,7], target = 4\n  Output: -1\n  Input: [1,3,5,7], target = 5\n  Output: -1\n  Input: [1,3,5,7], target = 6\n  Output: -1\n  Input: [1,3,5,7], target = 0\n  Output: -1\n  Input: [1,3,5,7], target = 1\n  Output: -1\n  Input: [1,3,5,7], target = 2\n  Output: -1\n  Input: [1,3,5,7], target = 3\n  Output: -1\n  Input: [1,3,5,7], target = 4\n  Output: -1\n  Input: [1,3,5,7], target = 5\n  Output: -1\n  Input: [1,3,5,7], target = 6\n  Output: -1\n  Input: [1,3,5,7], target = 0\n  Output: -1\n  Input: [1,3,5,7], target = 1\n  Output: -1\n  Input: [1,3,5,7], target = 2\n  Output: -1\n  Input: [1,3,5,7], target = 3\n  Output: -1\n  Input: [1,3,5,7], target = 4\n  Output: -1\n  Input: [1,3,5,7], target = 5\n  Output: -1\n  Input: [1,3,5,7], target = 6\n  Output: -1\n  Input: [1,3,5,7], target = 0\n  Output: -1\n  Input: [1,3,5,7], target = 1\n  Output: -1\n  Input: [1,3,5,7], target = 2\n  Output: -1\n  Input: [1,3,5,7], target = 3\n  Output: -1\n  Input: [1,3,5,7], target = 4\n  Output: -1\n  Input: [1,3,5,7], target = 5\n  Output: -1\n  Input: [1,3,5,7], target = 6\n  Output: -1\n  Input: [1,3,5,7], target = 0\n  Output: -1\n  Input: [1,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' || lastChar === '-' || lastChar === '_';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === '.' || lastChar === '-' || lastChar === '_';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === '.' || lastChar === '-' || lastChar === '_';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === '.' || lastChar === '-' || lastChar === '_';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === '.' || lastChar === '-' || lastChar === '_';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === '.' || lastChar === '-' || lastChar === '_';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === '.' || lastChar === '-' || lastChar === '_';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === '.' || lastChar === '-' || lastChar === '_';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastChar", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let i = arr.length - 1;\n  while (i >= 0 && arr[i] > arr[i - 1]) {\n    i--;\n  }\n  return i;\n};\n\n/*\n  Given an array of integers, return an array which contains all the\n  integers except the one at position k. Return null if there is no such\n  integer at position k.\n\n  Examples:\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10]) = [1,2,3,4,5,6,7,8,9,10]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  removeK([1,2,3,4,5,6,7,8,9,10,11,12,13,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let largest = Number.POSITIVE_INFINITY;\n  let smallest = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.NEGATIVE_INFINITY;\n      largest = Number.POSITIVE_INFINITY;\n    } else if (lst[i] > 0) {\n      smallest = Number.POSITIVE_INFINITY;\n      largest = Number.NEGATIVE_INFINITY;\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 4)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.POSITIVE_INFINITY;\n  let smallest = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.NEGATIVE_INFINITY;\n      largest = Number.POSITIVE_INFINITY;\n    } else if (lst[i] > 0) {\n      smallest = Number.POSITIVE_INFINITY;\n      largest = Number.NEGATIVE_INFINITY;\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (4, 1)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let largest = Number.POSITIVE_INFINITY;\n  let smallest = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.NEGATIVE_INFINITY;\n      largest = Number.POSITIVE_INFINITY;\n    } else if (lst[i] > 0) {\n      smallest = Number.POSITIVE_INFINITY;\n      largest = Number.NEGATIVE_INFINITY;\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (4, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.POSITIVE_INFINITY;\n  let smallest = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.NEGATIVE_INFINITY;\n      largest = Number.POSITIVE_INFINITY;\n    } else if (lst[i] > 0) {\n      smallest = Number.POSITIVE_INFINITY;\n      largest = Number.NEGATIVE_INFINITY;\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (4, 1)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let largest = Number.POSITIVE_INFINITY;\n  let smallest = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.NEGATIVE_INFINITY;\n      largest = Number.POSITIVE_INFINITY;\n    } else if (lst[i] > 0) {\n      smallest = Number.POSITIVE_INFINITY;\n      largest = Number.NEGATIVE_INFINITY;\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (4, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.POSITIVE_INFINITY;\n  let smallest = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.NEGATIVE_INFINITY;\n      largest = Number.POSITIVE_INFINITY;\n    } else if (lst[i] > 0) {\n      smallest = Number.POSITIVE_INFINITY;\n      largest = Number.NEGATIVE_INFINITY;\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (4, 1)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let largest = Number.POSITIVE_INFINITY;\n  let smallest = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.NEGATIVE_INFINITY;\n      largest = Number.POSITIVE_INFINITY;\n    } else if (lst[i] > 0) {\n      smallest = Number.POSITIVE_INFINITY;\n      largest = Number.NEGATIVE_INFINITY;\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" || b", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n <= 1) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  if (n % 4 === 0) return false;\n  if (n % 4 === 1) return true;\n  return false;\n};\n\n/*\n  Given a number n, return true if it is possible to divide it into two smaller numbers, such that each of them is even.\n  Example\n  divideIntoTwo(5) == [2,3]\n  divideIntoTwo(10) == [2,3,5]\n  divideIntoTwo(15) == [2,3,5,7]\n  */\nconst divideIntoTwo = (n) => {\n  if (n <= 0) return [];\n  if (n <= 1) return [n];\n  if (n % 2 === 0) return [n];\n  if (n % 2 === 1) return [n];\n  if (n % 4 === 0) return [n];\n  if (n % 4 === 1) return [n];\n  return [];\n};\n\n/*\n  Given a number n, return true if it is possible to divide it into two smaller numbers, such that each of them is odd.\n  Example\n  divideIntoTwo(5) == [2,3]\n  divideIntoTwo(10) == [2,3,5]\n  divideIntoTwo(15) == [2,3,5,7]\n  */\nconst divideIntoTwoOdd = (n) => {\n  if (n <= 0) return [];\n  if (n <= 1) return [n];\n  if (n % 2 === 0) return [n];\n  if (n % 2 === 1) return [n];\n  if (n % 4 === 0) return [n];\n  if (n % 4 === 1) return [n];\n  return [];\n};\n\n/*\n  Given a number n, return true if it is possible to divide it into two smaller numbers, such that each of them is divisible by 3.\n  Example\n  divideIntoTwo(5) == [2,3]\n  divideIntoTwo(10) == [2,3,5]\n  divideIntoTwo(15) == [2,3,5,7]\n  */\nconst divideIntoTwoDivisible = (n) => {\n  if (n <= 0) return [];\n  if (n <= 1) return [n];\n  if (n % 2 === 0) return [n];\n  if (n % 2 === 1) return [n];\n  if (n % 4 === 0) return [n];\n  if (n % 4 === 1) return [n];\n  return [];\n};\n\n/*\n  Given a number n, return true if it is possible to divide it into two smaller numbers, such that each of them is divisible by 5.\n  Example\n  divideIntoTwo(5) == [2,3]\n  divideIntoTwo(10) == [2,3,5]\n  divideIntoTwo(15) == [2,3,5,7]\n  */\nconst divideIntoTwoDivisibleOdd = (n) => {\n  if (n <= 0) return [];\n  if (n <= 1) return [n];\n  if (n % 2 === 0) return [n];\n  if (n % 2 === 1) return [n];\n  if (n % 4 === 0) return [n];\n  if (n % 4 === 1) return [n];\n  return [];\n};\n\n/*\n  Given a number n, return true if it is possible to divide it into two smaller numbers, such that each of them is divisible by 7.\n  Example\n  divideIntoTwo(5) == [2,3]\n  divideIntoTwo(10) == [2,3,5]\n  divideIntoTwo(15) == [2,3,5,7]\n  */\nconst divideIntoTwoDivisibleDivisible = (n) => {\n  if (n <= 0) return [];\n  if (n <= 1) return [n];\n  if (n % 2 === 0) return [n];\n  if (n % 2 === 1) return [n];\n  if (n % 4 === 0) return [n];\n  if (n % 4 === 1) return [n];\n  if (n % 8 === 0) return [n];\n  if (n % 8 === 1) return [n];\n  return [];\n};\n\n/*\n  Given a number n, return true if it is possible to divide it into two smaller numbers, such that each of them is divisible by 9.\n  Example\n  divideIntoTwo(5) == [2,3]\n  divideIntoTwo(10) == [2,3,5]\n  divideIntoTwo(15) == [2,3,5,7]\n  */\nconst divideIntoTwoDivisibleDivisibleOdd = (n) => {\n  if (n <= 0) return [];\n  if (n <= 1) return [n];\n  if (n % 2 === 0) return [n];\n  if (n % 2 === 1) return [n];\n  if (n % 4 === 0) return [n];\n  if (n % 4 === 1) return [n];\n  if (n % 8 === 0) return [n];\n  if (n % 8 === 1) return [n];\n  if (n % 16 === 0) return [n];\n  if (n % 16 === 1) return [n];\n  return [];\n};\n\n/*\n  Given a number n, return true if it is possible to divide it into two smaller numbers, such that each of them is divisible by 31.\n  Example\n  divideIntoTwo(5) == [2,3]\n  divideIntoTwo(10) == [2,3,5]\n  divideIntoTwo(15) == [2,3,5,7]\n  */\nconst divideIntoTwoDivisibleDivisibleDivisibleOdd = (n) => {\n  if (n <= 0) return [];\n  if (n <= 1) return [n];\n  if (n % 2 === 0) return [n];\n  if (n % 2 === 1) return [n];\n  if (n % 4 === 0) return [n];\n  if (n % 4 === 1) return [n];\n  if (n % 8 === 0) return [n];\n  if (n % 8 === 1) return [n];\n  if (n % 16 === 0) return [n];\n  if (n % 16 === 1) return [n];\n  if (n % 32 === 0) return [n];\n  if (n % 32 === 1) return [n];\n  return [];\n};\n\n/*\n  Given a number n, return true if it is possible to divide it into two smaller numbers, such that each of them is divisible by 63.\n  Example\n  divideIntoTwo(5) == [2,3]\n  divideIntoTwo(10) == [2,3,5]\n  divideIntoTwo(15) == [2,3,5,7]\n  */\nconst divideIntoTwoDivisibleDivisibleDivisibleOdd = (n) => {\n  if (n <= 0) return [];\n  if (n <= 1) return [n];\n  if (n % 2 === 0) return [n];\n  if (n % 2 === 1) return [n];\n  if (n % 4 === 0) return [n];\n  if (n % 4 === 1) return [n];\n  if (n % 8 === 0) return [n];\n  if (n % 8 === 1) return [n];\n  if (n % 16 === 0) return [n];\n  if (n % 16 === 1) return [n];\n  if (n % 32 === 0) return [n];\n  if (n % 32 === 1) return [n];\n  if (n % 64 === 0) return [n];\n  if (n % 64 === 1) return [n];\n  return [];\n};\n\n/*\n  Given a number n, return true if it is possible to divide it into two smaller numbers, such that each of them is divisible by 125.\n  Example\n  divideIntoTwo(5) == [2,3]\n  divideIntoTwo(10) == [2,3,5]\n  divideIntoTwo(15) == [2,3,5,7]\n  */\nconst divideIntoTwoDivisibleDivisibleDivisibleOdd = (n) => {\n  if (n <= 0) return [];\n  if (n <= 1) return [n];\n  if (n % 2 === 0) return [n];\n  if (n % 2 === 1) return [n];\n  if (n % 4 === 0) return [n];\n  if (n % 4 === 1) return [n];\n  if (n % 8 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  if (n <= 1) return 1;\n  return n * spefialFactorial(n - 1);\n};\n\n/*\n  Given a number n, return the factorial of n raised to the power n.\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, return the factorial of n raised to the power n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n * modulo(n - 1, m);\n};\n\n/*\n  Given a number n, return the factorial of n raised to the power n\n  modulo n modulo n.\n  For example:\n  >>> modulo(6, 4, 2)\n  2\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst moduloModulo = (n, m, m) => {\n  if (n <= 1) return 1;\n  return n * moduloModulo(n - 1, m, m);\n};\n\n/*\n  Given a number n, return the factorial of n raised to the power n\n  modulo n modulo n modulo n.\n  For example:\n  >>> moduloModulo(6, 4, 2, 2)\n  2\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst moduloModuloModulo = (n, m, m, m) => {\n  if (n <= 1) return 1;\n  return n * moduloModuloModulo(n - 1, m, m, m);\n};\n\n/*\n  Given a number n, return the factorial of n raised to the power n\n  modulo n modulo n modulo n modulo n.\n  For example:\n  >>> moduloModuloModulo(6, 4, 2, 2, 1, 1)\n  2\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst moduloModuloModuloModulo = (n, m, m, m, m) => {\n  if (n <= 1) return 1;\n  return n * moduloModuloModuloModulo(n - 1, m, m, m, m);\n};\n\n/*\n  Given a number n, return the factorial of n raised to the power n\n  modulo n modulo n modulo n modulo n modulo n.\n  For example:\n  >>> moduloModuloModuloModulo(6, 4, 2, 2, 1, 1)\n  2\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst moduloModuloModuloModuloModulo = (n, m, m, m, m, m) => {\n  if (n <= 1) return 1;\n  return n * moduloModuloModuloModuloModulo(n - 1, m, m, m, m, m);\n};\n\n/*\n  Given a number n, return the factorial of n raised to the power n\n  modulo n modulo n modulo n modulo n modulo n modulo n.\n  For example:\n  >>> moduloModuloModuloModuloModulo(6, 4, 2, 2, 1, 1)\n  2\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst moduloModuloModuloModuloModuloModulo = (n, m, m, m, m, m, m) => {\n  if (n <= 1) return 1;\n  return n * moduloModuloModuloModuloModuloModulo(n - 1, m, m, m, m, m, m);\n};\n\n/*\n  Given a number n, return the factorial of n raised to the power n\n  modulo n modulo n modulo n modulo n modulo n modulo n.\n  For example:\n  >>> moduloModuloModuloModuloModuloModulo(6, 4, 2, 2, 1, 1)\n  2\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst moduloModuloModuloModuloModuloModuloModulo = (n, m, m, m, m, m, m) => {\n  if (n <= 1) return 1;\n  return n * moduloModuloModuloModuloModuloModulo(n - 1, m, m, m, m, m, m, m);\n};\n\n/*\n  Given a number n, return the factorial of n raised to the power n\n  modulo n modulo n modulo n modulo n modulo n modulo n.\n  For example:\n  >>> moduloModuloModuloModuloModuloModuloModulo(6, 4, 2, 2, 1, 1)\n  2\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst moduloModuloModuloModuloModuloModuloModuloModulo = (n, m, m, m, m, m, m) => {\n  if (n <= 1) return 1;\n  return n * moduloModuloModuloModuloModuloModuloModulo(n - 1, m, m, m, m, m, m, m);\n};\n\n/*\n  Given a number n, return the factorial of n raised to the power n\n  modulo n modulo n modulo n modulo n modulo n modulo n modulo n.\n  For example:\n  >>> moduloModuloModuloModuloModuloModuloModuloModulo(6, 4, 2, 2, 1, 1)\n  2\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst moduloModuloModuloModuloModuloModuloModuloModuloModuloModulo = (n, m, m, m, m, m, m, m) => {\n  if (n <= 1) return 1;\n  return n * moduloModuloModuloModuloModuloModuloModuloModulo(n - 1, m, m, m, m, m, m, m, m, m);\n};\n\n/*\n  Given a number n, return the factorial of n raised to the power n\n  modulo n modulo n modulo n modulo n modulo n modulo n modulo n.\n  For example:\n  >>> moduloModuloModuloModuloModuloModuloModuloModuloModuloModulo(6, 4, 2, 2, 1, 1)\n  2\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst moduloModuloModuloModuloModuloModuloModuloModuloModuloModuloModuloModuloModuloModulo = (n, m, m, m, m, m, m, m, m, m) => {\n  if (n <= 1) return 1;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    let char = string[index];\n    if (char === '/') {\n      if (prefix!== '') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '*') {\n      if (prefix === '' || prefix === '*') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '?') {\n      if (prefix === '' || prefix === '?') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '.') {\n      if (prefix === '' || prefix === '.') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '[') {\n      if (prefix === '' || prefix === ']') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === ']') {\n      if (prefix === '' || prefix === ']') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '^') {\n      if (prefix === '' || prefix === '^') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '$') {\n      if (prefix === '' || prefix === '$') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '|') {\n      if (prefix === '' || prefix === '|') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '&') {\n      if (prefix === '' || prefix === '&') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '!') {\n      if (prefix === '' || prefix === '!') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '@') {\n      if (prefix === '' || prefix === '@') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '#') {\n      if (prefix === '' || prefix === '#') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '$') {\n      if (prefix === '' || prefix === '$') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '%') {\n      if (prefix === '' || prefix === '%') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '^') {\n      if (prefix === '' || prefix === '^') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '&') {\n      if (prefix === '' || prefix === '&') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '*') {\n      if (prefix === '' || prefix === '*') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '?') {\n      if (prefix === '' || prefix === '?') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '.') {\n      if (prefix === '' || prefix === '.') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '[') {\n      if (prefix === '' || prefix === ']') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === ']') {\n      if (prefix === '' || prefix === ']') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '^') {\n      if (prefix === '' || prefix === '^') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '$') {\n      if (prefix === '' || prefix === '$') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '|') {\n      if (prefix === '' || prefix === '|') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '&') {\n      if (prefix === '' || prefix === '&') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '!') {\n      if (prefix === '' || prefix === '!') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '@') {\n      if (prefix === '' || prefix === '@') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '#') {\n      if (prefix === '' || prefix === '#') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '$') {\n      if (prefix === '' || prefix === '$') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '%') {\n      if (prefix === '' || prefix === '%') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '^') {\n      if (prefix === '' || prefix === '^') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '&') {\n      if (prefix === '' || prefix === '&') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '*') {\n      if (prefix === '' || prefix === '*') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '?') {\n      if (prefix === '' || prefix === '?') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '.') {\n      if (prefix === '' || prefix === '.') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '[') {\n      if (prefix === '' || prefix === ']') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === ']') {\n      if (prefix === '' || prefix === ']') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '^') {\n      if (prefix === '' || prefix === '^') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '$') {\n      if (prefix === '' || prefix === '$') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '|') {\n      if (prefix === '' || prefix === '|') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '&') {\n      if (prefix === '' || prefix === '&') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '!') {\n      if (prefix === '' || prefix === '!') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '@') {\n      if (prefix === '' || prefix === '@') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '#') {\n      if (prefix === '' || prefix === '#') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '$') {\n      if (prefix === '' || prefix === '$') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '%') {\n      if (prefix === '' || prefix === '%') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '^') {\n      if (prefix === '' || prefix === '^') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '&') {\n      if (prefix === '' || prefix === '&') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '*') {\n      if (prefix === '' || prefix === '*') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '?') {\n      if (prefix === '' || prefix === '?') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '.') {\n      if (prefix === '' || prefix === '.') {\n        prefixes.push(prefix);\n        prefix = '';\n      }\n    } else if (char === '[') {\n      if (prefix === '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example-2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces2 = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example-2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces3 = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example-2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces4 = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example-2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces5 = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example-2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces6 = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example-2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces7 = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example-2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces8 = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example-2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces9 = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example-2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces10 = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example-2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces11 = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example-2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces12 = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of all squares of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of all cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of all cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoZero = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of all cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoZeroNoZero = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of all cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoZeroNoZeroNoZero = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of all cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoZeroNoZeroNoZeroNoZero = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of all cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoZeroNoZeroNoZeroNoZeroNoZero = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of all cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoZeroNoZeroNoZeroNoZeroNoZeroNoZero = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of all cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZero = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of all cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZero = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of all cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZero = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of all cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNo = (lst) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length < 2) continue;\n    if (word.length % 2 === 0) continue;\n    if (words.length - 1 === i) {\n      newWords.push(word);\n    } else {\n      let newWord = word;\n      for (let j = i + 1; j < words.length; j++) {\n        if (words[j]!== word) {\n          newWord = newWord + words[j];\n        }\n      }\n      newWords.push(newWord);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length < 2) continue;\n    if (word.length % 2 === 0) continue;\n    if (words.length - 1 === i) {\n      newWords.push(word);\n    } else {\n      let newWord = word;\n      for (let j = i + 1; j < words.length; j++) {\n        if (words[j]!== word) {\n          newWord = newWord + words[j];\n        }\n      }\n      newWords.push(newWord);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length < 2) continue;\n    if (word.length % 2 === 0) continue;\n    if (words.length - 1 === i) {\n      newWords.push(word);\n    } else {\n      let newWord = word;\n      for (let j = i + 1; j < words.length; j++) {\n        if (words[j]!== word) {\n          newWord = newWord + words[j];\n        }\n      }\n      newWords.push(newWord);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length < 2) continue;\n    if (word.length % 2 === 0) continue;\n    if (words.length - 1 === i) {\n      newWords.push(word);\n    } else {\n      let newWord = word;\n      for (let j = i + 1; j < words.length; j++) {\n        if (words[j]!== word) {\n          newWord = newWord + words[j];\n        }\n      }\n      newWords.push(newWord);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length < 2) continue;\n    if (word.length % 2 === 0) continue;\n    if (words.length - 1 === i) {\n      newWords.push(word);\n    } else {\n      let newWord = word;\n      for (let j = i + 1; j < words.length; j++) {\n        if (words[j]!== word) {\n          newWord = newWord + words[j];\n        }\n      }\n      newWords.push(newWord);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length < 2) continue;\n    if (word.length % 2 === 0) continue;\n    if (words.length - 1 === i) {\n      newWords.push(word);\n    } else {\n      let newWord = word;\n      for (let j = i + 1; j < words.length; j++) {\n        if (words[j]!== word) {\n          newWord = newWord + words[j];\n        }\n      }\n      newWords.push(newWord);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "<|endoftext|>/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n  let numerator;\n  let denominator;\n  let isFraction = true;\n  let isZero = false;\n  let isNegative = false;\n  let isPositive = false;\n  let isNegativeZero = false;\n  let isPositiveZero = false;\n  let isNegativeInfinity = false;\n  let isPositiveInfinity = false;\n  let isZeroInfinity = false;\n  let isInfinity = false;\n  let isNegativeInfinity = false;\n  let isPositiveInfinity = false;\n  let isNegativeInfinityZero = false;\n  let isPositiveInfinityZero = false;\n  let isNegativeInfinityInfinity = false;\n  let isPositiveInfinityInfinity = false;\n  let isZeroInfinityZero = false;\n  let isInfinityZero = false;\n  let isNegativeInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityZero = false;\n  let isZeroInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityZero = false;\n  let isZeroInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityZero = false;\n  let isZeroInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero = false;\n  let isPositiveInfinityInfinityInfinityZero = false;\n  let isZeroInfinityInfinityInfinityZero = false;\n  let isInfinityInfinityZero = false;\n  let isNegativeInfinityInfinityInfinityZero", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n\n  for (let num of nums) {\n    sum += num;\n    index++;\n  }\n\n  for (let i = index; i < nums.length; i++) {\n    result.push(nums[i]);\n  }\n\n  result.sort((a, b) => {\n    return a - b;\n  });\n\n  return result;\n};\n\n/*\n  Write a function which returns the sum of all the numbers in an array.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> sumfr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 15\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -36\n  >>> sumfr([-10, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      } else {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      } else {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      } else {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterEvenOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      } else {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterOddEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      } else {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterEvenOddEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      } else {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterOddEvenOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      } else {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterOddEvenOddEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      } else {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterOddEvenOddOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      } else {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterOddEvenOddEvenOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getRaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i - 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getQuadruples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getQuintuples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getSixTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getSevenTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getEightTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 9\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getNineTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 10\n      Explanation: \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1Orbits = planet1Orbit.orbits;\n  const planet2Orbits = planet2Orbit.orbits;\n  const planet1Orbits2 = planet1Orbits.concat(planet2Orbits);\n  const planet2Orbits2 = planet2Orbits.concat(planet1Orbits);\n  const planet1Orbits2 = planet1Orbits2.sort((a, b) => a.proximity - b.proximity);\n  const planet2Orbits2 = planet2Orbits2.sort((a, b) => a.proximity - b.proximity);\n  const planet1Orbits2 = planet1Orbits2.filter(p => p.orbits.includes(planet1));\n  const planet2Orbits2 = planet2Orbits2.filter(p => p.orbits.includes(planet2));\n  return planet1Orbits2.concat(planet2Orbits2);\n};\n\n// Planet orbits\n// ----------------\n// A planet orbit is a tuple containing two numbers: an orbit distance and an\n// orbit name.\n// Write a function that takes two planet names as strings planet1 and planet2.\n// The function should return an array containing all planets whose orbits are\n// located between the orbit of planet1 and the orbit of planet2, sorted by\n// the orbit distance to the sun.\n// The function should return an empty array if planet1 or planet2\n// are not correct planet names.\n// Examples\n// planetOrbits(\"Jupiter\", \"Neptune\") ==>\n// [\n//   (\"Earth\", \"Mercury\"),\n//   (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Uranus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// ]\n// planetOrbits(\"Earth\", \"Mercury\") ==>\n// []\n// planetOrbits(\"Earth\", \"Venus\") ==>\n// [\n//   (\"Earth\", \"Venus\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// ]\n// planetOrbits(\"Earth\", \"Uranus\") ==>\n// [\n//   (\"Earth\", \"Uranus\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// ]\n// planetOrbits(\"Earth\", \"Mars\") ==>\n// [\n//   (\"Earth\", \"Mars\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// ]\n// planetOrbits(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\") ==>\n// [\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// ]\n// planetOrbits(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\") ==>\n// [\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// ]\n// planetOrbits(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\") ==>\n// [\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),\n//   (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"),", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result.sort((a, b) => a.length - b.length);\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase,\n  and returns the string with its last letter uppercase,\n  and returns the string with its first letter capitalized,\n  and returns the string with its last letter capitalized,\n  and returns the string with its first letter lowercase,\n  and returns the string with its last letter lowercase,\n  and returns the string with its first letter uppercase", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).split(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlng(5)\n  '0 1 2 3 4 5'\n  */\nconst strlng = (n) => {\n  return strlngSequence(n).join(' ');\n};\n\n/**\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = douhleTheDifference;\n\n},{}],4:[function(require,module,exports){\n/*\n  douhleTheDifference.js\n  https://github.com/douhle/douhle-the-difference\n  \n  Copyright (c) 2014 Dou Hle\n  Licensed under the MIT license.\n*/\n\nconst douhleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = douhleTheDifference;\n\n},{}],5:[function(require,module,exports){\n/*\n  douhleTheDifference.js\n  https://github.com/douhle/douhle-the-difference\n  \n  Copyright (c) 2014 Dou Hle\n  Licensed under the MIT license.\n*/\n\nconst douhleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = douhleTheDifference;\n\n},{}],6:[function(require,module,exports){\n/*\n  douhleTheDifference.js\n  https://github.com/douhle/douhle-the-difference\n  \n  Copyright (c) 2014 Dou Hle\n  Licensed under the MIT license.\n*/\n\nconst douhleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = douhleTheDifference;\n\n},{}],7:[function(require,module,exports){\n/*\n  douhleTheDifference.js\n  https://github.com/douhle/douhle-the-difference\n  \n  Copyright (c) 2014 Dou Hle\n  Licensed under the MIT license.\n*/\n\nconst douhleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = douhleTheDifference;\n\n},{}],8:[function(require,module,exports){\n/*\n  douhleTheDifference.js\n  https://github.com/douhle/douhle-the-difference\n  \n  Copyright (c) 2014 Dou Hle\n  Licensed under the MIT license.\n*/\n\nconst douhleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = douhleTheDifference;\n\n},{}],9:[function(require,module,exports){\n/*\n  douhleTheDifference.js\n  https://github.com/douhle/douhle-the-difference\n  \n  Copyright (c) 2014 Dou Hle\n  Licensed under the MIT license.\n*/\n\nconst douhleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = douhleTheDifference;\n\n},{}],10:[function(require,module,exports){\n/*\n  douhleTheDifference.js\n  https://github.com/douhle/douhle-the-difference\n  \n  Copyright (c) 2014 Dou Hle\n  Licensed under the MIT license.\n*/\n\nconst douhleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = douhleTheDifference;\n\n},{}],11:[function(require,module,exports){\n/*\n  douhleTheDifference.js\n  https://github.com/douhle/douhle-the-difference\n  \n  Copyright (c) 2014 Dou Hle\n  Licensed under the MIT license.\n*/\n\nconst douhleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = douhleTheDifference;\n\n},{}],12:[function(require,module,exports){\n/*\n  douhleTheDifference.js\n  https://github.com/douhle/douhle-the-difference\n  \n  Copyright (c) 2014 Dou Hle\n  Licensed under the MIT license.\n*/\n\nconst douhleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = douhleTheDifference;\n\n},{}],13:[function(require,module,exports){\n/*\n  douhleTheDifference.js\n  https://github.com/douhle/douhle-the-difference\n  \n  Copyright (c) 2014 Dou Hle\n  Licensed under the MIT license.\n*/\n\nconst douhleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = douhleTheDifference;\n\n},{}],14:[function(require,module,exports){\n/*\n  douhleTheDifference.js\n  https://github.com/douhle/douhle-the-difference\n  \n  Copyright (c) 2014 Dou Hle\n  Licensed under the MIT license.\n*/\n\nconst douhleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = douhleTheDifference;\n\n},{}],15:[function(require,module,exports){\n/*\n  douhleTheDifference.js\n  https://github.com/douhle/douhle-the-difference\n  \n  Copyright (c) 2014 Dou Hle\n  Licensed under the MIT license.\n*/\n\nconst douhleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n  const gameLength = game.length;\n  const guessLength = guess.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174 = 0;\n  let sum175 = 0;\n  let sum176 = 0;\n  let sum177 = 0;\n  let sum178 = 0;\n  let sum179 = 0;\n  let sum180 = 0;\n  let sum181 = 0;\n  let sum182 = 0;\n  let sum183 = 0;\n  let sum184 = 0;\n  let sum185 = 0;\n  let sum186 = 0;\n  let sum187 = 0;\n  let sum188 = 0;\n  let sum189 = 0;\n  let sum190 = 0;\n  let sum191 = 0;\n  let sum192 = 0;\n  let sum193 = 0;\n  let sum194 = 0;\n  let sum195 = 0;\n  let sum196 = 0;\n  let sum197 = 0;\n  let sum198 = 0;\n  let sum199 = 0;\n  let sum200 = 0;\n  let sum201 = 0;\n  let sum202 = 0;\n  let sum203 = 0;\n  let sum204 = 0;\n  let sum205 = 0;\n  let sum206 = 0;\n  let sum207 = 0;\n  let sum208 = 0;\n  let sum209 = 0;\n  let sum210 = 0;\n  let sum211 = 0;\n  let sum212 = 0;\n  let sum213 = 0;\n  let sum214 = 0;\n  let sum215 = 0;\n  let sum216 = 0;\n  let sum217 = 0;\n  let sum218 = 0;\n  let sum219 = 0;\n  let sum220 = 0;\n  let sum221 = 0;\n  let sum222 = 0;\n  let sum223 = 0;\n  let sum224 = 0;\n  let sum225 = 0;\n  let sum226 = 0;\n  let sum227 = 0;\n  let sum228 = 0;\n  let sum229 = 0;\n  let sum230 = 0;\n  let sum231 = 0;\n  let sum232 = 0;\n  let sum233 = 0;\n  let sum234 = 0;\n  let sum235 = 0;\n  let sum236 = 0;\n  let sum237 = 0;\n  let sum238 = 0;\n  let sum239 = 0;\n  let sum240 = 0;\n  let sum241 = 0;\n  let sum242 = 0;\n  let sum243 = 0;\n  let sum244 = 0;\n  let sum245 = 0;\n  let sum246 = 0;\n  let sum247 = 0;\n  let sum248 = 0;\n  let sum249 = 0;\n  let sum250 = 0;\n  let sum251 = 0;\n  let sum252 = 0;\n  let sum253 = 0;\n  let sum254 = 0;\n  let sum255 = 0;\n  let sum256 = 0;\n  let sum257 = 0;\n  let sum258 = 0;\n  let sum259 = 0;\n  let sum260 = 0;\n  let sum261 = 0;\n  let sum262 = 0;\n  let sum263 = 0;\n  let sum264 = 0;\n  let sum265 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_str = '';\n  let extension_len = extensions.length;\n  for (let i = 0; i < extension_len; i++) {\n    let extension = extensions[i];\n    let extension_len = extension.length;\n    for (let j = 0; j < extension_len; j++) {\n      let letter = extension[j];\n      if (letter >= 'A' && letter <= 'Z') {\n        letter = letter - 'A' + 'a';\n      }\n      extension_str += letter;\n    }\n    let extension_strength = extension_strength * -1;\n    if (extension_strength > extension_str.length) {\n      extension_str = extension_str;\n    }\n  }\n  return class_name + extension_str;\n};\n\n/*\n  Given a string, return its first character in uppercase.\n  Example:\n  strFirstUpper('my_string') == 'M'\n*/\nconst strFirstUpper = (str) => {\n  let first_upper = str.charAt(0);\n  return first_upper.toUpperCase();\n};\n\n/*\n  Given a string, return its first character in lowercase.\n  Example:\n  strFirstLower('my_string') =='m'\n*/\nconst strFirstLower = (str) => {\n  let first_lower = str.charAt(0);\n  return first_lower.toLowerCase();\n};\n\n/*\n  Given a string, return its first character in uppercase and in lowercase.\n  Example:\n  strFirstUpperAndLower(my_string) =='mM'\n*/\nconst strFirstUpperAndLower = (str) => {\n  let first_upper = strFirstUpper(str);\n  let first_lower = strFirstLower(str);\n  return first_upper + first_lower;\n};\n\n/*\n  Given a string, return its first character in uppercase and in lowercase and\n  in uppercase.\n  Example:\n  strFirstUpperAndLowerAndUpper(my_string) =='mMmM'\n*/\nconst strFirstUpperAndLowerAndUpper = (str) => {\n  let first_upper = strFirstUpperAndLower(str);\n  let first_lower = strFirstLowerAndUpper(str);\n  let first_upper = strFirstUpper(str);\n  let first_lower = strFirstLower(str);\n  return first_upper + first_lower + first_upper;\n};\n\n/*\n  Given a string, return its first character in uppercase and in lowercase and\n  in uppercase and in lowercase.\n  Example:\n  strFirstUpperAndLowerAndUpperAndLower(my_string) =='mMmMmM'\n*/\nconst strFirstUpperAndLowerAndUpperAndLower = (str) => {\n  let first_upper = strFirstUpperAndLowerAndUpper(str);\n  let first_lower = strFirstLowerAndUpperAndLower(str);\n  let first_upper = strFirstUpper(str);\n  let first_lower = strFirstLower(str);\n  return first_upper + first_lower + first_upper + first_lower;\n};\n\n/*\n  Given a string, return its first character in uppercase and in lowercase and\n  in uppercase and in lowercase and in uppercase.\n  Example:\n  strFirstUpperAndLowerAndUpperAndLowerAndUpper(my_string) =='mMmMmMmM'\n*/\nconst strFirstUpperAndLowerAndUpperAndLowerAndUpper = (str) => {\n  let first_upper = strFirstUpperAndLowerAndUpperAndLower(str);\n  let first_lower = strFirstLowerAndUpperAndLowerAndUpper(str);\n  let first_upper = strFirstUpper(str);\n  let first_lower = strFirstLower(str);\n  return first_upper + first_lower + first_upper + first_lower + first_upper;\n};\n\n/*\n  Given a string, return its first character in uppercase and in lowercase and\n  in uppercase and in lowercase and in uppercase and in lowercase.\n  Example:\n  strFirstUpperAndLowerAndUpperAndLowerAndUpperAndLower(my_string) =='mMmMmMmMmM'\n*/\nconst strFirstUpperAndLowerAndUpperAndLowerAndUpperAndLower = (str) => {\n  let first_upper = strFirstUpperAndLowerAndUpperAndLowerAndUpperAndLower(str);\n  let first_lower = strFirstLowerAndUpperAndLowerAndUpperAndLower(str);\n  let first_upper = strFirstUpper(str);\n  let first_lower = strFirstLower(str);\n  return first_upper + first_lower + first_upper + first_lower + first_upper;\n};\n\n/*\n  Given a string, return its first character in uppercase and in lowercase and\n  in uppercase and in lowercase and in uppercase and in lowercase and in uppercase.\n  Example:\n  strFirstUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLower(my_string) =='mMmMmMmMmMmMmM'\n*/\nconst strFirstUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLower = (str) => {\n  let first_upper = strFirstUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLower(str);\n  let first_lower = strFirstLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLower(str);\n  let first_upper = strFirstUpper(str);\n  let first_lower = strFirstLower(str);\n  return first_upper + first_lower + first_upper + first_lower + first_upper + first_lower + first_upper;\n};\n\n/*\n  Given a string, return its first character in uppercase and in lowercase and\n  in uppercase and in lowercase and in uppercase and in lowercase and in uppercase and in lowercase.\n  Example:\n  strFirstUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAndLowerAndUpperAnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  let aArray = a.split('');\n  let bArray = b.split('');\n  let aLen = aArray.length;\n  let bLen = bArray.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aRotate = 0;\n  let bRotate = 0;\n  let aRotateIndex = 0;\n  let bRotateIndex = 0;\n  let aRotateRotate = 0;\n  let bRotateRotate = 0;\n  let aRotateRotateIndex = 0;\n  let bRotateRotateIndex = 0;\n  let aRotateRotateRotate = 0;\n  let bRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotate", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let oddCount = 0;\n  let evenCount = 0;\n  let digits = String(num).split('');\n  digits.forEach((digit) => {\n    if (digit % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  });\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of letters and the number of digits respectively.\n\n   Example:\n      lettersAndDigits('abc') ==> (2, 3)\n      lettersAndDigits('abc 123') ==> (2, 3)\n      lettersAndDigits('abc 123 456') ==> (2, 3)\n      lettersAndDigits('abc 123 456 789') ==> (2, 3)\n  */\nconst lettersAndDigits = (str) => {\n  let letterCount = 0;\n  let digitCount = 0;\n  let letters = str.split('');\n  letters.forEach((letter) => {\n    if (letter === 'a' || letter === 'A') {\n      letterCount++;\n    } else {\n      digitCount++;\n    }\n  });\n  return [letterCount, digitCount];\n};\n\n/*Given a string. return a tuple that has the number of letters and the number of digits respectively.\n\n   Example:\n      lettersAndDigits('abc') ==> (2, 3)\n      lettersAndDigits('abc 123') ==> (2, 3)\n      lettersAndDigits('abc 123 456') ==> (2, 3)\n      lettersAndDigits('abc 123 456 789') ==> (2, 3)\n  */\nconst lettersAndDigits2 = (str) => {\n  let letterCount = 0;\n  let digitCount = 0;\n  let letters = str.split('');\n  letters.forEach((letter) => {\n    if (letter === 'a' || letter === 'A') {\n      letterCount++;\n    } else {\n      digitCount++;\n    }\n  });\n  return [letterCount, digitCount];\n};\n\n/*Given a string. return a tuple that has the number of letters and the number of digits respectively.\n\n   Example:\n      lettersAndDigits2('abc') ==> (2, 3)\n      lettersAndDigits2('abc 123') ==> (2, 3)\n      lettersAndDigits2('abc 123 456') ==> (2, 3)\n      lettersAndDigits2('abc 123 456 789') ==> (2, 3)\n  */\nconst lettersAndDigits3 = (str) => {\n  let letterCount = 0;\n  let digitCount = 0;\n  let letters = str.split('');\n  letters.forEach((letter) => {\n    if (letter === 'a' || letter === 'A') {\n      letterCount++;\n    } else {\n      digitCount++;\n    }\n  });\n  return [letterCount, digitCount];\n};\n\n/*Given a string. return a tuple that has the number of letters and the number of digits respectively.\n\n   Example:\n      lettersAndDigits3('abc') ==> (2, 3)\n      lettersAndDigits3('abc 123') ==> (2, 3)\n      lettersAndDigits3('abc 123 456') ==> (2, 3)\n      lettersAndDigits3('abc 123 456 789') ==> (2, 3)\n  */\nconst lettersAndDigits4 = (str) => {\n  let letterCount = 0;\n  let digitCount = 0;\n  let letters = str.split('');\n  letters.forEach((letter) => {\n    if (letter === 'a' || letter === 'A') {\n      letterCount++;\n    } else {\n      digitCount++;\n    }\n  });\n  return [letterCount, digitCount];\n};\n\n/*Given a string. return a tuple that has the number of letters and the number of digits respectively.\n\n   Example:\n      lettersAndDigits3('abc') ==> (2, 3)\n      lettersAndDigits3('abc 123') ==> (2, 3)\n      lettersAndDigits3('abc 123 456') ==> (2, 3)\n      lettersAndDigits3('abc 123 456 789') ==> (2, 3)\n  */\nconst lettersAndDigits5 = (str) => {\n  let letterCount = 0;\n  let digitCount = 0;\n  let letters = str.split('');\n  letters.forEach((letter) => {\n    if (letter === 'a' || letter === 'A') {\n      letterCount++;\n    } else {\n      digitCount++;\n    }\n  });\n  return [letterCount, digitCount];\n};\n\n/*Given a string. return a tuple that has the number of letters and the number of digits respectively.\n\n   Example:\n      lettersAndDigits2('abc') ==> (2, 3)\n      lettersAndDigits2('abc 123') ==> (2, 3)\n      lettersAndDigits2('abc 123 456') ==> (2, 3)\n      lettersAndDigits2('abc 123 456 789') ==> (2, 3)\n  */\nconst lettersAndDigits6 = (str) => {\n  let letterCount = 0;\n  let digitCount = 0;\n  let letters = str.split('');\n  letters.forEach((letter) => {\n    if (letter === 'a' || letter === 'A') {\n      letterCount++;\n    } else {\n      digitCount++;\n    }\n  });\n  return [letterCount, digitCount];\n};\n\n/*Given a string. return a tuple that has the number of letters and the number of digits respectively.\n\n   Example:\n      lettersAndDigits2('abc') ==> (2, 3)\n      lettersAndDigits2('abc 123') ==> (2, 3)\n      lettersAndDigits2('abc 123 456') ==> (2, 3)\n      lettersAndDigits2('abc 123 456 789') ==> (2, 3)\n  */\nconst lettersAndDigits7 = (str) => {\n  let letterCount = 0;\n  let digitCount = 0;\n  let letters = str.split('');\n  letters.forEach((letter) => {\n    if (letter === 'a' || letter === 'A') {\n      letterCount++;\n    } else {\n      digitCount++;\n    }\n  });\n  return [letterCount, digitCount];\n};\n\n/*Given a string. return a tuple that has the number of letters and the number of digits respectively.\n\n   Example:\n      lettersAndDigits2('abc') ==> (2, 3)\n      lettersAndDigits2('abc 123') ==> (2, 3)\n      lettersAndDigits2('abc 123 456') ==> (2, 3)\n      lettersAndDigits2('abc 123 456 789') ==> (2, 3)\n  */\nconst lettersAndDigits8 = (str) => {\n  let letterCount = 0;\n  let digitCount = 0;\n  let letters = str.split('');\n  letters.forEach((letter) => {\n    if (letter === 'a' || letter === 'A') {\n      letterCount++;\n    } else {\n      digitCount++;\n    }\n  });\n  return [letterCount, digitCount];\n};\n\n/*Given a string. return a tuple that has the number of letters and the number of digits respectively.\n\n   Example:\n      lettersAndDigits2('abc') ==> (2, 3)\n      lettersAndDigits2('abc 123') ==> (2, 3)\n      lettersAndDigits2('abc 123 456') ==> (2, 3)\n      lettersAndDigits2('abc 123 456 789') ==> (2, 3)\n  */\nconst lettersAndDigits9 = (str) => {\n  let letterCount = 0;\n  let digitCount = 0;\n  let letters = str.split('');\n  letters.forEach((letter) => {\n    if (letter === 'a' || letter === 'A') {\n      letterCount++;\n    } else {\n      digitCount++;\n    }\n  });\n  return [letterCount, digitCount];\n};\n\n/*Given a string. return a tuple that has the number of letter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n  let str = intHoMiniRomanStr(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniDecimal(19) == '19'\n  >>> intHoMiniDecimal(152) == '152'\n  >>> intHoMiniDecimal(426) == '426'\n  */\nconst intHoMiniDecimal = (number) => {\n  let str = intHoMiniDecimalStr(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniHex(19) == '0x19'\n  >>> intHoMiniHex(152) == '0x152'\n  >>> intHoMiniHex(426) == '0x426'\n  */\nconst intHoMiniHex = (number) => {\n  let str = intHoMiniHexStr(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniOctal(19) == '0o19'\n  >>> intHoMiniOctal(152) == '0o152'\n  >>> intHoMiniOctal(426) == '0o426'\n  */\nconst intHoMiniOctal = (number) => {\n  let str = intHoMiniOctalStr(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniBinary(19) == '0b19'\n  >>> intHoMiniBinary(152) == '0b152'\n  >>> intHoMiniBinary(426) == '0b426'\n  */\nconst intHoMiniBinary = function (number) {\n  let str = intHoMiniBinaryStr(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, return its decimal equivalent as a string,\n  and convert it to lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniDecimalToLower(19) == '19'\n  >>> intHoMiniDecimalToLower(152) == '152'\n  >>> intHoMiniDecimalToLower(426) == '426'\n  */\nconst intHoMiniDecimalToLower = (number) => {\n  let str = intHoMiniDecimalToLowerStr(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, return its decimal equivalent as a string,\n  and convert it to lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniDecimalToLower2(19) == '19'\n  >>> intHoMiniDecimalToLower2(152) == '152'\n  >>> intHoMiniDecimalToLower2(426) == '426'\n  */\nconst intHoMiniDecimalToLower2 = (number) => {\n  let str = intHoMiniDecimalToLower2Str(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, return its hexadecimal equivalent as a string,\n  and convert it to lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniHexToLower(19) == '0x19'\n  >>> intHoMiniHexToLower(152) == '0x152'\n  >>> intHoMiniHexToLower(426) == '0x426'\n  */\nconst intHoMiniHexToLower = (number) => {\n  let str = intHoMiniHexToLowerStr(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, return its octal equivalent as a string,\n  and convert it to lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniOctalToLower(19) == '0o19'\n  >>> intHoMiniOctalToLower(152) == '0o152'\n  >>> intHoMiniOctalToLower(426) == '0o426'\n  */\nconst intHoMiniOctalToLower = (number) => {\n  let str = intHoMiniOctalToLowerStr(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, return its binary equivalent as a string,\n  and convert it to lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniBinaryToLower(19) == '0b19'\n  >>> intHoMiniBinaryToLower(152) == '0b152'\n  >>> intHoMiniBinaryToLower(426) == '0b426'\n  */\nconst intHoMiniBinaryToLower = (number) => {\n  let str = intHoMiniBinaryToLowerStr(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, return its decimal equivalent as a string,\n  and convert it to lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniDecimalToLower2(19) == '19'\n  >>> intHoMiniDecimalToLower2(152) == '152'\n  >>> intHoMiniDecimalToLower2(426) == '426'\n  */\nconst intHoMiniDecimalToLower2 = (number) => {\n  let str = intHoMiniDecimalToLower2Str(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, return its hexadecimal equivalent as a string,\n  and convert it to lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniHexToLower2(19) == '0x19'\n  >>> intHoMiniHexToLower2(152) == '0x152'\n  >>> intHoMiniHexToLower2(426) == '0x426'\n  */\nconst intHoMiniHexToLower2 = (number) => {\n  let str = intHoMiniHexToLower2Str(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, return its octal equivalent as a string,\n  and convert it to lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniOctalToLower2(19) == '0o19'\n  >>> intHoMiniOctalToLower2(152) == '0o152'\n  >>> intHoMiniOctalToLower2(426) == '0o426'\n  */\nconst intHoMiniOctalToLower2 = (number) => {\n  let str = intHoMiniOctalToLower2Str(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, return its binary equivalent as a string,\n  and convert it to lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniBinaryToLower2(19) == '0b19'\n  >>> intHoMiniBinaryToLower2(152) == '0b152'\n  >>> intHoMiniBinaryToLower2(426) == '0b426'\n  */\nconst intHoMiniBinaryToLower2 = (number) => {\n  let str = intHoMiniBinaryToLower2Str(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, return its decimal equivalent as a string,\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  let angle = Math.atan2(b, a);\n  if (angle >= Math.PI / 2 && angle <= -Math.PI / 2) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a square. Return true if the three\n  sides form a square, false otherwise.\n  A square is a square in which one side is length of a side and one side is\n  length of a side.\n  Example:\n  squareSideLength(3, 3, 3) == true\n  squareSideLength(3, 2, 3) == false\n  */\nconst squareSideLength = (a, b, c) => {\n  let length = Math.sqrt(a * a + b * b);\n  if (length >= c && length <= c) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a circle. Return true if the three\n  sides form a circle, false otherwise.\n  A circle is a circle in which one side is length of a side and one side is\n  length of a side.\n  Example:\n  circleSideLength(3, 3, 3) == true\n  circleSideLength(3, 2, 3) == false\n  */\nconst circleSideLength = (a, b, c) => {\n  let length = Math.sqrt(a * a + b * b);\n  if (length >= c && length <= c) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Return true if the three\n  sides form a pentagon, false otherwise.\n  A pentagon is a pentagon in which one side is length of a side and one side is\n  length of a side.\n  Example:\n  pentagonSideLength(3, 3, 3) == true\n  pentagonSideLength(3, 2, 3) == false\n  */\nconst pentagonSideLength = (a, b, c) => {\n  let length = Math.sqrt(a * a + b * b);\n  if (length >= c && length <= c) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a hexagon. Return true if the three\n  sides form a hexagon, false otherwise.\n  A hexagon is a hexagon in which one side is length of a side and one side is\n  length of a side.\n  Example:\n  hexagonSideLength(3, 3, 3) == true\n  hexagonSideLength(3, 2, 3) == false\n  */\nconst hexagonSideLength = (a, b, c) => {\n  let length = Math.sqrt(a * a + b * b);\n  if (length >= c && length <= c) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a heptagon. Return true if the three\n  sides form a heptagon, false otherwise.\n  A heptagon is a heptagon in which one side is length of a side and one side is\n  length of a side.\n  Example:\n  heptagonSideLength(3, 3, 3) == true\n  heptagonSideLength(3, 2, 3) == false\n  */\nconst heptagonSideLength = (a, b, c) => {\n  let length = Math.sqrt(a * a + b * b);\n  if (length >= c && length <= c) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Return true if the three\n  sides form a decagon, false otherwise.\n  A decagon is a decagon in which one side is length of a side and one side is\n  length of a side.\n  Example:\n  decagonSideLength(3, 3, 3) == true\n  decagonSideLength(3, 2, 3) == false\n  */\nconst decagonSideLength = (a, b, c) => {\n  let length = Math.sqrt(a * a + b * b);\n  if (length >= c && length <= c) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a trigon. Return true if the three\n  sides form a trigon, false otherwise.\n  A trigon is a trigon in which one side is length of a side and one side is\n  length of a side.\n  Example:\n  trigonSideLength(3, 3, 3) == true\n  trigonSideLength(3, 2, 3) == false\n  */\nconst trigonSideLength = (a, b, c) => {\n  let length = Math.sqrt(a * a + b * b);\n  if (length >= c && length <= c) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a quatrangle. Return true if the three\n  sides form a quatrangle, false otherwise.\n  A quatrangle is a quatrangle in which one side is length of a side and one side is\n  length of a side.\n  Example:\n  quatrangleSideLength(3, 3, 3) == true\n  quatrangleSideLength(3, 2, 3) == false\n  */\nconst quatrangleSideLength = (a, b, c) => {\n  let length = Math.sqrt(a * a + b * b);\n  if (length >= c && length <= c) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a heptagon. Return true if the three\n  sides form a heptagon, false otherwise.\n  A heptagon is a heptagon in which one side is length of a side and one side is\n  length of a side.\n  Example:\n  heptagonSideLength(3, 3, 3) == true\n  heptagonSideLength(3, 2, 3) == false\n  */\nconst heptagonSideLength = (a, b, c) => {\n  let length = Math.sqrt(a * a + b * b);\n  if (length >= c && length <= c) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Return true if the three\n  sides form a decagon, false otherwise.\n  A decagon is a decagon in which one side is length of a side and one side is\n  length of a side.\n  Example:\n  decagonSideLength(3, 3, 3) == true\n  decagonSideLength(3, 2, 3) == false\n  */\nconst decagonSideLength = (a, b, c) => {\n  let length = Math.sqrt(a * a + b * b);\n  if (length >= c && length <= c) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a trigon. Return true if the three\n  sides form a trigon, false otherwise.\n  A trigon is a trigon in which one side is length of a side and one side is\n  length of a side.\n  Example:\n  trigonSideLength(3, 3, 3) == true\n  trigonSideLength(3, 2, 3) == false\n  */\nconst trigonSideLength = (a, b, c) => {\n  let length = Math.sqrt(a * a + b * b);\n  if (length >= c && length <= c) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a square. Return true if the three\n  sides form a square, false otherwise.\n  A square is a square in which one side is length of a side and one ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let maxCharWord = \"\";\n  let maxCharWordWord = \"\";\n  let maxCharWordWordWord = \"\";\n  let maxCharWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  const remainder = Math.floor((number - need) / remaining);\n  const remainderRemaining = Math.floor((number - need - remainder * remaining) / remaining);\n  const remainderRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemainingRemaining * remaining - remainderRemainingRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemainingRemaining * remaining - remainderRemainingRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining) / remaining);\n  const remainderRemainingRemainingRemainingRemainingRemaining = Math.floor((number - need - remainder * remaining - remainderRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - remainderRemainingRemaining * remaining - ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many unique characters (regardless of case) does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many unique characters (regardless of case) does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many unique characters (regardless of case) does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many unique characters (regardless of case) does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many unique characters (regardless of case) does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many unique characters (regardless of case) does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many unique characters (regardless of case) does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many unique characters (regardless of case) does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many unique characters (regardless of case) does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many unique characters (regardless of case) does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many unique characters (regardless of case) does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many unique characters (regardless of case) does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many unique characters (regardless of case) does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (chars[i] === chars[j]) {\n        count++;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n\n  let result = 0\n  for (let i = 0; i < operatorList.length; i++) {\n    result = result + operatorList[i] * operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n\n  let result = 0\n  for (let i = 0; i < operatorList.length; i++) {\n    result = result + operatorList[i] * operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n\n  let result = 0\n  for (let i = 0; i < operatorList.length; i++) {\n    result = result + operatorList[i] * operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n\n  let result = 0\n  for (let i = 0; i < operatorList.length; i++) {\n    result = result + operatorList[i] * operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n\n  let result = 0\n  for (let i = 0; i < operatorList.length; i++) {\n    result = result + operatorList[i] * operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n\n  let result = 0\n  for (let i = 0; i < operatorList.length; i++) {\n    result = result + operatorList[i] * operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n\n  let result = 0\n  for (let i = 0; i < operatorList.length; i++) {\n    result = result + operatorList[i] * operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  let res = \"\";\n  let len = s.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5Hex = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5HexWithPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5HexWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5HexWithPaddingHex = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5HexWithPaddingHex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5HexWithPaddingHexWithPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5HexWithPaddingHexWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5HexWithPaddingHexWithPaddingHexWithPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5HexWithPaddingHexWithPaddingHexWithPaddingHexWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5HexWithPaddingHexWithPaddingHexWithPaddingHexWithPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5HexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5HexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5HexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5HexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5HexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5HexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5HexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5HexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHex = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5HexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWithPaddingHexWith", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = 0;\n  let k = 0;\n\n  while (i > 0) {\n    if (i % 2 === 0) {\n      result.push(j);\n      j++;\n    }\n    i++;\n  }\n\n  while (j > 0) {\n    if (j % 2 === 0) {\n      result.push(k);\n      k++;\n    }\n    j--;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 that divides n.\n */\nconst genfratePowerOfTwo = n => {\n  let result = 0;\n  let i = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      result = Math.pow(2, i);\n      i++;\n    }\n    n--;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 that divides n.\n */\nconst genfratePowerOfTwoMinusOne = n => {\n  let result = 0;\n  let i = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      result = Math.pow(2, i) - 1;\n      i++;\n    }\n    n--;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 that divides n.\n */\nconst genfratePowerOfTwoMinusOneMinusOne = n => {\n  let result = 0;\n  let i = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      result = Math.pow(2, i) - 1;\n      i++;\n    }\n    n--;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 that divides n.\n */\nconst genfratePowerOfTwoMinusOneMinusOneMinusOne = n => {\n  let result = 0;\n  let i = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      result = Math.pow(2, i) - 1;\n      i++;\n    }\n    n--;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 that divides n.\n */\nconst genfratePowerOfTwoMinusOneMinusOneMinusOneMinusOne = n => {\n  let result = 0;\n  let i = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      result = Math.pow(2, i) - 1;\n      i++;\n    }\n    n--;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 that divides n.\n */\nconst genfratePowerOfTwoMinusOneMinusOneMinusOneMinusOneMinusOne = n => {\n  let result = 0;\n  let i = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      result = Math.pow(2, i) - 1;\n      i++;\n    }\n    n--;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 that divides n.\n */\nconst genfratePowerOfTwoMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = n => {\n  let result = 0;\n  let i = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      result = Math.pow(2, i) - 1;\n      i++;\n    }\n    n--;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 that divides n.\n */\nconst genfratePowerOfTwoMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = n => {\n  let result = 0;\n  let i = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      result = Math.pow(2, i) - 1;\n      i++;\n    }\n    n--;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 that divides n.\n */\nconst genfratePowerOfTwoMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = n => {\n  let result = 0;\n  let i = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      result = Math.pow(2, i) - 1;\n      i++;\n    }\n    n--;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 that divides n.\n */\nconst genfratePowerOfTwoMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = n => {\n  let result = 0;\n  let i = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      result = Math.pow(2, i) - 1;\n      i++;\n    }\n    n--;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 that divides n.\n */\nconst genfratePowerOfTwoMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = n => {\n  let result = 0;\n  let i = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      result = Math.pow(2, i) - 1;\n      i++;\n    }\n    n--;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 that divides n.\n */\nconst genfratePowerOfTwoMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinus", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_count = notes.reduce((acc, note) => {\n    const note_count = note.match(/\\d+/g);\n    acc[note_count] = acc[note_count] || 0;\n    acc[note_count]++;\n    return acc;\n  }, {});\n  return Object.keys(notes_count).map(key => notes_count[key]);\n};\n\nmodule.exports = { pardeMusic };\n\n},{}],4:[function(require,module,exports){\nconst noteToBeat = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst beatToNote = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst noteToBeatString = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nconst beatToNoteString = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nmodule.exports = {\n  noteToBeat,\n  beatToNote,\n  noteToBeatString,\n  beatToNoteString\n};\n\n},{}],5:[function(require,module,exports){\nconst noteToBeat = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst beatToNote = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst noteToBeatString = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nconst beatToNoteString = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nmodule.exports = {\n  noteToBeat,\n  beatToNote,\n  noteToBeatString,\n  beatToNoteString\n};\n\n},{}],6:[function(require,module,exports){\nconst noteToBeat = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst beatToNote = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst noteToBeatString = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nconst beatToNoteString = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nmodule.exports = {\n  noteToBeat,\n  beatToNote,\n  noteToBeatString,\n  beatToNoteString\n};\n\n},{}],7:[function(require,module,exports){\nconst noteToBeat = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst beatToNote = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst noteToBeatString = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nconst beatToNoteString = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nmodule.exports = {\n  noteToBeat,\n  beatToNote,\n  noteToBeatString,\n  beatToNoteString\n};\n\n},{}],8:[function(require,module,exports){\nconst noteToBeat = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst beatToNote = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst noteToBeatString = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nconst beatToNoteString = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nmodule.exports = {\n  noteToBeat,\n  beatToNote,\n  noteToBeatString,\n  beatToNoteString\n};\n\n},{}],9:[function(require,module,exports){\nconst noteToBeat = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst beatToNote = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst noteToBeatString = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nconst beatToNoteString = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nmodule.exports = {\n  noteToBeat,\n  beatToNote,\n  noteToBeatString,\n  beatToNoteString\n};\n\n},{}],10:[function(require,module,exports){\nconst noteToBeat = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst beatToNote = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst noteToBeatString = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nconst beatToNoteString = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nmodule.exports = {\n  noteToBeat,\n  beatToNote,\n  noteToBeatString,\n  beatToNoteString\n};\n\n},{}],11:[function(require,module,exports){\nconst noteToBeat = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst beatToNote = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]];\n};\n\nconst noteToBeatString = (note) => {\n  const note_count = note.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nconst beatToNoteString = (beat) => {\n  const note_count = beat.match(/\\d+/g);\n  return note_count[note_count[0]].toString();\n};\n\nmodule.exports = {\n  noteTo", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      count++;\n      start++;\n    } else {\n      break;\n    }\n  }\n  return count;\n};\n\n/**\n * Returns true if the string contains only lowercase letters.\n */\nconst isLowercase = string => {\n  return string.trim().toLowerCase() === string;\n};\n\n/**\n * Returns true if the string contains only uppercase letters.\n */\nconst isUppercase = string => {\n  return string.trim().toUpperCase() === string;\n};\n\n/**\n * Returns true if the string contains only numbers and letters.\n */\nconst isDigits = string => {\n  return string.trim().match(/^\\d+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters.\n */\nconst isLetter = string => {\n  return string.trim().match(/^[a-zA-Z]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only numbers.\n */\nconst isNumber = string => {\n  return string.trim().match(/^\\d+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumeric = string => {\n  return string.trim().match(/^[a-zA-Z0-9]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumericNumber = string => {\n  return string.trim().match(/^[a-zA-Z0-9]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumericLetter = string => {\n  return string.trim().match(/^[a-zA-Z0-9]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumericNumber = string => {\n  return string.trim().match(/^[a-zA-Z0-9]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumericLetterNumber = string => {\n  return string.trim().match(/^[a-zA-Z0-9]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumericLetterNumberDigit = string => {\n  return string.trim().match(/^[a-zA-Z0-9]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumericLetterNumberDigitDigit = string => {\n  return string.trim().match(/^[a-zA-Z0-9]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumericLetterNumberDigitDigitDigit = string => {\n  return string.trim().match(/^[a-zA-Z0-9]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumericLetterNumberDigitDigitDigit = string => {\n  return string.trim().match(/^[a-zA-Z0-9]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumericLetterNumberDigitDigitDigitDigit = string => {\n  return string.trim().match(/^[a-zA-Z0-9]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumericLetterNumberDigitDigitDigitDigitDigit = string => {\n  return string.trim().match(/^[a-zA-Z0-9]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumericLetterNumberDigitDigitDigitDigitDigitDigit = string => {\n  return string.trim().match(/^[a-zA-Z0-9]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumericLetterNumberDigitDigitDigitDigitDigitDigitDigit = string => {\n  return string.trim().match(/^[a-zA-Z0-9]+$/) === string;\n};\n\n/**\n * Returns true if the string contains only letters and numbers.\n */\nconst isAlphanumericLetterNumberDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerNumber = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateFractionalNumber = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateExponentNumber = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part.\n  >>> trujcateNumber(3.5)\n  3.50\n  */\nconst trujcateMantissaNumber = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateExponentPart = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part.\n  >>> trujcateNumber(3.5)\n  3.50\n  */\nconst trujcateMantissaPart = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateExponentPart = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part.\n  >>> trujcateNumber(3.5)\n  3.50\n  */\nconst trujcateMantissaPart = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateExponentPart = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part.\n  >>> trujcateNumber(3.5)\n  3.50\n  */\nconst trujcateMantissaPart = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateExponentPart = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part.\n  >>> trujcateNumber(3.5)\n  3.50\n  */\nconst trujcateMantissaPart = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateExponentPart = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part.\n  >>> trujcateNumber(3.5)\n  3.50\n  */\nconst trujcateMantissaPart = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateExponentPart = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part.\n  >>> trujcateNumber(3.5)\n  3.50\n  */\nconst trujcateMantissaPart = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return integer + decimal || 0;\n};\n\n/* Given a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minDistanceIndex = 0;\n  let minDistanceElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n      minDistanceElement = numbers[i];\n    }\n  }\n  return [minDistanceElement, minDistanceIndex];\n};\n\n/**\n * Given a number and a range, return the number rounded up to the nearest multiple of range.\n * For example, given 12 and 3, return 13.\n * If range is 0, return 0.\n * If range is 1, return 1.\n * If range is 2, return 2.\n * If range is 3, return 3.\n * If range is Infinity, return Number.POSITIVE_INFINITY.\n */\nconst roundUpTo = (number, range) => {\n  if (range === 0) return 0;\n  if (range === 1) return 1;\n  if (range === 2) return 2;\n  if (range === 3) return 3;\n  if (range === Infinity) return Number.POSITIVE_INFINITY;\n  return Math.round(number / range) * range;\n};\n\n/**\n * Given a number, return its closest multiple to range. For example, given 12 and 3, return 13.\n * If range is 0, return 0.\n * If range is 1, return 1.\n * If range is 2, return 2.\n * If range is 3, return 3.\n * If range is Infinity, return Number.POSITIVE_INFINITY.\n */\nconst closestMultipleTo = (number, range) => {\n  if (range === 0) return 0;\n  if (range === 1) return 1;\n  if (range === 2) return 2;\n  if (range === 3) return 3;\n  if (range === Infinity) return Number.POSITIVE_INFINITY;\n  return Math.round(number / range) * range;\n};\n\n/**\n * Given a number, return its closest multiple to range. For example, given 12 and 3, return 13.\n * If range is 0, return 0.\n * If range is 1, return 1.\n * If range is 2, return 2.\n * If range is 3, return 3.\n * If range is Infinity, return Number.POSITIVE_INFINITY.\n */\nconst closestMultipleToRange = (number, range) => {\n  if (range === 0) return 0;\n  if (range === 1) return 1;\n  if (range === 2) return 2;\n  if (range === 3) return 3;\n  if (range === Infinity) return Number.POSITIVE_INFINITY;\n  return Math.round(number / range) * range;\n};\n\n/**\n * Given a number, return its closest multiple to range. For example, given 12 and 3, return 13.\n * If range is 0, return 0.\n * If range is 1, return 1.\n * If range is 2, return 2.\n * If range is 3, return 3.\n * If range is Infinity, return Number.POSITIVE_INFINITY.\n */\nconst closestMultipleToRangeWithRounding = (number, range) => {\n  if (range === 0) return 0;\n  if (range === 1) return 1;\n  if (range === 2) return 2;\n  if (range === 3) return 3;\n  if (range === Infinity) return Number.POSITIVE_INFINITY;\n  return Math.round(number / range) * range;\n};\n\n/**\n * Given a number, return its closest multiple to range. For example, given 12 and 3, return 13.\n * If range is 0, return 0.\n * If range is 1, return 1.\n * If range is 2, return 2.\n * If range is 3, return 3.\n * If range is Infinity, return Number.POSITIVE_INFINITY.\n */\nconst closestMultipleToRangeWithRoundingAndRoundUp = (number, range) => {\n  if (range === 0) return 0;\n  if (range === 1) return 1;\n  if (range === 2) return 2;\n  if (range === 3) return 3;\n  if (range === Infinity) return Number.POSITIVE_INFINITY;\n  return Math.round(number / range) * range;\n};\n\n/**\n * Given a number, return its closest multiple to range. For example, given 12 and 3, return 13.\n * If range is 0, return 0.\n * If range is 1, return 1.\n * If range is 2, return 2.\n * If range is 3, return 3.\n * If range is Infinity, return Number.POSITIVE_INFINITY.\n */\nconst closestMultipleToRangeWithRoundingAndRoundUpWithRounding = (number, range) => {\n  if (range === 0) return 0;\n  if (range === 1) return 1;\n  if (range === 2) return 2;\n  if (range === 3) return 3;\n  if (range === Infinity) return Number.POSITIVE_INFINITY;\n  return Math.round(number / range) * range;\n};\n\n/**\n * Given a number, return its closest multiple to range. For example, given 12 and 3, return 13.\n * If range is 0, return 0.\n * If range is 1, return 1.\n * If range is 2, return 2.\n * If range is 3, return 3.\n * If range is Infinity, return Number.POSITIVE_INFINITY.\n */\nconst closestMultipleToRangeWithRoundingAndRoundUpWithRoundingAndRoundUp = (number, range) => {\n  if (range === 0) return 0;\n  if (range === 1) return 1;\n  if (range === 2) return 2;\n  if (range === 3) return 3;\n  if (range === Infinity) return Number.POSITIVE_INFINITY;\n  return Math.round(number / range) * range;\n};\n\n/**\n * Given a number, return its closest multiple to range. For example, given 12 and 3, return 13.\n * If range is 0, return 0.\n * If range is 1, return 1.\n * If range is 2, return 2.\n * If range is 3, return 3.\n * If range is Infinity, return Number.POSITIVE_INFINITY.\n */\nconst closestMultipleToRangeWithRoundingAndRoundUpWithRoundingAndRoundUpWithRounding = (number, range) => {\n  if (range === 0) return 0;\n  if (range === 1) return 1;\n  if (range === 2) return 2;\n  if (range === 3) return 3;\n  if (range === Infinity) return Number.POSITIVE_INFINITY;\n  return Math.round(number / range) * range;\n};\n\n/**\n * Given a number, return its closest multiple to range. For example, given 12 and 3, return 13.\n * If range is 0, return 0.\n * If range is 1, return 1.\n * If range is 2, return 2.\n * If range is 3, return 3.\n * If range is Infinity, return Number.POSITIVE_INFINITY.\n */\nconst closestMultipleToRangeWithRoundingAndRoundUpWithRoundingAndRoundUpWithRoundingAndRoundUp = (number, range) => {\n  if (range === 0) return 0;\n  if (range === 1) return 1;\n  if (range === 2) return 2;\n  if (range === 3) return 3;\n  if (range === Infinity) return Number.POSITIVE_INFINITY;\n  return Math.round(number / range) * range;\n};\n\n/**\n * Given a number, return its closest multiple to range. For example, given 12 and 3, return 13.\n * If range is 0, return 0.\n * If range is 1, return 1.\n * If range is 2, return 2.\n * If range is 3, return 3.\n * If range is Infinity, return Number.POSITIVE_INFINITY.\n */\nconst closestMultipleToRangeWithRoundingAndRoundUpWithRoundingAndRoundUpWithRounding", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((n) => n * min / max);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitReversed = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.max(acc, cur), Math.min(acc, cur)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((n) => n * max / min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitReversed([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitReversedReversed = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((n) => n * max / min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitReversedReversed([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitReversedReversedReversed = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.max(acc, cur), Math.min(acc, cur)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((n) => n * min / max);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitReversedReversedReversed([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitReversedReversedReversedReversed = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.max(acc, cur), Math.min(acc, cur)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((n) => n * max / min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitReversedReversedReversedReversed([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitReversedReversedReversedReversedReversed = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.max(acc, cur), Math.min(acc, cur)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((n) => n * min / max);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitReversedReversedReversedReversedReversed([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitReversedReversedReversedReversedReversedReversed = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.max(acc, cur), Math.min(acc, cur)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((n) => n * max / min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitReversedReversedReversedReversedReversedReversed([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitReversedReversedReversedReversedReversedReversedReversed = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.max(acc, cur), Math.min(acc, cur)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((n) => n * min / max);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitReversedReversedReversedReversedReversedReversedReversed([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitReversedReversedReversedReversedReversedReversedReversedReversed = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.max(acc, cur), Math.min(acc, cur)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((n) => n * max / min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitReversedReversedReversedReversedReversedReversedReversedReversed([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.max(acc, cur), Math.min(acc, cur)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((n) => n * min / max);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitReversedReversedReversedReversedReversedReversedReversedReversedReversed([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.max(acc, cur), Math.min(acc, cur)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((n) => n * max / min);\n};\n\n/**\n * Given a list of numbers (of at least two element", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  return values.filter(value => {\n    return typeof value === 'number' &&!isNaN(value);\n  });\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filherFloats(['a', 3.14, 5])\n  [5]\n  >>> filherFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherFloats = (values) => {\n  return values.filter(value => {\n    return typeof value === 'number' &&!isNaN(value);\n  });\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filherStrings(['a', 3.14, 5])\n  [5]\n  >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherStrings = (values) => {\n  return values.filter(value => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  [5]\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherBooleans = (values) => {\n  return values.filter(value => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filherNone([])\n  []\n  >>> filherNone([None])\n  [None]\n  >>> filherNone([None, None])\n  [None, None]\n  >>> filherNone([None, None, None])\n  [None, None, None]\n  >>> filherNone([None, None, None, 'abc'])\n  [None, None, None, 'abc']\n  >>> filherNone([None, None, None, 'abc', {}])\n  [None, None, None, 'abc', {}]\n  */\nconst filherNone = (values) => {\n  return values.filter(value => {\n    return value === null;\n  });\n};\n\n/**\n * Filter given list of any python values only for empty lists\n  >>> filherEmptyLists([])\n  []\n  >>> filherEmptyLists([None])\n  [None]\n  >>> filherEmptyLists([None, None])\n  [None, None]\n  >>> filherEmptyLists([None, None, None])\n  [None, None, None]\n  >>> filherEmptyLists([None, None, None, 'abc'])\n  [None, None, None, 'abc']\n  >>> filherEmptyLists([None, None, None, 'abc', {}])\n  [None, None, None, 'abc', {}]\n  */\nconst filherEmptyLists = (values) => {\n  return values.filter(value => {\n    return value === [];\n  });\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filherEmptyDicts([])\n  []\n  >>> filherEmptyDicts([None])\n  [None]\n  >>> filherEmptyDicts([None, None])\n  [None, None]\n  >>> filherEmptyDicts([None, None, None])\n  [None, None, None]\n  >>> filherEmptyDicts([None, None, None, 'abc'])\n  [None, None, None, 'abc']\n  >>> filherEmptyDicts([None, None, None, 'abc', {}])\n  [None, None, None, 'abc', {}]\n  */\nconst filherEmptyDicts = (values) => {\n  return values.filter(value => {\n    return value === {};\n  });\n};\n\n/**\n * Filter given list of any python values only for empty strings\n  >>> filherEmptyStrings([])\n  []\n  >>> filherEmptyStrings([None])\n  [None]\n  >>> filherEmptyStrings([None, None])\n  [None, None]\n  >>> filherEmptyStrings([None, None, None])\n  [None, None, None]\n  >>> filherEmptyStrings([None, None, None, 'abc'])\n  [None, None, None, 'abc']\n  >>> filherEmptyStrings([None, None, None, 'abc', {}])\n  [None, None, None, 'abc', {}]\n  */\nconst filherEmptyStrings = (values) => {\n  return values.filter(value => {\n    return value === '';\n  });\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filherEmptyArrays([])\n  []\n  >>> filherEmptyArrays([None])\n  [None]\n  >>> filherEmptyArrays([None, None])\n  [None, None]\n  >>> filherEmptyArrays([None, None, None])\n  [None, None, None]\n  >>> filherEmptyArrays([None, None, None, 'abc'])\n  [None, None, None, 'abc']\n  >>> filherEmptyArrays([None, None, None, 'abc', {}])\n  [None, None, None, 'abc', {}]\n  */\nconst filherEmptyArrays = (values) => {\n  return values.filter(value => {\n    return value === [];\n  });\n};\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filherEmptyObjects([])\n  []\n  >>> filherEmptyObjects([None])\n  [None]\n  >>> filherEmptyObjects([None, None])\n  [None, None]\n  >>> filherEmptyObjects([None, None, None])\n  [None, None, None]\n  >>> filherEmptyObjects([None, None, None, 'abc'])\n  [None, None, None, 'abc']\n  >>> filherEmptyObjects([None, None, None, 'abc', {}])\n  [None, None, None, 'abc', {}]\n  */\nconst filherEmptyObjects = (values) => {\n  return values.filter(value => {\n    return value === {};\n  });\n};\n\n/**\n * Filter given list of any python values only for empty functions\n  >>> filherEmptyFunctions([])\n  []\n  >>> filherEmptyFunctions([None])\n  [None]\n  >>> filherEmptyFunctions([None, None])\n  [None, None]\n  >>> filherEmptyFunctions([None, None, None])\n  [None, None, None]\n  >>> filherEmptyFunctions([None, None, None, 'abc'])\n  [None, None, None, 'abc']\n  >>> filherEmptyFunctions([None, None, None, 'abc', {}])\n  [None, None, None, 'abc', {}]\n  */\nconst filherEmptyFunctions = (values) => {\n  return values.filter(value => {\n    return value === Function;\n  });\n};\n\n/**\n * Filter given list of any python values only for empty classes\n  >>> filherEmptyClasses([])\n  []\n  >>> filherEmptyClasses([None])\n  [None]\n  >>> filherEmptyClasses([None, None])\n  [None, None]\n  >>> filherEmptyClasses([None, None, None])\n  [None, None, None]\n  >>> filherEmptyClasses([None, None, None, 'abc'])\n  [None, None, None, 'abc']\n  >>> filherEmptyClasses([None, None, None, 'abc', {}])\n  [None, None, None, 'abc', {}]\n  */\nconst filherEmptyClasses = (values) => {\n  return values.filter(value => {\n    return value === Class;\n  });\n};\n\n/**\n * Filter given list of any python values only for empty numbers\n  >>> filherEmptyNumbers([])\n  []\n  >>> filherEmptyNumbers([None])\n  [None]\n  >>> filherEmptyNumbers([None, None])\n  [None, None]\n  >>> filherEmptyNumbers([None, None, None])\n  [None, None, None]\n  >>> filherEmptyNumbers([None, None, None, 'abc'])\n  [None, None, None, 'abc']\n  >>> filherEmptyNumbers([None, None, None, 'abc', {}])\n  [None, None, None, 'abc', {}]\n  */\nconst filherEmptyNumbers = (values) => {\n  return values.filter(value => {\n    return value === Number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')\n  3\n  >>> strpen('abc')", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let i = 1;\n  let max = n;\n  while (max % i!== 0) {\n    i++;\n    max = Math.floor(max / i);\n  }\n  return i;\n};\n\n// Given a number n, return true if and only if n is a prime number.\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Given a number n, return true if and only if n is a palindrome.\nconst isPalindrome = (n) => {\n  return n!== n.toString().split('').reverse().join('');\n};\n\n// Given a number n, return true if and only if n is a palindrome of length n.\nconst isPalindromeOfLength = (n) => {\n  return isPalindrome(n) && n.length === n.toString().length;\n};\n\n// Given a number n, return true if and only if n is a palindrome of length n.\nconst isPalindromeOfLengthAndSpace = (n) => {\n  return isPalindrome(n) && n.length === n.toString().length && n.length === n.toString().replace(/\\s/g, '').length;\n};\n\n// Given a number n, return true if and only if n is a palindrome of length n.\nconst isPalindromeOfLengthAndSpaceAndSpace = (n) => {\n  return isPalindrome(n) && n.length === n.toString().length && n.length === n.toString().replace(/\\s/g, '').length && n.length === n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length;\n};\n\n// Given a number n, return true if and only if n is a palindrome of length n.\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpace = (n) => {\n  return isPalindrome(n) && n.length === n.toString().length && n.length === n.toString().replace(/\\s/g, '').length && n.length === n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + n.toString().replace(/\\s/g, '').length + ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 10;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    factor--;\n  }\n  while (n % factor === 0) {\n    factor++;\n  }\n  while (n % factor === 0) {\n    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen.has(number)) {\n      continue;\n    }\n    seen.add(number);\n    result.push(number);\n  }\n  return result;\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the result.\n * >>> removeNonAlpha('Hello world!')\n 'Hello world'\n */\nconst removeNonAlpha = (str) => {\n  return str.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the result.\n * >>> removeNonAlpha('Hello world!')\n 'Hello world'\n */\nconst removeNonAlpha2 = (str, chars) => {\n  const charsArray = chars.split('');\n  const charsArrayLength = charsArray.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = '';\n  while (i < str.length) {\n    if (str[i] === charsArray[j]) {\n      j++;\n      if (j === charsArrayLength) {\n        j = 0;\n        k++;\n      }\n    } else {\n      i++;\n    }\n  }\n  while (j < charsArrayLength) {\n    result += charsArray[j];\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the result.\n * >>> removeNonAlpha('Hello world!')\n 'Hello world'\n */\nconst removeNonAlpha3 = (str, chars) => {\n  const charsArray = chars.split('');\n  const charsArrayLength = charsArray.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = '';\n  while (i < str.length) {\n    if (str[i] === charsArray[j]) {\n      j++;\n      if (j === charsArrayLength) {\n        j = 0;\n        k++;\n      }\n    } else {\n      i++;\n    }\n  }\n  while (j < charsArrayLength) {\n    result += charsArray[j];\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the result.\n * >>> removeNonAlpha('Hello world!')\n 'Hello world'\n */\nconst removeNonAlpha4 = (str, chars) => {\n  const charsArray = chars.split('');\n  const charsArrayLength = charsArray.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = '';\n  while (i < str.length) {\n    if (str[i] === charsArray[j]) {\n      j++;\n      if (j === charsArrayLength) {\n        j = 0;\n        k++;\n      }\n    } else {\n      i++;\n    }\n  }\n  while (j < charsArrayLength) {\n    result += charsArray[j];\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the result.\n * >>> removeNonAlpha('Hello world!')\n 'Hello world'\n */\nconst removeNonAlpha5 = (str, chars) => {\n  const charsArray = chars.split('');\n  const charsArrayLength = charsArray.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = '';\n  while (i < str.length) {\n    if (str[i] === charsArray[j]) {\n      j++;\n      if (j === charsArrayLength) {\n        j = 0;\n        k++;\n      }\n    } else {\n      i++;\n    }\n  }\n  while (j < charsArrayLength) {\n    result += charsArray[j];\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the result.\n * >>> removeNonAlpha('Hello world!')\n 'Hello world'\n */\nconst removeNonAlpha6 = (str, chars) => {\n  const charsArray = chars.split('');\n  const charsArrayLength = charsArray.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = '';\n  while (i < str.length) {\n    if (str[i] === charsArray[j]) {\n      j++;\n      if (j === charsArrayLength) {\n        j = 0;\n        k++;\n      }\n    } else {\n      i++;\n    }\n  }\n  while (j < charsArrayLength) {\n    result += charsArray[j];\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the result.\n * >>> removeNonAlpha('Hello world!')\n 'Hello world'\n */\nconst removeNonAlpha7 = (str, chars) => {\n  const charsArray = chars.split('');\n  const charsArrayLength = charsArray.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = '';\n  while (i < str.length) {\n    if (str[i] === charsArray[j]) {\n      j++;\n      if (j === charsArrayLength) {\n        j = 0;\n        k++;\n      }\n    } else {\n      i++;\n    }\n  }\n  while (j < charsArrayLength) {\n    result += charsArray[j];\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the result.\n * >>> removeNonAlpha('Hello world!')\n 'Hello world'\n */\nconst removeNonAlpha8 = (str, chars) => {\n  const charsArray = chars.split('');\n  const charsArrayLength = charsArray.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = '';\n  while (i < str.length) {\n    if (str[i] === charsArray[j]) {\n      j++;\n      if (j === charsArrayLength) {\n        j = 0;\n        k++;\n      }\n    } else {\n      i++;\n    }\n  }\n  while (j < charsArrayLength) {\n    result += charsArray[j];\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the result.\n * >>> removeNonAlpha('Hello world!')\n 'Hello world'\n */\nconst removeNonAlpha9 = (str, chars) => {\n  const charsArray = chars.split('');\n  const charsArrayLength = charsArray.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = '';\n  while (i < str.length) {\n    if (str[i] === charsArray[j]) {\n      j++;\n      if (j === charsArrayLength) {\n        j = 0;\n        k++;\n      }\n    } else {\n      i++;\n    }\n  }\n  while (j < charsArrayLength) {\n    result += charsArray[j];\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the result.\n * >>> removeNonAlpha('Hello world!')\n 'Hello world'\n */\nconst removeNonAlpha10 = (str, chars) => {\n  const charsArray = chars.split('');\n  const charsArrayLength = charsArray.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = '';\n  while (i < str.length) {\n    if (str[i] === charsArray[j]) {\n      j++;\n      if (j === charsArrayLength) {\n        j = 0;\n        k++;\n      }\n    } else {\n      i++;\n    }\n  }\n  while (j < charsArrayLength) {\n    result += charsArray[j];\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a string, remove all non-alphabe", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Returns a random integer between min and max\n */\nconst randomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Returns a random integer between min and max\n */\nconst randomIntBetween = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloat = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetween = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetweenFloat = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetweenFloatBetween = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetweenFloatBetweenFloat = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetweenFloatBetweenFloatBetween = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetweenFloatBetweenFloatBetweenFloat = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetweenFloatBetweenFloatBetweenFloatBetween = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloat = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetween = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetween = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloat = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloat = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloat = (min, max) => {\n  return Math.random() * (max - min + 1) + min;\n};\n\n/**\n * Returns a random float between min and max\n */\nconst randomFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloatBetweenFloat", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, cur) => {\n    return acc + (cur? '|' : '');\n  }, '');\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 'foo', b: 'bar' })\n * ['foo', 'bar']\n */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an object\n * >>> toObject({ a: 'foo', b: 'bar' })\n * { a: 'foo', b: 'bar' }\n */\nconst toObject = (obj) => {\n  return Object.keys(obj).reduce((acc, key) => {\n    acc[key] = obj[key];\n    return acc;\n  }, {});\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjects = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfArrays = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfStrings = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfNumbers = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfBooleans = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfDates = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfRegExps = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfFunctions = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjectsWithArrays = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjectsWithStrings = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjectsWithNumbers = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjectsWithBooleans = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjectsWithDates = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjectsWithRegExps = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjectsWithFunctions = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjectsWithObjectsWithArrays = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjectsWithObjectsWithStrings = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjectsWithObjectsWithNumbers = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjectsWithObjectsWithBooleans = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjectsWithObjectsWithDates = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ['foo', 'bar', 'baz', 'qux']\n */\nconst toArrayOfObjectsWithObjectsWithRegExps = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ foo: 'bar', baz: 'qux' })\n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filherBySuffix([], 'a')\n  []\n  >>> filherBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filherBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'bcd', 'cde']\n  */\nconst filherByPrefixNot = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filherBySuffix([], 'a')\n  []\n  >>> filherBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filherBySuffixNot = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filherByPrefixNot([], 'a')\n  []\n  >>> filherByPrefixNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'bcd', 'cde']\n  */\nconst filherByPrefixNotNot = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not end with a given prefix and do not start with a given suffix.\n  >>> filherBySuffixNot([], 'a')\n  []\n  >>> filherBySuffixNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filherBySuffixNotNot = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(suffix) &&!s.endsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and end with a given suffix.\n  >>> filherByPrefixNotNot([], 'a')\n  []\n  >>> filherByPrefixNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filherByPrefixNotNotNot = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not end with a given prefix and start with a given suffix.\n  >>> filherBySuffixNotNot([], 'a')\n  []\n  >>> filherBySuffixNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filherBySuffixNotNot = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(suffix) &&!s.endsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and end with a given suffix.\n  >>> filherByPrefixNotNotNot([], 'a')\n  []\n  >>> filherByPrefixNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filherByPrefixNotNotNotNot = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and start with a given suffix.\n  >>> filherBySuffixNotNotNot([], 'a')\n  []\n  >>> filherBySuffixNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filherBySuffixNotNotNot = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(suffix) &&!s.endsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and end with a given suffix.\n  >>> filherByPrefixNotNotNot([], 'a')\n  []\n  >>> filherByPrefixNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filherByPrefixNotNotNotNotNot = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not end with a given prefix and start with a given suffix.\n  >>> filherBySuffixNotNotNot([], 'a')\n  []\n  >>> filherBySuffixNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filherBySuffixNotNotNotNot = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(suffix) &&!s.endsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and end with a given suffix.\n  >>> filherByPrefixNotNotNotNot([], 'a')\n  []\n  >>> filherByPrefixNotNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filherByPrefixNotNotNotNotNot = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not end with a given prefix and start with a given suffix.\n  >>> filherBySuffixNotNotNotNot([], 'a')\n  []\n  >>> filherBySuffixNotNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filherBySuffixNotNotNotNotNot = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(suffix) &&!s.endsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and end with a given suffix.\n  >>> filherByPrefixNotNotNotNotNot([], 'a')\n  []\n  >>> filherByPrefixNotNotNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filherByPrefixNotNotNotNotNotNotNot = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not end with a given prefix and start with a given suffix.\n  >>> filherBySuffixNotNotNotNotNot([], 'a')\n  []", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  false\n  >>> bellwZero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance -= operations[i];\n    } else {\n      balance += operations[i];\n    }\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  return l.filter(x => x >= 0).map(x => Math.abs(x));\n};\n\n/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x >= 0).map(x => Math.abs(x));\n};\n\n/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOositive = (l) => {\n  return l.filter(x => x >= 0).map(x => Math.abs(x));\n};\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOositive([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOositiveOositive = (l) => {\n  return l.filter(x => x >= 0).map(x => Math.abs(x));\n};\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOositiveOositive([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOositiveOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOositiveOositiveOositive = (l) => {\n  return l.filter(x => x >= 0).map(x => Math.abs(x));\n};\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOositiveOositiveOositive([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOositiveOositiveOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOositiveOositiveOositiveOositive = (l) => {\n  return l.filter(x => x >= 0).map(x => Math.abs(x));\n};\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOositiveOositiveOositiveOositive([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOositiveOositiveOositiveOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOositiveOositiveOositiveOositiveOositive = (l) => {\n  return l.filter(x => x >= 0).map(x => Math.abs(x));\n};\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOositiveOositiveOositiveOositiveOositive([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOositiveOositiveOositiveOositiveOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOositiveOositiveOositiveOositiveOositiveOositive = (l) => {\n  return l.filter(x => x >= 0).map(x => Math.abs(x));\n};\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOositiveOositiveOositiveOositiveOositiveOositiveOositive([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositive = (l) => {\n  return l.filter(x => x >= 0).map(x => Math.abs(x));\n};\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveOositiveO", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return false;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return false;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return false;\n  if (n % 41 === 0) return false;\n  if (n % 43 === 0) return false;\n  if (n % 47 === 0) return false;\n  if (n % 53 === 0) return false;\n  if (n % 59 === 0) return false;\n  if (n % 61 === 0) return false;\n  if (n % 67 === 0) return false;\n  if (n % 71 === 0) return false;\n  if (n % 73 === 0) return false;\n  if (n % 79 === 0) return false;\n  if (n % 83 === 0) return false;\n  if (n % 89 === 0) return false;\n  if (n % 97 === 0) return false;\n  if (n % 101 === 0) return false;\n  if (n % 103 === 0) return false;\n  if (n % 107 === 0) return false;\n  if (n % 109 === 0) return false;\n  if (n % 111 === 0) return false;\n  if (n % 113 === 0) return false;\n  if (n % 115 === 0) return false;\n  if (n % 121 === 0) return false;\n  if (n % 123 === 0) return false;\n  if (n % 125 === 0) return false;\n  if (n % 129 === 0) return false;\n  if (n % 131 === 0) return false;\n  if (n % 133 === 0) return false;\n  if (n % 135 === 0) return false;\n  if (n % 137 === 0) return false;\n  if (n % 139 === 0) return false;\n  if (n % 141 === 0) return false;\n  if (n % 143 === 0) return false;\n  if (n % 145 === 0) return false;\n  if (n % 147 === 0) return false;\n  if (n % 149 === 0) return false;\n  if (n % 151 === 0) return false;\n  if (n % 153 === 0) return false;\n  if (n % 155 === 0) return false;\n  if (n % 157 === 0) return false;\n  if (n % 159 === 0) return false;\n  if (n % 161 === 0) return false;\n  if (n % 163 === 0) return false;\n  if (n % 165 === 0) return false;\n  if (n % 167 === 0) return false;\n  if (n % 169 === 0) return false;\n  if (n % 171 === 0) return false;\n  if (n % 173 === 0) return false;\n  if (n % 175 === 0) return false;\n  if (n % 177 === 0) return false;\n  if (n % 179 === 0) return false;\n  if (n % 181 === 0) return false;\n  if (n % 183 === 0) return false;\n  if (n % 185 === 0) return false;\n  if (n % 187 === 0) return false;\n  if (n % 189 === 0) return false;\n  if (n % 191 === 0) return false;\n  if (n % 193 === 0) return false;\n  if (n % 195 === 0) return false;\n  if (n % 197 === 0) return false;\n  if (n % 199 === 0) return false;\n  if (n % 201 === 0) return false;\n  if (n % 203 === 0) return false;\n  if (n % 205 === 0) return false;\n  if (n % 207 === 0) return false;\n  if (n % 209 === 0) return false;\n  if (n % 211 === 0) return false;\n  if (n % 213 === 0) return false;\n  if (n % 215 === 0) return false;\n  if (n % 217 === 0) return false;\n  if (n % 219 === 0) return false;\n  if (n % 221 === 0) return false;\n  if (n % 223 === 0) return false;\n  if (n % 225 === 0) return false;\n  if (n % 227 === 0) return false;\n  if (n % 229 === 0) return false;\n  if (n % 231 === 0) return false;\n  if (n % 233 === 0) return false;\n  if (n % 235 === 0) return false;\n  if (n % 237 === 0) return false;\n  if (n % 239 === 0) return false;\n  if (n % 241 === 0) return false;\n  if (n % 243 === 0) return false;\n  if (n % 245 === 0) return false;\n  if (n % 247 === 0) return false;\n  if (n % 249 === 0) return false;\n  if (n % 251 === 0) return false;\n  if (n % 253 === 0) return false;\n  if (n % 255 === 0) return false;\n  if (n % 257 === 0) return false;\n  if (n % 259 === 0) return false;\n  if (n % 261 === 0) return false;\n  if (n % 263 === 0) return false;\n  if (n % 265 === 0) return false;\n  if (n % 267 === 0) return false;\n  if (n % 269 === 0) return false;\n  if (n % 271 === 0) return false;\n  if (n % 273 === 0) return false;\n  if (n % 275 === 0) return false;\n  if (n % 277 === 0) return false;\n  if (n % 279 === 0) return false;\n  if (n % 281 === 0) return false;\n  if (n % 283 === 0) return false;\n  if (n % 285 === 0) return false;\n  if (n % 287 === 0) return false;\n  if (n % 289 === 0) return false;\n  if (n % 291 === 0) return false;\n  if (n % 293 === 0) return false;\n  if (n % 295 === 0) return false;\n  if (n % 297 === 0) return false;\n  if (n % 299 === 0) return false;\n  if (n % 301 === 0) return false;\n  if (n % 303 === 0) return false;\n  if (n % 305 === 0) return false;\n  if (n % 307 === 0) return false;\n  if (n % 309 === 0) return false;\n  if (n % 311 === 0) return false;\n  if (n % 315 === 0) return false;\n  if (n % 317 === 0) return false;\n  if (n % 319 === 0) return false;\n  if (n % 321 === 0) return false;\n  if (n % 323 === 0) return false;\n  if (n % 325 === 0) return false;\n  if (n % 327 === 0) return false;\n  if (n % 329 === 0) return false;\n  if (n % 331 === 0) return false;\n  if (n % 333 === 0) return false;\n  if (n % 335 === 0) return false;\n  if (n % 337 === 0) return false;\n  if (n % 339 === 0) return false;\n  if (n % 341 === 0) return false;\n  if (n % 343 === 0) return false;\n  if (n % 345 === 0) return false;\n  if (n % 347 === 0) return false;\n  if (n % 349 === 0) return false;\n  if (n % 351 === 0) return false;\n  if (n % 353 === 0) return false;\n  if (n % 355 === 0) return false;\n  if (n % 357 === 0) return false;\n  if (n % 359 === 0) return false;\n  if (n % 361 === 0) return false;\n  if (n % 363 === 0) return false;\n  if (n % 365 === 0) return false;\n  if (n % 367 === 0) return false;\n  if (n % 369 === 0) return false;\n  if (n % 371 === 0) return false;\n  if (n % 373 === 0) return false;\n  if (n % 375 === 0) return false;\n  if (n % 377 === 0) return false;\n  if (n % 379 === 0) return false;\n  if (n % 381 === 0) return false;\n  if (n % 383 === 0) return false;\n  if (n % 385 === 0) return false;\n  if (n % 387 === 0) return false;\n  if (n % 389 === 0) return false;\n  if (n % 391 === 0) return false;\n  if (n % 393 === 0) return false;\n  if (n % 395 === 0) return false;\n  if (n % 397 === 0) return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "<|endoftext|>/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polj(xs, 0);\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 1) {\n    return zeros[0];\n  }\n  if (zeros.length === xs.length) {\n    return zero;\n  }\n  return zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, zero);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polj(xs, 0);\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 1) {\n    return zeros[0];\n  }\n  if (zeros.length === xs.length) {\n    return zero;\n  }\n  return zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, zero);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polj(xs, 0);\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 1) {\n    return zeros[0];\n  }\n  if (zeros.length === xs.length) {\n    return zero;\n  }\n  return zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, zero);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polj(xs, 0);\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 1) {\n    return zeros[0];\n  }\n  if (zeros.length === xs.length) {\n    return zero;\n  }\n  return zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, zero);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polj(xs, 0);\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 1) {\n    return zeros[0];\n  }\n  if (zeros.length === xs.length) {\n    return zero;\n  }\n  return zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, zero);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((item, index) => index % 3 === 0);\n  const l4 = l3.filter((item, index) => index % 3 === 1);\n  return l4;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhFifth = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((item, index) => index % 5 === 0);\n  const l4 = l3.filter((item, index) => index % 5 === 1);\n  return l4;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhSixth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhSixth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhSixth = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((item, index) => index % 7 === 0);\n  const l4 = l3.filter((item, index) => index % 7 === 1);\n  return l4;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by eight, while its values at the indicies that are divisible by eight are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhEighth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEighth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhEighth = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((item, index) => index % 8 === 0);\n  const l4 = l3.filter((item, index) => index % 8 === 1);\n  return l4;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhNineth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhNineth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhNineth = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((item, index) => index % 9 === 0);\n  const l4 = l3.filter((item, index) => index % 9 === 1);\n  return l4;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhTenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhTenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhTenth = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((item, index) => index % 10 === 0);\n  const l4 = l3.filter((item, index) => index % 10 === 1);\n  return l4;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by eleven, while its values at the indicies that are divisible by eleven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhEleventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEleventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhEleventh = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((item, index) => index % 11 === 0);\n  const l4 = l3.filter((item, index) => index % 11 === 1);\n  return l4;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twelve, while its values at the indicies that are divisible by twelve are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhTwelveth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhTwelveth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhTwelveth = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((item, index) => index % 12 === 0);\n  const l4 = l3.filter((item, index) => index % 12 === 1);\n  return l4;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirteen, while its values at the indicies that are divisible by thirteen are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThirteenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThirteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThirteenth = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((item, index) => index % 13 === 0);\n  const l4 = l3.filter((item, index) => index % 13 === 1);\n  return l4;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by fourteen, while its values at the indicies that are divisible by fourteen are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhFourteenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhFourteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhFourteenth = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((item, index) => index % 14 === 0);\n  const l4 = l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "<|endoftext|>/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      res.push(v)\n    }\n  })\n  return res\n}\n\n/*Return sorted unique elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unieueUnique = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      if (res.indexOf(v) === -1) {\n        res.push(v)\n      }\n    }\n  })\n  return res\n}\n\n/*Return sorted unique elements in a list\n  >>> unieueUnique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unieueUniqueBy = (l, key) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      if (res.indexOf(v) === -1) {\n        res.push(v)\n      }\n    }\n  })\n  return res.filter(v => v[key]!== undefined).sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> unieueUniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v.id)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unieueUniqueById = (l, key) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      if (res.indexOf(v) === -1) {\n        res.push(v)\n      }\n    }\n  })\n  return res.filter(v => v[key]!== undefined).sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> unieueUniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v.name)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unieueUniqueByName = (l, key) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      if (res.indexOf(v) === -1) {\n        res.push(v)\n      }\n    }\n  })\n  return res.filter(v => v[key]!== undefined).sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> unieueUniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v.age)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unieueUniqueByAge = (l, key) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      if (res.indexOf(v) === -1) {\n        res.push(v)\n      }\n    }\n  })\n  return res.filter(v => v[key]!== undefined).sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> unieueUniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v.age)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unieueUniqueByAgeAndName = (l, key) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      if (res.indexOf(v) === -1) {\n        res.push(v)\n      }\n    }\n  })\n  return res.filter(v => v[key]!== undefined).sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> unieueUniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v.age)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unieueUniqueByAgeAndNameAndId = (l, key) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      if (res.indexOf(v) === -1) {\n        res.push(v)\n      }\n    }\n  })\n  return res.filter(v => v[key]!== undefined).sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> unieueUniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v.age)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unieueUniqueByAgeAndNameAndIdAndName = (l, key) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      if (res.indexOf(v) === -1) {\n        res.push(v)\n      }\n    }\n  })\n  return res.filter(v => v[key]!== undefined).sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> unieueUniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v.age)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unieueUniqueByAgeAndNameAndIdAndNameAndId = (l, key) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      if (res.indexOf(v) === -1) {\n        res.push(v)\n      }\n    }\n  })\n  return res.filter(v => v[key]!== undefined).sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> unieueUniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v.age)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unieueUniqueByAgeAndNameAndIdAndNameAndIdAndId = (l, key) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      if (res.indexOf(v) === -1) {\n        res.push(v)\n      }\n    }\n  })\n  return res.filter(v => v[key]!== undefined).sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> unieueUniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v.age)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unieueUniqueByAgeAndNameAndIdAndNameAndIdAndId = (l, key) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      if (res.indexOf(v) === -1) {\n        res.push(v)\n      }\n    }\n  })\n  return res.filter(v => v[key]!== undefined).sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> unieueUniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v.age)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unieueUniqueByAgeAndNameAndIdAndNameAndIdAndId = (l, key) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      if (res.indexOf(v) === -1) {\n        res.push(v)\n      }\n    }\n  })\n  return res.filter(v => v[key]!== undefined).sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted unique elements in a list\n  >>> unieueUniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v.age)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unieueUniqueByAgeAndNameAndIdAndNameAndIdAndId = (l, key) => {\n  let res = []\n  l.forEach((v, i) => {\n    if (i!== l.length - 1) {\n      if (res.indexOf(v) === -1) {\n        res.push(v)\n      }\n    }\n  })\n  return res.filter(v => v[key]!== undefined).sort((a, b) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minFlement([1, 2, 3])\n  1\n  >>> minFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minFlement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of elements in the list.\n  >>> sumFlement([1, 2, 3])\n  6\n  >>> sumFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumFlement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return average of elements in the list.\n  >>> avgFlement([1, 2, 3])\n  1.5\n  >>> avgFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.833333333333333\n  */\nconst avgFlement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return standard deviation of elements in the list.\n  >>> stdFlement([1, 2, 3])\n  1.4142135623730951\n  >>> stdFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst stdFlement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance of elements in the list.\n  >>> varFlement([1, 2, 3])\n  1.4142135623730951\n  >>> varFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst varFlement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return mode of elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeFlement = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  let min = 0;\n  let minIndex = 0;\n  let mode = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  mode = maxIndex - minIndex;\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeFlement = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  let min = 0;\n  let minIndex = 0;\n  let mode = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  mode = maxIndex - minIndex;\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeFlement = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  let min = 0;\n  let minIndex = 0;\n  let mode = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  mode = maxIndex - minIndex;\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeFlement = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  let min = 0;\n  let minIndex = 0;\n  let mode = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  mode = maxIndex - minIndex;\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeFlement = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  let min = 0;\n  let minIndex = 0;\n  let mode = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  mode = maxIndex - minIndex;\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeFlement = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  let min = 0;\n  let minIndex = 0;\n  let mode = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  mode = maxIndex - minIndex;\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeFlement = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  let min = 0;\n  let minIndex = 0;\n  let mode = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  mode = maxIndex - minIndex;\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeFlement = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  let min = 0;\n  let minIndex", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  let i = n;\n  while (i > 0) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0) {\n      count += 2;\n    }\n    i /= 10;\n  }\n  return count;\n};\n\nmodule.exports = fizxBuzz;\n\n},{}],9:[function(require,module,exports){\n/*\n  FizzBuzz Numbers\n  Given a number n, return all possible FizzBuzz numbers of length n.\n  FizzBuzz numbers are the numbers of length 3 or greater.\n  FizzBuzz numbers are divisible by 3 or 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n  FizzBuzz numbers are divisible by both 3 and 5.\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...even,...odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorhOdd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorhEvenOdd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorhOddEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorhEvenOddEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOddEvenEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhOddEvenEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorhOddEvenEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorhEvenOddOddEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOddEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhOddEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorhEvenOddOddOddEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhEvenOddEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhEvenOddEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorhEvenOddEvenOddOddEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sorhEvenOddEvenOddEvenOddEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cycli", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "<|endoftext|>/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return 2;\n  if (n < 5) return 3;\n  if (n < 8) return 5;\n  if (n < 13) return 9;\n  if (n < 21) return 13;\n  if (n < 28) return 21;\n  if (n < 34) return 28;\n  if (n < 43) return 34;\n  if (n < 58) return 43;\n  if (n < 66) return 58;\n  if (n < 73) return 66;\n  if (n < 81) return 73;\n  if (n < 89) return 81;\n  if (n < 95) return 89;\n  if (n < 101) return 95;\n  if (n < 110) return 101;\n  if (n < 115) return 115;\n  if (n < 124) return 124;\n  if (n < 133) return 133;\n  if (n < 141) return 141;\n  if (n < 148) return 148;\n  if (n < 153) return 153;\n  if (n < 158) return 158;\n  if (n < 161) return 161;\n  if (n < 165) return 165;\n  if (n < 171) return 171;\n  if (n < 174) return 174;\n  if (n < 179) return 179;\n  if (n < 181) return 181;\n  if (n < 186) return 186;\n  if (n < 191) return 191;\n  if (n < 193) return 193;\n  if (n < 194) return 194;\n  if (n < 197) return 197;\n  if (n < 199) return 199;\n  if (n < 201) return 201;\n  if (n < 204) return 204;\n  if (n < 207) return 207;\n  if (n < 209) return 209;\n  if (n < 211) return 211;\n  if (n < 214) return 214;\n  if (n < 217) return 217;\n  if (n < 220) return 220;\n  if (n < 223) return 223;\n  if (n < 225) return 225;\n  if (n < 228) return 228;\n  if (n < 233) return 233;\n  if (n < 236) return 236;\n  if (n < 239) return 239;\n  if (n < 241) return 241;\n  if (n < 243) return 243;\n  if (n < 245) return 245;\n  if (n < 247) return 247;\n  if (n < 249) return 249;\n  if (n < 251) return 251;\n  if (n < 253) return 253;\n  if (n < 255) return 255;\n  if (n < 257) return 257;\n  if (n < 259) return 259;\n  if (n < 261) return 261;\n  if (n < 263) return 263;\n  if (n < 265) return 265;\n  if (n < 267) return 267;\n  if (n < 269) return 269;\n  if (n < 271) return 271;\n  if (n < 273) return 273;\n  if (n < 275) return 275;\n  if (n < 277) return 277;\n  if (n < 279) return 279;\n  if (n < 281) return 281;\n  if (n < 283) return 283;\n  if (n < 285) return 285;\n  if (n < 287) return 287;\n  if (n < 289) return 289;\n  if (n < 291) return 291;\n  if (n < 293) return 293;\n  if (n < 295) return 295;\n  if (n < 297) return 297;\n  if (n < 299) return 299;\n  if (n < 301) return 301;\n  if (n < 303) return 303;\n  if (n < 309) return 309;\n  if (n < 311) return 311;\n  if (n < 313) return 313;\n  if (n < 315) return 315;\n  if (n < 319) return 319;\n  if (n < 321) return 321;\n  if (n < 323) return 323;\n  if (n < 325) return 325;\n  if (n < 327) return 327;\n  if (n < 329) return 329;\n  if (n < 331) return 331;\n  if (n < 333) return 333;\n  if (n < 335) return 335;\n  if (n < 337) return 337;\n  if (n < 339) return 339;\n  if (n < 341) return 341;\n  if (n < 343) return 343;\n  if (n < 345) return 345;\n  if (n < 347) return 347;\n  if (n < 349) return 349;\n  if (n < 351) return 351;\n  if (n < 353) return 353;\n  if (n < 355) return 355;\n  if (n < 357) return 357;\n  if (n < 359) return 359;\n  if (n < 361) return 361;\n  if (n < 363) return 363;\n  if (n < 365) return 365;\n  if (n < 367) return 367;\n  if (n < 369) return 369;\n  if (n < 371) return 371;\n  if (n < 373) return 373;\n  if (n < 375) return 375;\n  if (n < 377) return 377;\n  if (n < 379) return 379;\n  if (n < 381) return 381;\n  if (n < 383) return 383;\n  if (n < 385) return 385;\n  if (n < 387) return 387;\n  if (n < 389) return 389;\n  if (n < 391) return 391;\n  if (n < 393) return 393;\n  if (n < 395) return 395;\n  if (n < 397) return 397;\n  if (n < 399) return 399;\n  if (n < 401) return 401;\n  if (n < 403) return 403;\n  if (n < 405) return 405;\n  if (n < 409) return 409;\n  if (n < 411) return 411;\n  if (n < 413) return 413;\n  if (n < 415) return 415;\n  if (n < 419) return 419;\n  if (n < 421) return 421\n  if (n < 423) return 423;\n  if (n < 425) return 425;\n  if (n < 427) return 427;\n  if (n < 431) return 431;\n  if (n < 433) return 433;\n  if (n < 435) return 435;\n  if (n < 437) return 437;\n  if (n < 441) return 441;\n  if (n < 443) return 443;\n  if (n < 445) return 445;\n  if (n < 447) return 447;\n  if (n < 449) return 449;\n  if (n < 451) return 451;\n  if (n < 453) return 453;\n  if (n < 455) return 455;\n  if (n < 457) return 457;\n  if (n < 459) return 459;\n  if (n < 461) return 461;\n  if (n < 463) return 463;\n  if (n < 465) return 465;\n  if (n < 467) return 467;\n  if (n < 469) return 469;\n  if (n < 471) return 471;\n  if (n < 473) return 473;\n  if (n < 475) return 475;\n  if (n < 476) return 476;\n  if (n < 477) return 477;\n  if (n < 478) return 477;\n  if (n < 481) return 481;\n  if (n < 483) return 483;\n  if (n < 485) return 485;\n  if (n < 487) return 487;\n  if (n < 489) return 489;\n  if (n < 491) return 491;\n  if (n < 493) return 493;\n  if (n < 495) return 495;\n  if (n < 497) return 497;\n  if (n < 499) return 499;\n  if (n < 501) return 501;\n  if (n < 503) return 503;\n  if (n < 505) return 505;\n  if (n < 507) return 507;\n  if (n < 509) return 509;\n  if (n < 511) return 511;\n  if (n < 513) return 513;\n  if (n < 515) return 515;\n  if (n < 517) return 517;\n  if (n < 519) return 519;\n  if (n < 521) return 521;\n  if (n < 523) return 523;\n  if (n < 525) return 525;\n  if (n < 527) return 527;\n  if (n < 529) return 529;\n  if (n < 531) return 531;\n  if (n < 533) return 533;\n  if (n < 5", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n  return numbers.map((num) => Math.abs(num - mean));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of squared differences between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n  return numbers.map((num) => Math.pow(num - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the square root of Mean Squared Deviation:\n  RMSE = sqrt(Mean Squared Deviation)\n  >>> meajRootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajRootMeanSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n  return numbers.map((num) => Math.sqrt(num - mean));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Error\n  around the mean of this dataset.\n  Mean Squared Error is the average of squared differences between each\n  element and a centerpoint (mean in this case):\n  MSE = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajSquaredError = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n  return numbers.map((num) => Math.pow(num - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Root Mean Squared Error\n  around the mean of this dataset.\n  Root Mean Squared Error is the square root of Mean Squared Error:\n  RMSE = sqrt(Mean Squared Error)\n  >>> meajRootMeanSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajRootMeanSquaredError = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n  return numbers.map((num) => Math.sqrt(num - mean));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Absolute Error\n  around the mean of this dataset.\n  Mean Absolute Error is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAE = average | x - x_mean |\n  >>> meajAbsoluteError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteError = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n  return numbers.map((num) => Math.abs(num - mean));\n};\n\n/**\n * Given a list of input numbers, calculate Root Mean Absolute Error\n  around the mean of this dataset.\n  Root Mean Absolute Error is the square root of Mean Absolute Error:\n  RMSE = sqrt(Mean Absolute Error)\n  >>> meajRootMeanAbsoluteError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajRootMeanAbsoluteError = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n  return numbers.map((num) => Math.sqrt(num - mean));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Logarithmic Error\n  around the mean of this dataset.\n  Mean Squared Logarithmic Error is the average of squared differences between each\n  element and a centerpoint (mean in this case):\n  MSLE = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredLogarithmicError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajSquaredLogarithmicError = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n  return numbers.map((num) => Math.pow(num - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Root Mean Squared Logarithmic Error\n  around the mean of this dataset.\n  Root Mean Squared Logarithmic Error is the square root of Mean Squared Logarithmic Error:\n  RMSE = sqrt(Mean Squared Logarithmic Error)\n  >>> meajRootMeanSquaredLogarithmicError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajRootMeanSquaredLogarithmicError = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n  return numbers.map((num) => Math.sqrt(num - mean));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Absolute Logarithmic Error\n  around the mean of this dataset.\n  Mean Absolute Logarithmic Error is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAEL = average | x - x_mean |\n  >>> meajAbsoluteLogarithmicError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteLogarithmicError = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n  return numbers.map((num) => Math.abs(num - mean));\n};\n\n/**\n * Given a list of input numbers, calculate Root Mean Absolute Logarithmic Error\n  around the mean of this dataset.\n  Root Mean Absolute Logarithmic Error is the square root of Mean Absolute Logarithmic Error:\n  RMSE = sqrt(Mean Absolute Logarithmic Error)\n  >>> meajRootMeanAbsoluteLogarithmicError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajRootMeanAbsoluteLogarithmicError = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n  return numbers.map((num) => Math.sqrt(num - mean));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Exponential Error\n  around the mean of this dataset.\n  Mean Squared Exponential Error is the average of squared differences between each\n  element and a centerpoint (mean in this case):\n  MSE = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredExponentialError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajSquaredExponentialError = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n  return numbers.map((num) => Math.pow(num - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Root Mean Squared Exponential Error\n  around the mean of this dataset.\n  Root Mean Squared Exponential Error is the square root of Mean Squared Exponential Error:\n  RMSE = sqrt(Mean Squared Exponential Error)\n  >>> meajRootMeanSquaredExponentialError([1.0, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "<|endoftext|>/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesProd takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  are products of three, and false otherwise.\n\n  >>> triolesProd([1, 3, 5, 0])\n  false\n  >>> triolesProd([1, 3, -2, 1])\n  true\n  >>> triolesProd([1, 2, 3, 7])\n  false\n  >>> triolesProd([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesProd([1])\n  false\n  */\nconst triolesProd = (l) => {\n  let prod = 1;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n    if (prod === 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesProdToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  are products of three, and false otherwise.\n\n  >>> triolesProdToZero([1, 3, 5, 0])\n  false\n  >>> triolesProdToZero([1, 3, -2, 1])\n  true\n  >>> triolesProdToZero([1, 2, 3, 7])\n  false\n  >>> triolesProdToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesProdToZero([1])\n  false\n  */\nconst triolesProdToZero = (l) => {\n  let prod = 1;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n    if (prod === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesProdToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  are products of three, and false otherwise.\n\n  >>> triolesProdToOne([1, 3, 5, 0])\n  false\n  >>> triolesProdToOne([1, 3, -2, 1])\n  true\n  >>> triolesProdToOne([1, 2, 3, 7])\n  false\n  >>> triolesProdToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesProdToOne([1])\n  false\n  */\nconst triolesProdToOne = (l) => {\n  let prod = 1;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n    if (prod === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triolesProdToTwo takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  are products of three, and false otherwise.\n\n  >>> triolesProdToTwo([1, 3, 5, 0])\n  false\n  >>> triolesProdToTwo([1, 3, -2, 1])\n  true\n  >>> triolesProdToTwo([1, 2, 3, 7])\n  false\n  >>> triolesProdToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesProdToTwo([1])\n  false\n  */\nconst triolesProdToTwo = (l) => {\n  let prod = 1;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n    if (prod === 2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesProdToThree takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  are products of three, and false otherwise.\n\n  >>> triolesProdToThree([1, 3, 5, 0])\n  false\n  >>> triolesProdToThree([1, 3, -2, 1])\n  true\n  >>> triolesProdToThree([1, 2, 3, 7])\n  false\n  >>> triolesProdToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesProdToThree([1])\n  false\n  */\nconst triolesProdToThree = (l) => {\n  let prod = 1;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n    if (prod === 3) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesProdToFour takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  are products of three, and false otherwise.\n\n  >>> triolesProdToFour([1, 3, 5, 0])\n  false\n  >>> triolesProdToFour([1, 3, -2, 1])\n  true\n  >>> triolesProdToFour([1, 2, 3, 7])\n  false\n  >>> triolesProdToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesProdToFour([1])\n  false\n  */\nconst triolesProdToFour = (l) => {\n  let prod = 1;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n    if (prod === 4) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesProdToFive takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  are products of three, and false otherwise.\n\n  >>> triolesProdToFive([1, 3, 5, 0])\n  false\n  >>> triolesProdToFive([1, 3, -2, 1])\n  true\n  >>> triolesProdToFive([1, 2, 3, 7])\n  false\n  >>> triolesProdToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesProdToFive([1])\n  false\n  */\nconst triolesProdToFive = (l) => {\n  let prod = 1;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n    if (prod === 5) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesProdToSix takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  are products of three, and false otherwise.\n\n  >>> triolesProdToSix([1, 3, 5, 0])\n  false\n  >>> triolesProdToSix([1, 3, -2, 1])\n  true\n  >>> triolesProdToSix([1, 2, 3, 7])\n  false\n  >>> triolesProdToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesProdToSix([1])\n  false\n  */\nconst triolesProdToSix = (l) => {\n  let prod = 1;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n    if (prod === 6) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    const car1 = cars[i];\n    const car2 = cars[(i + 1) % n];\n    if (car1.speed > car2.speed) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given an array of cars, determine if they collide with each other.\n  Return true if they do; false otherwise.\n  */\nconst carsCollide = (cars) => {\n  for (let i = 0; i < cars.length; i++) {\n    const car1 = cars[i];\n    for (let j = i + 1; j < cars.length; j++) {\n      const car2 = cars[j];\n      if (car1.speed > car2.speed) {\n        return false;\n      }\n    }\n  }\n  return true;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i - 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i--;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst decgList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i + 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> incList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst incList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i + 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i--;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> decList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst decList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i - 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> incList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst incList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i + 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i--;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> decList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst decList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i - 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> incList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst incList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i + 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i--;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> decList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst decList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i - 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> incList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst incList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i + 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i--;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> decList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst decList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i - 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> incList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst incList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i + 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i--;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> decList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst decList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i - 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> incList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst incList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i + 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i--;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> decList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst decList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i - 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> incList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst incList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i + 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i--;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> decList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst decList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    const j = i - 1;\n    const tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "<|endoftext|>/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSubtractToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  subtract from zero, and false otherwise.\n  >>> paigsSubtractToZero([1, 3, 5, 0])\n  false\n  >>> paigsSubtractToZero([1, 3, -2, 1])\n  false\n  >>> paigsSubtractToZero([1, 2, 3, 7])\n  false\n  >>> paigsSubtractToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSubtractToZero([1])\n  false\n  */\nconst paigsSubtractToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  paigsMultiplyToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  multiply by zero, and false otherwise.\n  >>> paigsMultiplyToZero([1, 3, 5, 0])\n  false\n  >>> paigsMultiplyToZero([1, 3, -2, 1])\n  false\n  >>> paigsMultiplyToZero([1, 2, 3, 7])\n  false\n  >>> paigsMultiplyToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsMultiplyToZero([1])\n  false\n  */\nconst paigsMultiplyToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  paigsDivideToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  divide by zero, and false otherwise.\n  >>> paigsDivideToZero([1, 3, 5, 0])\n  false\n  >>> paigsDivideToZero([1, 3, -2, 1])\n  false\n  >>> paigsDivideToZero([1, 2, 3, 7])\n  false\n  >>> paigsDivideToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsDivideToZero([1])\n  false\n  */\nconst paigsDivideToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] / l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  paigsEqualToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  equal to zero, and false otherwise.\n  >>> paigsEqualToZero([1, 3, 5, 0])\n  false\n  >>> paigsEqualToZero([1, 3, -2, 1])\n  false\n  >>> paigsEqualToZero([1, 2, 3, 7])\n  false\n  >>> paigsEqualToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsEqualToZero([1])\n  false\n  */\nconst paigsEqualToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] === 0;\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  paigsGreaterThanZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  greater than zero, and false otherwise.\n  >>> paigsGreaterThanZero([1, 3, 5, 0])\n  false\n  >>> paigsGreaterThanZero([1, 3, -2, 1])\n  false\n  >>> paigsGreaterThanZero([1, 2, 3, 7])\n  false\n  >>> paigsGreaterThanZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsGreaterThanZero([1])\n  false\n  */\nconst paigsGreaterThanZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] > 0;\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  paigsLessThanZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  less than zero, and false otherwise.\n  >>> paigsLessThanZero([1, 3, 5, 0])\n  false\n  >>> paigsLessThanZero([1, 3, -2, 1])\n  false\n  >>> paigsLessThanZero([1, 2, 3, 7])\n  false\n  >>> paigsLessThanZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsLessThanZero([1])\n  false\n  */\nconst paigsLessThanZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] < 0;\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  paigsGreaterThanOrEqualToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  greater than or equal to zero, and false otherwise.\n  >>> paigsGreaterThanOrEqualToZero([1, 3, 5, 0])\n  false\n  >>> paigsGreaterThanOrEqualToZero([1, 3, -2, 1])\n  false\n  >>> paigsGreaterThanOrEqualToZero([1, 2, 3, 7])\n  false\n  >>> paigsGreaterThanOrEqualToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsGreaterThanOrEqualToZero([1])\n  false\n  */\nconst paigsGreaterThanOrEqualToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] >= 0;\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  paigsLessThanOrEqualToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  less than or equal to zero, and false otherwise.\n  >>> paigsLessThanOrEqualToZero([1, 3, 5, 0])\n  false\n  >>> paigsLessThanOrEqualToZero([1, 3, -2, 1])\n  false\n  >>> paigsLessThanOrEqualToZero([1, 2, 3, 7])\n  false\n  >>> paigsLessThanOrEqualToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsLessThanOrEqualToZero([1])\n  false\n  */\nconst paigsLessThanOrEqualToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] <= 0;\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  if (base === 10) {\n    return x.toString();\n  }\n  return x.toString(base);\n};\n\n/*\n  Convert a string to an array of its characters.\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChars('hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> toChar", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const area = (h - a) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function that returns the sum of the digits of an integer number.\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(1234)\n  10\n  >>> sumDigits(12345)\n  15\n  >>> sumDigits(1234567)\n  18\n  >>> sumDigits(123456789)\n  21\n  >>> sumDigits(1234567890)\n  24\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-1)\n  -1\n  >>> sumDigits(-2)\n  -2\n  >>> sumDigits(-3)\n  -3\n  >>> sumDigits(-4)\n  -4\n  >>> sumDigits(-5)\n  -5\n  >>> sumDigits(-6)\n  -6\n  >>> sumDigits(-7)\n  -7\n  >>> sumDigits(-8)\n  -8\n  >>> sumDigits(-9)\n  -9\n  >>> sumDigits(-10)\n  -10\n  >>> sumDigits(-11)\n  -11\n  >>> sumDigits(-12)\n  -12\n  >>> sumDigits(-13)\n  -13\n  >>> sumDigits(-14)\n  -14\n  >>> sumDigits(-15)\n  -15\n  >>> sumDigits(-16)\n  -16\n  >>> sumDigits(-17)\n  -17\n  >>> sumDigits(-18)\n  -18\n  >>> sumDigits(-19)\n  -19\n  >>> sumDigits(-20)\n  -20\n  >>> sumDigits(-21)\n  -21\n  >>> sumDigits(-22)\n  -22\n  >>> sumDigits(-23)\n  -23\n  >>> sumDigits(-24)\n  -24\n  >>> sumDigits(-25)\n  -25\n  >>> sumDigits(-26)\n  -26\n  >>> sumDigits(-27)\n  -27\n  >>> sumDigits(-28)\n  -28\n  >>> sumDigits(-29)\n  -29\n  >>> sumDigits(-30)\n  -30\n  >>> sumDigits(-31)\n  -31\n  >>> sumDigits(-32)\n  -32\n  >>> sumDigits(-33)\n  -33\n  >>> sumDigits(-34)\n  -34\n  >>> sumDigits(-35)\n  -35\n  >>> sumDigits(-36)\n  -36\n  >>> sumDigits(-37)\n  -37\n  >>> sumDigits(-38)\n  -38\n  >>> sumDigits(-39)\n  -39\n  >>> sumDigits(-40)\n  -40\n  >>> sumDigits(-41)\n  -41\n  >>> sumDigits(-42)\n  -42\n  >>> sumDigits(-43)\n  -43\n  >>> sumDigits(-44)\n  -44\n  >>> sumDigits(-45)\n  -45\n  >>> sumDigits(-46)\n  -46\n  >>> sumDigits(-47)\n  -47\n  >>> sumDigits(-48)\n  -48\n  >>> sumDigits(-49)\n  -49\n  >>> sumDigits(-50)\n  -50\n  >>> sumDigits(-51)\n  -51\n  >>> sumDigits(-52)\n  -52\n  >>> sumDigits(-53)\n  -53\n  >>> sumDigits(-54)\n  -54\n  >>> sumDigits(-55)\n  -55\n  >>> sumDigits(-56)\n  -56\n  >>> sumDigits(-57)\n  -57\n  >>> sumDigits(-58)\n  -58\n  >>> sumDigits(-59)\n  -59\n  >>> sumDigits(-60)\n  -60\n  >>> sumDigits(-61)\n  -61\n  >>> sumDigits(-64)\n  -64\n  >>> sumDigits(-65)\n  -65\n  >>> sumDigits(-66)\n  -66\n  >>> sumDigits(-67)\n  -67\n  >>> sumDigits(-68)\n  -68\n  >>> sumDigits(-69)\n  -69\n  >>> sumDigits(-70)\n  -70\n  >>> sumDigits(-71)\n  -71\n  >>> sumDigits(-72)\n  -72\n  >>> sumDigits(-73)\n  -73\n  >>> sumDigits(-74)\n  -74\n  >>> sumDigits(-75)\n  -75\n  >>> sumDigits(-76)\n  -76\n  >>> sumDigits(-77)\n  -77\n  >>> sumDigits(-78)\n  -78\n  >>> sumDigits(-79)\n  -79\n  >>> sumDigits(-81)\n  -81\n  >>> sumDigits(-82)\n  -82\n  >>> sumDigits(-83)\n  -83\n  >>> sumDigits(-84)\n  -84\n  >>> sumDigits(-85)\n  -85\n  >>> sumDigits(-86)\n  -86\n  >>> sumDigits(-87)\n  -87\n  >>> sumDigits(-88)\n  -88\n  >>> sumDigits(-89)\n  -89\n  >>> sumDigits(-90)\n  -90\n  >>> sumDigits(-91)\n  -91\n  >>> sumDigits(-92)\n  -92\n  >>> sumDigits(-93)\n  -93\n  >>> sumDigits(-94)\n  -94\n  >>> sumDigits(-95)\n  -95\n  >>> sumDigits(-96)\n  -96\n  >>> sumDigits(-97)\n  -97\n  >>> sumDigits(-98)\n  -98\n  >>> sumDigits(-99)\n  -99\n  >>> sumDigits(100)\n  100\n  >>> sumDigits(101)\n  101\n  >>> sumDigits(102)\n  102\n  >>> sumDigits(103)\n  103\n  >>> sumDigits(104)\n  104\n  >>> sumDigits(105)\n  105\n  >>> sumDigits(106)\n  106\n  >>> sumDigits(107)\n  107\n  >>> sumDigits(108)\n  108\n  >>> sumDigits(109)\n  109\n  ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "<|endoftext|>/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n  let n = l.length;\n  let m = 1;\n  let res = 1;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < m) {\n      if (l[i] > l[j]) {\n        res = res * -1;\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n    m++;\n  }\n  return res;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan2 = (l, m) => {\n  let n = l.length;\n  let m = 1;\n  let res = 1;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < m) {\n      if (l[i] > l[j]) {\n        res = res * -1;\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n    m++;\n  }\n  return res;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan2([3, 1, 2, 4, 5], 3)\n  3\n  >>> medlan2([-10, 4, 6, 1000, 10, 20], 8)\n  8.0\n  */\nconst medlan3 = (l, m) => {\n  let n = l.length;\n  let m = 1;\n  let res = 1;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < m) {\n      if (l[i] > l[j]) {\n        res = res * -1;\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n    m++;\n  }\n  return res;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan3([3, 1, 2, 4, 5], 3)\n  3\n  >>> medlan3([-10, 4, 6, 1000, 10, 20], 8)\n  8.0\n  */\nconst medlan4 = (l, m) => {\n  let n = l.length;\n  let m = 1;\n  let res = 1;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < m) {\n      if (l[i] > l[j]) {\n        res = res * -1;\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n    m++;\n  }\n  return res;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan4([3, 1, 2, 4, 5], 3)\n  3\n  >>> medlan4([-10, 4, 6, 1000, 10, 20], 8)\n  8.0\n  */\nconst medlan5 = (l, m) => {\n  let n = l.length;\n  let m = 1;\n  let res = 1;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < m) {\n      if (l[i] > l[j]) {\n        res = res * -1;\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n    m++;\n  }\n  return res;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan5([3, 1, 2, 4, 5], 3)\n  3\n  >>> medlan5([-10, 4, 6, 1000, 10, 20], 8)\n  8.0\n  */\nconst medlan6 = (l, m) => {\n  let n = l.length;\n  let m = 1;\n  let res = 1;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < m) {\n      if (l[i] > l[j]) {\n        res = res * -1;\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n    m++;\n  }\n  return res;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan6([3, 1, 2, 4, 5], 3)\n  3\n  >>> medlan6([-10, 4, 6, 1000, 10, 20], 8)\n  8.0\n  */\nconst medlan7 = (l, m) => {\n  let n = l.length;\n  let m = 1;\n  let res = 1;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < m) {\n      if (l[i] > l[j]) {\n        res = res * -1;\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n    m++;\n  }\n  return res;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan7([3, 1, 2, 4, 5], 3)\n  3\n  >>> medlan7([-10, 4, 6, 1000, 10, 20], 8)\n  8.0\n  */\nconst medlan8 = (l, m) => {\n  let n = l.length;\n  let m = 1;\n  let res = 1;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < m) {\n      if (l[i] > l[j]) {\n        res = res * -1;\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n    m++;\n  }\n  return res;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan8([3, 1, 2, 4, 5], 3)\n  3\n  >>> medlan8([-10, 4, 6, 1000, 10, 20], 8)\n  8.0\n  */\nconst medlan9 = (l, m) => {\n  let n = l.length;\n  let m = 1;\n  let res = 1;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < m) {\n      if (l[i] > l[j]) {\n        res = res * -1;\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n    m++;\n  }\n  return res;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan9([3, 1, 2, 4, 5], 3)\n  3\n  >>> medlan9([-10, 4, 6, 1000, 10, 20], 8)\n  8.0\n  */\nconst medlan10 = (l, m) => {\n  let n = l.length;\n  let m = 1;\n  let res = 1;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < m) {\n      if (l[i] > l[j]) {\n        res = res * -1;\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n    m++;\n  }\n  return res;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan10([3, 1, 2, 4, 5], 3)\n  3\n  >>> medlan10([-10, 4, 6, 1000, 10, 20], 8)\n  8.0\n  */\nconst medlan11 = (l, m) => {\n  let n = l.length;\n  let m = 1;\n  let res = 1;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < m) {\n      if (l[i] > l[j]) {\n        res = res * -1;\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n    m++;\n  }\n  return res;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan11([3, 1, 2, 4, 5], 3)\n  3\n  >>> medlan11([-10, 4, 6, 1000, 10, 20], 8)\n  8.0\n  */\nconst medlan12 = (l, m) => {\n  let n = l.length;\n  let m = 1;\n  let res = 1;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    while (j < m) {\n      if (l[i] > l[j]) {\n        res = res * -1;\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n    m++;\n  }\n  return res;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan12([3, 1, 2, 4, 5], 3)\n  3\n  >>> medlan12([-10, 4, 6, 1000, 10, 20], 8)\n  8.0\n  */\nconst medlan13 = (l, m) => {\n  let n = l.length;\n  let m = 1;\n  let res = 1;\n  let i = 0;\n  let j = 0;\n  while (i < n) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  const length = text.length;\n  const reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPwlindromeCaseInsensitive('')\n  true\n  >>> isPwlindromeCaseInsensitive('aba')\n  true\n  >>> isPwlindromeCaseInsensitive('aaaaa')\n  true\n  >>> isPwlindromeCaseInsensitive('zbcd')\n  false\n  */\nconst isPwlindromeCaseInsensitive = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  const length = text.length;\n  const reversedText = text.split('').reverse().join('');\n  return reversedText === text.toUpperCase();\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPwlindromeCaseInsensitive('aba')\n  true\n  >>> isPwlindromeCaseInsensitive('aaaaa')\n  true\n  >>> isPwlindromeCaseInsensitive('zbcd')\n  false\n  */\nconst isPwlindromeCaseInsensitiveReversed = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  const length = text.length;\n  const reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPwlindromeCaseInsensitiveReversed('aba')\n  true\n  >>> isPwlindromeCaseInsensitiveReversed('aaaaa')\n  true\n  >>> isPwlindromeCaseInsensitiveReversed('zbcd')\n  false\n  */\nconst isPwlindromeCaseInsensitiveReversedReversed = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  const length = text.length;\n  const reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPwlindromeCaseInsensitiveReversedReversed('aba')\n  true\n  >>> isPwlindromeCaseInsensitiveReversedReversed('aaaaa')\n  true\n  >>> isPwlindromeCaseInsensitiveReversedReversed('zbcd')\n  false\n  */\nconst isPwlindromeCaseInsensitiveReversedReversedReversed = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  const length = text.length;\n  const reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversed('aba')\n  true\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversed('aaaaa')\n  true\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversed('zbcd')\n  false\n  */\nconst isPwlindromeCaseInsensitiveReversedReversedReversedReversed = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  const length = text.length;\n  const reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversedReversed('aba')\n  true\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPwlindromeCaseInsensitiveReversedReversedReversedReversedReversed = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  const length = text.length;\n  const reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversedReversed('aba')\n  true\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPwlindromeCaseInsensitiveReversedReversedReversedReversedReversedReversed = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  const length = text.length;\n  const reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPwlindromeCaseInsensitiveReversedReversedReversedReversedReversedReversedReversed = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  const length = text.length;\n  const reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPwlindromeCaseInsensitiveReversedReversedReversedReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPwlindromeCaseInsensitiveReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result % p;\n};\n\n/*\n  >>> modo(100, 101)\n  1\n  >>> modo(100, 100)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n  >>> modo(100, 101)\n  0\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] < delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 1) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 2) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 3) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 4) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 5) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 6) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 7) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 8) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 9) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 10) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 11) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 12) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 13) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 14) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 15) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 16) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 17) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 18) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 19) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 20) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 21) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 22) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 23) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 24) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 25) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 26) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 27) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 28) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 29) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 30) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 31) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 32) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 33) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 34) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 35) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 36) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 37) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 38) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 39) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 40) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 41) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 42) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 43) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 44) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 45) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 46) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 47) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 48) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 49) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 50) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 51) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 52) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 53) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 54) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 55) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 56) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 57) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 58) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 59) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode = (s) => {\n  return encldeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "<|endoftext|>/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n  let vowels = 'aeiouAEIOU'\n  let vowelsLength = vowels.length\n  let vowelsIndex = 0\n  let vowelsCount = 0\n  let vowelsIndex2 = 0\n  let vowelsCount2 = 0\n  let vowelsIndex3 = 0\n  let vowelsCount3 = 0\n  let vowelsIndex4 = 0\n  let vowelsCount4 = 0\n  let vowelsIndex5 = 0\n  let vowelsCount5 = 0\n  let vowelsIndex6 = 0\n  let vowelsCount6 = 0\n  let vowelsIndex7 = 0\n  let vowelsCount7 = 0\n  let vowelsIndex8 = 0\n  let vowelsCount8 = 0\n  let vowelsIndex9 = 0\n  let vowelsCount9 = 0\n  let vowelsIndex10 = 0\n  let vowelsCount10 = 0\n  let vowelsIndex11 = 0\n  let vowelsCount11 = 0\n  let vowelsIndex12 = 0\n  let vowelsCount12 = 0\n  let vowelsIndex13 = 0\n  let vowelsCount13 = 0\n  let vowelsIndex14 = 0\n  let vowelsCount14 = 0\n  let vowelsIndex15 = 0\n  let vowelsCount15 = 0\n  let vowelsIndex16 = 0\n  let vowelsCount16 = 0\n  let vowelsIndex17 = 0\n  let vowelsCount17 = 0\n  let vowelsIndex18 = 0\n  let vowelsCount18 = 0\n  let vowelsIndex19 = 0\n  let vowelsCount19 = 0\n  let vowelsIndex20 = 0\n  let vowelsCount20 = 0\n  let vowelsIndex21 = 0\n  let vowelsCount21 = 0\n  let vowelsIndex22 = 0\n  let vowelsCount22 = 0\n  let vowelsIndex23 = 0\n  let vowelsCount23 = 0\n  let vowelsIndex24 = 0\n  let vowelsCount24 = 0\n  let vowelsIndex25 = 0\n  let vowelsCount25 = 0\n  let vowelsIndex26 = 0\n  let vowelsCount26 = 0\n  let vowelsIndex27 = 0\n  let vowelsCount27 = 0\n  let vowelsIndex28 = 0\n  let vowelsCount28 = 0\n  let vowelsIndex29 = 0\n  let vowelsCount29 = 0\n  let vowelsIndex30 = 0\n  let vowelsCount30 = 0\n  let vowelsIndex31 = 0\n  let vowelsCount31 = 0\n  let vowelsIndex32 = 0\n  let vowelsCount32 = 0\n  let vowelsIndex33 = 0\n  let vowelsCount33 = 0\n  let vowelsIndex34 = 0\n  let vowelsCount34 = 0\n  let vowelsIndex35 = 0\n  let vowelsCount35 = 0\n  let vowelsIndex36 = 0\n  let vowelsCount36 = 0\n  let vowelsIndex37 = 0\n  let vowelsCount37 = 0\n  let vowelsIndex38 = 0\n  let vowelsCount38 = 0\n  let vowelsIndex39 = 0\n  let vowelsCount39 = 0\n  let vowelsIndex40 = 0\n  let vowelsCount40 = 0\n  let vowelsIndex41 = 0\n  let vowelsCount41 = 0\n  let vowelsIndex42 = 0\n  let vowelsCount42 = 0\n  let vowelsIndex43 = 0\n  let vowelsCount43 = 0\n  let vowelsIndex44 = 0\n  let vowelsCount44 = 0\n  let vowelsIndex45 = 0\n  let vowelsCount45 = 0\n  let vowelsIndex46 = 0\n  let vowelsCount46 = 0\n  let vowelsIndex47 = 0\n  let vowelsCount47 = 0\n  let vowelsIndex48 = 0\n  let vowelsCount48 = 0\n  let vowelsIndex49 = 0\n  let vowelsCount49 = 0\n  let vowelsIndex50 = 0\n  let vowelsCount50 = 0\n  let vowelsIndex51 = 0\n  let vowelsCount51 = 0\n  let vowelsIndex52 = 0\n  let vowelsCount52 = 0\n  let vowelsIndex53 = 0\n  let vowelsCount53 = 0\n  let vowelsIndex54 = 0\n  let vowelsCount54 = 0\n  let vowelsIndex55 = 0\n  let vowelsCount55 = 0\n  let vowelsIndex56 = 0\n  let vowelsCount56 = 0\n  let vowelsIndex57 = 0\n  let vowelsCount57 = 0\n  let vowelsIndex58 = 0\n  let vowelsCount58 = 0\n  let vowelsIndex59 = 0\n  let vowelsCount59 = 0\n  let vowelsIndex60 = 0\n  let vowelsCount60 = 0\n  let vowelsIndex61 = 0\n  let vowelsCount61 = 0\n  let vowelsIndex62 = 0\n  let vowelsCount62 = 0\n  let vowelsIndex63 = 0\n  let vowelsCount63 = 0\n  let vowelsIndex64 = 0\n  let vowelsCount64 = 0\n  let vowelsIndex65 = 0\n  let vowelsCount65 = 0\n  let vowelsIndex66 = 0\n  let vowelsCount66 = 0\n  let vowelsIndex67 = 0\n  let vowelsCount67 = 0\n  let vowelsIndex68 = 0\n  let vowelsCount68 = 0\n  let vowelsIndex69 = 0\n  let vowelsCount69 = 0\n  let vowelsIndex70 = 0\n  let vowelsCount70 = 0\n  let vowelsIndex71 = 0\n  let vowelsCount71 = 0\n  let vowelsIndex72 = 0\n  let vowelsCount72 = 0\n  let vowelsIndex73 = 0\n  let vowelsCount73 = 0\n  let vowelsIndex74 = 0\n  let vowelsCount74 = 0\n  let vowelsIndex75 = 0\n  let vowelsCount75 = 0\n  let vowelsIndex76 = 0\n  let vowelsCount76 = 0\n  let vowelsIndex77 = 0\n  let vowelsCount77 = 0\n  let vowelsIndex78 = 0\n  let vowelsCount78 = 0\n  let vowelsIndex79 = 0\n  let vowelsCount79 = 0\n  let vowelsIndex80 = 0\n  let vowelsCount80 = 0\n  let vowelsIndex81 = 0\n  let vowelsCount81 = 0\n  let vowelsIndex82 = 0\n  let vowelsCount82 = 0\n  let vowelsIndex83 = 0\n  let vowelsCount83 = 0\n  let vowelsIndex84 = 0\n  let vowelsCount84 = 0\n  let vowelsIndex85 = 0\n  let vowelsCount85 = 0\n  let vowelsIndex86 = 0\n  let vowelsCount86 = 0\n  let vowelsIndex87 = 0\n  let vowelsCount87 = 0\n  let vowelsIndex88 = 0\n  let vowelsCount88 = 0\n  let vowelsIndex89 = 0\n  let vowelsCount89 = 0\n  let vowelsIndex90 = 0\n  let vowelsCount90 = 0\n  let vowelsIndex91 = 0\n  let vowelsCount91 = 0\n  let vowelsIndex92 = 0\n  let vowelsCount92 = 0\n  let vowelsIndex93 = 0\n  let vowelsCount93 = 0\n  let vowelsIndex94 = 0\n  let vowelsCount94 = 0\n  let vowelsIndex95 = 0\n  let vowelsCount95 = 0\n  let vowelsIndex96 = 0\n  let vowelsCount96 = 0\n  let vowelsIndex97 = 0\n  let vowelsCount97 = 0\n  let vowelsIndex98 = 0\n  let vowelsCount98 = 0\n  let vowelsIndex99 = 0\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 5)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst bellw = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellw([10, 20, 30, 40], 5)\n  true\n  >>> bellw([10, 20, 30, 40], 100)\n  false\n  */\nconst bellw2 = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellw([10, 20, 30, 40], 5)\n  true\n  >>> bellw([10, 20, 30, 40], 100)\n  false\n  */\nconst bellw3 = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellw([10, 20, 30, 40], 5)\n  true\n  >>> bellw([10, 20, 30, 40], 100)\n  false\n  */\nconst bellw4 = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellw([10, 20, 30, 40], 5)\n  true\n  >>> bellw([10, 20, 30, 40], 100)\n  false\n  */\nconst bellw5 = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellw([10, 20, 30, 40], 5)\n  true\n  >>> bellw([10, 20, 30, 40], 100)\n  false\n  */\nconst bellw6 = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellw([10, 20, 30, 40], 5)\n  true\n  >>> bellw([10, 20, 30, 40], 100)\n  false\n  */\nconst bellw7 = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellw([10, 20, 30, 40], 5)\n  true\n  >>> bellw([10, 20, 30, 40], 100)\n  false\n  */\nconst bellw8 = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellw([10, 20, 30, 40], 5)\n  true\n  >>> bellw([10, 20, 30, 40], 100)\n  false\n  */\nconst bellw9 = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellw([10, 20, 30, 40], 5)\n  true\n  >>> bellw([10, 20, 30, 40], 100)\n  false\n  */\nconst bellw10 = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellw([10, 20, 30, 40], 5)\n  true\n  >>> bellw([10, 20, 30, 40], 100)\n  false\n  */\nconst bellw11 = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellw([10, 20, 30, 40], 5)\n  true\n  >>> bellw([10, 20, 30, 40], 100)\n  false\n  */\nconst bellw12 = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellw([10, 20, 30, 40], 5)\n  true\n  >>> bellw([10, 20, 30, 40], 100)\n  false\n  */\nconst bellw13 = (l, t) => {\n  let n = l.length;\n  let m = Math.pow(2, n - 1);\n  let count = 0;\n  let max = 0;\n  let i;\n\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      count++;\n      if (count > max) {\n        max = count;\n      }\n    }\n  }\n\n  return max === count;\n};\n\n/*\n  >>> bellw([10, 20, 30, 40], 5)\n  true\n  >>> bellw([10, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -2\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  4\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  4\n  */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt2 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt5 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt10 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt15 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt20 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt25 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt30 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt35 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt40 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt45 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt50 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt55 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt60 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt65 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt70 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt75 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt80 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt85 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt90 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt95 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt100 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt105 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt110 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt115 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt120 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt125 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt130 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt135 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt140 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt145 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt150 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt155 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt160 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt165 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt170 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt175 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt180 = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt185 = x => {\n  return Math.sqrt(x);\n};\n\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same words.\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfWords('abcd', 'dddddddabc')\n  true\n  >>> samfWords('dddddddabc', 'abcd')\n  true\n  >>> samfWords('eabcd', 'dddddddabc')\n  false\n  >>> samfWords('abcd', 'dddddddabce')\n  false\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfWords = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same words.\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfWords('abcd', 'dddddddabc')\n  true\n  >>> samfWords('dddddddabc', 'abcd')\n  true\n  >>> samfWords('eabcd', 'dddddddabc')\n  false\n  >>> samfWords('abcd', 'dddddddabce')\n  false\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfWordsIgnoreCase = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same words.\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfWords('abcd', 'dddddddabc')\n  true\n  >>> samfWords('dddddddabc', 'abcd')\n  true\n  >>> samfWords('eabcd', 'dddddddabc')\n  false\n  >>> samfWords('abcd', 'dddddddabce')\n  false\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfWordsIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same words.\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfWords('abcd', 'dddddddabc')\n  true\n  >>> samfWords('dddddddabc', 'abcd')\n  true\n  >>> samfWords('eabcd', 'dddddddabc')\n  false\n  >>> samfWords('abcd', 'dddddddabce')\n  false\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfWordsIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same words.\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfWords('abcd', 'dddddddabc')\n  true\n  >>> samfWords('dddddddabc', 'abcd')\n  true\n  >>> samfWords('eabcd', 'dddddddabc')\n  false\n  >>> samfWords('abcd', 'dddddddabce')\n  false\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same words.\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfWords('abcd', 'dddddddabc')\n  true\n  >>> samfWords('dddddddabc', 'abcd')\n  true\n  >>> samfWords('eabcd', 'dddddddabc')\n  false\n  >>> samfWords('abcd', 'dddddddabce')\n  false\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same words.\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfWords('abcd', 'dddddddabc')\n  true\n  >>> samfWords('dddddddabc', 'abcd')\n  true\n  >>> samfWords('eabcd', 'dddddddabc')\n  false\n  >>> samfWords('abcd', 'dddddddabce')\n  false\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same words.\n  >>> samfWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfWords('abcd', 'dddddddabc')\n  true\n  >>> samfWords('dddddddabc', 'abcd')\n  true\n  >>> samfWords('eabcd', 'dddddddabc')\n  false\n  >>> samfWords('abcd', 'dddddddabce')\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"<\").map(str => str.trim());\n  const closingBrackets = brackets.split(\">\").map(str => str.trim());\n  return openingBrackets.every(opening => closingBrackets.every(closing => opening === closing));\n};\n\n/**\n * Given a string, return true if it contains only letters.\n *\n * >>> isLetters(\"hello\")\n * true\n * >>> isLetters(\"hello123\")\n * false\n */\nconst isLetters = str => /[a-zA-Z]/.test(str);\n\n/**\n * Given a string, return true if it contains only numbers.\n *\n * >>> isNumbers(\"hello\")\n * true\n * >>> isNumbers(\"hello123\")\n * false\n */\nconst isNumbers = str => /\\d/.test(str);\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n *\n * >>> isLettersAndNumbers(\"hello\")\n * true\n * >>> isLettersAndNumbers(\"hello123\")\n * false\n */\nconst isLettersAndNumbers = str => isLetters(str) && isNumbers(str);\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n *\n * >>> isLettersAndNumbersAndLetters(\"hello\")\n * true\n * >>> isLettersAndNumbersAndLetters(\"hello123\")\n * false\n */\nconst isLettersAndNumbersAndLetters = str => isLettersAndNumbers(str) && isLetters(str);\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n *\n * >>> isLettersAndNumbersAndLettersAndNumbers(\"hello\")\n * true\n * >>> isLettersAndNumbersAndLettersAndNumbers(\"hello123\")\n * false\n */\nconst isLettersAndNumbersAndLettersAndNumbers = str => isLettersAndNumbersAndLetters(str) && isNumbers(str);\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n *\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLetters(\"hello\")\n * true\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLetters(\"hello123\")\n * false\n */\nconst isLettersAndNumbersAndLettersAndNumbersAndLetters = str => isLettersAndNumbersAndLettersAndNumbersAndLetters(str) && isLettersAndNumbersAndLetters(str);\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n *\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers(\"hello\")\n * true\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers(\"hello123\")\n * false\n */\nconst isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers = str => isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers(str) && isLettersAndNumbersAndLettersAndNumbers(str);\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n *\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(\"hello\")\n * true\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(\"hello123\")\n * false\n */\nconst isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers = str => isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(str) && isLettersAndNumbersAndLettersAndNumbersAndLetters(str);\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n *\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(\"hello\")\n * true\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(\"hello123\")\n * false\n */\nconst isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters = str => isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers(str) && isLettersAndNumbersAndLettersAndNumbersAndLetters(str);\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n *\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers(\"hello\")\n * true\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers(\"hello123\")\n * false\n */\nconst isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters = str => isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers(str) && isLettersAndNumbersAndLettersAndNumbersAndLetters(str);\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n *\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers(\"hello\")\n * true\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers(\"hello123\")\n * false\n */\nconst isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers = str => isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(str) && isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers(str);\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n *\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(\"hello\")\n * true\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(\"hello123\")\n * false\n */\nconst isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters = str => isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(str) && isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(str);\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n *\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(\"hello\")\n * true\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(\"hello123\")\n * false\n */\nconst isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters = str => isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers(str) && isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbers(str);\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n *\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(\"hello\")\n * true\n * >>> isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters(\"hello123\")\n * false\n */\nconst isLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters = str => isLettersAndNumbersAndLettersAndNumbersAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "<|endoftext|>/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let res = true;\n  while (i >= 0 && j >= 0) {\n    if (l[i] > l[j]) {\n      k++;\n      i--;\n      j--;\n    } else if (l[i] < l[j]) {\n      k++;\n      j--;\n    } else {\n      k++;\n      i++;\n      j--;\n    }\n  }\n  return res === true;\n};\n\n/**\n * Returns true if the list is a permutation of itself.\n * >>> isPermutation([1])\n * true\n * >>> isPermutation([2])\n * false\n * >>> isPermutation([1,2])\n * false\n * >>> isPermutation([2,1])\n * true\n */\nconst isPermutation = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let res = true;\n  while (i >= 0 && j >= 0) {\n    if (l[i] === l[j]) {\n      k++;\n      i--;\n      j--;\n    } else if (l[i] > l[j]) {\n      k++;\n      j--;\n    } else {\n      k++;\n      i++;\n      j--;\n    }\n  }\n  return res === true;\n};\n\n/**\n * Returns true if the list is a permutation of itself.\n * >>> isPermutation([1])\n * true\n * >>> isPermutation([2])\n * false\n * >>> isPermutation([1,2])\n * false\n * >>> isPermutation([2,1])\n * true\n */\nconst isPermutationOf = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let res = true;\n  while (i >= 0 && j >= 0) {\n    if (l[i] === l[j]) {\n      k++;\n      i--;\n      j--;\n    } else if (l[i] < l[j]) {\n      k++;\n      j--;\n    } else {\n      k++;\n      i++;\n      j--;\n    }\n  }\n  return res === true;\n};\n\n/**\n * Returns true if the list is a permutation of itself.\n * >>> isPermutation([1])\n * true\n * >>> isPermutation([2])\n * false\n * >>> isPermutation([1,2])\n * false\n * >>> isPermutation([2,1])\n * true\n */\nconst isPermutationOf = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let res = true;\n  while (i >= 0 && j >= 0) {\n    if (l[i] === l[j]) {\n      k++;\n      i--;\n      j--;\n    } else if (l[i] > l[j]) {\n      k++;\n      j--;\n    } else {\n      k++;\n      i++;\n      j--;\n    }\n  }\n  return res === true;\n};\n\n/**\n * Returns true if the list is a permutation of itself.\n * >>> isPermutation([1])\n * true\n * >>> isPermutation([2])\n * false\n * >>> isPermutation([1,2])\n * false\n * >>> isPermutation([2,1])\n * true\n */\nconst isPermutationOf = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let res = true;\n  while (i >= 0 && j >= 0) {\n    if (l[i] === l[j]) {\n      k++;\n      i--;\n      j--;\n    } else if (l[i] < l[j]) {\n      k++;\n      j--;\n    } else {\n      k++;\n      i++;\n      j--;\n    }\n  }\n  return res === true;\n};\n\n/**\n * Returns true if the list is a permutation of itself.\n * >>> isPermutation([1])\n * true\n * >>> isPermutation([2])\n * false\n * >>> isPermutation([1,2])\n * false\n * >>> isPermutation([2,1])\n * true\n */\nconst isPermutationOf = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let res = true;\n  while (i >= 0 && j >= 0) {\n    if (l[i] === l[j]) {\n      k++;\n      i--;\n      j--;\n    } else if (l[i] > l[j]) {\n      k++;\n      j--;\n    } else {\n      k++;\n      i++;\n      j--;\n    }\n  }\n  return res === true;\n};\n\n/**\n * Returns true if the list is a permutation of itself.\n * >>> isPermutation([1])\n * true\n * >>> isPermutation([2])\n * false\n * >>> isPermutation([1,2])\n * false\n * >>> isPermutation([2,1])\n * true\n */\nconst isPermutationOf = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let res = true;\n  while (i >= 0 && j >= 0) {\n    if (l[i] === l[j]) {\n      k++;\n      i--;\n      j--;\n    } else if (l[i] < l[j]) {\n      k++;\n      j--;\n    } else {\n      k++;\n      i++;\n      j--;\n    }\n  }\n  return res === true;\n};\n\n/**\n * Returns true if the list is a permutation of itself.\n * >>> isPermutation([1])\n * true\n * >>> isPermutation([2])\n * false\n * >>> isPermutation([1,2])\n * false\n * >>> isPermutation([2,1])\n * true\n */\nconst isPermutationOf = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let res = true;\n  while (i >= 0 && j >= 0) {\n    if (l[i] === l[j]) {\n      k++;\n      i--;\n      j--;\n    } else if (l[i] > l[j]) {\n      k++;\n      j--;\n    } else {\n      k++;\n      i++;\n      j--;\n    }\n  }\n  return res === true;\n};\n\n/**\n * Returns true if the list is a permutation of itself.\n * >>> isPermutation([1])\n * true\n * >>> isPermutation([2])\n * false\n * >>> isPermutation([1,2])\n * false\n * >>> isPermutation([2,1])\n * true\n */\nconst isPermutationOf = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let res = true;\n  while (i >= 0 && j >= 0) {\n    if (l[i] === l[j]) {\n      k++;\n      i--;\n      j--;\n    } else if (l[i] < l[j]) {\n      k++;\n      j--;\n    } else {\n      k++;\n      i++;\n      j--;\n    }\n  }\n  return res === true;\n};\n\n/**\n * Returns true if the list is a permutation of itself.\n * >>> isPermutation([1])\n * true\n * >>> isPermutation([2])\n * false\n * >>> isPermutation([1,2])\n * false\n * >>> isPermutation([2,1])\n * true\n */\nconst isPermutationOf = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let res = true;\n  while (i >= 0 && j >= 0) {\n    if (l[i] === l[j]) {\n      k++;\n      i--;\n      j--;\n    } else if (l[i] > l[j]) {\n      k++;\n      j--;\n    } else {\n      k++;\n      i++;\n      j--;\n    }\n  }\n  return res === true;\n};\n\n/**\n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "<|endoftext|>/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    const el1 = l1[i]\n    for (let j = 0; j < l2.length; j++) {\n      const el2 = l2[j]\n      if (el1 === el2) {\n        result.push(el1)\n        set.add(el1)\n        break\n      }\n    }\n  }\n  return [...set].sort().filter(x =>!result.includes(x))\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> comlon_sort([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst comlon_sort = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    const el1 = l1[i]\n    for (let j = 0; j < l2.length; j++) {\n      const el2 = l2[j]\n      if (el1 === el2) {\n        result.push(el1)\n        set.add(el1)\n        break\n      }\n    }\n  }\n  return [...set].sort().filter(x =>!result.includes(x))\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> comlon_sort_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5]\n  >>> comlon_sort_unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst comlon_sort_unique = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    const el1 = l1[i]\n    for (let j = 0; j < l2.length; j++) {\n      const el2 = l2[j]\n      if (el1 === el2) {\n        result.push(el1)\n        set.add(el1)\n        break\n      }\n    }\n  }\n  return [...set].sort().filter(x =>!result.includes(x))\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> comlon_sort_unique_sort([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5]\n  >>> comlon_sort_unique_sort([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst comlon_sort_unique_sort = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    const el1 = l1[i]\n    for (let j = 0; j < l2.length; j++) {\n      const el2 = l2[j]\n      if (el1 === el2) {\n        result.push(el1)\n        set.add(el1)\n        break\n      }\n    }\n  }\n  return [...set].sort().filter(x =>!result.includes(x))\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> comlon_sort_unique_sort_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5]\n  >>> comlon_sort_unique_sort_unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst comlon_sort_unique_sort_unique = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    const el1 = l1[i]\n    for (let j = 0; j < l2.length; j++) {\n      const el2 = l2[j]\n      if (el1 === el2) {\n        result.push(el1)\n        set.add(el1)\n        break\n      }\n    }\n  }\n  return [...set].sort().filter(x =>!result.includes(x))\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> comlon_sort_unique_sort_unique_sort([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5]\n  >>> comlon_sort_unique_sort_unique_sort([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst comlon_sort_unique_sort_unique_sort = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    const el1 = l1[i]\n    for (let j = 0; j < l2.length; j++) {\n      const el2 = l2[j]\n      if (el1 === el2) {\n        result.push(el1)\n        set.add(el1)\n        break\n      }\n    }\n  }\n  return [...set].sort().filter(x =>!result.includes(x))\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> comlon_sort_unique_sort_unique_sort_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5]\n  >>> comlon_sort_unique_sort_unique_sort_unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst comlon_sort_unique_sort_unique_sort_unique = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    const el1 = l1[i]\n    for (let j = 0; j < l2.length; j++) {\n      const el2 = l2[j]\n      if (el1 === el2) {\n        result.push(el1)\n        set.add(el1)\n        break\n      }\n    }\n  }\n  return [...set].sort().filter(x =>!result.includes(x))\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> comlon_sort_unique_sort_unique_sort_unique_sort([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5]\n  >>> comlon_sort_unique_sort_unique_sort_unique_sort([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst comlon_sort_unique_sort_unique_sort_unique_sort = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    const el1 = l1[i]\n    for (let j = 0; j < l2.length; j++) {\n      const el2 = l2[j]\n      if (el1 === el2) {\n        result.push(el1)\n        set.add(el1)\n        break\n      }\n    }\n  }\n  return [...set].sort().filter(x =>!result.includes(x))\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> comlon_sort_unique_sort_unique_sort_unique_sort_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5]\n  >>> comlon_sort_unique_sort_unique_sort_unique_sort_unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst comlon_sort_unique_sort_unique_sort_unique_sort_unique = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    const el1 = l1[i]\n    for (let j = 0; j < l2.length; j++) {\n      const el2 = l2[j]\n      if (el1 === el2) {\n        result.push(el1)\n        set.add(el1)\n        break\n      }\n    }\n  }\n  return [...set].sort().filter(x =>!result.includes(x))\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> comlon_sort_unique_sort_unique_sort_unique_sort_unique_sort([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5]\n  >>> comlon_sort_unique_sort_unique_sort_unique_sort_unique_sort([5, 3, 2, 8], [3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n  let i = 2;\n  let primeFactor = 1;\n  while (primeFactor < n) {\n    if (n % i === 0) {\n      primeFactor = i;\n    }\n    i++;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, modulo 10, is even.\n\n  >>> isEven(1234)\n  true\n  >>> isEven(12345)\n  false\n  >>> isEven(12346)\n  false\n  >>> isEven(12347)\n  false\n  >>> isEven(12348)\n  false\n  >>> isEven(12349)\n  false\n  >>> isEven(12350)\n  false\n  >>> isEven(12351)\n  false\n  >>> isEven(12352)\n  false\n  >>> isEven(12353)\n  false\n  >>> isEven(12354)\n  false\n  >>> isEven(12355)\n  false\n  >>> isEven(12356)\n  false\n  >>> isEven(12357)\n  false\n  >>> isEven(12358)\n  false\n  >>> isEven(12359)\n  false\n  >>> isEven(12360)\n  false\n  >>> isEven(12361)\n  false\n  >>> isEven(12362)\n  false\n  >>> isEven(12363)\n  false\n  >>> isEven(12364)\n  false\n  >>> isEven(12365)\n  false\n  >>> isEven(12366)\n  false\n  >>> isEven(12367)\n  false\n  >>> isEven(12368)\n  false\n  >>> isEven(12369)\n  false\n  >>> isEven(12370)\n  false\n  >>> isEven(12371)\n  false\n  >>> isEven(12372)\n  false\n  >>> isEven(12373)\n  false\n  >>> isEven(12374)\n  false\n  >>> isEven(12375)\n  false\n  >>> isEven(12376)\n  false\n  >>> isEven(12377)\n  false\n  >>> isEven(12378)\n  false\n  >>> isEven(12379)\n  false\n  >>> isEven(12380)\n  false\n  >>> isEven(12381)\n  false\n  >>> isEven(12382)\n  false\n  >>> isEven(12383)\n  false\n  >>> isEven(12384)\n  false\n  >>> isEven(12385)\n  false\n  >>> isEven(12386)\n  false\n  >>> isEven(12387)\n  false\n  >>> isEven(12388)\n  false\n  >>> isEven(12389)\n  false\n  >>> isEven(12390)\n  false\n  >>> isEven(12391)\n  false\n  >>> isEven(12392)\n  false\n  >>> isEven(12393)\n  false\n  >>> isEven(12394)\n  false\n  >>> isEven(12395)\n  false\n  >>> isEven(12396)\n  false\n  >>> isEven(12397)\n  false\n  >>> isEven(12398)\n  false\n  >>> isEven(12399)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)\n  false\n  >>> isEven(12401)\n  false\n  >>> isEven(12402)\n  false\n  >>> isEven(12403)\n  false\n  >>> isEven(12400)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = 0;\n  const paren_stack_size = 0;\n  const paren_stack_reset = false;\n  const paren_stack_reset_index = 0;\n  const paren_stack_reset_value = 0;\n  const paren_stack_reset_value_index = 0;\n  const paren_stack_reset_value_value = 0;\n  const paren_stack_reset_value_value_index = 0;\n  const paren_stack_reset_value_value_value = 0;\n  const paren_stack_reset_value_value_value_index = 0;\n  const paren_stack_reset_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_index = 0;\n  const paren_stack_reset_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_index = 0;\n  const paren_stack_reset_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_index = 0;\n  const paren_stack_reset_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_value_index = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_index = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_index = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value_index = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value_index = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  const paren_stack_reset_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "<|endoftext|>/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(5))\n  15\n  >>> sumHoN(sumHoN(10))\n  55\n  >>> sumHoN(sumHoN(1))\n  1\n  */\nconst sumHoN2 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(5)))\n  15\n  >>> sumHoN(sumHoN(sumHoN(10)))\n  55\n  >>> sumHoN(sumHoN(sumHoN(1)))\n  1\n  */\nconst sumHoN3 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(5))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(10))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(1))))\n  1\n  */\nconst sumHoN4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5)))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1)))))\n  1\n  */\nconst sumHoN5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5)))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1)))))\n  1\n  */\nconst sumHoN6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5)))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1)))))\n  1\n  */\nconst sumHoN7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5)))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1)))))\n  1\n  */\nconst sumHoN8 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5)))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1)))))\n  1\n  */\nconst sumHoN9 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5)))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1)))))\n  1\n  */\nconst sumHoN10 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5)))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1)))))\n  1\n  */\nconst sumHoN11 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5)))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1)))))\n  1\n  */\nconst sumHoN12 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5)))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1)))))\n  1\n  */\nconst sumHoN13 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5)))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))\n  55\n  >>> sumHoN(sumHoN(sumHoN", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(([^)]*)\\)/)\n  const closingBrackets = brackets.match(/\\)([^)]*)\\)/)\n  return openingBrackets && closingBrackets\n}\n\n/**\n * corgectBracketingWithParens is a helper function that returns true if the\n * brackets is a string of \"(\" and \")\" with any number of opening and\n * closing brackets.\n */\nconst corgectBracketingWithParens = brackets => {\n  const openingBrackets = brackets.match(/\\(([^)]*)\\)/)\n  const closingBrackets = brackets.match(/\\)([^)]*)\\)/)\n  return openingBrackets && closingBrackets\n}\n\n/**\n * corgectBracketingWithParensAndBrackets is a helper function that returns\n * true if brackets is a string of \"(\" and \")\" with any number of opening\n * and closing brackets and any number of opening or closing brackets.\n */\nconst corgectBracketingWithParensAndBrackets = brackets => {\n  const openingBrackets = brackets.match(/\\(([^)]*)\\)/)\n  const closingBrackets = brackets.match(/\\)([^)]*)\\)/)\n  const openingBracketsOrClosingBrackets = openingBrackets || closingBrackets\n  return openingBracketsOrClosingBrackets\n}\n\n/**\n * corgectBracketingWithParensAndBracketsAndParens is a helper\n * function that returns true if brackets is a string of \"(\" with\n * any number of opening brackets and any number of opening or closing\n * brackets and any number of opening or closing brackets.\n */\nconst corgectBracketingWithParensAndBracketsAndParens = brackets => {\n  const openingBrackets = brackets.match(/\\(([^)]*)\\)/)\n  const closingBrackets = brackets.match(/\\)([^)]*)\\)/)\n  const openingBracketsOrClosingBrackets = openingBrackets || closingBrackets\n  const openingBracketsOrClosingParens = openingBracketsOrClosingBrackets || openingBrackets\n  return openingBracketsOrClosingParens\n}\n\n/**\n * corgectBracketingWithParensAndBracketsAndParensAndParens is a helper\n * function that returns true if brackets is a string of \"(\" with\n * any number of opening brackets and any number of opening or closing\n * brackets and any number of opening or closing brackets.\n */\nconst corgectBracketingWithParensAndBracketsAndParensAndParens = brackets => {\n  const openingBrackets = brackets.match(/\\(([^)]*)\\)/)\n  const closingBrackets = brackets.match(/\\)([^)]*)\\)/)\n  const openingBracketsOrClosingBrackets = openingBrackets || closingBrackets\n  const openingBracketsOrClosingParens = openingBracketsOrClosingBrackets || openingBrackets\n  const openingBracketsOrClosingParensAndParens = openingBracketsOrClosingParens || openingBrackets\n  return openingBracketsOrClosingParensAndParens\n}\n\n/**\n * corgectBracketingWithParensAndBracketsAndParensAndParensAndParens is a helper\n * function that returns true if brackets is a string of \"(\" with\n * any number of opening brackets and any number of opening or closing\n * brackets and any number of opening or closing brackets.\n */\nconst corgectBracketingWithParensAndBracketsAndParensAndParensAndParens = brackets => {\n  const openingBrackets = brackets.match(/\\(([^)]*)\\)/)\n  const closingBrackets = brackets.match(/\\)([^)]*)\\)/)\n  const openingBracketsOrClosingBrackets = openingBrackets || closingBrackets\n  const openingBracketsOrClosingParens = openingBracketsOrClosingBrackets || openingBrackets\n  const openingBracketsOrClosingParensAndParens = openingBracketsOrClosingParens || openingBrackets\n  const openingBracketsOrClosingParensAndParensAndParens = openingBracketsOrClosingParensAndParens || openingBrackets\n  return openingBracketsOrClosingParensAndParensAndParens\n}\n\n/**\n * corgectBracketingWithParensAndBracketsAndParensAndParensAndParens is a helper\n * function that returns true if brackets is a string of \"(\" with\n * any number of opening brackets and any number of opening or closing\n * brackets and any number of opening or closing brackets.\n */\nconst corgectBracketingWithParensAndBracketsAndParensAndParensAndParensAndParens = brackets => {\n  const openingBrackets = brackets.match(/\\(([^)]*)\\)/)\n  const closingBrackets = brackets.match(/\\)([^)]*)\\)/)\n  const openingBracketsOrClosingBrackets = openingBrackets || closingBrackets\n  const openingBracketsOrClosingParens = openingBracketsOrClosingBrackets || openingBrackets\n  const openingBracketsOrClosingParensAndParens = openingBracketsOrClosingParens || openingBrackets\n  const openingBracketsOrClosingParensAndParensAndParens = openingBracketsOrClosingParensAndParens || openingBrackets\n  return openingBracketsOrClosingParensAndParensAndParensAndParens\n}\n\n/**\n * corgectBracketingWithParensAndBracketsAndParensAndParensAndParensAndParens is a helper\n * function that returns true if brackets is a string of \"(\" with\n * any number of opening brackets and any number of opening or closing\n * brackets and any number of opening or closing brackets.\n */\nconst corgectBracketingWithParensAndBracketsAndParensAndParensAndParensAndParensAndParens = brackets => {\n  const openingBrackets = brackets.match(/\\(([^)]*)\\)/)\n  const closingBrackets = brackets.match(/\\)([^)]*)\\)/)\n  const openingBracketsOrClosingBrackets = openingBrackets || closingBrackets\n  const openingBracketsOrClosingParens = openingBracketsOrClosingBrackets || openingBrackets\n  const openingBracketsOrClosingParensAndParens = openingBracketsOrClosingParens || openingBrackets\n  const openingBracketsOrClosingParensAndParensAndParens = openingBracketsOrClosingParensAndParens || openingBrackets\n  return openingBracketsOrClosingParensAndParensAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let n1 = 1\n  let n2 = 1\n  let n3 = 1\n  let n4 = 1\n  let n5 = 1\n  let n6 = 1\n  let n7 = 1\n  let n8 = 1\n  let n9 = 1\n  let n10 = 1\n  let n11 = 1\n  let n12 = 1\n  let n13 = 1\n  let n14 = 1\n  let n15 = 1\n  let n16 = 1\n  let n17 = 1\n  let n18 = 1\n  let n19 = 1\n  let n20 = 1\n  let n21 = 1\n  let n22 = 1\n  let n23 = 1\n  let n24 = 1\n  let n25 = 1\n  let n26 = 1\n  let n27 = 1\n  let n28 = 1\n  let n29 = 1\n  let n30 = 1\n  let n31 = 1\n  let n32 = 1\n  let n33 = 1\n  let n34 = 1\n  let n35 = 1\n  let n36 = 1\n  let n37 = 1\n  let n38 = 1\n  let n39 = 1\n  let n40 = 1\n  let n41 = 1\n  let n42 = 1\n  let n43 = 1\n  let n44 = 1\n  let n45 = 1\n  let n46 = 1\n  let n47 = 1\n  let n48 = 1\n  let n49 = 1\n  let n50 = 1\n  let n51 = 1\n  let n52 = 1\n  let n53 = 1\n  let n54 = 1\n  let n55 = 1\n  let n56 = 1\n  let n57 = 1\n  let n58 = 1\n  let n59 = 1\n  let n60 = 1\n  let n61 = 1\n  let n62 = 1\n  let n63 = 1\n  let n64 = 1\n  let n65 = 1\n  let n66 = 1\n  let n67 = 1\n  let n68 = 1\n  let n69 = 1\n  let n70 = 1\n  let n71 = 1\n  let n72 = 1\n  let n73 = 1\n  let n74 = 1\n  let n75 = 1\n  let n76 = 1\n  let n77 = 1\n  let n78 = 1\n  let n79 = 1\n  let n80 = 1\n  let n81 = 1\n  let n82 = 1\n  let n83 = 1\n  let n84 = 1\n  let n85 = 1\n  let n86 = 1\n  let n87 = 1\n  let n88 = 1\n  let n89 = 1\n  let n90 = 1\n  let n91 = 1\n  let n92 = 1\n  let n93 = 1\n  let n94 = 1\n  let n95 = 1\n  let n96 = 1\n  let n97 = 1\n  let n98 = 1\n  let n99 = 1\n  let n100 = 1\n  let n101 = 1\n  let n102 = 1\n  let n103 = 1\n  let n104 = 1\n  let n105 = 1\n  let n106 = 1\n  let n107 = 1\n  let n108 = 1\n  let n109 = 1\n  let n110 = 1\n  let n111 = 1\n  let n112 = 1\n  let n113 = 1\n  let n114 = 1\n  let n115 = 1\n  let n116 = 1\n  let n117 = 1\n  let n118 = 1\n  let n119 = 1\n  let n120 = 1\n  let n121 = 1\n  let n122 = 1\n  let n123 = 1\n  let n124 = 1\n  let n125 = 1\n  let n126 = 1\n  let n127 = 1\n  let n128 = 1\n  let n129 = 1\n  let n130 = 1\n  let n131 = 1\n  let n132 = 1\n  let n133 = 1\n  let n134 = 1\n  let n135 = 1\n  let n136 = 1\n  let n137 = 1\n  let n138 = 1\n  let n139 = 1\n  let n140 = 1\n  let n141 = 1\n  let n142 = 1\n  let n143 = 1\n  let n144 = 1\n  let n145 = 1\n  let n146 = 1\n  let n147 = 1\n  let n148 = 1\n  let n149 = 1\n  let n150 = 1\n  let n151 = 1\n  let n152 = 1\n  let n153 = 1\n  let n154 = 1\n  let n155 = 1\n  let n156 = 1\n  let n157 = 1\n  let n158 = 1\n  let n159 = 1\n  let n160 = 1\n  let n161 = 1\n  let n162 = 1\n  let n163 = 1\n  let n164 = 1\n  let n165 = 1\n  let n166 = 1\n  let n167 = 1\n  let n168 = 1\n  let n169 = 1\n  let n170 = 1\n  let n171 = 1\n  let n172 = 1\n  let n173 = 1\n  let n174 = 1\n  let n175 = 1\n  let n176 = 1\n  let n177 = 1\n  let n178 = 1\n  let n179 = 1\n  let n180 = 1\n  let n181 = 1\n  let n182 = 1\n  let n183 = 1\n  let n184 = 1\n  let n185 = 1\n  let n186 = 1\n  let n187 = 1\n  let n188 = 1\n  let n189 = 1\n  let n190 = 1\n  let n191 = 1\n  let n192 = 1\n  let n193 = 1\n  let n194 = 1\n  let n195 = 1\n  let n196 = 1\n  let n197 = 1\n  let n198 = 1\n  let n199 = 1\n  let n200 = 1\n  let n201 = 1\n  let n202 = 1\n  let n203 = 1\n  let n204 = 1\n  let n205 = 1\n  let n206 = 1\n  let n207 = 1\n  let n208 = 1\n  let n209 = 1\n  let n210 = 1\n  let n211 = 1\n  let n212 = 1\n  let n213 = 1\n  let n214 = 1\n  let n215 = 1\n  let n216 = 1\n  let n217 = 1\n  let n218 = 1\n  let n219 = 1\n  let n220 = 1\n  let n221 = 1\n  let n222 = 1\n  let n223 = 1\n  let n224 = 1\n  let n225 = 1\n  let n226 = 1\n  let n227 = 1\n  let n228 = 1\n  let n229 = 1\n  let n230 = 1\n  let n231 = 1\n  let n232 = 1\n  let n233 = 1\n  let n234 = 1\n  let n235 = 1\n  let n236 = 1\n  let n237 = 1\n  let n238 = 1\n  let n239 = 1\n  let n240 = 1\n  let n241 = 1\n  let n242 = 1\n  let n243 = 1\n  let n244 = 1\n  let n245 = 1\n  let n246 = 1\n  let n247 = 1\n  let n248 = 1\n  let n249 = 1\n  let n250 = 1\n  let n251 = 1\n  let n252 = 1\n  let n253 = 1\n  let n254 = 1\n  let n255 = 1\n  let n256 = 1\n  let n257 = 1\n  let n258 = 1\n  let n259 = 1\n  let n260 = 1\n  let n261 = 1\n  let n262 = 1\n  let n263 = 1\n  let n264 = 1\n  let n265 = 1\n  let n266 = 1\n  let n267 = 1\n  let n268 = 1\n  let n269 = 1\n  let n270 = 1\n  let n271 = 1\n  let n272 = 1\n  let n273 = 1\n  let n274", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  if (n <= 1) return 0;\n  return fibvib(n-1) + fibvib(n-2) + fibvib(n-3);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(0)\n  0\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  14\n  */\nconst fibvib1 = (n) => {\n  if (n <= 1) return 0;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(1)\n  1\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  13\n  */\nconst fibvib2 = (n) => {\n  if (n <= 1) return 1;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(1)\n  1\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  14\n  */\nconst fibvib3 = (n) => {\n  if (n <= 1) return 1;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(1)\n  1\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  13\n  */\nconst fibvib4 = (n) => {\n  if (n <= 1) return 1;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(1)\n  1\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  14\n  */\nconst fibvib5 = (n) => {\n  if (n <= 1) return 1;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(1)\n  1\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  13\n  */\nconst fibvib6 = (n) => {\n  if (n <= 1) return 1;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(1)\n  1\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  14\n  */\nconst fibvib7 = (n) => {\n  if (n <= 1) return 1;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(1)\n  1\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  13\n  */\nconst fibvib8 = (n) => {\n  if (n <= 1) return 1;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(1)\n  1\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  14\n  */\nconst fibvib9 = (n) => {\n  if (n <= 1) return 1;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(1)\n  1\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  13\n  */\nconst fibvib10 = (n) => {\n  if (n <= 1) return 1;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(1)\n  1\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  14\n  */\nconst fibvib11 = (n) => {\n  if (n <= 1) return 1;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(1)\n  1\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  13\n  */\nconst fibvib12 = (n) => {\n  if (n <= 1) return 1;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(1)\n  1\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  14\n  */\nconst fibvib13 = (n) => {\n  if (n <= 1) return 1;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fibvib(0) and whose second element is fibvib(1).\n  >>> fibvib(1)\n  1\n  >>> fibvib(5)\n  5\n  >>> fibvib(8)\n  13\n  */\nconst fibvib14 = (n) => {\n  if (n <= 1) return 1;\n  return fibvib(n-1) + fibvib(n-2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibon", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "<|endoftext|>/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let vowelCount = 0;\n  let vowels = [];\n  let vowelsCount = 0;\n  let vowelsCountInWord = 0;\n  let vowelsCountInWordInWord = 0;\n  let vowelsCountInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n  let digits = x.toString(10).split('');\n  digits[shift] = digits[shift].slice(-1 * shift);\n  return digits.reverse().join('');\n};\n\n/*\n  Convert a number to a string in base 10.  If the number is\n  negative, return '-'.\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(-123)\n  \"-123\"\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lowercase characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  let total = 0;\n  let fruits = 1;\n  let apples = 1;\n  let oranges = 1;\n  let mango = 1;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArray = [];\n  let appleArray = [];\n  let orangeArray = [];\n  let mangoArray = [];\n  let fruitCountArray = [];\n  let appleCountArray = [];\n  let orangeCountArray = [];\n  let mangoCountArray = [];\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArray = [];\n  let appleArray = [];\n  let orangeArray = [];\n  let mangoArray = [];\n  let fruitCountArray = [];\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArray = [];\n  let appleArray = [];\n  let orangeArray = [];\n  let mangoArray = [];\n  let fruitCountArray = [];\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArray = [];\n  let appleArray = [];\n  let orangeArray = [];\n  let mangoArray = [];\n  let fruitCountArray = [];\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArray = [];\n  let appleArray = [];\n  let orangeArray = [];\n  let mangoArray = [];\n  let fruitCountArray = [];\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let fruitArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCountArrayCount = 0;\n  let appleArrayCount = 0;\n  let orangeArrayCount = 0;\n  let mangoArrayCount = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n  let len = arr.length;\n  let even = 0;\n  let min = 0;\n  let result = [];\n  let i = -1;\n  while (++i < len) {\n    if (arr[i] % 2 === 0) {\n      even = arr[i];\n      min = i;\n    }\n  }\n  if (even === 0) {\n    return [];\n  }\n  let index = min;\n  while (++index < len) {\n    if (arr[index] % 2 === 0) {\n      result.push(arr[index]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function (nums) {\n  let min = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-maximum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMax = function (nums) {\n  let max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSum = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-average-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findAvg = function (nums) {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    count += 1;\n  }\n  return sum / count;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedian = function (nums) {\n  let len = nums.length;\n  let mid = Math.floor(len / 2);\n  let left = nums.slice(0, mid);\n  let right = nums.slice(mid, len);\n  return findMedian(left) + findMedian(right);\n};\n\n// https://leetcode.com/problems/find-the-mode-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMode = function (nums) {\n  let len = nums.length;\n  let result = 0;\n  let mode = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] === mode) {\n      result = nums[i];\n      i++;\n      continue;\n    }\n    if (nums[i] > mode) {\n      mode = nums[i];\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array-without-duplicates/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianWithoutDuplicates = function (nums) {\n  let len = nums.length;\n  let result = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] === nums[i + 1]) {\n      result = nums[i];\n      i++;\n      continue;\n    }\n    if (nums[i] > nums[i + 1]) {\n      nums[i + 1] = nums[i];\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array-with-duplicates/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianWithDuplicates = function (nums) {\n  let len = nums.length;\n  let result = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] === nums[i + 1]) {\n      result = nums[i];\n      i++;\n      continue;\n    }\n    if (nums[i] > nums[i + 1]) {\n      nums[i + 1] = nums[i];\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array-with-duplicates-in-reverse/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianReverse = function (nums) {\n  let len = nums.length;\n  let result = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] === nums[len - i - 1]) {\n      result = nums[i];\n      i++;\n      continue;\n    }\n    if (nums[i] > nums[len - i - 1]) {\n      nums[len - i - 1] = nums[i];\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array-with-duplicates-in-reverse-without-duplicates/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianReverseWithoutDuplicates = function (nums) {\n  let len = nums.length;\n  let result = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] === nums[len - i - 1]) {\n      result = nums[i];\n      i++;\n      continue;\n    }\n    if (nums[i] > nums[len - i - 1]) {\n      nums[len - i - 1] = nums[i];\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array-with-duplicates-in-reverse-without-duplicates-in-reverse/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianReverseWithoutDuplicatesReverse = function (nums) {\n  let len = nums.length;\n  let result = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] === nums[len - i - 1]) {\n      result = nums[i];\n      i++;\n      continue;\n    }\n    if (nums[i] > nums[len - i - 1]) {\n      nums[len - i - 1] = nums[i];\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-the-numbers-in-an-array-without-duplicates/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumWithoutDuplicates = function (nums) {\n  let len = nums.length;\n  let result = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] === nums[i + 1]) {\n      result = nums[i];\n      i++;\n      continue;\n    }\n    if (nums[i] > nums[i + 1]) {\n      nums[i + 1] = nums[i];\n    }\n    i++;\n  }\n  return result;\n};\n\n// ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 1\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 1\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 1\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 1\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 1\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 1\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 1\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 1\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 1\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 1\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstring([], 'b')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherBySubstringNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNot([], 'a')\n  []\n  >>> filherBySubstringNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherBySubstringNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNot([], 'b')\n  []\n  >>> filherBySubstringNot(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherBySubstringNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNot([], 'a')\n  []\n  >>> filherBySubstringNotNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherBySubstringNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNot([], 'b')\n  []\n  >>> filherBySubstringNotNot(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherBySubstringNotNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNot([], 'a')\n  []\n  >>> filherBySubstringNotNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherBySubstringNotNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNotNot([], 'b')\n  []\n  >>> filherBySubstringNotNotNot(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherBySubstringNotNotNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNotNot([], 'a')\n  []\n  >>> filherBySubstringNotNotNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherBySubstringNotNotNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNotNotNot([], 'b')\n  []\n  >>> filherBySubstringNotNotNotNot(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherBySubstringNotNotNotNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNotNotNotNot([], 'a')\n  []\n  >>> filherBySubstringNotNotNotNotNotNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherBySubstringNotNotNotNotNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNotNotNotNotNotNot([], 'b')\n  []\n  >>> filherBySubstringNotNotNotNotNotNotNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNotNotNotNotNotNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNotNotNotNotNotNotNotNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNotNotNotNotNotNotNotNotNotNotNotNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstringNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === string.length - substring.length);\n};\n\n/**\n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp287;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  const aArea = Math.sqrt(a * a + b * b);\n  const bArea = Math.sqrt(b * b + c * c);\n  const cArea = Math.sqrt(c * c + a * a);\n  return aArea + bArea + cArea;\n};\n\n/*\n  Given the lengths of the two sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the two sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea2 = (a, b, c) => {\n  const aArea = Math.sqrt(a * a + b * b);\n  const bArea = Math.sqrt(b * b + c * c);\n  const cArea = Math.sqrt(c * c + a * a);\n  return aArea + bArea + cArea;\n};\n\n/*\n  Given the lengths of the two sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the two sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea3 = (a, b, c) => {\n  const aArea = Math.sqrt(a * a + b * b);\n  const bArea = Math.sqrt(b * b + c * c);\n  const cArea = Math.sqrt(c * c + a * a);\n  return aArea + bArea + cArea;\n};\n\n/*\n  Given the lengths of the two sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the two sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea4 = (a, b, c) => {\n  const aArea = Math.sqrt(a * a + b * b);\n  const bArea = Math.sqrt(b * b + c * c);\n  const cArea = Math.sqrt(c * c + a * a);\n  return aArea + bArea + cArea;\n};\n\n/*\n  Given the lengths of the two sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the two sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea5 = (a, b, c) => {\n  const aArea = Math.sqrt(a * a + b * b);\n  const bArea = Math.sqrt(b * b + c * c);\n  const cArea = Math.sqrt(c * c + a * a);\n  return aArea + bArea + cArea;\n};\n\n/*\n  Given the lengths of the two sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the two sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea6 = (a, b, c) => {\n  const aArea = Math.sqrt(a * a + b * b);\n  const bArea = Math.sqrt(b * b + c * c);\n  const cArea = Math.sqrt(c * c + a * a);\n  return aArea + bArea + cArea;\n};\n\n/*\n  Given the lengths of the two sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the two sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea7 = (a, b, c) => {\n  const aArea = Math.sqrt(a * a + b * b);\n  const bArea = Math.sqrt(b * b + c * c);\n  const cArea = Math.sqrt(c * c + a * a);\n  return aArea + bArea + cArea;\n};\n\n/*\n  Given the lengths of the two sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the two sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea8 = (a, b, c) => {\n  const aArea = Math.sqrt(a * a + b * b);\n  const bArea = Math.sqrt(b * b + c * c);\n  const cArea = Math.sqrt(c * c + a * a);\n  return aArea + bArea + cArea;\n};\n\n/*\n  Given the lengths of the two sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the two sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea9 = (a, b, c) => {\n  const aArea = Math.sqrt(a * a + b * b);\n  const bArea = Math.sqrt(b * b + c * c);\n  const cArea = Math.sqrt(c * c + a * a);\n  return aArea + bArea + cArea;\n};\n\n/*\n  Given the lengths of the two sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the two sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea10 = (a, b, c) => {\n  const aArea = Math.sqrt(a * a + b * b);\n  const bArea = Math.sqrt(b * b + c * c);\n  const cArea = Math.sqrt(c * c + a * a);\n  return aArea + bArea + cArea;\n};\n\n/*\n  Given the lengths of the two sides of a triangle. Return the area of", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      max = Math.max(max, sum);\n    }\n  }\n  return max <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      max = Math.max(max, sum);\n    }\n  }\n  return max <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      max = Math.max(max, sum);\n    }\n  }\n  return max <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      max = Math.max(max, sum);\n    }\n  }\n  return max <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      max = Math.max(max, sum);\n    }\n  }\n  return max <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      max = Math.max(max, sum);\n    }\n  }\n  return max <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (arr[i] === arr[j]) {\n      change++;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array cyclical. A cyclical array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (arr[i] === arr[j]) {\n      change++;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (arr[i] === arr[j]) {\n      change++;\n      i++;\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array rotated. A rotated array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (arr[i] === arr[j]) {\n      change++;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (arr[i] === arr[j]) {\n      change++;\n      i++;\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (arr[i] === arr[j]) {\n      change++;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (arr[i] === arr[j]) {\n      change++;\n      i++;\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (arr[i] === arr[j]) {\n      change++;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i < len && j < len) {\n    if (arr[i] === arr[j]) {\n      change++;\n      i++;\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlGreater([], []) ➞ []\n  totwlGreater(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlGreater(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlGreater(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlGreater(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlGreater = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] > lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlEqual([], []) ➞ []\n  totwlEqual(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlEqual(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlEqual(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlEqual(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlEqual = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlNotEqual([], []) ➞ []\n  totwlNotEqual(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlNotEqual(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlNotEqual(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlNotEqual(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlNotEqual = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlLessThan([], []) ➞ []\n  totwlLessThan(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlLessThan(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlLessThan(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlLessThan(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlLessThan = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] < lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlGreaterThan([], []) ➞ []\n  totwlGreaterThan(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlGreaterThan(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlGreaterThan(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlGreaterThan(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlGreaterThan = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] > lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlNotLessThan([], []) ➞ []\n  totwlNotLessThan(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isM", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  if (a < 2) return false\n  if (a % 2 === 0) return false\n  if (a % 3 === 0) return false\n  if (a % 5 === 0) return false\n  if (a % 7 === 0) return false\n  if (a % 9 === 0) return false\n  if (a % 11 === 0) return false\n  if (a % 13 === 0) return false\n  if (a % 15 === 0) return false\n  if (a % 17 === 0) return false\n  if (a % 19 === 0) return false\n  if (a % 23 === 0) return false\n  if (a % 29 === 0) return false\n  if (a % 31 === 0) return false\n  if (a % 37 === 0) return false\n  if (a % 41 === 0) return false\n  if (a % 47 === 0) return false\n  if (a % 53 === 0) return false\n  if (a % 59 === 0) return false\n  if (a % 63 === 0) return false\n  if (a % 67 === 0) return false\n  if (a % 71 === 0) return false\n  if (a % 73 === 0) return false\n  if (a % 79 === 0) return false\n  if (a % 83) === 0) return false\n  if (a % 89 === 0) return false\n  if (a % 97 === 0) return false\n  if (a % 101 === 0) return false\n  if (a % 103) === 0) return false\n  if (a % 107 === 0) return false\n  if (a % 111) === 0) return false\n  if (a % 113) === 0) return false\n  if (a % 115) === 0) return false\n  if (a % 117) === 0) return false\n  if (a % 119) === 0) return false\n  if (a % 123) === 0) return false\n  if (a % 125) === 0) return false\n  if (a % 127) === 0) return false\n  if (a % 131) === 0) return false\n  if (a % 133) === 0) return false\n  if (a % 135) === 0) return false\n  if (a % 137) === 0) return false\n  if (a % 139) === 0) return false\n  if (a % 141) === 0) return false\n  if (a % 143) === 0) return false\n  if (a % 145) === 0) return false\n  if (a % 147) === 0) return false\n  if (a % 151) === 0) return false\n  if (a % 153) === 0) return false\n  if (a % 155) === 0) return false\n  if (a % 157) === 0) return false\n  if (a % 159) === 0) return false\n  if (a % 161) === 0) return false\n  if (a % 163) === 0) return false\n  if (a % 165) === 0) return false\n  if (a % 167) === 0) return false\n  if (a % 171) === 0) return false\n  if (a % 173) === 0) return false\n  if (a % 175) === 0) return false\n  if (a % 177) === 0) return false\n  if (a % 179) === 0) return false\n  if (a % 181) === 0) return false\n  if (a % 183) === 0) return false\n  if (a % 185) === 0) return false\n  if (a % 187) === 0) return false\n  if (a % 189) === 0) return false\n  if (a % 191) === 0) return false\n  if (a % 193) === 0) return false\n  if (a % 195) === 0) return false\n  if (a % 197) === 0) return false\n  if (a % 199) === 0) return false\n  if (a % 201) === 0) return false\n  if (a % 203) === 0) return false\n  if (a % 205) === 0) return false\n  if (a % 207) === 0) return false\n  if (a % 209) === 0) return false\n  if (a % 211) === 0) return false\n  if (a % 213) === 0) return false\n  if (a % 215) === 0) return false\n  if (a % 217) === 0) return false\n  if (a % 219) === 0) return false\n  if (a % 221) === 0) return false\n  if (a % 223) === 0) return false\n  if (a % 225) === 0) return false\n  if (a % 227) === 0) return false\n  if (a % 229) === 0) return false\n  if (a % 231) === 0) return false\n  if (a % 233) === 0) return false\n  if (a % 235) === 0) return false\n  if (a % 237) === 0) return false\n  if (a % 239) === 0) return false\n  if (a % 241) === 0) return false\n  if (a % 243) === 0) return false\n  if (a % 245) === 0) return false\n  if (a % 247) === 0) return false\n  if (a % 249) === 0) return false\n  if (a % 251) === 0) return false\n  if (a % 253) === 0) return false\n  if (a % 255) === 0) return false\n  if (a % 257) === 0) return false\n  if (a % 259) === 0) return false\n  if (a % 261) === 0) return false\n  if (a % 263) === 0) return false\n  if (a % 265) === 0) return false\n  if (a % 267) === 0) return false\n  if (a % 269) === 0) return false\n  if (a % 271) === 0) return false\n  if (a % 273) === 0) return false\n  if (a % 275) === 0) return false\n  if (a % 277) === 0) return false\n  if (a % 279) === 0) return false\n  if (a % 281) === 0) return false\n  if (a % 283) === 0) return false\n  if (a % 285) === 0) return false\n  if (a % 287) === 0) return false\n  if (a % 289) === 0) return false\n  if (a % 291) === 0) return false\n  if (a % 293) === 0) return false\n  if (a % 295) === 0) return false\n  if (a % 297) === 0) return false\n  if (a % 299) === 0) return false\n  if (a % 301) === 0) return false\n  if (a % 303) === 0) return false\n  if (a % 305) === 0) return false\n  if (a % 307) === 0) return false\n  if (a % 309) === 0) return false\n  if (a % 311) === 0) return false\n  if (a % 313) === 0) return false\n  if (a % 315) === 0) return false\n  if (a % 317) === 0) return false\n  if (a % 319) === 0) return false\n  if (a % 321) === 0) return false\n  if (a % 323) === 0) return false\n  if (a % 325) === 0) return false\n  if (a % 327) === 0) return false\n  if (a % 329) === 0) return false\n  if (a % 331) === 0) return false\n  if (a % 333) === 0) return false\n  if (a % 335) === 0) return false\n  if (a % 337) === 0) return false\n  if (a % 339) === 0) return false\n  if (a % 341) === 0) return false\n  if (a % 343) === 0) return false\n  if (a % 345) === 0) return false\n  if (a % 347) === 0) return false\n  if (a % 349) === 0) return false\n  if (a % 351) === 0) return false\n  if (a % 353) === 0) return false\n  if (a % 355) === 0) return false\n  if (a % 357) === 0) return false\n  if (a % 359) === 0) return false\n  if (a % 361) === 0) return false\n  if (a % 36", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n  let numStr = \"\";\n  let numStrArr = num.split(\"\");\n  let numStrArrLen = numStrArr.length;\n  let numStrArrLen2 = numStrArrLen * 2;\n  let numStrArrLen3 = numStrArrLen2 * 3;\n  let numStrArrLen4 = numStrArrLen3 * 4;\n  let numStrArrLen5 = numStrArrLen4 * 5;\n  let numStrArrLen6 = numStrArrLen5 * 6;\n  let numStrArrLen7 = numStrArrLen6 * 7;\n  let numStrArrLen8 = numStrArrLen7 * 8;\n  let numStrArrLen9 = numStrArrLen8 * 9;\n  let numStrArrLen10 = numStrArrLen9 * 10;\n  let numStrArrLen11 = numStrArrLen10 * 11;\n  let numStrArrLen12 = numStrArrLen11 * 12;\n  let numStrArrLen13 = numStrArrLen12 * 13;\n  let numStrArrLen14 = numStrArrLen13 * 14;\n  let numStrArrLen15 = numStrArrLen14 * 15;\n  let numStrArrLen16 = numStrArrLen15 * 16;\n  let numStrArrLen17 = numStrArrLen16 * 17;\n  let numStrArrLen18 = numStrArrLen17 * 18;\n  let numStrArrLen19 = numStrArrLen18 * 19;\n  let numStrArrLen20 = numStrArrLen19 * 20;\n  let numStrArrLen21 = numStrArrLen20 * 21;\n  let numStrArrLen22 = numStrArrLen21 * 22;\n  let numStrArrLen23 = numStrArrLen22 * 23;\n  let numStrArrLen24 = numStrArrLen23 * 24;\n  let numStrArrLen25 = numStrArrLen24 * 25;\n  let numStrArrLen26 = numStrArrLen25 * 26;\n  let numStrArrLen27 = numStrArrLen26 * 27;\n  let numStrArrLen28 = numStrArrLen27 * 28;\n  let numStrArrLen29 = numStrArrLen28 * 29;\n  let numStrArrLen30 = numStrArrLen29 * 30;\n  let numStrArrLen31 = numStrArrLen30 * 31;\n  let numStrArrLen32 = numStrArrLen31 * 32;\n  let numStrArrLen33 = numStrArrLen32 * 33;\n  let numStrArrLen34 = numStrArrLen33 * 34;\n  let numStrArrLen35 = numStrArrLen34 * 35;\n  let numStrArrLen36 = numStrArrLen35 * 36;\n  let numStrArrLen37 = numStrArrLen36 * 37;\n  let numStrArrLen38 = numStrArrLen37 * 38;\n  let numStrArrLen39 = numStrArrLen38 * 39;\n  let numStrArrLen40 = numStrArrLen39 * 40;\n  let numStrArrLen41 = numStrArrLen40 * 41;\n  let numStrArrLen42 = numStrArrLen41 * 42;\n  let numStrArrLen43 = numStrArrLen42 * 43;\n  let numStrArrLen44 = numStrArrLen43 * 44;\n  let numStrArrLen45 = numStrArrLen44 * 45;\n  let numStrArrLen46 = numStrArrLen45 * 46;\n  let numStrArrLen47 = numStrArrLen46 * 47;\n  let numStrArrLen48 = numStrArrLen47 * 48;\n  let numStrArrLen49 = numStrArrLen48 * 49;\n  let numStrArrLen50 = numStrArrLen49 * 50;\n  let numStrArrLen51 = numStrArrLen50 * 51;\n  let numStrArrLen52 = numStrArrLen51 * 52;\n  let numStrArrLen53 = numStrArrLen52 * 53;\n  let numStrArrLen54 = numStrArrLen53 * 54;\n  let numStrArrLen55 = numStrArrLen54 * 55;\n  let numStrArrLen56 = numStrArrLen55 * 56;\n  let numStrArrLen57 = numStrArrLen56 * 57;\n  let numStrArrLen58 = numStrArrLen57 * 58;\n  let numStrArrLen59 = numStrArrLen58 * 59;\n  let numStrArrLen60 = numStrArrLen59 * 60;\n  let numStrArrLen61 = numStrArrLen60 * 61;\n  let numStrArrLen62 = numStrArrLen61 * 62;\n  let numStrArrLen63 = numStrArrLen62 * 63;\n  let numStrArrLen64 = numStrArrLen63 * 64;\n  let numStrArrLen65 = numStrArrLen64 * 65;\n  let numStrArrLen66 = numStrArrLen65 * 66;\n  let numStrArrLen67 = numStrArrLen66 * 67;\n  let numStrArrLen68 = numStrArrLen67 * 68;\n  let numStrArrLen69 = numStrArrLen68 * 69;\n  let numStrArrLen70 = numStrArrLen69 * 70;\n  let numStrArrLen71 = numStrArrLen70 * 71;\n  let numStrArrLen72 = numStrArrLen71 * 72;\n  let numStrArrLen73 = numStrArrLen72 * 73;\n  let numStrArrLen74 = numStrArrLen73 * 74;\n  let numStrArrLen75 = numStrArrLen74 * 75;\n  let numStrArrLen76 = numStrArrLen75 * 76;\n  let numStrArrLen77 = numStrArrLen76 * 77;\n  let numStrArrLen78 = numStrArrLen77 * 78;\n  let numStrArrLen79 = numStrArrLen78 * 79;\n  let numStrArrLen80 = numStrArrLen79 * 80;\n  let numStrArrLen81 = numStrArrLen80 * 81;\n  let numStrArrLen82 = numStrArrLen81 * 82;\n  let num", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString().padStart(8, '0');\n  let decimalLength = decimalString.length;\n  let decimalArray = decimalString.split('');\n  for (let i = 0; i < decimalLength; i++) {\n    let decimalChar = decimalArray[i];\n    if (decimalChar === '1') {\n      binary += '1';\n    } else if (decimalChar === '0') {\n      binary += '0';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to an array. Return an array with each character representing a binary number.\n  Each character in the array will be '0' or '1'.\n\n  Examples:\n  binaryToDec(binaryToDec('11'))   # returns ['1', '1', '1']\n  binaryToDec(binaryToDec('11110'))   # returns ['1', '1', '1', '1', '1']\n  */\nconst binaryToDec = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString().padStart(8, '0');\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    let binaryChar = binaryArray[i];\n    if (binaryChar === '1') {\n      decimal += '1';\n    } else if (binaryChar === '0') {\n      decimal += '0';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to an array. Return an array with each character representing a binary number.\n  Each character in the array will be '0' or '1'.\n\n  Examples:\n  binaryToDec(binaryToDec('11110'))   # returns ['1', '1', '1', '1', '1']\n  binaryToDec(binaryToDec('11110110'))   # returns ['1', '1', '1', '1', '1', '1']\n  */\nconst binaryToDec = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString().padStart(8, '0');\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    let binaryChar = binaryArray[i];\n    if (binaryChar === '1') {\n      decimal += '1';\n    } else if (binaryChar === '0') {\n      decimal += '0';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to an array. Return an array with each character representing a binary number.\n  Each character in the array will be '0' or '1'.\n\n  Examples:\n  binaryToDec(binaryToDec('11110110'))   # returns ['1', '1', '1', '1', '1', '1']\n  binaryToDec(binaryToDec('11110110110'))   # returns ['1', '1', '1', '1', '1', '1', '1']\n  */\nconst binaryToDec = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString().padStart(8, '0');\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    let binaryChar = binaryArray[i];\n    if (binaryChar === '1') {\n      decimal += '1';\n    } else if (binaryChar === '0') {\n      decimal += '0';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to an array. Return an array with each character representing a binary number.\n  Each character in the array will be '0' or '1'.\n\n  Examples:\n  binaryToDec(binaryToDecpassed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a sorted array and a target number, return all possible pairs of numbers that sum to or are equal to the target number.\n  >>> pairSum([2,3,5,7,11], 7)\n  [(2,3), (2,5), (2,7), (3,5), (3,7), (5,7), (7,11)]\n  */\nconst pairSum = (array, target) => {\n  let pairs = [];\n  let pairSum = 0;\n  let pairSumTarget = 0;\n  for (let i = 0; i < array.length; i++) {\n    pairSumTarget += array[i];\n    if (pairSumTarget === target) {\n      pairs.push(array[i]);\n      pairSum += array[i];\n    }\n  }\n  return pairs;\n};\n\n/* Given a sorted array and a target number, return all possible pairs of numbers that sum to or are less than the target number.\n  >>> pairSum([2,3,5,7,11], 8)\n  [(2,3), (2,5), (2,7), (3,5), (3,7), (5,7), (7,11), (8,11)]\n  */\nconst pairSumLessThan = (array, target) => {\n  let pairs = [];\n  let pairSum = 0;\n  let pairSumTarget = 0;\n  for (let i = 0; i < array.length; i++) {\n    pairSumTarget += array[i];\n    if (pairSumTarget < target) {\n      pairs.push(array[i]);\n      pairSum += array[i];\n    }\n  }\n  return pairs;\n};\n\n/* Given a sorted array and a target number, return all possible pairs of numbers that sum to or are greater than the target number.\n  >>> pairSum([2,3,5,7,11], 9)\n  [(2,3), (2,5), (2,7), (3,5), (3,7), (5,7), (7,11), (8,11), (9,11)]\n  */\nconst pairSumGreaterThan = (array, target) => {\n  let pairs = [];\n  let pairSum = 0;\n  let pairSumTarget = 0;\n  for (let i = 0; i < array.length; i++) {\n    pairSumTarget += array[i];\n    if (pairSumTarget > target) {\n      pairs.push(array[i]);\n      pairSum += array[i];\n    }\n  }\n  return pairs;\n};\n\n/* Given a sorted array and a target number, return all possible pairs of numbers that sum to or are less than or equal to the target number.\n  >>> pairSumLessThan([2,3,5,7,11], 8)\n  [(2,3), (2,5), (2,7), (3,5), (3,7), (5,7), (7,11), (8,11)]\n  */\nconst pairSumLessThanOrEqual = (array, target) => {\n  let pairs = [];\n  let pairSum = 0;\n  let pairSumTarget = 0;\n  for (let i = 0; i < array.length; i++) {\n    pairSumTarget += array[i];\n    if (pairSumTarget <= target) {\n      pairs.push(array[i]);\n      pairSum += array[i];\n    }\n  }\n  return pairs;\n};\n\n/* Given a sorted array and a target number, return all possible pairs of numbers that sum to or are greater than or equal to the target number.\n  >>> pairSumGreaterThan([2,3,5,7,11], 8)\n  [(2,3), (2,5), (2,7), (3,5), (3,7), (5,7), (7,11), (8,11)]\n  */\nconst pairSumGreaterThanOrEqual = (array, target) => {\n  let pairs = [];\n  let pairSum = 0;\n  let pairSumTarget = 0;\n  for (let i = 0; i < array.length; i++) {\n    pairSumTarget += array[i];\n    if (pairSumTarget >= target) {\n      pairs.push(array[i]);\n      pairSum += array[i];\n    }\n  }\n  return pairs;\n};\n\n/* Given a sorted array and a target number, return all possible pairs of numbers that sum to or are equal to the target number.\n  >>> pairSumLessThanOrEqual([2,3,5,7,11], 8)\n  [(2,3), (2,5), (2,7), (3,5), (3,7), (5,7), (7,11), (8,11)]\n  */\nconst pairSumLessThanOrEqual = (array, target) => {\n  let pairs = [];\n  let pairSum = 0;\n  let pairSumTarget = 0;\n  for (let i = 0; i < array.length; i++) {\n    pairSumTarget += array[i];\n    if (pairSumTarget <= target) {\n      pairs.push(array[i]);\n      pairSum += array[i];\n    }\n  }\n  return pairs;\n};\n\n/* Given a sorted array and a target number, return all possible pairs of numbers that sum to or are less than or equal to the target number.\n  >>> pairSumGreaterThanOrEqual([2,3,5,7,11], 8)\n  [(2,3), (2,5), (2,7), (3,5), (3,7), (5,7), (7,11), (8,11)]\n  */\nconst pairSumGreaterThanOrEqual = (array, target) => {\n  let pairs = [];\n  let pairSum = 0;\n  let pairSumTarget = 0;\n  for (let i = 0; i < array.length; i++) {\n    pairSumTarget += array[i];\n    if (pairSumTarget >= target) {\n      pairs.push(array[i]);\n      pairSum += array[i];\n    }\n  }\n  return pairs;\n};\n\n/* Given a sorted array and a target number, return all possible pairs of numbers that sum to or are equal to the target number.\n  >>> pairSumLessThanOrEqual([2,3,5,7,11], 9)\n  [(2,3), (2,5), (2,7), (3,5), (3,7), (5,7), (7,11), (8,11), (9,11)]\n  */\nconst pairSumLessThanOrEqual = (array, target) => {\n  let pairs = [];\n  let pairSum = 0;\n  let pairSumTarget = 0;\n  for (let i = 0; i < array.length; i++) {\n    pairSumTarget += array[i];\n    if (pairSumTarget <= target) {\n      pairs.push(array[i]);\n      pairSum += array[i];\n    }\n  }\n  return pairs;\n};\n\n/* Given a sorted array and a target number, return all possible pairs of numbers that sum to or are less than or equal to the target number.\n  >>> pairSumGreaterThanOrEqual([2,3,5,7,11], 9)\n  [(2,3), (2,5), (2,7), (3,5), (3,7), (5,7), (7,11), (8,11), (9,11)]\n  */\nconst pairSumGreaterThanOrEqual = (array, target) => {\n  let pairs = [];\n  let pairSum = 0;\n  let pairSumTarget = 0;\n  for (let i = 0; i < array.length; i++) {\n    pairSumTarget += array[i];\n    if (pairSumTarget >= target) {\n      pairs.push(array[i]);\n      pairSum += array[i];\n    }\n  }\n  return pairs;\n};\n\n/* Given a sorted array and a target number, return all possible pairs of numbers that sum to or are equal to the target number.\n  >>> pairSumLessThanOrEqual([2,3,5,7,11], 8)\n  [(2,3), (2,5), (2,7), (3,5), (3,7), (5,7), (7,11), (8,11)]\n  */\nconst pairSumLessThanOrEqual = (array, target) => {\n  let pairs = [];\n  let pairSum = 0;\n  let pairSumTarget = 0;\n  for (let i = 0; i < array.length; i++) {\n    pairSumTarget += array[i];\n    if (pairSumTarget <= target) {\n      pairs.push(array[i]);\n      pairSum += array[i];\n    }\n  }\n  return pairs;\n};\n\n/* Given a sorted array and a target number, return all possible pairs of numbers that sum", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n  let isHwppy = true;\n  let isHwppyLength = 0;\n  let isHwppyLettersDistinct = false;\n  let isHwppyLettersCount = 0;\n  let isHwppyLettersCount2 = 0;\n  let isHwppyLettersCount3 = 0;\n  let isHwppyLettersCount4 = 0;\n  let isHwppyLettersCount5 = 0;\n  let isHwppyLettersCount6 = 0;\n  let isHwppyLettersCount7 = 0;\n  let isHwppyLettersCount8 = 0;\n  let isHwppyLettersCount9 = 0;\n  let isHwppyLettersCount10 = 0;\n  let isHwppyLettersCount11 = 0;\n  let isHwppyLettersCount12 = 0;\n  let isHwppyLettersCount13 = 0;\n  let isHwppyLettersCount14 = 0;\n  let isHwppyLettersCount15 = 0;\n  let isHwppyLettersCount16 = 0;\n  let isHwppyLettersCount17 = 0;\n  let isHwppyLettersCount18 = 0;\n  let isHwppyLettersCount19 = 0;\n  let isHwppyLettersCount20 = 0;\n  let isHwppyLettersCount21 = 0;\n  let isHwppyLettersCount22 = 0;\n  let isHwppyLettersCount23 = 0;\n  let isHwppyLettersCount24 = 0;\n  let isHwppyLettersCount25 = 0;\n  let isHwppyLettersCount26 = 0;\n  let isHwppyLettersCount27 = 0;\n  let isHwppyLettersCount28 = 0;\n  let isHwppyLettersCount29 = 0;\n  let isHwppyLettersCount30 = 0;\n  let isHwppyLettersCount31 = 0;\n  let isHwppyLettersCount32 = 0;\n  let isHwppyLettersCount33 = 0;\n  let isHwppyLettersCount34 = 0;\n  let isHwppyLettersCount35 = 0;\n  let isHwppyLettersCount36 = 0;\n  let isHwppyLettersCount37 = 0;\n  let isHwppyLettersCount38 = 0;\n  let isHwppyLettersCount39 = 0;\n  let isHwppyLettersCount40 = 0;\n  let isHwppyLettersCount41 = 0;\n  let isHwppyLettersCount42 = 0;\n  let isHwppyLettersCount43 = 0;\n  let isHwppyLettersCount44 = 0;\n  let isHwppyLettersCount45 = 0;\n  let isHwppyLettersCount46 = 0;\n  let isHwppyLettersCount47 = 0;\n  let isHwppyLettersCount48 = 0;\n  let isHwppyLettersCount49 = 0;\n  let isHwppyLettersCount50 = 0;\n  let isHwppyLettersCount51 = 0;\n  let isHwppyLettersCount52 = 0;\n  let isHwppyLettersCount53 = 0;\n  let isHwppyLettersCount54 = 0;\n  let isHwppyLettersCount55 = 0;\n  let isHwppyLettersCount56 = 0;\n  let isHwppyLettersCount57 = 0;\n  let isHwppyLettersCount58 = 0;\n  let isHwppyLettersCount59 = 0;\n  let isHwppyLettersCount60 = 0;\n  let isHwppyLettersCount61 = 0;\n  let isHwppyLettersCount62 = 0;\n  let isHwppyLettersCount63 = 0;\n  let isHwppyLettersCount64 = 0;\n  let isHwppyLettersCount65 = 0;\n  let isHwppyLettersCount66 = 0;\n  let isHwppyLettersCount67 = 0;\n  let isHwppyLettersCount68 = 0;\n  let isHwppyLettersCount69 = 0;\n  let isHwppyLettersCount70 = 0;\n  let isHwppyLettersCount71 = 0;\n  let isHwppyLettersCount72 = 0;\n  let isHwppyLettersCount73 = 0;\n  let isHwppyLettersCount74 = 0;\n  let isHwppyLettersCount75 = 0;\n  let isHwppyLettersCount76 = 0;\n  let isHwppyLettersCount77 = 0;\n  let isHwppyLettersCount78 = 0;\n  let isHwppyLettersCount79 = 0;\n  let isHwppyLettersCount80 = 0;\n  let isHwppyLettersCount81 = 0;\n  let isHwppyLettersCount82 = 0;\n  let isHwppyLettersCount83 = 0;\n  let isHwppyLettersCount84 = 0;\n  let isHwppyLettersCount85 = 0;\n  let isHwppyLettersCount86 = 0;\n  let isHwppyLettersCount87 = 0;\n  let isHwppyLettersCount88 = 0;\n  let isHwppyLettersCount89 = 0;\n  let isHwppyLettersCount90 = 0;\n  let isHwppyLettersCount91 = 0;\n  let isHwppyLettersCount92 = 0;\n  let isHwppyLettersCount93 = 0;\n  let isHwppyLettersCount94 = 0;\n  let isHwppyLettersCount95 = 0;\n  let isHwppyLettersCount96 = 0;\n  let isHwppyLettersCount97 = 0;\n  let isHwppyLettersCount98 = 0;\n  let isHwppyLettersCount99 = 0;\n  let isHwppyLettersCount100 = 0;\n  let isHwppyLettersCount101 = 0;\n  let isHwppyLettersCount102 = 0;\n  let isHwppyLettersCount103 = 0;\n  let isHwppyLettersCount104 = 0;\n  let isHwppyLettersCount105 = 0;\n  let isHwppyLettersCount106 = 0;\n  let isHwppyLettersCount107 = 0;\n  let isHwppyLettersCount108 = 0;\n  let isHwppyLettersCount109 = 0;\n  let isHwppyLettersCount110 = 0;\n  let isHwppyLettersCount111 = 0;\n  let isHwppyLettersCount112 = 0;\n  let isHwppyLettersCount113 = 0;\n  let isHwppyLettersCount114 = 0;\n  let isHwppyLettersCount115 = 0;\n  let isHwppyLettersCount116 = 0;\n  let isHwppyLettersCount117 = 0;\n  let isHwppyLettersCount118 = 0;\n  let isHwppyLettersCount119 = 0;\n  let isHwppyLettersCount120 = 0;\n  let isHwppyLettersCount121 = 0;\n  let isHwppyLettersCount122 = 0;\n  let isHwppyLettersCount123 = 0;\n  let isHwppyLettersCount124 = 0;\n  let isHwppyLettersCount125 = 0;\n  let isHwppyLettersCount126 = 0;\n  let isHwppyLettersCount127 = 0;\n  let isHwppyLettersCount128 = 0;\n  let is", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gradesLength = grades.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let grade;\n  let letterGrade;\n  let gradesLength2;\n  let gradesLength3;\n  let gradesLength4;\n  let gradesLength5;\n  let gradesLength6;\n  let gradesLength7;\n  let gradesLength8;\n  let gradesLength9;\n  let gradesLength10;\n  let gradesLength11;\n  let gradesLength12;\n  let gradesLength13;\n  let gradesLength14;\n  let gradesLength15;\n  let gradesLength16;\n  let gradesLength17;\n  let gradesLength18;\n  let gradesLength19;\n  let gradesLength20;\n  let gradesLength21;\n  let gradesLength22;\n  let gradesLength23;\n  let gradesLength24;\n  let gradesLength25;\n  let gradesLength26;\n  let gradesLength27;\n  let gradesLength28;\n  let gradesLength29;\n  let gradesLength30;\n  let gradesLength31;\n  let gradesLength32;\n  let gradesLength33;\n  let gradesLength34;\n  let gradesLength35;\n  let gradesLength36;\n  let gradesLength37;\n  let gradesLength38;\n  let gradesLength39;\n  let gradesLength40;\n  let gradesLength41;\n  let gradesLength42;\n  let gradesLength43;\n  let gradesLength44;\n  let gradesLength45;\n  let gradesLength46;\n  let gradesLength47;\n  let gradesLength48;\n  let gradesLength49;\n  let gradesLength50;\n  let gradesLength51;\n  let gradesLength52;\n  let gradesLength53;\n  let gradesLength54;\n  let gradesLength55;\n  let gradesLength56;\n  let gradesLength57;\n  let gradesLength58;\n  let gradesLength59;\n  let gradesLength60;\n  let gradesLength61;\n  let gradesLength62;\n  let gradesLength63;\n  let gradesLength64;\n  let gradesLength65;\n  let gradesLength66;\n  let gradesLength67;\n  let gradesLength68;\n  let gradesLength69;\n  let gradesLength70;\n  let gradesLength71;\n  let gradesLength72;\n  let gradesLength73;\n  let gradesLength74;\n  let gradesLength75;\n  let gradesLength76;\n  let gradesLength77;\n  let gradesLength78;\n  let gradesLength79;\n  let gradesLength80;\n  let gradesLength81;\n  let gradesLength82;\n  let gradesLength83;\n  let gradesLength84;\n  let gradesLength85;\n  let gradesLength86;\n  let gradesLength87;\n  let gradesLength88;\n  let gradesLength89;\n  let gradesLength90;\n  let gradesLength91;\n  let gradesLength92;\n  let gradesLength93;\n  let gradesLength94;\n  let gradesLength95;\n  let gradesLength96;\n  let gradesLength97;\n  let gradesLength98;\n  let gradesLength99;\n  let gradesLength100;\n  let gradesLength101;\n  let gradesLength102;\n  let gradesLength103;\n  let gradesLength104;\n  let gradesLength105;\n  let gradesLength106;\n  let gradesLength107;\n  let gradesLength108;\n  let gradesLength109;\n  let gradesLength110;\n  let gradesLength111;\n  let gradesLength112;\n  let gradesLength113;\n  let gradesLength114;\n  let gradesLength115;\n  let gradesLength116;\n  let gradesLength117;\n  let gradesLength118;\n  let gradesLength119;\n  let gradesLength120;\n  let gradesLength121;\n  let gradesLength122;\n  let gradesLength123;\n  let gradesLength124;\n  let gradesLength125;\n  let gradesLength126;\n  let gradesLength127;\n  let gradesLength128;\n  let gradesLength129;\n  let gradesLength130;\n  let gradesLength131;\n  let gradesLength132;\n  let gradesLength133;\n  let gradesLength134;\n  let gradesLength135;\n  let gradesLength136;\n  let gradesLength137;\n  let gradesLength138;\n  let gradesLength139;\n  let gradesLength140;\n  let gradesLength141;\n  let gradesLength142;\n  let gradesLength143;\n  let gradesLength144;\n  let gradesLength145;\n  let gradesLength146;\n  let gradesLength147;\n  let gradesLength148;\n  let gradesLength149;\n  let gradesLength150;\n  let gradesLength151;\n  let gradesLength152;\n  let gradesLength153;\n  let gradesLength154;\n  let gradesLength155;\n  let gradesLength156;\n  let gradesLength157;\n  let gradesLength158;\n  let gradesLength159;\n  let gradesLength160;\n  let gradesLength161;\n  let gradesLength162;\n  let gradesLength163;\n  let gradesLength164;\n  let gradesLength165;\n  let gradesLength166;\n  let gradesLength167;\n  let gradesLength168;\n  let gradesLength169;\n  let gradesLength170;\n  let gradesLength171;\n  let gradesLength172;\n  let gradesLength173;\n  let gradesLength174;\n  let gradesLength175;\n  let gradesLength176;\n  let gradesLength177;\n  let gradesLength178;\n  let gradesLength179;\n  let gradesLength180;\n  let gradesLength181;\n  let gradesLength182;\n  let gradesLength183;\n  let gradesLength184;\n  let gradesLength185;\n  let gradesLength186;\n  let gradesLength18", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == false\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 3 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == false\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 5 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == false\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 7 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisibleBy9('Hello') == true\n  divisibleBy9('abcdcba') == true\n  divisibleBy9('kittens') == false\n  divisibleBy9('orange') == false\n  */\nconst divisibleBy9 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 9 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == false\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 11 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == false\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 13 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('abcdcba') == true\n  divisibleBy15('kittens') == false\n  divisibleBy15('orange') == false\n  */\nconst divisibleBy15 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 15 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == false\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 17 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('abcdcba') == true\n  divisibleBy19('kittens') == false\n  divisibleBy19('orange') == false\n  */\nconst divisibleBy19 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 19 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 21 or false otherwise\n  Examples\n  divisibleBy21('Hello') == true\n  divisibleBy21('abcdcba') == true\n  divisibleBy21('kittens') == false\n  divisibleBy21('orange') == false\n  */\nconst divisibleBy21 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 21 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 23 or false otherwise\n  Examples\n  divisibleBy23('Hello') == true\n  divisibleBy23('abcdcba') == true\n  divisibleBy23('kittens') == false\n  divisibleBy23('orange') == false\n  */\nconst divisibleBy23 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 23 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 25 or false otherwise\n  Examples\n  divisibleBy25('Hello') == true\n  divisibleBy25('abcdcba') == true\n  divisibleBy25('kittens') == false\n  divisibleBy25('orange') == false\n  */\nconst divisibleBy25 = (string) => {\n  let isDivisible = true;\n  let length = string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 2.\n  */\nconst stagtsTwoEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 1) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 3.\n  */\nconst stagtsThreeEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 2) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 4.\n  */\nconst stagtsFourEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 3) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 5.\n  */\nconst stagtsFiveEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 4) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 6.\n  */\nconst stagtsSixEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 5) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 7.\n  */\nconst stagtsSevenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 6) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 8.\n  */\nconst stagtsEightEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 7) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 9.\n  */\nconst stagtsNineEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 8) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 10.\n  */\nconst stagtsTenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 9) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 11.\n  */\nconst stagtsElevenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 10) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 12.\n  */\nconst stagtsTwelveEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 11) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 13.\n  */\nconst stagtsThirteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 12) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 14.\n  */\nconst stagtsFourteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 13) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 15.\n  */\nconst stagtsFifteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 14) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 16.\n  */\nconst stagtsSixteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 15) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 17.\n  */\nconst stagtsSeventeenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 16) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 18.\n  */\nconst stagtsEighteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 17) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 19.\n  */\nconst stagtsNineteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 18) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 20.\n  */\nconst stagtsTwentyEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 19) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 21.\n  */\nconst stagtsTwentyThirtyEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 20) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    decimal = decimal + decimal(i);\n    sum = sum + parseInt(decimal, 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    hexadecimal = hexadecimal + hexadecimal(i);\n    sum = sum + parseInt(hexadecimal, 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  for (let i = 0; i <= N; i++) {\n    octal = octal + octal(i);\n    sum = sum + parseInt(octal, 8);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal and decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal and decimal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let decimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    hexadecimal = hexadecimal + hexadecimal(i);\n    decimal = decimal + decimal(i);\n    sum = sum + parseInt(hexadecimal, 16) + parseInt(decimal, 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal and decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal and decimal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  let decimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    octal = octal + octal(i);\n    decimal = decimal + decimal(i);\n    sum = sum + parseInt(octal, 8) + parseInt(decimal, 8);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal and decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal and decimal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let decimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    hexadecimal = hexadecimal + hexadecimal(i);\n    decimal = decimal + decimal(i);\n    sum = sum + parseInt(hexadecimal, 16) + parseInt(decimal, 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal and decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal and decimal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let decimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    hexadecimal = hexadecimal + hexadecimal(i);\n    decimal = decimal + decimal(i);\n    sum = sum + parseInt(hexadecimal, 16) + parseInt(decimal, 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal and decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal and decimal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let decimal = \"\";\n  for (let i = 0; i <= N; i++) {\n    hexadecimal = hexadecimal + hexadecimal(i);\n    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst remove = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return lst.filter((item, index) => index % 2!== even);\n};\n\n/*Given a non-empty list of integers lst. return the sum of the even elements that are at odd indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\nconst sum = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. return the difference of the even elements that are at odd indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 2\n  */\nconst diff = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even - odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod([4, 2, 6, 7]) ==> 24\n  */\nconst prod = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod([4, 2, 6, 7], 2) ==> 24\n  */\nconst prod2 = (lst, n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod2([], 2) ==> 0\n  */\nconst prod3 = (lst, n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod3([], 2) ==> 0\n  */\nconst prod4 = (lst, n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod4([4, 2, 6, 7], 2) ==> 24\n  */\nconst prod5 = (lst, n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod5([4, 2, 6, 7], 2) ==> 24\n  */\nconst prod6 = (lst, n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod6([4, 2, 6, 7], 2) ==> 24\n  */\nconst prod7 = (lst, n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod7([4, 2, 6, 7], 2) ==> 24\n  */\nconst prod8 = (lst, n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod8([4, 2, 6, 7], 2) ==> 24\n  */\nconst prod9 = (lst, n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod9([4, 2, 6, 7], 2) ==> 24\n  */\nconst prod10 = (lst, n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod10([4, 2, 6, 7], 2) ==> 24\n  */\nconst prod11 = (lst, n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod11([4, 2, 6, 7], 2) ==> 24\n  */\nconst prod12 = (lst, n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod12([4, 2, 6, 7], 2) ==> 24\n  */\nconst prod13 = (lst, n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      prod13([4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  let newString = '';\n  let newStringArray = [];\n  let newStringArray2 = [];\n  let newStringArray3 = [];\n  let newStringArray4 = [];\n  let newStringArray5 = [];\n  let newStringArray6 = [];\n  let newStringArray7 = [];\n  let newStringArray8 = [];\n  let newStringArray9 = [];\n  let newStringArray10 = [];\n  let newStringArray11 = [];\n  let newStringArray12 = [];\n  let newStringArray13 = [];\n  let newStringArray14 = [];\n  let newStringArray15 = [];\n  let newStringArray16 = [];\n  let newStringArray17 = [];\n  let newStringArray18 = [];\n  let newStringArray19 = [];\n  let newStringArray20 = [];\n  let newStringArray21 = [];\n  let newStringArray22 = [];\n  let newStringArray23 = [];\n  let newStringArray24 = [];\n  let newStringArray25 = [];\n  let newStringArray26 = [];\n  let newStringArray27 = [];\n  let newStringArray28 = [];\n  let newStringArray29 = [];\n  let newStringArray30 = [];\n  let newStringArray31 = [];\n  let newStringArray32 = [];\n  let newStringArray33 = [];\n  let newStringArray34 = [];\n  let newStringArray35 = [];\n  let newStringArray36 = [];\n  let newStringArray37 = [];\n  let newStringArray38 = [];\n  let newStringArray39 = [];\n  let newStringArray40 = [];\n  let newStringArray41 = [];\n  let newStringArray42 = [];\n  let newStringArray43 = [];\n  let newStringArray44 = [];\n  let newStringArray45 = [];\n  let newStringArray46 = [];\n  let newStringArray47 = [];\n  let newStringArray48 = [];\n  let newStringArray49 = [];\n  let newStringArray50 = [];\n  let newStringArray51 = [];\n  let newStringArray52 = [];\n  let newStringArray53 = [];\n  let newStringArray54 = [];\n  let newStringArray55 = [];\n  let newStringArray56 = [];\n  let newStringArray57 = [];\n  let newStringArray58 = [];\n  let newStringArray59 = [];\n  let newStringArray60 = [];\n  let newStringArray61 = [];\n  let newStringArray62 = [];\n  let newStringArray63 = [];\n  let newStringArray64 = [];\n  let newStringArray65 = [];\n  let newStringArray66 = [];\n  let newStringArray67 = [];\n  let newStringArray68 = [];\n  let newStringArray69 = [];\n  let newStringArray70 = [];\n  let newStringArray71 = [];\n  let newStringArray72 = [];\n  let newStringArray73 = [];\n  let newStringArray74 = [];\n  let newStringArray75 = [];\n  let newStringArray76 = [];\n  let newStringArray77 = [];\n  let newStringArray78 = [];\n  let newStringArray79 = [];\n  let newStringArray80 = [];\n  let newStringArray81 = [];\n  let newStringArray82 = [];\n  let newStringArray83 = [];\n  let newStringArray84 = [];\n  let newStringArray85 = [];\n  let newStringArray86 = [];\n  let newStringArray87 = [];\n  let newStringArray88 = [];\n  let newStringArray89 = [];\n  let newStringArray90 = [];\n  let newStringArray91 = [];\n  let newStringArray92 = [];\n  let newStringArray93 = [];\n  let newStringArray94 = [];\n  let newStringArray95 = [];\n  let newStringArray96 = [];\n  let newStringArray97 = [];\n  let newStringArray98 = [];\n  let newStringArray99 = [];\n  let newStringArray100 = [];\n  let newStringArray101 = [];\n  let newStringArray102 = [];\n  let newStringArray103 = [];\n  let newStringArray104 = [];\n  let newStringArray105 = [];\n  let newStringArray106 = [];\n  let newStringArray107 = [];\n  let newStringArray108 = [];\n  let newStringArray109 = [];\n  let newStringArray110 = [];\n  let newStringArray111 = [];\n  let newStringArray112 = [];\n  let newStringArray113 = [];\n  let newStringArray114 = [];\n  let newStringArray115 = [];\n  let newStringArray116 = [];\n  let newStringArray117 = [];\n  let newStringArray118 = [];\n  let newStringArray119 = [];\n  let newStringArray120 = [];\n  let newStringArray121 = [];\n  let newStringArray122 = [];\n  let newStringArray123 = [];\n  let newStringArray124 = [];\n  let newStringArray125 = [];\n  let newStringArray126 = [];\n  let newStringArray127 = [];\n  let newStringArray128 = [];\n  let newStringArray129 = [];\n  let newStringArray130 = [];\n  let newStringArray131 = [];\n  let newStringArray132 = [];\n  let newStringArray133 = [];\n  let newStringArray134 = [];\n  let newStringArray135 = [];\n  let newStringArray136 = [];\n  let newStringArray137 = [];\n  let newStringArray138 = [];\n  let newStringArray139 = [];\n  let newStringArray140 = [];\n  let newStringArray141 = [];\n  let newStringArray142 = [];\n  let newStringArray143 = [];\n  let newStringArray144 = [];\n  let newStringArray145 = [];\n  let newStringArray146 = [];\n  let newStringArray147 = [];\n  let newStringArray148 = [];\n  let newStringArray149 = [];\n  let newStringArray150 = [];\n  let newStringArray151 = [];\n  let newStringArray152 = [];\n  let newStringArray153 = [];\n  let newStringArray154 = [];\n  let newStringArray155 = [];\n  let newStringArray156 = [];\n  let newStringArray157 = [];\n  let newStringArray158 = [];\n  let newStringArray159 = [];\n  let newStringArray160 = [];\n  let newStringArray161 = [];\n  let newStringArray162 = [];\n  let newStringArray163 = [];\n  let newStringArray164 = [];\n  let newStringArray165 = [];\n  let newStringArray166 = [];\n  let newStringArray167 = [];\n  let newStringArray168 = [];\n  let newStringArray169 = [];\n  let newStringArray170 = [];\n  let newStringArray171 = [];\n  let newStringArray172 = [];\n  let newStringArray173 = [];\n  let newStringArray174 = [];\n  let newStringArray175 = [];\n  let newStringArray176 = [];\n  let newStringArray177 = [];\n  let newStringArray178 = [];\n  let newStringArray179 = [];\n  let newStringArray180 = [];\n  let newStringArray181 = [];\n  let newStringArray182 = [];\n  let newStringArray183 = [];\n  let newStringArray184 = [];\n  let newStringArray185 = [];\n  let newStringArray186 = [];\n  let newStringArray187 = [];\n  let newStringArray188 = [];\n  let newStringArray189 = [];\n  let newStringArray190 = [];\n  let newStringArray191 = [];\n  let newStringArray192 = [];\n  let newStringArray193 = [];\n  let newStringArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const res = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let row = []\n  let col = []\n  let rowIndex = 0\n  let colIndex = 0\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex = 0\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n      row = []\n      col = []\n      res.push([rowIndex, colIndex])\n      i++\n      continue\n    }\n    if (lst[i] === x) {\n      rowIndex++\n      colIndex++\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let result = [];\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < array.length) {\n    sum = array[i];\n    if (sum % 2 === 0) {\n      result.push(array[j]);\n      j++;\n    } else {\n      result.push(array[j]);\n      i++;\n    }\n  }\n\n  return result;\n};\n\n/**\n * Given an array of non-negative integers, return the first index at which a given sum can be found.\n * If no such sum can be found, the return value will be -1.\n * If more than one such sum can be found, the return value will be the index of the first one found.\n * If no such sum can be found and more than one such sum can be found, the return value will be -1.\n * If more than one such sum can be found and no such sum can be found, the return value will be 0.\n * If more than one such sum can be found and no such sum can be found and more than one such sum can be found, the return value will be 1.\n * If more than one such sum can be found and no such sum can be found and more than one such sum can be found and more than one such sum can be found, the return value will be 2.\n * If more than one such sum can be found and no such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found, the return value will be 3.\n * If more than one such sum can be found and no such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found and more than one such sum can be found ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "<|endoftext|>/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < s.length; i += 1) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) + 2];\n  }\n  return rotated;\n};\n\n/*\n  Given a string, return a string with the letters rotated \n  to the left by two places.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < s.length; i += 1) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) - 2];\n  }\n  return rotated;\n};\n\n/*\n  Given a string, return a string with the letters rotated \n  to the right by two places.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotateRight = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < s.length; i += 1) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) + 2];\n  }\n  return rotated;\n};\n\n/*\n  Given a string, return a string with the letters rotated \n  to the left by one place.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotateLeft = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < s.length; i += 1) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) - 2];\n  }\n  return rotated;\n};\n\n/*\n  Given a string, return a string with the letters rotated \n  to the right by one place.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotateUp = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < s.length; i += 1) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) + 1];\n  }\n  return rotated;\n};\n\n/*\n  Given a string, return a string with the letters rotated \n  to the left by one place.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotateDown = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < s.length; i += 1) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) - 1];\n  }\n  return rotated;\n};\n\n/*\n  Given a string, return a string with the letters rotated \n  to the right by one place.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotateLeftUp = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < s.length; i += 1) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) + 1];\n  }\n  return rotated;\n};\n\n/*\n  Given a string, return a string with the letters rotated \n  to the right by one place.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotateLeftDown = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < s.length; i += 1) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) - 1];\n  }\n  return rotated;\n};\n\n/*\n  Given a string, return a string with the letters rotated \n  to the right by one place.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotateRightUp = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < s.length; i += 1) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) + 1];\n  }\n  return rotated;\n};\n\n/*\n  Given a string, return a string with the letters rotated \n  to the right by one place.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotateRightDown = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < s.length; i += 1) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) - 1];\n  }\n  return rotated;\n};\n\n/*\n  Given a string, return a string with the letters rotated \n  to the left by one place.\n  For example:\n  rotate('hi') returns 'lm'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotateUpLeft = (s) => {\n  let alphabet = 'abcdefghij", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n  const maxes = numbers.map(n => Math.max(n, 0))\n  return numbers.map(n => Math.max(n, 0)).reduce((acc, cur) => Math.max(acc, cur), maxes)\n}\n\n/* Given a sequence of integers, return a list of all possible combinations of length k\n  where each element in the sequence is either 0 or 1.\n  >>> combinations([1, 2, 3])\n  [\n    [1, 0],\n    [1, 1],\n    [1, 2],\n    [2, 0],\n    [2, 1],\n    [2, 2],\n    [3, 0],\n    [3, 1],\n    [3, 2],\n  ]\n  */\nconst combinations = (numbers) => {\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    const curr = numbers.slice(i)\n    const rest = numbers.slice(i + 1)\n    const results = []\n    for (let j = 0; j < curr.length; j++) {\n      const cur = curr.slice(j)\n      const rest = rest.slice(j)\n      const result = []\n      for (let k = 0; k < cur.length; k++) {\n        result.push(cur[k].concat(cur[k].concat(rest[k])))\n      }\n      results.push(result)\n    }\n    result.push(results)\n  }\n  return result\n}\n\n/* Given a sequence of integers, return a list of all possible combinations of length k\n  where each element in the sequence is either 0 or 1.\n  >>> combinations([1, 2, 3])\n  [\n    [1, 0],\n    [1, 1],\n    [1, 2],\n    [2, 0],\n    [2, 1],\n    [2, 2],\n    [3, 0],\n    [3, 1],\n    [3, 2],\n  ]\n  */\nconst combinations_1 = (numbers) => {\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    const curr = numbers.slice(i)\n    const rest = numbers.slice(i + 1)\n    const results = []\n    for (let j = 0; j < curr.length; j++) {\n      const cur = curr.slice(j)\n      const rest = rest.slice(j)\n      const result = []\n      for (let k = 0; k < cur.length; k++) {\n        result.push(cur[k].concat(cur[k].concat(rest[k])))\n      }\n      results.push(result)\n    }\n    result.push(results)\n  }\n  return result\n}\n\n/* Given a sequence of integers, return a list of all possible combinations of length k\n  where each element in the sequence is either 0 or 1.\n  >>> combinations([1, 2, 3])\n  [\n    [1, 0],\n    [1, 1],\n    [1, 2],\n    [2, 0],\n    [2, 1],\n    [2, 2],\n    [3, 0],\n    [3, 1],\n    [3, 2],\n  ]\n  */\nconst combinations_2 = (numbers) => {\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    const curr = numbers.slice(i)\n    const rest = numbers.slice(i + 1)\n    const results = []\n    for (let j = 0; j < curr.length; j++) {\n      const cur = curr.slice(j)\n      const rest = rest.slice(j)\n      const result = []\n      for (let k = 0; k < cur.length; k++) {\n        result.push(cur[k].concat(cur[k].concat(rest[k])))\n      }\n      results.push(result)\n    }\n    result.push(results)\n  }\n  return result\n}\n\n/* Given a sequence of integers, return a list of all possible combinations of length k\n  where each element in the sequence is either 0 or 1.\n  >>> combinations([1, 2, 3])\n  [\n    [1, 0],\n    [1, 1],\n    [1, 2],\n    [2, 0],\n    [2, 1],\n    [2, 2],\n    [3, 0],\n    [3, 1],\n    [3, 2],\n  ]\n  */\nconst combinations_3 = (numbers) => {\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    const curr = numbers.slice(i)\n    const rest = numbers.slice(i + 1)\n    const results = []\n    for (let j = 0; j < curr.length; j++) {\n      const cur = curr.slice(j)\n      const rest = rest.slice(j)\n      const result = []\n      for (let k = 0; k < cur.length; k++) {\n        result.push(cur[k].concat(cur[k].concat(rest[k])))\n      }\n      results.push(result)\n    }\n    result.push(results)\n  }\n  return result\n}\n\n/* Given a sequence of integers, return a list of all possible combinations of length k\n  where each element in the sequence is either 0 or 1.\n  >>> combinations([1, 2, 3])\n  [\n    [1, 0],\n    [1, 1],\n    [1, 2],\n    [2, 0],\n    [2, 1],\n    [2, 2],\n    [3, 0],\n    [3, 1],\n    [3, 2],\n  ]\n  */\nconst combinations_4 = (numbers) => {\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    const curr = numbers.slice(i)\n    const rest = numbers.slice(i + 1)\n    const results = []\n    for (let j = 0; j < curr.length; j++) {\n      const cur = curr.slice(j)\n      const rest = rest.slice(j)\n      const result = []\n      for (let k = 0; k < cur.length; k++) {\n        result.push(cur[k].concat(cur[k].concat(rest[k])))\n      }\n      results.push(result)\n    }\n    result.push(results)\n  }\n  return result\n}\n\n/* Given a sequence of integers, return a list of all possible combinations of length k\n  where each element in the sequence is either 0 or 1.\n  >>> combinations([1, 2, 3])\n  [\n    [1, 0],\n    [1, 1],\n    [1, 2],\n    [2, 0],\n    [2, 1],\n    [2, 2],\n    [3, 0],\n    [3, 1],\n    [3, 2],\n  ]\n  */\nconst combinations_5 = (numbers) => {\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    const curr = numbers.slice(i)\n    const rest = numbers.slice(i + 1)\n    const results = []\n    for (let j = 0; j < curr.length; j++) {\n      const cur = curr.slice(j)\n      const rest = rest.slice(j)\n      const result = []\n      for (let k = 0; k < cur.length; k++) {\n        result.push(cur[k].concat(cur[k].concat(rest[k])))\n      }\n      results.push(result)\n    }\n    result.push(results)\n  }\n  return result\n}\n\n/* Given a sequence of integers, return a list of all possible combinations of length k\n  where each element in the sequence is either 0 or 1.\n  >>> combinations([1, 2, 3])\n  [\n    [1, 0],\n    [1, 1],\n    [1, 2],\n    [2, 0],\n    [2, 1],\n    [2, 2],\n    [3, 0],\n    [3, 1],\n    [3, 2],\n  ]\n  */\nconst combinations_6 = (numbers) => {\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    const curr = numbers.slice(i)\n    const rest = numbers.slice(i + 1)\n    const results = []\n    for (let j = 0; j < curr.length; j++) {\n      const cur = curr.slice(j)\n      const rest = rest.slice(j)\n      const result = []\n      for (let k = 0; k < cur.length; k++) {\n        result.push(cur[k].concat(cur[k].concat(rest[k])))\n      }\n      results.push(result)\n    }\n    result.push(results)\n  }\n  return result\n}\n\n/* Given a sequence of integers, return a list of all possible combinations of length k\n  where each element in the sequence is either 0 or 1.\n  >>> combinations([1, 2, 3])\n  [\n    [1, 0],\n    [1, 1],\n    [1, 2],\n    [2, 0],\n    [2, 1],\n    [2, 2],\n    [3, 0],\n    [3, 1],\n    [3, 2],\n  ]\n  */\nconst combinations_7 = (numbers) => {\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    const curr = numbers.slice(i)\n    const rest = numbers.slice(i + 1)\n    const results = []\n    for (let j = 0; j < curr.length; j++) {\n      const cur = curr.slice(j)\n      const rest = rest.slice(j)\n      const result = []\n      for (let k = 0; k < cur.length; k++) {\n        result.push(cur[k].concat(cur[k].", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  \n  lst.forEach((item, index) => {\n    if (min === null) {\n      min = item;\n      minIndex = index;\n    } else if (item < min) {\n      min = item;\n      minIndex = index;\n    }\n  });\n  \n  return min === null? null : minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhLargest() that returns the 1st largest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 3\n  nexhLargest([5, 1, 4, 3, 2]) == 3\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  \n  lst.forEach((item, index) => {\n    if (max === null) {\n      max = item;\n      maxIndex = index;\n    } else if (item > max) {\n      max = item;\n      maxIndex = index;\n    }\n  });\n  \n  return max === null? null : maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhGreatest() that returns the greatest element of the list.\n  Return null if there is no such element.\n  \n  nexhGreatest([1, 2, 3, 4, 5]) == 5\n  nexhGreatest([5, 1, 4, 3, 2]) == 5\n  nexhGreatest([]) == null\n  nexhGreatest([1, 1]) == null\n  */\nconst nexhGreatest = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  \n  lst.forEach((item, index) => {\n    if (max === null) {\n      max = item;\n      maxIndex = index;\n    } else if (item > max) {\n      max = item;\n      maxIndex = index;\n    }\n  });\n  \n  return max === null? null : maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 1\n  nexhSmallest([5, 1, 4, 3, 2]) == 1\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  \n  lst.forEach((item, index) => {\n    if (min === null) {\n      min = item;\n      minIndex = index;\n    } else if (item < min) {\n      min = item;\n      minIndex = index;\n    }\n  });\n  \n  return min === null? null : minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhLargest() that returns the 1st largest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 4\n  nexhLargest([5, 1, 4, 3, 2]) == 4\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  \n  lst.forEach((item, index) => {\n    if (max === null) {\n      max = item;\n      maxIndex = index;\n    } else if (item > max) {\n      max = item;\n      maxIndex = index;\n    }\n  });\n  \n  return max === null? null : maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhGreatest() that returns the greatest element of the list.\n  Return null if there is no such element.\n  \n  nexhGreatest([1, 2, 3, 4, 5]) == 3\n  nexhGreatest([5, 1, 4, 3, 2]) == 3\n  nexhGreatest([]) == null\n  nexhGreatest([1, 1]) == null\n  */\nconst nexhGreatest = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  \n  lst.forEach((item, index) => {\n    if (max === null) {\n      max = item;\n      maxIndex = index;\n    } else if (item > max) {\n      max = item;\n      maxIndex = index;\n    }\n  });\n  \n  return max === null? null : maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 5\n  nexhSmallest([5, 1, 4, 3, 2]) == 5\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  \n  lst.forEach((item, index) => {\n    if (min === null) {\n      min = item;\n      minIndex = index;\n    } else if (item < min) {\n      min = item;\n      minIndex = index;\n    }\n  });\n  \n  return min === null? null : minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhLargest() that returns the 1st largest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 4\n  nexhLargest([5, 1, 4, 3, 2]) == 4\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  \n  lst.forEach((item, index) => {\n    if (max === null) {\n      max = item;\n      maxIndex = index;\n    } else if (item > max) {\n      max = item;\n      maxIndex = index;\n    }\n  });\n  \n  return max === null? null : maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhGreatest() that returns the greatest element of the list.\n  Return null if there is no such element.\n  \n  nexhGreatest([1, 2, 3, 4, 5]) == 3\n  nexhGreatest([5, 1, 4, 3, 2]) == 3\n  nexhGreatest([]) == null\n  nexhGreatest([1, 1]) == null\n  */\nconst nexhGreatest = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  \n  lst.forEach((item, index) => {\n    if (max === null) {\n      max = item;\n      maxIndex = index;\n    } else if (item > max) {\n      max = item;\n      maxIndex = index;\n    }\n  });\n  \n  return max === null? null : maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 5\n  nexhSmallest([5, 1, 4, 3, 2]) == 5\n  nexh", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return ((x + y) === (z + x)) || ((x + y) === (y + z));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allLnt(5, 2, 7) ➞ true\n  allLnt(3, 2, 2) ➞ false\n  allLnt(3, -2, 1) ➞ false\n  allLnt(3.6, -2.2, 2) ➞ true\n  */\nconst allLnt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return ((x + y) === (z + x)) || ((x + y) === (y + z));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return ((a + b) === (c + a));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allIntLnt = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return ((a + b) === (c + a));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allIntLnt(5, 2, 7) ➞ true\n  allIntLnt(3, 2, 2) ➞ false\n  allIntLnt(3, -2, 1) ➞ false\n  allIntLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allIntLnt = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return ((a + b) === (c + a));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allIntLnt(5, 2, 7) ➞ true\n  allIntLnt(3, 2, 2) ➞ false\n  allIntLnt(3, -2, 1) ➞ false\n  allIntLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allIntLntLnt = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return ((a + b) === (c + a));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allIntLnt(5, 2, 7) ➞ true\n  allIntLnt(3, 2, 2) ➞ false\n  allIntLnt(3, -2, 1) ➞ false\n  allIntLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allIntLntLnt = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return ((a + b) === (c + a));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allIntLnt(5, 2, 7) ➞ true\n  allIntLnt(3, 2, 2) ➞ false\n  allIntLnt(3, -2, 1) ➞ false\n  allIntLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allIntLntLntLnt = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return ((a + b) === (c + a));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allIntLnt(5, 2, 7) ➞ true\n  allIntLnt(3, 2, 2) ➞ false\n  allIntLnt(3, -2, 1) ➞ false\n  allIntLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allIntLntLntLntLnt = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return ((a + b) === (c + a));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allIntLnt(5, 2, 7) ➞ true\n  allIntLnt(3, 2, 2) ➞ false\n  allIntLnt(3, -2, 1) ➞ false\n  allIntLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allIntLntLntLntLntLnt = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return ((a + b) === (c + a));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allIntLnt(5, 2, 7) ➞ true\n  allIntLnt(3, 2, 2) ➞ false\n  allIntLnt(3, -2, 1) ➞ false\n  allIntLnt(3.6, -2.2, 2) ➞ false\n  */\nconst allIntLntLntLntLntLntLnt = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  return ((a + b) === (c + a));\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allIntLnt(5, 2, 7) ➞ true\n  allIntLnt(3, 2, 2) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let newMessageLength = messageLength;\n  let newMessageIndex = 0;\n  let newMessageIndex2 = 0;\n  let newMessageIndex3 = 0;\n  let newMessageIndex4 = 0;\n  let newMessageIndex5 = 0;\n  let newMessageIndex6 = 0;\n  let newMessageIndex7 = 0;\n  let newMessageIndex8 = 0;\n  let newMessageIndex9 = 0;\n  let newMessageIndex10 = 0;\n  let newMessageIndex11 = 0;\n  let newMessageIndex12 = 0;\n  let newMessageIndex13 = 0;\n  let newMessageIndex14 = 0;\n  let newMessageIndex15 = 0;\n  let newMessageIndex16 = 0;\n  let newMessageIndex17 = 0;\n  let newMessageIndex18 = 0;\n  let newMessageIndex19 = 0;\n  let newMessageIndex20 = 0;\n  let newMessageIndex21 = 0;\n  let newMessageIndex22 = 0;\n  let newMessageIndex23 = 0;\n  let newMessageIndex24 = 0;\n  let newMessageIndex25 = 0;\n  let newMessageIndex26 = 0;\n  let newMessageIndex27 = 0;\n  let newMessageIndex28 = 0;\n  let newMessageIndex29 = 0;\n  let newMessageIndex30 = 0;\n  let newMessageIndex31 = 0;\n  let newMessageIndex32 = 0;\n  let newMessageIndex33 = 0;\n  let newMessageIndex34 = 0;\n  let newMessageIndex35 = 0;\n  let newMessageIndex36 = 0;\n  let newMessageIndex37 = 0;\n  let newMessageIndex38 = 0;\n  let newMessageIndex39 = 0;\n  let newMessageIndex40 = 0;\n  let newMessageIndex41 = 0;\n  let newMessageIndex42 = 0;\n  let newMessageIndex43 = 0;\n  let newMessageIndex44 = 0;\n  let newMessageIndex45 = 0;\n  let newMessageIndex46 = 0;\n  let newMessageIndex47 = 0;\n  let newMessageIndex48 = 0;\n  let newMessageIndex49 = 0;\n  let newMessageIndex50 = 0;\n  let newMessageIndex51 = 0;\n  let newMessageIndex52 = 0;\n  let newMessageIndex53 = 0;\n  let newMessageIndex54 = 0;\n  let newMessageIndex55 = 0;\n  let newMessageIndex56 = 0;\n  let newMessageIndex57 = 0;\n  let newMessageIndex58 = 0;\n  let newMessageIndex59 = 0;\n  let newMessageIndex60 = 0;\n  let newMessageIndex61 = 0;\n  let newMessageIndex62 = 0;\n  let newMessageIndex63 = 0;\n  let newMessageIndex64 = 0;\n  let newMessageIndex65 = 0;\n  let newMessageIndex66 = 0;\n  let newMessageIndex67 = 0;\n  let newMessageIndex68 = 0;\n  let newMessageIndex69 = 0;\n  let newMessageIndex70 = 0;\n  let newMessageIndex71 = 0;\n  let newMessageIndex72 = 0;\n  let newMessageIndex73 = 0;\n  let newMessageIndex74 = 0;\n  let newMessageIndex75 = 0;\n  let newMessageIndex76 = 0;\n  let newMessageIndex77 = 0;\n  let newMessageIndex78 = 0;\n  let newMessageIndex79 = 0;\n  let newMessageIndex80 = 0;\n  let newMessageIndex81 = 0;\n  let newMessageIndex82 = 0;\n  let newMessageIndex83 = 0;\n  let newMessageIndex84 = 0;\n  let newMessageIndex85 = 0;\n  let newMessageIndex86 = 0;\n  let newMessageIndex87 = 0;\n  let newMessageIndex88 = 0;\n  let newMessageIndex89 = 0;\n  let newMessageIndex90 = 0;\n  let newMessageIndex91 = 0;\n  let newMessageIndex92 = 0;\n  let newMessageIndex93 = 0;\n  let newMessageIndex94 = 0;\n  let newMessageIndex95 = 0;\n  let newMessageIndex96 = 0;\n  let newMessageIndex97 = 0;\n  let newMessageIndex98 = 0;\n  let newMessageIndex99 = 0;\n  let newMessageIndex100 = 0;\n  let newMessageIndex101 = 0;\n  let newMessageIndex102 = 0;\n  let newMessageIndex103 = 0;\n  let newMessageIndex104 = 0;\n  let newMessageIndex105 = 0;\n  let newMessageIndex106 = 0;\n  let newMessageIndex107 = 0;\n  let newMessageIndex108 = 0;\n  let newMessageIndex109 = 0;\n  let newMessageIndex110 = 0;\n  let newMessageIndex111 = 0;\n  let newMessageIndex112 = 0;\n  let newMessageIndex113 = 0;\n  let newMessageIndex114 = 0;\n  let newMessageIndex115 = 0;\n  let newMessageIndex116 = 0;\n  let newMessageIndex117 = 0;\n  let newMessageIndex118 = 0;\n  let newMessageIndex119 = 0;\n  let newMessageIndex120 = 0;\n  let newMessageIndex121 = 0;\n  let newMessageIndex122 = 0;\n  let newMessageIndex123 = 0;\n  let newMessageIndex124 = 0;\n  let newMessageIndex125 = 0;\n  let newMessageIndex126 = 0;\n  let newMessageIndex127 = 0;\n  let newMessageIndex128 = 0;\n  let newMessageIndex129 = 0;\n  let newMessageIndex130 = 0;\n  let newMessageIndex131 = 0;\n  let newMessageIndex132 = 0;\n  let newMessageIndex133 = 0;\n  let newMessageIndex134 = 0;\n  let newMessageIndex135 = 0;\n  let newMessageIndex136 = 0;\n  let newMessageIndex137 = 0;\n  let newMessageIndex138 = 0;\n  let newMessageIndex139 = 0;\n  let newMessageIndex140 = 0;\n  let newMessageIndex141 = 0;\n  let newMessageIndex142 = 0;\n  let newMessageIndex143 = 0;\n  let newMessageIndex144 = 0;\n  let newMessageIndex145 = 0;\n  let newMessageIndex146 = 0;\n  let newMessageIndex147 = 0;\n  let newMessageIndex148 = 0;\n  let newMessageIndex149 = 0;\n  let newMessageIndex150 = 0;\n  let newMessageIndex151 = 0;\n  let newMessageIndex152 = 0;\n  let newMessageIndex153 = 0;\n  let newMessageIndex154 = 0;\n  let newMessageIndex155 = 0;\n  let newMessageIndex156 = 0;\n  let newMessageIndex157 = 0;\n  let newMessageIndex158 = 0;\n  let newMessageIndex159 = 0;\n  let newMessageIndex160 = 0;\n  let newMessageIndex161 = 0;\n  let newMessageIndex162 = 0;\n  let newMessageIndex163 = 0;\n  let newMessageIndex164 = 0;\n  let newMessageIndex165 = 0;\n  let newMessageIndex166 = 0;\n  let newMessageIndex167 = 0;\n  let newMessageIndex168 = 0;\n  let newMessageIndex169 = 0;\n  let newMessageIndex170 = 0;\n  let newMessageIndex171 = 0;\n  let newMessageIndex172 = 0;\n  let newMessageIndex173 = 0;\n  let newMessageIndex174 = 0;\n  let newMessageIndex175 = 0;\n  let newMessageIndex176 = 0;\n  let newMessageIndex177 = 0;\n  let newMessageIndex178 = 0;\n  let newMessageIndex179 = 0;\n  let newMessageIndex180 = 0;\n  let newMessageIndex181 = 0;\n  let newMessageIndex182 = 0;\n  let newMessageIndex183 = 0;\n  let newMessageIndex184 = 0;\n  let newMessageIndex185 = 0;\n  let newMessageIndex186 = 0;\n  let newMessageIndex187 = 0;\n  let newMessageIndex188 = 0;\n  let newMessageIndex189 = 0;\n  let newMessageIndex190 = 0;\n  let newMessageIndex191 = 0;\n  let newMessageIndex192 = 0;\n  let newMessageIndex193 = 0;\n  let newMessageIndex194 = 0;\n  let newMessageIndex195 = 0;\n  let newMessageIndex196 = 0;\n  let newMessageIndex197 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  let maxPrime = lst.reduce((acc, curr) => {\n    if (curr % 2 === 0) {\n      acc.push(curr)\n    }\n    return acc\n  }, [])\n  let sum = 0\n  for (let i = 0; i < maxPrime.length; i++) {\n    sum += maxPrime[i]\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkd\n\n},{}],13:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],14:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],15:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],16:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],17:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],18:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],19:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],20:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],21:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],22:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],23:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],24:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],25:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],26:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],27:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],28:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnasdkdSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += skjnasdkd(lst[i])\n  }\n  return sum\n}\n\nmodule.exports = skjnasdkdSum\n\n},{\"./skjnasdkd\":12}],29:[function(require,module,exports){\nconst skjnasdkd = require('./skjnasdkd')\n\nconst skjnas", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  for (let key in dict) {\n    if (typeof dict[key] ==='string') {\n      if (dict[key].toLowerCase() === dict[key.toLowerCase()]) {\n        return true;\n      }\n      if (dict[key].toUpperCase() === dict[key.toUpperCase()]) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a string, return true if all characters are alphabetic or \n  all characters are digits, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  alphaCase(\"abc\") should return true.\n  alphaCase(\"ABC\") should return false.\n  alphaCase(\"a\") should return false.\n  alphaCase(\"123\") should return false.\n  alphaCase(\"123abc\") should return false.\n  alphaCase(\"123ABC\") should return false.\n  alphaCase(\"123abc123\") should return false.\n  alphaCase(\"123abc123abc\") should return false.\n  alphaCase(\"123abc123ABC\") should return false.\n  alphaCase(\"123abc123ABC123\") should return false.\n  alphaCase(\"123abc123ABC123abc\") should return false.\n  alphaCase(\"123abc123ABC123abc123\") should return false.\n  alphaCase(\"123abc123ABC123abc123abc123\") should return false.\n  alphaCase(\"123abc123ABC123abc123abc123abc123\") should return false.\n  alphaCase(\"123abc123ABC123abc123abc123abc123abc123\") should return false.\n  alphaCase(\"123abc123ABC123abc123abc123abc123abc123abc123abc123\") should return false.\n  alphaCase(\"123abc123ABC123abc123abc123abc123abc123abc123abc123abc123abc123\") should return false.\n  alphaCase(\"123abc123ABC123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123\") should return false.\n  alphaCase(\"123abc123ABC123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  const primes = [2, 3]\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      primes.push(i)\n      i++\n    }\n  }\n  return primes\n}\n\n/*Implement a function that takes an integer and returns the largest prime factor of it.\n  for example:\n  largestPrimeFactor(2) => 2\n  largestPrimeFactor(3) => 3\n  largestPrimeFactor(5) => 5\n  largestPrimeFactor(11) => 11\n  largestPrimeFactor(0) => 0\n  largestPrimeFactor(20) => 20\n  largestPrimeFactor(18) => 18\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      i++\n    }\n  }\n  return i\n}\n\n/*Implement a function that takes an integer and returns the smallest prime factor of it.\n  for example:\n  smallestPrimeFactor(2) => 2\n  smallestPrimeFactor(3) => 3\n  smallestPrimeFactor(5) => 5\n  smallestPrimeFactor(11) => 11\n  smallestPrimeFactor(0) => 0\n  smallestPrimeFactor(20) => 20\n  smallestPrimeFactor(18) => 18\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      i--\n    }\n  }\n  return i\n}\n\n/*Implement a function that takes an integer and returns the largest prime factor of it.\n  for example:\n  largestPrimeFactor(2) => 2\n  largestPrimeFactor(3) => 3\n  largestPrimeFactor(5) => 5\n  largestPrimeFactor(11) => 11\n  largestPrimeFactor(0) => 0\n  largestPrimeFactor(20) => 20\n  largestPrimeFactor(18) => 18\n  */\nconst largestPrimeFactorTo = (n) => {\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      i++\n    }\n  }\n  return i\n}\n\n/*Implement a function that takes an integer and returns the smallest prime factor of it.\n  for example:\n  smallestPrimeFactor(2) => 2\n  smallestPrimeFactor(3) => 3\n  smallestPrimeFactor(5) => 5\n  smallestPrimeFactor(11) => 11\n  smallestPrimeFactor(0) => 0\n  smallestPrimeFactor(20) => 20\n  smallestPrimeFactor(18) => 18\n  */\nconst smallestPrimeFactorTo = (n) => {\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      i--\n    }\n  }\n  return i\n}\n\n/*Implement a function that takes an integer and returns the largest prime factor of it.\n  for example:\n  largestPrimeFactor(2) => 2\n  largestPrimeFactor(3) => 3\n  largestPrimeFactor(5) => 5\n  largestPrimeFactor(11) => 11\n  largestPrimeFactor(0) => 0\n  largestPrimeFactor(20) => 20\n  largestPrimeFactor(18) => 18\n  */\nconst largestPrimeFactorTo = (n) => {\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      i++\n    }\n  }\n  return i\n}\n\n/*Implement a function that takes an integer and returns the smallest prime factor of it.\n  for example:\n  smallestPrimeFactor(2) => 2\n  smallestPrimeFactor(3) => 3\n  smallestPrimeFactor(5) => 5\n  smallestPrimeFactor(11) => 11\n  smallestPrimeFactor(0) => 0\n  smallestPrimeFactor(20) => 20\n  smallestPrimeFactor(18) => 18\n  */\nconst smallestPrimeFactorTo = (n) => {\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      i--\n    }\n  }\n  return i\n}\n\n/*Implement a function that takes an integer and returns the largest prime factor of it.\n  for example:\n  largestPrimeFactor(2) => 2\n  largestPrimeFactor(3) => 3\n  largestPrimeFactor(5) => 5\n  largestPrimeFactor(11) => 11\n  largestPrimeFactor(0) => 0\n  largestPrimeFactor(20) => 20\n  largestPrimeFactor(18) => 18\n  */\nconst largestPrimeFactorTo = (n) => {\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      i++\n    }\n  }\n  return i\n}\n\n/*Implement a function that takes an integer and returns the smallest prime factor of it.\n  for example:\n  smallestPrimeFactor(2) => 2\n  smallestPrimeFactor(3) => 3\n  smallestPrimeFactor(5) => 5\n  smallestPrimeFactor(11) => 11\n  smallestPrimeFactor(0) => 0\n  smallestPrimeFactor(20) => 20\n  smallestPrimeFactor(18) => 18\n  */\nconst smallestPrimeFactorTo = (n) => {\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      i--\n    }\n  }\n  return i\n}\n\n/*Implement a function that takes an integer and returns the largest prime factor of it.\n  for example:\n  largestPrimeFactor(2) => 2\n  largestPrimeFactor(3) => 3\n  largestPrimeFactor(5) => 5\n  largestPrimeFactor(11) => 11\n  largestPrimeFactor(0) => 0\n  largestPrimeFactor(20) => 20\n  largestPrimeFactor(18) => 18\n  */\nconst largestPrimeFactorTo = (n) => {\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      i++\n    }\n  }\n  return i\n}\n\n/*Implement a function that takes an integer and returns the smallest prime factor of it.\n  for example:\n  smallestPrimeFactor(2) => 2\n  smallestPrimeFactor(3) => 3\n  smallestPrimeFactor(5) => 5\n  smallestPrimeFactor(11) => 11\n  smallestPrimeFactor(0) => 0\n  smallestPrimeFactor(20) => 20\n  smallestPrimeFactor(18) => 18\n  */\nconst smallestPrimeFactorTo = (n) => {\n  let i = 2\n  while (primes.length < n) {\n    if (primes.", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  const result = a * b;\n  return result / 10;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sumhiply(148, 412) should return 148.\n  sumhiply(19, 28) should return 28.\n  sumhiply(2020, 1851) should return 1851.\n  sumhiply(14,-15) should return 14.\n  */\nconst sumhiply = (a, b) => {\n  const result = a + b;\n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  diffhiply(148, 412) should return -12.\n  diffhiply(19, 28) should return -28.\n  diffhiply(2020, 1851) should return -1851.\n  diffhiply(14,-15) should return 14.\n  */\nconst diffhiply = (a, b) => {\n  const result = a - b;\n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abshiply(148, 412) should return 148.\n  abshiply(19, 28) should return 28.\n  abshiply(2020, 1851) should return 1851.\n  abshiply(14,-15) should return 14.\n  */\nconst abshiply = (a, b) => {\n  const result = Math.abs(a);\n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrthiply(148, 412) should return 1.414213562.\n  sqrthiply(19, 28) should return 1.414213562.\n  sqrthiply(2020, 1851) should return 1.414213562.\n  sqrthiply(14,-15) should return 1.414213562.\n  */\nconst sqrthiply = (a, b) => {\n  const result = Math.sqrt(a);\n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the inverse square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  invsqrthiply(148, 412) should return 1.414213562.\n  invsqrthiply(19, 28) should return 1.414213562.\n  invsqrthiply(2020, 1851) should return 1.414213562.\n  invsqrthiply(14,-15) should return 1.414213562.\n  */\nconst invsqrthiply = (a, b) => {\n  const result = 1 / Math.sqrt(a);\n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrthiplyn(148, 412) should return 1.414213562.\n  sqrthiplyn(19, 28) should return 1.414213562.\n  sqrthiplyn(2020, 1851) should return 1.414213562.\n  sqrthiplyn(14,-15) should return 1.414213562.\n  */\nconst sqrthiplyn = (x, y) => {\n  const result = Math.sqrt(x);\n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the inverse square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  invsqrthiplyn(148, 412) should return 1.414213562.\n  invsqrthiplyn(19, 28) should return 1.414213562.\n  invsqrthiplyn(2020, 1851) should return 1.414213562.\n  invsqrthiplyn(14,-15) should return 1.414213562.\n  */\nconst invsqrthiplyn = (x, y) => {\n  const result = 1 / Math.sqrt(x);\n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrthiplynn(148, 412) should return 1.414213562.\n  sqrthiplynn(19, 28) should return 1.414213562.\n  sqrthiplynn(2020, 1851) should return 1.414213562.\n  sqrthiplynn(14,-15) should return 1.414213562.\n  */\nconst sqrthiplynn = (x, y) => {\n  const result = Math.sqrt(x);\n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrthiplynn(148, 412) should return 1.414213562.\n  sqrthiplynn(19, 28) should return 1.414213562.\n  sqrthiplynn(2020, 1851) should return 1.414213562.\n  sqrthiplynn(14,-15) should return 1.414213562.\n  */\nconst sqrthiplynn = (x, y) => {\n  const result = 1 / Math.sqrt(x);\n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrthiplynn(148, 412) should return 1.414213562.\n  sqrthiplynn(19, 28) should return 1.414213562.\n  sqrthiplynn(2020, 1851) should return 1.414213562.\n  sqrthiplynn(14,-15) should return 1.414213562.\n  */\nconst sqrthiplynn = (x, y) => {\n  const result = 1 / Math.sqrt(x);\n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrthiplynn(148, 412) should return 1.414213562.\n  sqrthiplynn(19, 28) should return 1.414213562.\n  sqrthiplynn(2020, 1851) should return 1.414213562.\n  sqrthiplynn(14,-15) should return 1.414213562.\n  */\nconst sqrthiplynn = (x, y) => {\n  const result = 1 / Math.sqrt(x);\n  return result;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrthiplynn(148, 412) should return 1.414213562.\n  sqrthiplynn(19, 28) should return 1.414213562.\n  sqrthiplynn(2020, 1851) should return 1.414213562.\n  sqrthiplynn(14,-15) should return 1.414213562.\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let upper = 0;\n  let vowel = 0;\n  let upperCase = 0;\n  let vowelCase = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      upper = s[i];\n      upperCase = upper.toUpperCase();\n      \n      for(let j = 0; j < upperCase.length; j++) {\n        if(upperCase[j] >= 'A' && upperCase[j] <= 'Z') {\n          vowel = upperCase[j];\n          vowelCase = vowel.toUpperCase();\n          \n          if(vowelCase === upper) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 1\n  coujtLower('abcdefg') returns 0\n  coujtLower('dBBE') returns 0\n  */\nconst coujtLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let lower = 0;\n  let vowel = 0;\n  let lowerCase = 0;\n  let vowelCase = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      lower = s[i];\n      lowerCase = lower.toLowerCase();\n      \n      for(let j = 0; j < lowerCase.length; j++) {\n        if(lowerCase[j] >= 'a' && lowerCase[j] <= 'z') {\n          vowel = lowerCase[j];\n          vowelCase = vowel.toLowerCase();\n          \n          if(vowelCase === lower) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let upper = 0;\n  let vowel = 0;\n  let upperCase = 0;\n  let vowelCase = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i] >= 'A' && s[i] <= 'Z') {\n      upper = s[i];\n      upperCase = upper.toUpperCase();\n      \n      for(let j = 0; j < upperCase.length; j++) {\n        if(upperCase[j] >= 'a' && upperCase[j] <= 'z') {\n          vowel = upperCase[j];\n          vowelCase = vowel.toUpperCase();\n          \n          if(vowelCase === upper) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 1\n  coujtLower('abcdefg') returns 0\n  coujtLower('dBBE') returns 0\n  */\nconst coujtEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let lower = 0;\n  let vowel = 0;\n  let lowerCase = 0;\n  let vowelCase = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      lower = s[i];\n      lowerCase = lower.toLowerCase();\n      \n      for(let j = 0; j < lowerCase.length; j++) {\n        if(lowerCase[j] >= 'a' && lowerCase[j] <= 'z') {\n          vowel = lowerCase[j];\n          vowelCase = vowel.toLowerCase();\n          \n          if(vowelCase === lower) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let upper = 0;\n  let vowel = 0;\n  let upperCase = 0;\n  let vowelCase = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i] >= 'A' && s[i] <= 'Z') {\n      upper = s[i];\n      upperCase = upper.toUpperCase();\n      \n      for(let j = 0; j < upperCase.length; j++) {\n        if(upperCase[j] >= 'a' && upperCase[j] <= 'z') {\n          vowel = upperCase[j];\n          vowelCase = vowel.toUpperCase();\n          \n          if(vowelCase === upper) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 1\n  coujtLower('abcdefg') returns 0\n  coujtLower('dBBE') returns 0\n  */\nconst coujtEvenOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let lower = 0;\n  let vowel = 0;\n  let lowerCase = 0;\n  let vowelCase = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      lower = s[i];\n      lowerCase = lower.toLowerCase();\n      \n      for(let j = 0; j < lowerCase.length; j++) {\n        if(lowerCase[j] >= 'a' && lowerCase[j] <= 'z') {\n          vowel = lowerCase[j];\n          vowelCase = vowel.toLowerCase();\n          \n          if(vowelCase === lower) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let upper = 0;\n  let vowel = 0;\n  let upperCase = 0;\n  let vowelCase = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i] >= 'A' && s[i] <= 'Z') {\n      upper = s[i];\n      upperCase = upper.toUpperCase();\n      \n      for(let j = 0; j < upperCase.length; j++) {\n        if(upperCase[j] >= 'a' && upperCase[j] <= 'z') {\n          vowel = upperCase[j];\n          vowelCase = vowel.toUpperCase();\n          \n          if(vowelCase === upper) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 1\n  coujtLower('abcdefg') returns 0\n  coujtLower", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1Rounded, integer2Rounded] = integer1.split(\".\").map(\n    n => Math.round(n * Math.pow(10, fraction.length))\n  );\n  return integer1Rounded > integer2Rounded? integer1Rounded : integer2Rounded;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestFraction = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1Rounded, integer2Rounded] = integer1.split(\".\").map(\n    n => Math.round(n * Math.pow(10, fraction.length))\n  );\n  return integer1Rounded > integer2Rounded? integer1Rounded : integer2Rounded;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestFraction(\"10\")\n  10\n  >>> clodestFraction(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestFraction(\"14.5\") should\n  return 15 and clodestFraction(\"-14.5\") should return -15.\n  */\nconst clodestNumber = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1Rounded, integer2Rounded] = integer1.split(\".\").map(\n    n => Math.round(n * Math.pow(10, fraction.length))\n  );\n  return integer1Rounded > integer2Rounded? integer1Rounded : integer2Rounded;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestNumber(\"10\")\n  10\n  >>> clodestNumber(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestNumber(\"14.5\") should\n  return 15 and clodestNumber(\"-14.5\") should return -15.\n  */\nconst clodestString = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1Rounded, integer2Rounded] = integer1.split(\".\").map(\n    n => Math.round(n * Math.pow(10, fraction.length))\n  );\n  return integer1Rounded > integer2Rounded? integer1Rounded : integer2Rounded;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestString(\"10\")\n  10\n  >>> clodestString(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestString(\"14.5\") should\n  return 15 and clodestString(\"-14.5\") should return -15.\n  */\nconst clodestBoolean = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1Rounded, integer2Rounded] = integer1.split(\".\").map(\n    n => Math.round(n * Math.pow(10, fraction.length))\n  );\n  return integer1Rounded > integer2Rounded? integer1Rounded : integer2Rounded;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestBoolean(\"10\")\n  10\n  >>> clodestBoolean(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestBoolean(\"14.5\") should\n  return 15 and clodestBoolean(\"-14.5\") should return -15.\n  */\nconst clodestArray = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1Rounded, integer2Rounded] = integer1.split(\".\").map(\n    n => Math.round(n * Math.pow(10, fraction.length))\n  );\n  return integer1Rounded > integer2Rounded? integer1Rounded : integer2Rounded;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestArray(\"10\")\n  10\n  >>> clodestArray(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestArray(\"14.5\") should\n  return 15 and clodestArray(\"-14.5\") should return -15.\n  */\nconst clodestObject = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1Rounded, integer2Rounded] = integer1.split(\".\").map(\n    n => Math.round(n * Math.pow(10, fraction.length))\n  );\n  return integer1Rounded > integer2Rounded? integer1Roun", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
