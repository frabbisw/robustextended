{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  const len = numbers.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let res;\n\n  if (len === 0) {\n    return false;\n  }\n\n  res = [];\n  for (i = 0; i < len; i++) {\n    n = numbers[i];\n    m = i;\n    for (j = i + 1; j < len; j++) {\n      k = j;\n      l = j;\n      while (l < len && numbers[l] < n) {\n        l = l + 1;\n      }\n      if (l === len) {\n        res.push(true);\n        break;\n      }\n      if (numbers[k] < n) {\n        m = k;\n      }\n    }\n    if (m === i) {\n      res.push(false);\n    }\n  }\n  return res;\n};\n\n/**\n * Returns true if given array contains all numbers in given range\n * or if given range is empty - returns false.\n * If given range is given as string, then it must be in format\n *'start-end', where'start' and 'end' are integers separated by '-'.\n * If given range is given as array, then it must be in format\n * [start, end] where'start' and 'end' are integers separated by '-'.\n * If given range is given as object, then it must be in format\n * {start: start, end: end} where'start' and 'end' are integers separated by '-'.\n * If given range is given as boolean, then it must be in format\n * {boolean}\n * If given range is given as function, than it must be in format\n * {boolean}\n * If given range is given as number, then it must be in format\n * {number}\n * If given range is given as array, then it must be in format\n * [start, end] where'start' and 'end' are integers separated by '-'.\n * If given range is given as object, then it must be in format\n * {start: start, end: end} where'start' and 'end' are integers separated by '-'.\n * If given range is given as boolean, then it must be in format\n * {boolean}\n * If given range is given as function, than it must be in format\n * {boolean}\n * If given range is given as number, then it must be in format\n * {number}\n * If given range is given as array, then it must be in format\n * [start, end] where'start' and 'end' are integers separated by '-'.\n * If given range is given as object, then it must be in format\n * {start: start, end: end} where'start' and 'end' are integers separated by '-'.\n * If given range is given as boolean, then it must be in format\n * {boolean}\n * If given range is given as function, than it must be in format\n * {boolean}\n * If given range is given as number, then it must be in format\n * {number}\n * If given range is given as array, then it must be in format\n * [start, end] where'start' and 'end' are integers separated by '-'.\n * If given range is given as object, then it must be in format\n * {start: start, end: end} where'start' and 'end' are integers separated by '-'.\n * If given range is given as boolean, then it must be in format\n * {boolean}\n * If given range is given as function, than it must be in format\n * {boolean}\n * If given range is given as number, then it must be in format\n * {number}\n * If given range is given as array, then it must be in format\n * [start, end] where'start' and 'end' are integers separated by '-'.\n * If given range is given as object, then it must be in format\n * {start: start, end: end} where'start' and 'end' are integers separated by '-'.\n * If given range is given as boolean, then it must be in format\n * {boolean}\n * If given range is given as function, than it must be in format\n * {boolean}\n * If given range is given as number, then it must be in format\n * {number}\n * If given range is given as array, then it must be in format\n * [start, end] where'start' and 'end' are integers separated by '-'.\n * If given range is given as object, then it must be in format\n * {start: start, end: end} where'start' and 'end' are integers separated by '-'.\n * If given range is given as boolean, then it must be in format\n * {boolean}\n * If given range is given as function, than it must be in format\n * {boolean}\n * If given range is given as number, then it must be in format\n * {number}\n * If given range is given as array, then it must be in format\n * [start, end] where'start' and 'end' are integers separated by '-'.\n * If given range is given as object, then it must be in format\n * {start: start, end: end} where'start' and 'end' are integers separated by '-'.\n * If given range is given as boolean, then it must be in format\n * {boolean}\n * If given range is given as function, than it must be in format\n * {boolean}\n * If given range is given as number, then it must be in format\n * {number}\n * If given range is given as array, then it must be in format\n * [start, end] where'start' and 'end' are integers separated by '-'.\n * If given range is given as object, then it must be in format\n * {start: start, end: end} where'start' and 'end' are integers separated by '-'.\n * If given range is given as boolean, then it must be in format\n * {boolean}\n * If given range is given as function, than it must be in format\n * {boolean}\n * If given range is given as number, then it must be in format\n * {number}\n * If given range is given as array, then it must be in format\n * [start, end] where'start' and 'end' are integers separated by '-'.\n * If given range is given as object, then it must be in format\n * {start: start, end: end} where'start' and 'end' are integers separated by '-'.\n * If given range is given as boolean, then it must be in format\n * {boolean}\n * If given range is given as function, than it must be in format\n * {boolean}\n * If given range is given as number, then it must be in format\n * {number}\n * If given range is given as array, then it must be in format\n * [start, end] where'start' and 'end' are integers separated by '-'.\n * If given range is given as object, then it must be in format\n * {start: start, end: end} where'start' and 'end' are integers separated by '-'.\n * If given range is given as boolean, then it must be in format\n * {boolean}\n * If given range is given as function, than it must be in format\n * {boolean}\n * If given range is given as number, then it must be in format\n * {number}\n * If given range is given as array, then "}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char === '(') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char +'';\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing nested parentheses, return a list of strings that represent the nested parentheses.\n  >>> parenStrings('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenStrings = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char === '(') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char +'';\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing nested parentheses, return a list of strings that represent the nested parentheses.\n  >>> parenStrings('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenStrings = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char === '(') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char +'';\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing nested parentheses, return a list of strings that represent the nested parentheses.\n  >>> parenStrings('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenStrings = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char === '(') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char +'';\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing nested parentheses, return a list of strings that represent the nested parentheses.\n  >>> parenStrings('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenStrings = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char === '(') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char +'';\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing nested parentheses, return a list of strings that represent the nested parentheses.\n  >>> parenStrings('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenStrings = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char === '(') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char +'';\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing nested parentheses, return a list of strings that represent the nested parentheses.\n  >>> parenStrings('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenStrings = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char === '(') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char +'';\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing nested parentheses, return a list of strings that represent the nested parentheses.\n  >>> parenStrings('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenStrings = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = Math.pow(10, decimals);\n  return Math.round(number * decimal) / decimal;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> decomposeNumber(3.5)\n  3\n  */\nconst decomposeNumber = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = Math.pow(10, decimals);\n  return Math.round(number * decimal) / decimal;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> decomposeNumber(3.5)\n  3.5\n  */\nconst decomposeNumberWithDecimals = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = Math.pow(10, decimals);\n  return Math.round(number * decimal) / decimal;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> decomposeNumberWithDecimals(3.5)\n  3\n  */\nconst decomposeNumberWithDecimalsNoDecimals = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = Math.pow(10, decimals);\n  return Math.round(number * decimal) / decimal;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> decomposeNumberWithDecimalsNoDecimals(3.5)\n  3\n  */\nconst decomposeNumberWithDecimalsNoDecimalsWithDecimals = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = Math.pow(10, decimals);\n  return Math.round(number * decimal) / decimal;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> decomposeNumberWithDecimalsNoDecimalsWithDecimals(3.5)\n  3\n  */\nconst decomposeNumberWithDecimalsNoDecimalsWithDecimalsNoDecimals = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = Math.pow(10, decimals);\n  return Math.round(number * decimal) / decimal;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> decomposeNumberWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimals(3.5)\n  3\n  */\nconst decomposeNumberWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimals = (number) => {\n  const decimals = Math.floor(Math.log(number) / Math.LN10);\n  const decimal = Math.pow(10, decimals);\n  return Math.round(number * decimal) / decimal;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> decomposeNumberWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimalsWithDecimalsNoDecimal"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\nmodule.exports = bellwZero;\n\n},{}],5:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance >= 0;\n};\n\nmodule.exports = bellwZero;\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\nmodule.exports = bellwZero;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance >= 0;\n};\n\nmodule.exports = bellwZero;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\nmodule.exports = bellwZero;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance >= 0;\n};\n\nmodule.exports = bellwZero;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\nmodule.exports = bellwZero;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance >= 0;\n};\n\nmodule.exports = bellwZero;\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\nmodule.exports = bellwZero;\n\n},{}],13:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance >= 0;\n};\n\nmodule.exports = bellwZero;\n\n},{}],14:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\nmodule.exports = bellwZero"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the square root of the average squared difference\n  between each element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meajSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Mean Squared Error\n  around the mean of this dataset.\n  Mean Squared Error is the square root of the average squared difference\n  between each element and a centerpoint (mean in this case):\n  MSE = average ^ 2 - x_mean ^ 2 + y_mean ^ 2\n  >>> meajSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst meajSquaredError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2) + Math.pow(val - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Error\n  around the mean of this dataset.\n  Root Mean Squared Error is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  RMSE = average ^ 2 - x_mean ^ 2 + y_mean ^ 2\n  >>> meajRootMeanSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst meajRootMeanSquaredError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2) / (Math.pow(mean, 2) + Math.pow(mean, 2)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Percentage Error\n  around the mean of this dataset.\n  Mean Absolute Percentage Error is the percentage of the standard deviation\n  of the absolute deviations between each element and a centerpoint (mean in this case):\n  MAPE = average | x - x_mean |\n  >>> meajAbsolutePercentageError([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst meajAbsolutePercentageError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => 100 * Math.abs(val - mean) / mean);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Percentage Error\n  around the mean of this dataset.\n  Mean Squared Percentage Error is the percentage of the standard deviation\n  of the squared deviations between each element and a centerpoint (mean in this case):\n  MSRP = average ^ 2 - x_mean ^ 2 + y_mean ^ 2\n  >>> meajSquaredPercentageError([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst meajSquaredPercentageError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => 100 * Math.pow(val - mean, 2) / (Math.pow(mean, 2) + Math.pow(mean, 2)));\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Percentage Error\n  around the mean of this dataset.\n  Root Mean Squared Percentage Error is the percentage of the standard deviation\n  of the squared deviations between each element and a centerpoint (mean in this case):\n  RMSP = average ^ 2 - x_mean ^ 2 + y_mean ^ 2\n  >>> meajRootMeanSquaredPercentageError([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst meajRootMeanSquaredPercentageError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => 100 * Math.pow(val - mean, 2) / (Math.pow(mean, 2) + Math.pow(mean, 2)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Relative Percentage Error\n  around the mean of this dataset.\n  Mean Absolute Relative Percentage Error is the percentage of the standard deviation\n  of the absolute deviations between each element and a centerpoint (mean in this case):\n  MARE = average | x - x_mean |\n  >>> meajAbsoluteRelativePercentageError([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst meajAbsoluteRelativePercentageError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => 100 * Math.abs(val - mean) / mean);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Relative Percentage Error\n  around the mean of this dataset.\n  Mean Squared Relative Percentage Error is the percentage of the standard deviation\n  of the squared deviations between each element and a centerpoint (mean in this case):\n  MSRP = average ^ 2 - x_mean ^ 2 + y_mean ^ 2\n  >>> meajSquaredRelativePercentageError([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst meajSquaredRelativePercentageError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => 100 * Math.pow(val - mean, 2) / (Math.pow(mean, 2) + Math.pow(mean, 2)));\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Relative Percentage Error\n  around the mean of this dataset.\n  Root Mean Squared Relative Percentage Error is the percentage of the standard deviation\n  of the squared deviations between each element and a centerpoint (mean in this case):\n  RMSP = average ^ 2 - x_mean ^ 2 + y_mean ^ 2\n  >>> meajRootMeanSquaredRelativePercentageError([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst meajRootMeanSquaredRelativePercentageError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => 100 * Math.pow(val - mean, 2) / (Math.pow(mean, 2) + Math.pow(mean, 2)));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Relative Percentage Error\n  around the mean of this dataset.\n  Mean Absolute Relative Percentage Error is the percentage of the standard deviation\n  of the absolute deviations between each element and a centerpoint (mean in this case):\n  MARE = average | x - x_mean |\n  >>> meajAbsoluteRelativePercentageError([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst meajAbsoluteRelativePercentageError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => 100 * Math.abs(val - mean) / mean);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Relative Percentage Error\n  around the mean of this dataset.\n  Mean Squared Relative Percentage Error is the "}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] < delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 1) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 2) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 3) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 4) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 5) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 6) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 7) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 8) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 9) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 10) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 11) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 12) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 13) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 14) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 15) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 16) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 17) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 18) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 19) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 20) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 21) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 22) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 23) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 24) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 25) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 26) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 27) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 28) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 29) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 30) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 31) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 32) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 33) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 34) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 35) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 36) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 37) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 38) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 39) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 40) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 41) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 42) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 43) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 44) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 45) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 46) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 47) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 48) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 49) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 50) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 51) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 52) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 53) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 54) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 55) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 56) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 57) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 58) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 59) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if ("}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const result = [];\n  let current_level = 0;\n  let current_level_count = 0;\n  let current_level_count2 = 0;\n  let current_level_count3 = 0;\n  let current_level_count4 = 0;\n  let current_level_count5 = 0;\n  let current_level_count6 = 0;\n  let current_level_count7 = 0;\n  let current_level_count8 = 0;\n  let current_level_count9 = 0;\n  let current_level_count10 = 0;\n  let current_level_count11 = 0;\n  let current_level_count12 = 0;\n  let current_level_count13 = 0;\n  let current_level_count14 = 0;\n  let current_level_count15 = 0;\n  let current_level_count16 = 0;\n  let current_level_count17 = 0;\n  let current_level_count18 = 0;\n  let current_level_count19 = 0;\n  let current_level_count20 = 0;\n  let current_level_count21 = 0;\n  let current_level_count22 = 0;\n  let current_level_count23 = 0;\n  let current_level_count24 = 0;\n  let current_level_count25 = 0;\n  let current_level_count26 = 0;\n  let current_level_count27 = 0;\n  let current_level_count28 = 0;\n  let current_level_count29 = 0;\n  let current_level_count30 = 0;\n  let current_level_count31 = 0;\n  let current_level_count32 = 0;\n  let current_level_count33 = 0;\n  let current_level_count34 = 0;\n  let current_level_count35 = 0;\n  let current_level_count36 = 0;\n  let current_level_count37 = 0;\n  let current_level_count38 = 0;\n  let current_level_count39 = 0;\n  let current_level_count40 = 0;\n  let current_level_count41 = 0;\n  let current_level_count42 = 0;\n  let current_level_count43 = 0;\n  let current_level_count44 = 0;\n  let current_level_count45 = 0;\n  let current_level_count46 = 0;\n  let current_level_count47 = 0;\n  let current_level_count48 = 0;\n  let current_level_count49 = 0;\n  let current_level_count50 = 0;\n  let current_level_count51 = 0;\n  let current_level_count52 = 0;\n  let current_level_count53 = 0;\n  let current_level_count54 = 0;\n  let current_level_count55 = 0;\n  let current_level_count56 = 0;\n  let current_level_count57 = 0;\n  let current_level_count58 = 0;\n  let current_level_count59 = 0;\n  let current_level_count60 = 0;\n  let current_level_count61 = 0;\n  let current_level_count62 = 0;\n  let current_level_count63 = 0;\n  let current_level_count64 = 0;\n  let current_level_count65 = 0;\n  let current_level_count66 = 0;\n  let current_level_count67 = 0;\n  let current_level_count68 = 0;\n  let current_level_count69 = 0;\n  let current_level_count70 = 0;\n  let current_level_count71 = 0;\n  let current_level_count72 = 0;\n  let current_level_count73 = 0;\n  let current_level_count74 = 0;\n  let current_level_count75 = 0;\n  let current_level_count76 = 0;\n  let current_level_count77 = 0;\n  let current_level_count78 = 0;\n  let current_level_count79 = 0;\n  let current_level_count80 = 0;\n  let current_level_count81 = 0;\n  let current_level_count82 = 0;\n  let current_level_count83 = 0;\n  let current_level_count84 = 0;\n  let current_level_count85 = 0;\n  let current_level_count86 = 0;\n  let current_level_count87 = 0;\n  let current_level_count88 = 0;\n  let current_level_count89 = 0;\n  let current_level_count90 = 0;\n  let current_level_count91 = 0;\n  let current_level_count92 = 0;\n  let current_level_count93 = 0;\n  let current_level_count94 = 0;\n  let current_level_count95 = 0;\n  let current_level_count96 = 0;\n  let current_level_count97 = 0;\n  let current_level_count98 = 0;\n  let current_level_count99 = 0;\n  let current_level_count100 = 0;\n  let current_level_count101 = 0;\n  let current_level_count102 = 0;\n  let current_level_count103 = 0;\n  let current_level_count104 = 0;\n  let current_level_count105 = 0;\n  let current_level_count106 = 0;\n  let current_level_count107 = 0;\n  let current_level_count108 = 0;\n  let current_level_count109 = 0;\n  let current_level_count110 = 0;\n  let current_level_count111 = 0;\n  let current_level_count112 = 0;\n  let current_level_count113 = 0;\n  let current_level_count114 = 0;\n  let current_level_count115 = 0;\n  let current_level_count116 = 0;\n  let current_level_count117 = 0;\n  let current_level_count118 = 0;\n  let current_level_count119 = 0;\n  let current_level_count120 = 0;\n  let current_level_count121 = 0;\n  let current_level_count122 = 0;\n  let current_level_count123 = 0;\n  let current_level_count124 = 0;\n  let current_level_count125 = 0;\n  let current_level_count126 = 0;\n  let current_level_count127 = 0;\n  let current_level_count128 = 0;\n  let current_level_count129 = 0;\n  let current_level_count130 = 0;\n  let current_level_count131 = 0;\n  let current_level_count132 = 0;\n  let current_level_count133 = 0;\n  let current_level_count134 = 0;\n  let current_level_count135 = 0;\n  let current_level_count136 = 0;\n  let current_level_count137 = 0;\n  let current_level_count138 = 0;\n  let current_level_count139 = 0;\n  let current_level_count140 = 0;\n  let current_level_count141 = 0;\n  let current_level_count142 = 0;\n  let current_level_count143 = 0;\n  let current_level_count144 = 0;\n  let current_level_count145 = 0;\n  let current_level_count146 = 0;\n  let current_level_count147 = 0;\n  let current_level_count148 = 0;\n  let current_level_count149 = 0;\n  let current_level_count150 = 0;\n  let current_level_count151 = 0;\n  let current_level_count152 = 0;\n  let current_level_count153 = 0;\n  let current_level_count154 = 0;\n  let current_level_count155 = 0;\n  let current_level_count156 = 0;\n  let current_level_count157 = 0;\n  let current_level_count158 = 0;\n  let current_level_count159 = 0;\n  let current_level_count160 = 0;\n  let current_level_count161 = 0;\n  let current_level_count162 = 0;\n  let current_level_count163 = 0;\n  let current_level_count164 = 0;\n  let current_level_count165 = 0;\n  let current_level_count166 = 0;\n  let current_level_count167 = 0;\n  let current_level_count168 = 0;\n  let current_level_count169 = 0;\n  let current_level_count170 = 0;\n  let current_level_count171 = 0;\n  let current_level_count172 = 0;\n  let current_level_count173 = 0;\n  let current_level_count174 = 0;\n  let current_level_count175 = 0;\n  let current_level_count176 = 0;\n  let current_level_count177 = 0;\n  let current_level_count178 = 0;\n  let current_level_count179 = 0;\n  let current_level_count180 = 0;\n  let current_level_count181 = 0;\n  let current_level_count182 = 0;\n  let current_level_count183 = 0;\n  let current_level_count184 = 0;\n  let current_level_count185 = 0;\n  let current_level_count186 = 0;\n  let current_level_count187 = 0;\n  let current_level_count188 = 0;\n  let current_level_count189 = 0;\n  let current_level_count190 = 0;\n  let current_level_count191 = 0;\n  let current_level_count192 = 0;\n  let current_level_count193 = 0;\n  let current_level_count194 = 0;\n  let current_level_count195 = 0;\n  let current_level_count196 = 0;\n  let current_level_count197 = 0;\n  let current_level_count198 = 0;\n  let current_level_count199 = 0;\n  let current_level_count200 = 0;\n  let current_level_count201 = 0;\n  let current_level_count202 = 0;\n  let current_level_count"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstring([], 'b')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByContainSubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByContainSubstringAndNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByContainSubstringAndNotSubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotContainSubstringAndNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndNotSubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByContainSubstringAndContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByContainSubstringAndContainSubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotContainSubstringAndContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndContainSubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByContainSubstringAndNotContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByContainSubstringAndNotContainSubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotContainSubstringAndNotContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndContainSubstringAndNotContainSubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByContainSubstringAndNotContainSubstringAndNotContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndContainSubstringAndNotContainSubstringAndNotContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndContainSubstringAndNotContainSubstringAndNotContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndContainSubstringAndContainSubstringAndContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndContainSubstringAndContainSubstringAndContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filherByContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstringAndContainSubstring = (strings, "}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return { sum, product };\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum.\n  >>> multipleOroduct([3, 7, 11, 15])\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum and product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    if (sum % int === 0 && product % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum and product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum and product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n    if (sum % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum and product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum and product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum and product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum and product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum and product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum and product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum and product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum and product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum and product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)\n  [3, 7, 11, 15]\n  */\nconst multipleOroduct = (numbers, int) => {\n  let result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product % int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers such that each element in the list is a multiple of its sum and product.\n  >>> multipleOroduct([3, 7, 11, 15], 2)"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n  let max = numbers[0];\n  let rollingMax = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      rollingMax = i;\n    }\n  }\n  return [rollingMax, max];\n};\n\n/* Given a sorted array of integers, return an array containing all possible combinations of k elements from it.\n  >>> allCombinations([1, 2, 3, 4, 5, 6])\n  [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 5],\n    [1, 2, 4],\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [1, 5],\n    [1, 6],\n    [2, 3, 4, 5, 6],\n    [2, 3, 4, 5],\n    [2, 3, 5],\n    [2, 4],\n    [2, 5],\n    [2, 6],\n    [3, 4, 5, 6],\n    [3, 4, 5],\n    [3, 5],\n    [4],\n    [5],\n    [6],\n  ]\n  */\nconst allCombinations = (numbers) => {\n  const combinations = [];\n  const combination = (numbers, k) => {\n    if (k === numbers.length) {\n      combinations.push(numbers);\n      return;\n    }\n    for (let i = 0; i < numbers.length; i++) {\n      combination(numbers.slice(i + 1), k - 1);\n    }\n  };\n  combination(numbers, numbers.length);\n  return combinations;\n};\n\n/* Given a sorted array of integers, return an array containing all possible combinations of k elements from it.\n  >>> allCombinations([1, 2, 3, 4, 5, 6])\n  [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 5],\n    [1, 2, 4],\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [1, 5],\n    [1, 6],\n    [2, 3, 4, 5, 6],\n    [2, 3, 4, 5],\n    [2, 3, 5],\n    [2, 4],\n    [2, 5],\n    [2, 6],\n    [3, 4, 5, 6],\n    [3, 4, 5],\n    [3, 5],\n    [4],\n    [5],\n    [6],\n  ]\n  */\nconst allCombinationsWithRepeat = (numbers) => {\n  const combinations = [];\n  const combination = (numbers, k) => {\n    if (k === numbers.length) {\n      combinations.push(numbers);\n      return;\n    }\n    for (let i = 0; i < numbers.length; i++) {\n      combination(numbers.slice(i + 1), k - 1);\n    }\n  };\n  combination(numbers, numbers.length);\n  return combinations;\n};\n\n/* Given a sorted array of integers, return an array containing all possible combinations of k elements from it.\n  >>> allCombinationsWithRepeat([1, 2, 3, 4, 5, 6])\n  [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 5],\n    [1, 2, 4],\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [1, 5],\n    [1, 6],\n    [2, 3, 4, 5, 6],\n    [2, 3, 4, 5],\n    [2, 3, 5],\n    [2, 4],\n    [2, 5],\n    [2, 6],\n    [3, 4, 5, 6],\n    [3, 4, 5],\n    [3, 5],\n    [4],\n    [5],\n    [6],\n  ]\n  */\nconst allCombinationsWithRepeatAndRepeat = (numbers) => {\n  const combinations = [];\n  const combination = (numbers, k) => {\n    if (k === numbers.length) {\n      combinations.push(numbers);\n      return;\n    }\n    for (let i = 0; i < numbers.length; i++) {\n      combination(numbers.slice(i + 1), k - 1);\n    }\n  };\n  combination(numbers, numbers.length);\n  return combinations;\n};\n\n/* Given a sorted array of integers, return an array containing all possible combinations of k elements from it.\n  >>> allCombinationsWithRepeatAndRepeat([1, 2, 3, 4, 5, 6])\n  [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 5],\n    [1, 2, 4],\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [1, 5],\n    [1, 6],\n    [2, 3, 4, 5, 6],\n    [2, 3, 4, 5],\n    [2, 3, 5],\n    [2, 4],\n    [2, 5],\n    [2, 6],\n    [3, 4, 5, 6],\n    [3, 4, 5],\n    [3, 5],\n    [4],\n    [5],\n    [6],\n  ]\n  */\nconst allCombinationsWithRepeatAndRepeatAndRepeat = (numbers) => {\n  const combinations = [];\n  const combination = (numbers, k) => {\n    if (k === numbers.length) {\n      combinations.push(numbers);\n      return;\n    }\n    for (let i = 0; i < numbers.length; i++) {\n      combination(numbers.slice(i + 1), k - 1);\n    }\n  };\n  combination(numbers, numbers.length);\n  return combinations;\n};\n\n/* Given a sorted array of integers, return an array containing all possible combinations of k elements from it.\n  >>> allCombinationsWithRepeatAndRepeatAndRepeat([1, 2, 3, 4, 5, 6])\n  [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 5],\n    [1, 2, 4],\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [1, 5],\n    [1, 6],\n    [2, 3, 4, 5, 6],\n    [2, 3, 4, 5],\n    [2, 3, 5],\n    [2, 4],\n    [2, 5],\n    [2, 6],\n    [3, 4, 5, 6],\n    [3, 4, 5],\n    [3, 5],\n    [4],\n    [5],\n    [6],\n  ]\n  */\nconst allCombinationsWithRepeatAndRepeatAndRepeatAndRepeat = (numbers) => {\n  const combinations = [];\n  const combination = (numbers, k) => {\n    if (k === numbers.length) {\n      combinations.push(numbers);\n      return;\n    }\n    for (let i = 0; i < numbers.length; i++) {\n      combination(numbers.slice(i + 1), k - 1);\n    }\n  };\n  combination(numbers, numbers.length);\n  return combinations;\n};\n\n/* Given a sorted array of integers, return an array containing all possible combinations of k elements from it.\n  >>> allCombinationsWithRepeatAndRepeatAndRepeatAndRepeat([1, 2, 3, 4, 5, 6])\n  [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 5],\n    [1, 2, 4],\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [1, 5],\n    [1, 6],\n    [2, 3, 4, 5, 6],\n    [2, 3, 4, 5],\n    [2, 3, 5],\n    [2, 4],\n    [2, 5],\n    [2, 6],\n    [3, 4, 5, 6],\n    [3, 4, 5],\n    [3, 5],\n    [4],\n    [5],\n    [6],\n  ]\n  */\nconst allCombinationsWithRepeatAndRepeatAndRepeatAndRepeatAndRepeat = (numbers) => {\n  const combinations = [];\n  const combination = (numbers, k) => {\n    if (k === numbers.length) {\n      combinations.push(numbers);\n      return;\n    }\n    for (let i = 0; i < numbers.length; i++) {\n      combination(numbers.slice(i + 1), k - 1);\n    }\n  };\n  combination(numbers, numbers.length);\n  return combinations;\n};\n\n/* Given a sorted array of integers, return an array containing all possible combinations of k elements from it.\n  >>> allCombinationsWithRepeatAndRepeatAndRepeatAndRepeatAndRepeat([1, 2, 3, 4, 5, 6])\n  [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 5],\n    [1, 2, 4],\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [1, 5],\n    [1, 6],\n    [2, 3, 4, 5, 6],\n    [2, 3, 4, 5],\n    [2, 3, 5],\n    [2, 4],\n    [2, 5],\n    [2, 6],\n    [3, 4, 5, 6],\n    [3, 4, 5],\n    [3, 5],\n    [4],\n    [5],\n    [6],\n  ]\n  */\nconst allCombinationsWithRepeatAndRepeatAndRepeatAndRepeatAndRepeatAndRepeat = (numbers) => {\n  const combinations = [];\n  const combination = (numbers, k) => {\n    if (k === numbers.length) {\n      combinations.push(numbers);\n      return;\n    }\n    for (let i = 0; i < numbers.length; i++) {\n      "}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let palindromeLength = 0;\n  let palindromePrefix = '';\n  let palindromeSuffix = '';\n  let palindromePrefixLength = 0;\n  let palindromeSuffixLength = 0;\n  let palindromePrefixReversed = '';\n  let palindromeSuffixReversed = '';\n  let palindromePrefixReversedLength = 0;\n  let palindromeSuffixReversedLength = 0;\n\n  /* Find longest postfix of supplied string that is a palindrome */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromePrefixReversed = string[string.length - i - 1] + palindromePrefixReversed;\n    }\n  }\n\n  /* Append to the end of the string reverse of a string suffix that comes before the palindromic prefix */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - i - 1]) {\n      palindromeSuffixReversed = string[string.length - i - 1] + palindromeSuffixReversed;\n    }\n  }\n\n  /* Find the shortest palindrome that begins with a supplied string */\n  for (let i = 0; i < palindromeLength; i++) {\n    if (palindromePrefixReversed.includes(palindromePrefixReversed.slice(0, i))) {\n      palindromePrefix = palindromePrefixReversed.slice(0, i);\n      palindromePrefixReversed = palindromePrefixReversed.slice(i);\n      palindromePrefixReversedLength = palindromePrefixReversed.length;\n    }\n  }\n\n  for (let i = 0; i < palindromeSuffixReversedLength; i++) {\n    if (palindromeSuffixReversed.includes(palindromeSuffixReversed.slice(0, i))) {\n      palindromeSuffix = palindromeSuffixReversed.slice(0, i);\n      palindromeSuffixReversed = palindromeSuffixReversed.slice(i);\n      palindromeSuffixReversedLength = palindromeSuffixReversed.length;\n    }\n  }\n\n  /* If palindrome is found then return palindrome */\n  if (palindromePrefixReversed.includes(palindromePrefix)) {\n    palindrome = palindromePrefix + palindromeSuffix;\n  }\n\n  return palindrome;\n}\n\n/* Test if given string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLength = (string) => {\n  return string == makePalindrome(string).split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLengthAndPrefix = (string) => {\n  return string == makePalindrome(string).split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLengthAndSuffix = (string) => {\n  return string == makePalindrome(string).split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLengthAndPrefixAndSuffix = (string) => {\n  return string == makePalindrome(string).split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLengthAndPrefixAndSuffixAndPrefix = (string) => {\n  return string == makePalindrome(string).split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLengthAndPrefixAndSuffixAndSuffix = (string) => {\n  return string == makePalindrome(string).split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLengthAndPrefixAndSuffixAndSuffixAndPrefix = (string) => {\n  return string == makePalindrome(string).split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLengthAndPrefixAndSuffixAndSuffixAndSuffixAndPrefix = (string) => {\n  return string == makePalindrome(string).split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLengthAndPrefixAndSuffixAndSuffixAndSuffixAndSuffixAndPrefix = (string) => {\n  return string == makePalindrome(string).split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLengthAndPrefixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndPrefix = (string) => {\n  return string == makePalindrome(string).split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLengthAndPrefixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndPrefix = (string) => {\n  return string == makePalindrome(string).split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLengthAndPrefixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndPrefix = (string) => {\n  return string == makePalindrome(string).split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLengthAndPrefixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndPrefix = (string) => {\n  return string == makePalindrome(string).split('').reverse().join('');\n}\n\n/* Test if given string is a palindrome */\nconst isPalindromeWithLengthAndPrefixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffix"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) ^ b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd('010', '110')\n  '100'\n  */\nconst strlngAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr('010', '110')\n  '100'\n  */\nconst strlngOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) ^ b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd('010', '110')\n  '100'\n  */\nconst strlngAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr('010', '110')\n  '100'\n  */\nconst strlngOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) ^ b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd('010', '110')\n  '100'\n  */\nconst strlngAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr('010', '110')\n  '100'\n  */\nconst strlngOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) ^ b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd('010', '110')\n  '100'\n  */\nconst strlngAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr('010', '110')\n  '100'\n  */\nconst strlngOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) ^ b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd('010', '110')\n  '100'\n  */\nconst strlngAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr('010', '110')\n  '100'\n  */\nconst strlngOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) ^ b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd('010', '110')\n  '100'\n  */\nconst strlngAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr('010', '110')\n  '100'\n  */\nconst strlngOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two "}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "<|endoftext|>/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/**\n * Find the longest substring in a list of strings.\n * Return the first one in case of multiple strings of the same length. Return null in case the input list is empty.\n * >>> longest(['a', 'b', 'c'])\n * 'b'\n * >>> longest(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nconst longest = (strings) => {\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/**\n * Find the shortest substring in a list of strings.\n * Return the first one in case of multiple strings of the same length. Return null in case the input list is empty.\n * >>> shortest(['a', 'b', 'c'])\n * 'a'\n * >>> shortest(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nconst shortest = (strings) => {\n  let shortest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < shortest.length) {\n      shortest = strings[i];\n    }\n  }\n  return shortest;\n};\n\n/**\n * Find the first substring in a list of strings.\n * Return the first one in case of multiple strings of the same length. Return null in case the input list is empty.\n * >>> first(['a', 'b', 'c'])\n * 'a'\n * >>> first(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nconst first = (strings) => {\n  let first = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > first.length) {\n      first = strings[i];\n    }\n  }\n  return first;\n};\n\n/**\n * Find the last substring in a list of strings.\n * Return the first one in case of multiple strings of the same length. Return null in case the input list is empty.\n * >>> last(['a', 'b', 'c'])\n * 'c'\n * >>> last(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nconst last = (strings) => {\n  let last = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < last.length) {\n      last = strings[i];\n    }\n  }\n  return last;\n};\n\n/**\n * Find the first substring in a list of strings.\n * Return the first one in case of multiple strings of the same length. Return null in case the input list is empty.\n * >>> first(['a', 'b', 'c'])\n * 'a'\n * >>> first(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nconst firstOrNull = (strings) => {\n  let first = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > first.length) {\n      first = strings[i];\n    }\n  }\n  return first;\n};\n\n/**\n * Find the last substring in a list of strings.\n * Return the first one in case of multiple strings of the same length. Return null in case the input list is empty.\n * >>> last(['a', 'b', 'c'])\n * 'c'\n * >>> last(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nconst lastOrNull = (strings) => {\n  let last = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < last.length) {\n      last = strings[i];\n    }\n  }\n  return last;\n};\n\n/**\n * Find the first substring in a list of strings.\n * Return the first one in case of multiple strings of the same length. Return null in case the input list is empty.\n * >>> firstOrNull(['a', 'b', 'c'])\n * 'a'\n * >>> firstOrNull(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nconst firstOrNullOrEmpty = (strings) => {\n  let first = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > first.length) {\n      first = strings[i];\n    }\n  }\n  return first;\n};\n\n/**\n * Find the last substring in a list of strings.\n * Return the first one in case of multiple strings of the same length. Return null in case the input list is empty.\n * >>> lastOrNull(['a', 'b', 'c'])\n * 'c'\n * >>> lastOrNull(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nconst lastOrNullOrEmpty = (strings) => {\n  let last = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < last.length) {\n      last = strings[i];\n    }\n  }\n  return last;\n};\n\n/**\n * Find the first substring in a list of strings.\n * Return the first one in case of multiple strings of the same length. Return null in case the input list is empty.\n * >>> firstOrNullOrEmpty(['a', 'b', 'c'])\n * 'a'\n * >>> firstOrNullOrEmpty(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nconst firstOrNullOrEmptyOrNull = (strings) => {\n  let first = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > first.length) {\n      first = strings[i];\n    }\n  }\n  return first;\n};\n\n/**\n * Find the last substring in a list of strings.\n * Return the first one in case of multiple strings of the same length. Return null in case the input list is empty.\n * >>> lastOrNullOrEmptyOrNull(['a', 'b', 'c'])\n * 'c'\n * >>> lastOrNullOrEmptyOrNull(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nconst lastOrNullOrEmptyOrNull = (strings) => {\n  let last = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < last.length) {\n      last = strings[i];\n    }\n  }\n  return last;\n};\n\n/**\n * Find the first substring in a list of strings.\n * Return the first one in case of multiple strings of the same length. Return null in case the input list is empty.\n * >>> firstOrNullOrEmptyOrNull(['a', 'b', 'c'])\n * 'a'\n * >>> firstOrNullOrEmptyOrNull(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nconst firstOrNullOrEmptyOrNullOrEmpty = (strings) => {\n  let first = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > first.length) {\n      first = strings[i];\n    }\n  }\n  return first;\n};\n\n/**\n * Find the last substring in a list of strings.\n * Return the first one in case of multiple strings of the same length. Return null in case the input list is empty.\n * >>> lastOrNullOrEmptyOrNullOrEmpty(['a', 'b', 'c'])\n * 'c'\n * >>> lastOrNullOrEmptyOrNullOrEmpty(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nconst lastOrNullOrEmptyOrNullOrEmpty = (strings) => {\n  let last = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < last.length) {\n      last = strings[i];\n    }\n  }\n  return last;\n};\n\n/**\n * Find the first substring in a list of strings.\n * Return the first one in case of multiple strings of the same length. Return null in case the input list is empty.\n * >>> firstOrNullOrEmptyOrNullOrEmpty(['a', 'b', 'c'])\n * 'a'\n * >>> firstOrNullOrEmptyOrNullOrEmpty(['a', 'bb', 'ccc'])\n * "}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  const aPrime = primes[a];\n  const bPrime = primes[b];\n  let gcd = 1;\n  for (let i = aPrime; i <= bPrime; i++) {\n    if (a % i === 0) {\n      gcd++;\n    }\n  }\n  return gcd;\n};\n\n/* Return a prime number less than or equal to n\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  false\n  */\nconst isPrime = function (n) {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomInt = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntBetween = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntBetweenInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetween = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetweenInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetweenInclusiveAndInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetweenInclusiveAndInclusiveInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetweenInclusiveAndInclusiveInclusiveInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetweenInclusiveAndInclusiveInclusiveInclusiveInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetweenInclusiveAndInclusiveInclusiveInclusiveInclusiveInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetweenInclusiveAndInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetweenInclusiveAndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetweenInclusiveAndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetweenInclusiveAndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetweenInclusiveAndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetweenInclusiveAndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/* Return a random integer between min and max\n  >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  2\n  >>> randomInt(1, 100)\n  3\n  */\nconst randomIntInclusiveBetweenInclusiveAndInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = function (min, max) {\n  return Math.floor(Math.random() * ("}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, -1));\n    currentPrefix = currentPrefix.slice(1, currentPrefix.length);\n  }\n  return prefixes;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\nconst allOrefixesSuffix = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix.slice(1, -1));\n    currentSuffix = currentSuffix.slice(0, -1);\n  }\n  return suffixes;\n};\n\n// Return list of all prefixes from longest to shortest of the input string\nconst allOrefixesPrefix = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, 1));\n    currentPrefix = currentPrefix.slice(1, currentPrefix.length);\n  }\n  return prefixes;\n};\n\n// Return list of all suffixes from longest to shortest of the input string\nconst allOrefixesSuffixSuffix = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix.slice(0, -1));\n    currentSuffix = currentSuffix.slice(1, -1);\n  }\n  return suffixes;\n};\n\n// Return list of all prefixes from shortest to longest of the input string\nconst allOrefixesPrefixSuffix = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, 1));\n    currentPrefix = currentPrefix.slice(1, currentPrefix.length);\n  }\n  return prefixes;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\nconst allOrefixesSuffixPrefix = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix.slice(1, -1));\n    currentSuffix = currentSuffix.slice(0, -1);\n  }\n  return suffixes;\n};\n\n// Return list of all prefixes from longest to shortest of the input string\nconst allOrefixesPrefixSuffixSuffix = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, 1));\n    currentPrefix = currentPrefix.slice(1, currentPrefix.length);\n  }\n  return prefixes;\n};\n\n// Return list of all suffixes from longest to shortest of the input string\nconst allOrefixesSuffixPrefixSuffix = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix.slice(0, -1));\n    currentSuffix = currentSuffix.slice(1, -1);\n  }\n  return suffixes;\n};\n\n// Return list of all prefixes from shortest to longest of the input string\nconst allOrefixesPrefixSuffixSuffix = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, 1));\n    currentPrefix = currentPrefix.slice(1, currentPrefix.length);\n  }\n  return prefixes;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\nconst allOrefixesSuffixSuffixSuffix = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix.slice(0, -1));\n    currentSuffix = currentSuffix.slice(1, -1);\n  }\n  return suffixes;\n};\n\n// Return list of all prefixes from longest to shortest of the input string\nconst allOrefixesPrefixSuffixSuffix = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, 1));\n    currentPrefix = currentPrefix.slice(1, currentPrefix.length);\n  }\n  return prefixes;\n};\n\n// Return list of all suffixes from longest to shortest of the input string\nconst allOrefixesSuffixSuffixSuffix = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix.slice(0, -1));\n    currentSuffix = currentSuffix.slice(1, -1);\n  }\n  return suffixes;\n};\n\n// Return list of all prefixes from shortest to longest of the input string\nconst allOrefixesPrefixSuffixSuffix = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, 1));\n    currentPrefix = currentPrefix.slice(1, currentPrefix.length);\n  }\n  return prefixes;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\nconst allOrefixesSuffixPrefixSuffix = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix.slice(0, -1));\n    currentSuffix = currentSuffix.slice(1, -1);\n  }\n  return suffixes;\n};\n\n// Return list of all prefixes from longest to shortest of the input string\nconst allOrefixesPrefixSuffixSuffix = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, 1));\n    currentPrefix = currentPrefix.slice(1, currentPrefix.length);\n  }\n  return prefixes;\n};\n\n// Return list of all suffixes from longest to shortest of the input string\nconst allOrefixesSuffixSuffixSuffix = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix.slice(0, -1));\n    currentSuffix = currentSuffix.slice(1, -1);\n  }\n  return suffixes;\n};\n\n// Return list of all prefixes from shortest to longest of the input string\nconst allOrefixesPrefixSuffixSuffix = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, 1));\n    currentPrefix = currentPrefix.slice(1, currentPrefix.length);\n  }\n  return prefixes;\n};\n\n// Return list of all suffixes from shortest to longest of the input string\nconst allOrefixesSuffixPrefixSuffix = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix.slice(0, -1));\n    currentSuffix = currentSuffix.slice(1, -1);\n  }\n  return suffixes;\n};\n\n// Return list of all prefixes from longest to shortest of the input string\nconst allOrefixesPrefixSuffixSuffix = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, 1));\n    currentPrefix = currentPrefix.slice(1, currentPrefix.length);\n  }\n  return prefixes;\n};\n\n// Return list of all suffixes from longest to shortest of the input string\nconst allOrefixesSuffixSuffixSuffix = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (current"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequenceFrom = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlngSequenceFrom(0)\n  '0'\n  */\nconst strlngSequenceFromZero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlngSequenceFromZero(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequenceFromZeroFrom = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlngSequenceFromZeroFrom(0)\n  '0'\n  */\nconst strlngSequenceFromZeroFromZero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlngSequenceFromZeroFromZero(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequenceFromZeroFromZeroFrom = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlngSequenceFromZeroFromZeroFromZero(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequenceFromZeroFromZeroFromZero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlngSequenceFromZeroFromZeroFromZeroFromZero(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequenceFromZeroFromZeroFromZeroFrom = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlngSequenceFromZeroFromZeroFromZeroFromZeroFromZero(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequenceFromZeroFromZeroFromZeroFromZeroFrom = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlngSequenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZero(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequenceFromZeroFromZeroFromZeroFromZeroFromZeroFrom = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlngSequenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFrom = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlngSequenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFrom = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> strlngSequenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFrom"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct letters (regardless of case) does it consist of\n  >>> coujtDistinctLetters('xyzXYZ')\n  3\n  >>> coujtDistinctLetters('Jerry')\n  4\n  */\nconst coujtDistinctLetters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].toUpperCase() === chars[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case) does it consist of\n  >>> coujtDistinctWords('xyzXYZ')\n  3\n  >>> coujtDistinctWords('Jerry')\n  4\n  */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toUpperCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct sentences (regardless of case) does it consist of\n  >>> coujtDistinctSentences('xyzXYZ')\n  3\n  >>> coujtDistinctSentences('Jerry')\n  4\n  */\nconst coujtDistinctSentences = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toUpperCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct paragraphs (regardless of case) does it consist of\n  >>> coujtDistinctParagraphs('xyzXYZ')\n  3\n  >>> coujtDistinctParagraphs('Jerry')\n  4\n  */\nconst coujtDistinctParagraphs = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toUpperCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case) does it consist of\n  >>> coujtDistinctWords('xyzXYZ')\n  3\n  >>> coujtDistinctWords('Jerry')\n  4\n  */\nconst coujtDistinctWordsAndSentences = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toUpperCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct sentences (regardless of case) does it consist of\n  >>> coujtDistinctSentences('xyzXYZ')\n  3\n  >>> coujtDistinctSentences('Jerry')\n  4\n  */\nconst coujtDistinctWordsAndParagraphs = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toUpperCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case) does it consist of\n  >>> coujtDistinctWordsAndParagraphs('xyzXYZ')\n  3\n  >>> coujtDistinctWordsAndParagraphs('Jerry')\n  4\n  */\nconst coujtDistinctWordsAndSentences = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toUpperCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].toUpperCase() === chars[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct letters (regardless of case) does it consist of\n  >>> coujtDistinctLetters('xyzXYZ')\n  3\n  >>> coujtDistinctLetters('Jerry')\n  4\n  */\nconst coujtDistinctLetters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].toUpperCase() === chars[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case) does it consist of\n  >>> coujtDistinctWords('xyzXYZ')\n  3\n  >>> coujtDistinctWords('Jerry')\n  4\n  */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toUpperCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct sentences (regardless of case) does it consist of\n  >>> coujtDistinctSentences('xyzXYZ')\n  3\n  >>> coujtDistinctSentences('Jerry')\n  4\n  */\nconst coujtDistinctSentences = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toUpperCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case) does it consist of\n  >>> coujtDistinctWords('xyzXYZ')\n  3\n  >>> coujtDistinctWords('Jerry')\n  4\n  */\nconst coujtDistinctWordsAndSentences = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toUpperCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note.includes('.')) {\n      result.push(1);\n    } else if (note.includes('o')) {\n      result.push(4);\n    } else if (note.includes('.') || note.includes('o|')) {\n      result.push(2);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('o|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('o|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('o|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('.|')) {\n      result.push(1);\n    } else if (note.includes('.') || note.includes('."}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = string.length;\n  let n = string.length;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sorted = [];\n  let i = 0;\n  while (i < numbers.length) {\n    const number = numbers[i];\n    if (number === 'zero') {\n      sorted.push(0);\n      i++;\n    } else if (number === 'one') {\n      sorted.push(1);\n      i++;\n    } else if (number === 'two') {\n      sorted.push(2);\n      i++;\n    } else if (number === 'three') {\n      sorted.push(3);\n      i++;\n    } else if (number === 'four') {\n      sorted.push(4);\n      i++;\n    } else if (number === 'five') {\n      sorted.push(5);\n      i++;\n    } else if (number ==='six') {\n      sorted.push(6);\n      i++;\n    } else if (number ==='seven') {\n      sorted.push(7);\n      i++;\n    } else if (number === 'eight') {\n      sorted.push(8);\n      i++;\n    } else if (number === 'nine') {\n      sorted.push(9);\n      i++;\n    } else {\n      sorted.push(number);\n    }\n  }\n  return sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five nine')\n  'one three five nine'\n  */\nconst sorhNumbersReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sorted = [];\n  let i = 0;\n  while (i < numbers.length) {\n    const number = numbers[i];\n    if (number === 'zero') {\n      sorted.push(0);\n      i++;\n    } else if (number === 'one') {\n      sorted.push(1);\n      i++;\n    } else if (number === 'two') {\n      sorted.push(2);\n      i++;\n    } else if (number === 'three') {\n      sorted.push(3);\n      i++;\n    } else if (number === 'four') {\n      sorted.push(4);\n      i++;\n    } else if (number === 'five') {\n      sorted.push(5);\n      i++;\n    } else if (number ==='six') {\n      sorted.push(6);\n      i++;\n    } else if (number ==='seven') {\n      sorted.push(7);\n      i++;\n    } else if (number === 'eight') {\n      sorted.push(8);\n      i++;\n    } else if (number === 'nine') {\n      sorted.push(9);\n      i++;\n    } else {\n      sorted.push(number);\n    }\n  }\n  return sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five nine eight')\n  'one three five nine eight'\n  */\nconst sorhNumbersReverseReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sorted = [];\n  let i = 0;\n  while (i < numbers.length) {\n    const number = numbers[i];\n    if (number === 'zero') {\n      sorted.push(0);\n      i++;\n    } else if (number === 'one') {\n      sorted.push(1);\n      i++;\n    } else if (number === 'two') {\n      sorted.push(2);\n      i++;\n    } else if (number === 'three') {\n      sorted.push(3);\n      i++;\n    } else if (number === 'four') {\n      sorted.push(4);\n      i++;\n    } else if (number === 'five') {\n      sorted.push(5);\n      i++;\n    } else if (number ==='six') {\n      sorted.push(6);\n      i++;\n    } else if (number ==='seven') {\n      sorted.push(7);\n      i++;\n    } else if (number === 'eight') {\n      sorted.push(8);\n      i++;\n    } else if (number === 'nine') {\n      sorted.push(9);\n      i++;\n    } else if (number === 'eight') {\n      sorted.push(8);\n      i++;\n    } else {\n      sorted.push(number);\n    }\n  }\n  return sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five nine eight nine')\n  'one three five nine eight nine'\n  */\nconst sorhNumbersReverseReverseReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sorted = [];\n  let i = 0;\n  while (i < numbers.length) {\n    const number = numbers[i];\n    if (number === 'zero') {\n      sorted.push(0);\n      i++;\n    } else if (number === 'one') {\n      sorted.push(1);\n      i++;\n    } else if (number === 'two') {\n      sorted.push(2);\n      i++;\n    } else if (number === 'three') {\n      sorted.push(3);\n      i++;\n    } else if (number === 'four') {\n      sorted.push(4);\n      i++;\n    } else if (number === 'five') {\n      sorted.push(5);\n      i++;\n    } else if (number ==='six') {\n      sorted.push(6);\n      i++;\n    } else if (number ==='seven') {\n      sorted.push(7);\n      i++;\n    } else if (number === 'eight') {\n      sorted.push(8);\n      i++;\n    } else if (number === 'nine') {\n      sorted.push(9);\n      i++;\n    } else if (number === 'eight') {\n      sorted.push(8);\n      i++;\n    } else if (number === 'nine') {\n      sorted.push(9);\n      i++;\n    } else {\n      sorted.push(number);\n    }\n  }\n  return sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five nine eight nine nine')\n  'one three five nine eight nine nine'\n  */\nconst sorhNumbersReverseReverseReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sorted = [];\n  let i = 0;\n  while (i < numbers.length) {\n    const number = numbers[i];\n    if (number === 'zero') {\n      sorted.push(0);\n      i++;\n    } else if (number === 'one') {\n      sorted.push(1);\n      i++;\n    } else if (number === 'two') {\n      sorted.push(2);\n      i++;\n    } else if (number === 'three') {\n      sorted.push(3);\n      i++;\n    } else if (number === 'four') {\n      sorted.push(4);\n      i++;\n    } else if (number === 'five') {\n      sorted.push(5);\n      i++;\n    } else if (number ==='six') {\n      sorted.push(6);\n      i++;"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  const minDistance = Infinity;\n  const minDistanceIndex = 0;\n  const minDistanceElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n      minDistanceElement = numbers[i];\n    }\n  }\n  return [minDistanceElement, minDistanceIndex];\n};\n\nconst finfClosestElementsArray = (numbers) => {\n  const minDistance = Infinity;\n  const minDistanceIndex = 0;\n  const minDistanceElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n      minDistanceElement = numbers[i];\n    }\n  }\n  return [minDistanceElement, minDistanceIndex];\n};\n\nconst finfClosestElementsArrayWithIndex = (numbers) => {\n  const minDistance = Infinity;\n  const minDistanceIndex = 0;\n  const minDistanceElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n      minDistanceElement = numbers[i];\n    }\n  }\n  return [minDistanceElement, minDistanceIndex];\n};\n\nconst finfClosestElementsArrayWithIndexAndIndex = (numbers) => {\n  const minDistance = Infinity;\n  const minDistanceIndex = 0;\n  const minDistanceElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n      minDistanceElement = numbers[i];\n    }\n  }\n  return [minDistanceElement, minDistanceIndex];\n};\n\nconst finfClosestElementsArrayWithIndexAndIndexAndIndex = (numbers) => {\n  const minDistance = Infinity;\n  const minDistanceIndex = 0;\n  const minDistanceElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n      minDistanceElement = numbers[i];\n    }\n  }\n  return [minDistanceElement, minDistanceIndex];\n};\n\nconst finfClosestElementsArrayWithIndexAndIndexAndIndexAndIndex = (numbers) => {\n  const minDistance = Infinity;\n  const minDistanceIndex = 0;\n  const minDistanceElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n      minDistanceElement = numbers[i];\n    }\n  }\n  return [minDistanceElement, minDistanceIndex];\n};\n\nconst finfClosestElementsArrayWithIndexAndIndexAndIndexAndIndexAndIndex = (numbers) => {\n  const minDistance = Infinity;\n  const minDistanceIndex = 0;\n  const minDistanceElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n      minDistanceElement = numbers[i];\n    }\n  }\n  return [minDistanceElement, minDistanceIndex];\n};\n\nconst finfClosestElementsArrayWithIndexAndIndexAndIndexAndIndexAndIndexAndIndex = (numbers) => {\n  const minDistance = Infinity;\n  const minDistanceIndex = 0;\n  const minDistanceElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n      minDistanceElement = numbers[i];\n    }\n  }\n  return [minDistanceElement, minDistanceIndex];\n};\n\nconst finfClosestElementsArrayWithIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndex = (numbers) => {\n  const minDistance = Infinity;\n  const minDistanceIndex = 0;\n  const minDistanceElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n      minDistanceElement = numbers[i];\n    }\n  }\n  return [minDistanceElement, minDistanceIndex];\n};\n\nconst finfClosestElementsArrayWithIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndex = (numbers) => {\n  const minDistance = Infinity;\n  const minDistanceIndex = 0;\n  const minDistanceElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n      minDistanceElement = numbers[i];\n    }\n  }\n  return [minDistanceElement, minDistanceIndex];\n};\n\nconst finfClosestElementsArrayWithIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndex"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const [min, max] = numbers.map((n) => Math.min(n, 1))\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithUnit = (numbers) => {\n  const [min, max] = numbers.map((n) => Math.min(n, 1))\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithUnitAndUnit = (numbers) => {\n  const [min, max] = numbers.map((n) => Math.min(n, 1))\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithUnitAndUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithUnitAndUnitAndUnit = (numbers) => {\n  const [min, max] = numbers.map((n) => Math.min(n, 1))\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithUnitAndUnitAndUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithUnitAndUnitAndUnitAndUnit = (numbers) => {\n  const [min, max] = numbers.map((n) => Math.min(n, 1))\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithUnitAndUnitAndUnitAndUnitAndUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithUnitAndUnitAndUnitAndUnitAndUnit = (numbers) => {\n  const [min, max] = numbers.map((n) => Math.min(n, 1))\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnit = (numbers) => {\n  const [min, max] = numbers.map((n) => Math.min(n, 1))\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnit"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/**\n * Filter given list of any python values only for floats\n  >>> filherFloats(['a', 3.14, 5])\n  [5]\n  >>> filherFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value))\n}\n\n/**\n * Filter given list of any python values only for strings\n  >>> filherStrings(['a', 3.14, 5])\n  [5]\n  >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  [5]\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean')\n}\n\n/**\n * Filter given list of any python values only for None\n  >>> filherNone([])\n  []\n  >>> filherNone([None])\n  [None]\n  >>> filherNone([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filherNone = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filherEmpty([])\n  []\n  >>> filherEmpty([None])\n  [None]\n  >>> filherEmpty([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filherEmpty = (values) => {\n  return values.filter(value => value === [])\n}\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filherEmptyDict({})\n  {}\n  >>> filherEmptyDict({'a': 'b'})\n  {'a': 'b'}\n  >>> filherEmptyDict({'a': 'b', 'c': 3})\n  {'a': 'b'}\n  >>> filherEmptyDict({'a': 'b', 'c': 3, 'd': 4})\n  {'a': 'b'}\n  */\nconst filherEmptyDict = (values) => {\n  return values.filter(value => Object.keys(value).length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filherEmptyList([])\n  []\n  >>> filherEmptyList([None])\n  [None]\n  >>> filherEmptyList([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filherEmptyList = (values) => {\n  return values.filter(value => value === [])\n}\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filherEmptyString(\"\")\n  \"\"\n  >>> filherEmptyString(\"abc\")\n  \"abc\"\n  >>> filherEmptyString(\"abc123\")\n  \"abc123\"\n  */\nconst filherEmptyString = (value) => {\n  return value === \"\"\n}\n\n/**\n * Filter given list of any python values only for empty boolean\n  >>> filherEmptyBoolean(true)\n  true\n  >>> filherEmptyBoolean(false)\n  false\n  >>> filherEmptyBoolean(null)\n  null\n  */\nconst filherEmptyBoolean = (value) => {\n  return value === true\n}\n\n/**\n * Filter given list of any python values only for empty None\n  >>> filherEmptyNone(null)\n  null\n  >>> filherEmptyNone(undefined)\n  undefined\n  */\nconst filherEmptyNone = (value) => {\n  return value === null\n}\n\n/**\n * Filter given list of any python values only for empty array\n  >>> filherEmptyArray([])\n  []\n  >>> filherEmptyArray([None])\n  [None]\n  >>> filherEmptyArray([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filherEmptyArray = (values) => {\n  return values.filter(value => value === [])\n}\n\n/**\n * Filter given list of any python values only for empty function\n  >>> filherEmptyFunction(null)\n  null\n  >>> filherEmptyFunction(undefined)\n  undefined\n  */\nconst filherEmptyFunction = (value) => {\n  return value === null\n}\n\n/**\n * Filter given list of any python values only for empty object\n  >>> filherEmptyObject({})\n  {}\n  >>> filherEmptyObject({a: 'b'})\n  {'a': 'b'}\n  >>> filherEmptyObject({a: 'b', c: 3})\n  {'a': 'b'}\n  >>> filherEmptyObject({a: 'b', c: 3, 'd': 4})\n  {'a': 'b'}\n  */\nconst filherEmptyObject = (values) => {\n  return values.filter(value => Object.keys(value).length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filherEmptyList([])\n  []\n  >>> filherEmptyList([None])\n  [None]\n  >>> filherEmptyList([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filherEmptyList = (values) => {\n  return values.filter(value => value === [])\n}\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filherEmptyString(\"\")\n  \"\"\n  >>> filherEmptyString(\"abc\")\n  \"abc\"\n  >>> filherEmptyString(\"abc123\")\n  \"abc123\"\n  */\nconst filherEmptyString = (value) => {\n  return value === \"\"\n}\n\n/**\n * Filter given list of any python values only for empty boolean\n  >>> filherEmptyBoolean(true)\n  true\n  >>> filherEmptyBoolean(false)\n  false\n  >>> filherEmptyBoolean(null)\n  null\n  */\nconst filherEmptyBoolean = (value) => {\n  return value === true\n}\n\n/**\n * Filter given list of any python values only for empty None\n  >>> filherEmptyNone(null)\n  null\n  >>> filherEmptyNone(undefined)\n  undefined\n  */\nconst filherEmptyNone = (value) => {\n  return value === null\n}\n\n/**\n * Filter given list of any python values only for empty array\n  >>> filherEmptyArray([])\n  []\n  >>> filherEmptyArray([None])\n  [None]\n  >>> filherEmptyArray([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filherEmptyArray = (values) => {\n  return values.filter(value => value === [])\n}\n\n/**\n * Filter given list of any python values only for empty function\n  >>> filherEmptyFunction(null)\n  null\n  >>> filherEmptyFunction(undefined)\n  undefined\n  */\nconst filherEmptyFunction = (value) => {\n  return value === null\n}\n\n/**\n * Filter given list of any python values only for empty object\n  >>> filherEmptyObject({})\n  {}\n  >>> filherEmptyObject({a: 'b'})\n  {'a': 'b'}\n  >>> filherEmptyObject({a: 'b', c: 3})\n  {'a': 'b'}\n  >>> filherEmptyObject({a: 'b', c: 3, 'd': 4})\n  {'a': 'b'}\n  */\nconst filherEmptyObject = (values) => {\n  return values.filter(value => Object.keys(value).length === 0)\n}\n\n/**\n * Filter given "}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  const length = string.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = 0;\n  let resultLength = 0;\n  let resultString = '';\n  let resultStringLength = 0;\n  let resultStringIndex = 0;\n  let resultStringIndexLength = 0;\n  let resultStringIndexLength2 = 0;\n  let resultStringIndexLength3 = 0;\n  let resultStringIndexLength4 = 0;\n  let resultStringIndexLength5 = 0;\n  let resultStringIndexLength6 = 0;\n  let resultStringIndexLength7 = 0;\n  let resultStringIndexLength8 = 0;\n  let resultStringIndexLength9 = 0;\n  let resultStringIndexLength10 = 0;\n  let resultStringIndexLength11 = 0;\n  let resultStringIndexLength12 = 0;\n  let resultStringIndexLength13 = 0;\n  let resultStringIndexLength14 = 0;\n  let resultStringIndexLength15 = 0;\n  let resultStringIndexLength16 = 0;\n  let resultStringIndexLength17 = 0;\n  let resultStringIndexLength18 = 0;\n  let resultStringIndexLength19 = 0;\n  let resultStringIndexLength20 = 0;\n  let resultStringIndexLength21 = 0;\n  let resultStringIndexLength22 = 0;\n  let resultStringIndexLength23 = 0;\n  let resultStringIndexLength24 = 0;\n  let resultStringIndexLength25 = 0;\n  let resultStringIndexLength26 = 0;\n  let resultStringIndexLength27 = 0;\n  let resultStringIndexLength28 = 0;\n  let resultStringIndexLength29 = 0;\n  let resultStringIndexLength30 = 0;\n  let resultStringIndexLength31 = 0;\n  let resultStringIndexLength32 = 0;\n  let resultStringIndexLength33 = 0;\n  let resultStringIndexLength34 = 0;\n  let resultStringIndexLength35 = 0;\n  let resultStringIndexLength36 = 0;\n  let resultStringIndexLength37 = 0;\n  let resultStringIndexLength38 = 0;\n  let resultStringIndexLength39 = 0;\n  let resultStringIndexLength40 = 0;\n  let resultStringIndexLength41 = 0;\n  let resultStringIndexLength42 = 0;\n  let resultStringIndexLength43 = 0;\n  let resultStringIndexLength44 = 0;\n  let resultStringIndexLength45 = 0;\n  let resultStringIndexLength46 = 0;\n  let resultStringIndexLength47 = 0;\n  let resultStringIndexLength48 = 0;\n  let resultStringIndexLength49 = 0;\n  let resultStringIndexLength50 = 0;\n  let resultStringIndexLength51 = 0;\n  let resultStringIndexLength52 = 0;\n  let resultStringIndexLength53 = 0;\n  let resultStringIndexLength54 = 0;\n  let resultStringIndexLength55 = 0;\n  let resultStringIndexLength56 = 0;\n  let resultStringIndexLength57 = 0;\n  let resultStringIndexLength58 = 0;\n  let resultStringIndexLength59 = 0;\n  let resultStringIndexLength60 = 0;\n  let resultStringIndexLength61 = 0;\n  let resultStringIndexLength62 = 0;\n  let resultStringIndexLength63 = 0;\n  let resultStringIndexLength64 = 0;\n  let resultStringIndexLength65 = 0;\n  let resultStringIndexLength66 = 0;\n  let resultStringIndexLength67 = 0;\n  let resultStringIndexLength68 = 0;\n  let resultStringIndexLength69 = 0;\n  let resultStringIndexLength70 = 0;\n  let resultStringIndexLength71 = 0;\n  let resultStringIndexLength72 = 0;\n  let resultStringIndexLength73 = 0;\n  let resultStringIndexLength74 = 0;\n  let resultStringIndexLength75 = 0;\n  let resultStringIndexLength76 = 0;\n  let resultStringIndexLength77 = 0;\n  let resultStringIndexLength78 = 0;\n  let resultStringIndexLength79 = 0;\n  let resultStringIndexLength80 = 0;\n  let resultStringIndexLength81 = 0;\n  let resultStringIndexLength82 = 0;\n  let resultStringIndexLength83 = 0;\n  let resultStringIndexLength84 = 0;\n  let resultStringIndexLength85 = 0;\n  let resultStringIndexLength86 = 0;\n  let resultStringIndexLength87 = 0;\n  let resultStringIndexLength88 = 0;\n  let resultStringIndexLength89 = 0;\n  let resultStringIndexLength90 = 0;\n  let resultStringIndexLength91 = 0;\n  let resultStringIndexLength92 = 0;\n  let resultStringIndexLength93 = 0;\n  let resultStringIndexLength94 = 0;\n  let resultStringIndexLength95 = 0;\n  let resultStringIndexLength96 = 0;\n  let resultStringIndexLength97 = 0;\n  let resultStringIndexLength98 = 0;\n  let resultStringIndexLength99 = 0;\n  let resultStringIndexLength100 = 0;\n  let resultStringIndexLength101 = 0;\n  let resultStringIndexLength102 = 0;\n  let resultStringIndexLength103 = 0;\n  let resultStringIndexLength104 = 0;\n  let resultStringIndexLength105 = 0;\n  let resultStringIndexLength106 = 0;\n  let resultStringIndexLength107 = 0;\n  let resultStringIndexLength108 = 0;\n  let resultStringIndexLength109 = 0;\n  let resultStringIndexLength110 = 0;\n  let resultStringIndexLength111 = 0;\n  let resultStringIndexLength112 = 0;\n  let resultStringIndexLength113 = 0;\n  let resultStringIndexLength114 = 0;\n  let resultStringIndexLength115 = 0;\n  let resultStringIndexLength116 = 0;\n  let resultStringIndexLength117 = 0;\n  let resultStringIndexLength118 = 0;\n  let resultStringIndexLength119 = 0;\n  let resultStringIndexLength120 = 0;\n  let resultStringIndexLength121 = 0;\n  let resultStringIndexLength122 = 0;\n  let resultStringIndexLength123 = 0;\n  let resultStringIndexLength124 = 0;\n  let resultStringIndexLength125 = 0;\n  let resultStringIndexLength126 = 0;\n  let resultStringIndexLength127 = 0;\n  let resultStringIndexLength128 = 0;\n  let resultStringIndexLength129 = 0;\n  let resultStringIndexLength130 = 0;\n  let resultStringIndexLength131 = 0;\n  let resultStringIndexLength132 = 0;\n  let resultStringIndexLength133 = 0;\n  let resultStringIndexLength134 = 0;\n  let resultStringIndexLength135 = 0;\n  let resultStringIndexLength136 = 0;\n  let resultStringIndexLength137 = 0;\n  let resultStringIndexLength138 = 0;\n  let resultStringIndexLength139 = 0;\n  let resultStringIndexLength140 = 0;\n  let resultStringIndexLength141 = 0;\n  let resultStringIndexLength142 = 0;\n  let resultStringIndexLength143 = 0;\n  let resultStringIndexLength144 = 0;\n  let resultStringIndexLength145 = 0;\n  let resultStringIndexLength146 = 0;\n  let resultStringIndexLength147 = 0;\n  let resultStringIndexLength148 = 0;\n  let resultStringIndexLength149 = 0;\n  let resultStringIndexLength150 = 0;\n  let resultStringIndexLength151 = 0;\n  let resultStringIndexLength152 = 0;\n  let resultStringIndexLength153 = 0;\n  let resultStringIndexLength154 = 0;\n  let resultStringIndexLength155 = 0;\n  let resultStringIndexLength156 = 0;\n  let resultStringIndexLength157 = 0;\n  let resultStringIndexLength158 = 0;\n  let resultStringIndexLength159 = 0;\n  let resultStringIndexLength160 = 0;\n  let resultStringIndexLength161 = 0;\n  let resultStringIndexLength162 = 0;\n  let resultStringIndexLength163 = 0;\n  let resultStringIndexLength164 = 0;\n  let resultStringIndexLength165 = 0;\n  let resultStringIndexLength166 = 0;\n  let resultStringIndexLength167 = 0;\n  let resultStringIndexLength168 = 0;\n  let resultStringIndexLength169 = 0;\n  let resultStringIndexLength170 = 0;\n  let resultStringIndexLength171 = 0;\n  let resultStringIndexLength172 = 0;\n  let resultStringIndexLength173 = 0;\n  let resultStringIndexLength174 = 0;\n  let resultStringIndexLength175 = 0;\n  let resultStringIndexLength176 = 0;\n  let resultStringIndexLength177 = 0;\n  let resultStringIndexLength178 = 0;\n  let resultStringIndexLength179 = 0;\n  let resultStringIndexLength180 = 0;\n  let resultStringIndexLength181 = 0;\n  let resultStringIndexLength182 = 0;\n  let resultStringIndexLength183 = 0;"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let largestDivisor = 1;\n  let largestRemainder = 1;\n  let largestRemainderDivisor = 1;\n  let largestRemainderDivisorRemainder = 1;\n\n  while (largestRemainderDivisorRemainder > 1) {\n    largestRemainderDivisorRemainder = (largestRemainderDivisorRemainder % n) + 1;\n    largestRemainderDivisor = largestRemainderDivisorRemainder / n;\n  }\n\n  while (largestRemainderDivisor > 1) {\n    largestRemainderDivisor = (largestRemainderDivisor % n) + 1;\n    largestRemainderDivisorRemainder = largestRemainderDivisor / n;\n  }\n\n  largestRemainderDivisorRemainder = largestRemainderDivisorRemainder % n;\n\n  if (largestRemainderDivisorRemainder > largestRemainderDivisor) {\n    largestRemainderDivisor = largestRemainderDivisorRemainder;\n  }\n\n  largestDivisor = largestRemainderDivisor;\n\n  return largestDivisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 15\n */\nconst largestDivisor = (n) => {\n  let largestDivisor = 1;\n  let largestRemainder = 1;\n  let largestRemainderDivisor = 1;\n  let largestRemainderDivisorRemainder = 1;\n\n  while (largestRemainderDivisorRemainder > 1) {\n    largestRemainderDivisorRemainder = (largestRemainderDivisorRemainder % n) + 1;\n    largestRemainderDivisor = largestRemainderDivisorRemainder / n;\n  }\n\n  while (largestRemainderDivisor > 1) {\n    largestRemainderDivisor = (largestRemainderDivisor % n) + 1;\n    largestRemainderDivisorRemainder = largestRemainderDivisor / n;\n  }\n\n  largestRemainderDivisorRemainder = largestRemainderDivisorRemainder % n;\n\n  if (largestRemainderDivisorRemainder > largestRemainderDivisor) {\n    largestRemainderDivisor = largestRemainderDivisorRemainder;\n  }\n\n  largestDivisor = largestRemainderDivisor;\n\n  return largestDivisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst smallestDivisor = (n) => {\n  let smallestDivisor = 1;\n  let smallestRemainder = 1;\n  let smallestRemainderDivisor = 1;\n  let smallestRemainderDivisorRemainder = 1;\n\n  while (smallestRemainderDivisorRemainder > 1) {\n    smallestRemainderDivisorRemainder = (smallestRemainderDivisorRemainder % n) + 1;\n    smallestRemainderDivisor = smallestRemainderDivisorRemainder / n;\n  }\n\n  while (smallestRemainderDivisor > 1) {\n    smallestRemainderDivisor = (smallestRemainderDivisor % n) + 1;\n    smallestRemainderDivisorRemainder = smallestRemainderDivisor / n;\n  }\n\n  smallestRemainderDivisorRemainder = smallestRemainderDivisorRemainder % n;\n\n  if (smallestRemainderDivisorRemainder > smallestRemainderDivisor) {\n    smallestRemainderDivisor = smallestRemainderDivisorRemainder;\n  }\n\n  smallestDivisor = smallestRemainderDivisor;\n\n  return smallestDivisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 1\n */\nconst largestDivisor = (n) => {\n  let largestDivisor = 1;\n  let largestRemainder = 1;\n  let largestRemainderDivisor = 1;\n  let largestRemainderDivisorRemainder = 1;\n\n  while (largestRemainderDivisorRemainder > 1) {\n    largestRemainderDivisorRemainder = (largestRemainderDivisorRemainder % n) + 1;\n    largestRemainderDivisor = largestRemainderDivisorRemainder / n;\n  }\n\n  while (largestRemainderDivisor > 1) {\n    largestRemainderDivisor = (largestRemainderDivisor % n) + 1;\n    largestRemainderDivisorRemainder = largestRemainderDivisor / n;\n  }\n\n  largestRemainderDivisorRemainder = largestRemainderDivisorRemainder % n;\n\n  if (largestRemainderDivisorRemainder > largestRemainderDivisor) {\n    largestRemainderDivisor = largestRemainderDivisorRemainder;\n  }\n\n  largestDivisor = largestRemainderDivisor;\n\n  return largestDivisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst smallestDivisor = (n) => {\n  let smallestDivisor = 1;\n  let smallestRemainder = 1;\n  let smallestRemainderDivisor = 1;\n  let smallestRemainderDivisorRemainder = 1;\n\n  while (smallestRemainderDivisorRemainder > 1) {\n    smallestRemainderDivisorRemainder = (smallestRemainderDivisorRemainder % n) + 1;\n    smallestRemainderDivisor = smallestRemainderDivisorRemainder / n;\n  }\n\n  while (smallestRemainderDivisor > 1) {\n    smallestRemainderDivisor = (smallestRemainderDivisor % n) + 1;\n    smallestRemainderDivisorRemainder = smallestRemainderDivisor / n;\n  }\n\n  smallestRemainderDivisorRemainder = smallestRemainderDivisorRemainder % n;\n\n  if (smallestRemainderDivisorRemainder > smallestRemainderDivisor) {\n    smallestRemainderDivisor = smallestRemainderDivisorRemainder;\n  }\n\n  smallestDivisor = smallestRemainderDivisor;\n\n  return smallestDivisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 1\n */\nconst largestDivisor = (n) => {\n  let largestDivisor = 1;\n  let largestRemainder = 1;\n  let largestRemainderDivisor = 1;\n  let largestRemainderDivisorRemainder = 1;\n\n  while (largestRemainderDivisorRemainder > 1) {\n    largestRemainderDivisorRemainder = (largestRemainderDivisorRemainder % n) + 1;\n    largestRemainderDivisor = largestRemainderDivisorRemainder / n;\n  }\n\n  while (largestRemainderDivisor > 1) {\n    largestRemainderDivisor = (largestRemainderDivisor % n) + 1;\n    largestRemainderDivisorRemainder = largestRemainderDivisor / n;\n  }\n\n  largestRemainderDivisorRemainder = largestRemainderDivisorRemainder % n;\n\n  if (largestRemainderDi"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let factor = 1;\n  let factors = [];\n  while (i <= n) {\n    while (j <= n) {\n      factor = (n % j);\n      if (factor === 1) {\n        factors.push(factor);\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let factor = 1;\n  let factors = [];\n  while (i <= n) {\n    while (j <= n) {\n      factor = (n % j);\n      if (factor === 1) {\n        factors.push(factor);\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize2(8)\n  [2, 2, 2]\n  >>> factorize2(25)\n  [5, 5]\n  >>> factorize2(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let factor = 1;\n  let factors = [];\n  while (i <= n) {\n    while (j <= n) {\n      factor = (n % j);\n      if (factor === 1) {\n        factors.push(factor);\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize3(8)\n  [2, 2, 2]\n  >>> factorize3(25)\n  [5, 5]\n  >>> factorize3(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let factor = 1;\n  let factors = [];\n  while (i <= n) {\n    while (j <= n) {\n      factor = (n % j);\n      if (factor === 1) {\n        factors.push(factor);\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize4(8)\n  [2, 2, 2]\n  >>> factorize4(25)\n  [5, 5]\n  >>> factorize4(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let factor = 1;\n  let factors = [];\n  while (i <= n) {\n    while (j <= n) {\n      factor = (n % j);\n      if (factor === 1) {\n        factors.push(factor);\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize5(8)\n  [2, 2, 2]\n  >>> factorize5(25)\n  [5, 5]\n  >>> factorize5(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let factor = 1;\n  let factors = [];\n  while (i <= n) {\n    while (j <= n) {\n      factor = (n % j);\n      if (factor === 1) {\n        factors.push(factor);\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize6(8)\n  [2, 2, 2]\n  >>> factorize6(25)\n  [5, 5]\n  >>> factorize6(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let factor = 1;\n  let factors = [];\n  while (i <= n) {\n    while (j <= n) {\n      factor = (n % j);\n      if (factor === 1) {\n        factors.push(factor);\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize7(8)\n  [2, 2, 2]\n  >>> factorize7(25)\n  [5, 5]\n  >>> factorize7(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let factor = 1;\n  let factors = [];\n  while (i <= n) {\n    while (j <= n) {\n      factor = (n % j);\n      if (factor === 1) {\n        factors.push(factor);\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize8(8)\n  [2, 2, 2]\n  >>> factorize8(25)\n  [5, 5]\n  >>> factorize8(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let factor = 1;\n  let factors = [];\n  while (i <= n) {\n    while (j <= n) {\n      factor = (n % j);\n      if (factor === 1) {\n        factors.push(factor);\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize9(8)\n  [2, 2, 2]\n  >>> factorize9(25)\n  [5, 5]\n  >>> factorize9(7"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, cur) => {\n    if (seen.has(cur)) {\n      acc.push(cur);\n    } else {\n      seen.add(cur);\n    }\n    return acc;\n  }, []);\n};\n\n/**\n * Given a string, return a new string where all occurrences of its first character\n * have been replaced by their second character.\n * >>> replaceFirst('abc', 'd', 'e')\n * 'def'\n */\nconst replaceFirst = (str, first, second) => {\n  return str.replace(new RegExp(first, 'g'), second);\n};\n\n/**\n * Given a string, return a new string where all occurrences of its first character\n * have been replaced by their second character and all occurrences of its second\n * character have been replaced by their third character.\n * >>> replaceSecond('abc', 'd', 'e', 'f')\n * 'defg'\n */\nconst replaceSecond = (str, first, second, third) => {\n  return str.replace(new RegExp(first, 'g'), second).replace(new RegExp(second, 'g'), third);\n};\n\n/**\n * Given a string, return a new string where all occurrences of its first character\n * have been replaced by their second character and all occurrences of its second\n * character have been replaced by their third character and all occurrences of its third\n * character have been replaced by their fourth character.\n * >>> replaceThird('abc', 'd', 'e', 'f', 'g')\n * 'defgh'\n */\nconst replaceThird = (str, first, second, third, fourth) => {\n  return str.replace(new RegExp(first, 'g'), second).replace(new RegExp(second, 'g'), third).replace(new RegExp(third, 'g'), fourth);\n};\n\n/**\n * Given a string, return a new string where all occurrences of its first character\n * have been replaced by their second character and all occurrences of its second\n * character have been replaced by their third character and all occurrences of its third\n * character have been replaced by their fourth character and all occurrences of its fourth\n * character have been replaced by their fifth character.\n * >>> replaceFourth('abc', 'd', 'e', 'f', 'g', 'h')\n * 'defghi'\n */\nconst replaceFourth = (str, first, second, third, fourth, fifth) => {\n  return str.replace(new RegExp(first, 'g'), second).replace(new RegExp(second, 'g'), third).replace(new RegExp(third, 'g'), fourth).replace(new RegExp(fourth, 'g'), fifth);\n};\n\n/**\n * Given a string, return a new string where all occurrences of its first character\n * have been replaced by their second character and all occurrences of its second\n * character have been replaced by their third character and all occurrences of its third\n * character have been replaced by their fourth character and all occurrences of its fourth\n * character have been replaced by their fifth character and all occurrences of its fifth\n * character have been replaced by their sixth character.\n * >>> replaceFifth('abc', 'd', 'e', 'f', 'g', 'h', 'i')\n * 'defghihi'\n */\nconst replaceFifth = (str, first, second, third, fourth, fifth, sixth) => {\n  return str.replace(new RegExp(first, 'g'), second).replace(new RegExp(second, 'g'), third).replace(new RegExp(third, 'g'), fourth).replace(new RegExp(fourth, 'g'), fifth).replace(new RegExp(fifth, 'g'), sixth);\n};\n\n/**\n * Given a string, return a new string where all occurrences of its first character\n * have been replaced by their second character and all occurrences of its second\n * character have been replaced by their third character and all occurrences of its third\n * character have been replaced by their fourth character and all occurrences of its fourth\n * character have been replaced by their fifth character and all occurrences of its fifth\n * character have been replaced by their sixth character and all occurrences of its sixth\n * character have been replaced by their seventh character.\n * >>> replaceSixth('abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n * 'defghihij'\n */\nconst replaceSixth = (str, first, second, third, fourth, fifth, sixth, seventh) => {\n  return str.replace(new RegExp(first, 'g'), second).replace(new RegExp(second, 'g'), third).replace(new RegExp(third, 'g'), fourth).replace(new RegExp(fourth, 'g'), fifth).replace(new RegExp(fifth, 'g'), sixth).replace(new RegExp(sixth, 'g'), seventh);\n};\n\n/**\n * Given a string, return a new string where all occurrences of its first character\n * have been replaced by their second character and all occurrences of its second\n * character have been replaced by their third character and all occurrences of its third\n * character have been replaced by their fourth character and all occurrences of its fourth\n * character have been replaced by their fifth character and all occurrences of its fifth\n * character have been replaced by their sixth character and all occurrences of its sixth\n * character have been replaced by their seventh character and all occurrences of its seventh\n * character have been replaced by their eighth character.\n * >>> replaceSeventh('abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')\n * 'defghihijki'\n */\nconst replaceSeventh = (str, first, second, third, fourth, fifth, sixth, seventh, eighth) => {\n  return str.replace(new RegExp(first, 'g'), second).replace(new RegExp(second, 'g'), third).replace(new RegExp(third, 'g'), fourth).replace(new RegExp(fourth, 'g'), fifth).replace(new RegExp(fifth, 'g'), sixth).replace(new RegExp(sixth, 'g'), seventh).replace(new RegExp(seventh, 'g'), eighth);\n};\n\n/**\n * Given a string, return a new string where all occurrences of its first character\n * have been replaced by their second character and all occurrences of its second\n * character have been replaced by their third character and all occurrences of its third\n * character have been replaced by their fourth character and all occurrences of its fourth\n * character have been replaced by their fifth character and all occurrences of its fifth\n * character have been replaced by their sixth character and all occurrences of its sixth\n * character have been replaced by their seventh character and all occurrences of its seventh\n * character have been replaced by their eighth character and all occurrences of its eighth\n * character have been replaced by their ninth character.\n * >>> replaceNinth('abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')\n * 'defghihijkikl'\n */\nconst replaceNinth = (str, first, second, third, fourth, fifth, sixth, seventh, eighth, ninth) => {\n  return str.replace(new RegExp(first, 'g'), second).replace(new RegExp(second, 'g'), third).replace(new RegExp(third, 'g'), fourth).replace(new RegExp(fourth, 'g'), fifth).replace(new RegExp(fifth, 'g'), sixth).replace(new RegExp(sixth, 'g'), seventh).replace(new RegExp(seventh, 'g'), eighth).replace(new RegExp(eighth, 'g'), "}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, remove all characters that aren't letters.\n  >>> removeNonLetters('Hello')\n  'Hello'\n  */\nconst removeNonLetters = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't numbers.\n  >>> removeNonNumbers('Hello')\n  'Hello'\n  */\nconst removeNonNumbers = (string) => {\n  return string.replace(/[^0-9]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't punctuation.\n  >>> removeNonPunctuation('Hello')\n  'Hello'\n  */\nconst removeNonPunctuation = (string) => {\n  return string.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello'\n  */\nconst removeNonWhitespace = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Given a string, remove all characters that aren't whitespace.\n  >>> removeNonWhitespace('Hello')\n  'Hello"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, s) => acc + (s || ''), '');\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [ 1 ]\n  >>> toArray({ a: 1 }, { deep: true })\n  [ { a: 1 } ]\n  */\nconst toArray = (obj, deep = false) => {\n  const arr = [];\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        arr.push(toArray(obj[key], true));\n      } else {\n        arr.push(obj[key]);\n      }\n    }\n  }\n  return arr;\n};\n\n/**\n * Convert an object to an object\n * >>> toObject({ a: 1 })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: true })\n  { a: 1 }\n  */\nconst toObject = (obj, deep = false) => {\n  const obj = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        obj[key] = toObject(obj[key], true);\n      } else {\n        obj[key] = obj[key];\n      }\n    }\n  }\n  return obj;\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [ 1 ]\n  >>> toArray({ a: 1 }, { deep: true })\n  [ { a: 1 } ]\n  */\nconst toArray = (obj, deep = false) => {\n  const arr = [];\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        arr.push(toArray(obj[key], true));\n      } else {\n        arr.push(obj[key]);\n      }\n    }\n  }\n  return arr;\n};\n\n/**\n * Convert an object to an object\n * >>> toObject({ a: 1 })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: true })\n  { a: 1 }\n  */\nconst toObject = (obj, deep = false) => {\n  const obj = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        obj[key] = toObject(obj[key], true);\n      } else {\n        obj[key] = obj[key];\n      }\n    }\n  }\n  return obj;\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [ 1 ]\n  >>> toArray({ a: 1 }, { deep: true })\n  [ { a: 1 } ]\n  */\nconst toArray = (obj, deep = false) => {\n  const arr = [];\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        arr.push(toArray(obj[key], true));\n      } else {\n        arr.push(obj[key]);\n      }\n    }\n  }\n  return arr;\n};\n\n/**\n * Convert an object to an object\n * >>> toObject({ a: 1 })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: true })\n  { a: 1 }\n  */\nconst toObject = (obj, deep = false) => {\n  const obj = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        obj[key] = toObject(obj[key], true);\n      } else {\n        obj[key] = obj[key];\n      }\n    }\n  }\n  return obj;\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [ 1 ]\n  >>> toArray({ a: 1 }, { deep: true })\n  [ { a: 1 } ]\n  */\nconst toArray = (obj, deep = false) => {\n  const arr = [];\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        arr.push(toArray(obj[key], true));\n      } else {\n        arr.push(obj[key]);\n      }\n    }\n  }\n  return arr;\n};\n\n/**\n * Convert an object to an object\n * >>> toObject({ a: 1 })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: true })\n  { a: 1 }\n  */\nconst toObject = (obj, deep = false) => {\n  const obj = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        obj[key] = toObject(obj[key], true);\n      } else {\n        obj[key] = obj[key];\n      }\n    }\n  }\n  return obj;\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [ 1 ]\n  >>> toArray({ a: 1 }, { deep: true })\n  [ { a: 1 } ]\n  */\nconst toArray = (obj, deep = false) => {\n  const arr = [];\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        arr.push(toArray(obj[key], true));\n      } else {\n        arr.push(obj[key]);\n      }\n    }\n  }\n  return arr;\n};\n\n/**\n * Convert an object to an object\n * >>> toObject({ a: 1 })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: true })\n  { a: 1 }\n  */\nconst toObject = (obj, deep = false) => {\n  const obj = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        obj[key] = toObject(obj[key], true);\n      } else {\n        obj[key] = obj[key];\n      }\n    }\n  }\n  return obj;\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [ 1 ]\n  >>> toArray({ a: 1 }, { deep: true })\n  [ { a: 1 } ]\n  */\nconst toArray = (obj, deep = false) => {\n  const arr = [];\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        arr.push(toArray(obj[key], true));\n      } else {\n        arr.push(obj[key]);\n      }\n    }\n  }\n  return arr;\n};\n\n/**\n * Convert an object to an object\n * >>> toObject({ a: 1 })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: true })\n  { a: 1 }\n  */\nconst toObject = (obj, deep = false) => {\n  const obj = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        obj[key] = toObject(obj[key], true);\n      } else {\n        obj[key] = obj[key];\n      }\n    }\n  }\n  return obj;\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [ 1 ]\n  >>> toArray({ a: 1 }, { deep: true })\n  [ { a: 1 } ]\n  */\nconst toArray = (obj, deep = false) => {\n  const arr = [];\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        arr.push(toArray(obj[key], true));\n      } else {\n        arr.push(obj[key]);\n      }\n    }\n  }\n  return arr;\n};\n\n/**\n * Convert an object to an object\n * >>> toObject({ a: 1 })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: true })\n  { a: 1 }\n  */\nconst toObject = (obj, deep = false) => {\n  const obj = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        obj[key] = toObject(obj[key], true);\n      } else {\n        obj[key] = obj[key];\n      }\n    }\n  }\n  return obj;\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [ 1 ]\n  >>> toArray({ a: 1 }, { deep: true })\n  [ { a: 1 } ]\n  */\nconst toArray = (obj, deep = false) => {\n  const arr = [];\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (deep) {\n        arr.push(toArray(obj[key], true));\n      } else {\n        arr.push(obj[key]);\n      }\n    }\n  }\n  return arr;\n};\n\n/**\n * Convert an object to an object\n * >>> toObject({ a: 1 })\n  { a: "}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n// Filter an input list of strings only for ones that end with a given suffix.\n// If no suffix is provided, all strings will be filtered.\nconst filherBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix))\n}\n\n// Filter an input list of strings only for ones that do not start with a given prefix.\n// If no prefix is provided, all strings will be filtered.\nconst filherByNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix))\n}\n\n// Filter an input list of strings only for ones that do not end with a given suffix.\n// If no suffix is provided, all strings will be filtered.\nconst filherByNoSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstring = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstrings = (strings, substrings) => {\n  return strings.filter(s =>!substrings.every(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsIn = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAll = (strings, substrings) => {\n  return strings.filter(s =>!substrings.every(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAllBut = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAllButNoSubstrings = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAllButNoSubstringsIn = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAllButNoSubstringsInAll = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAllButNoSubstringsInAllBut = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAllButNoSubstringsInAllButNoSubstrings = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAllButNoSubstringsInAllButNoSubstringsIn = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsIn = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsIn = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsIn = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsIn = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsIn = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}\n\n// Filter an input list of strings only for ones that do not contain any of given substrings.\n// If no substrings are provided, all strings will be filtered.\nconst filherByNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsInAllButNoSubstringsIn = (strings, substrings) => {\n  return strings.filter(s =>!substrings.some(substring => s.includes(substring)))\n}"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  return l.filter(n => n >= 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZero = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOrZero([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZero = (l) => {\n  return l.filter(n => n > 0 || n === 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZero = (l) => {\n  return l.filter(n => n > 0 || n === 0 || n === 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(n => n > 0 || n === 0 || n === 0 || n === 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(n => n > 0 || n === 0 || n === 0 || n === 0 || n === 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(n => n > 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(n => n > 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(n => n > 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(n => n > 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(n => n > 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(n => n > 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0 || n === 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOr"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 17 === 0) return false;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return false;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return false;\n  if (n % 41 === 0) return false;\n  if (n % 43 === 0) return false;\n  if (n % 47 === 0) return false;\n  if (n % 53 === 0) return false;\n  if (n % 59 === 0) return false;\n  if (n % 61 === 0) return false;\n  if (n % 67 === 0) return false;\n  if (n % 71 === 0) return false;\n  if (n % 73 === 0) return false;\n  if (n % 79 === 0) return false;\n  if (n % 83) === 0) return false;\n  if (n % 89 === 0) return false;\n  if (n % 97 === 0) return false;\n  if (n % 101 === 0) return false;\n  if (n % 103 === 0) return false;\n  if (n % 107 === 0) return false;\n  if (n % 109 === 0) return false;\n  if (n % 111 === 0) return false;\n  if (n % 113 === 0) return false;\n  if (n % 115 === 0) return false;\n  if (n % 121 === 0) return false;\n  if (n % 123 === 0) return false;\n  if (n % 129 === 0) return false;\n  if (n % 131 === 0) return false;\n  if (n % 133 === 0) return false;\n  if (n % 137 === 0) return false;\n  if (n % 139 === 0) return false;\n  if (n % 141 === 0) return false;\n  if (n % 143 === 0) return false;\n  if (n % 147 === 0) return false;\n  if (n % 151 === 0) return false;\n  if (n % 153 === 0) return false;\n  if (n % 157 === 0) return false;\n  if (n % 159 === 0) return false;\n  if (n % 161 === 0) return false;\n  if (n % 163 === 0) return false;\n  if (n % 165 === 0) return false;\n  if (n % 169 === 0) return false;\n  if (n % 171 === 0) return false;\n  if (n % 173 === 0) return false;\n  if (n % 175 === 0) return false;\n  if (n % 179 === 0) return false;\n  if (n % 181 === 0) return false;\n  if (n % 183 === 0) return false;\n  if (n % 185 === 0) return false;\n  if (n % 187 === 0) return false;\n  if (n % 189 === 0) return false;\n  if (n % 191 === 0) return false;\n  if (n % 193 === 0) return false;\n  if (n % 197 === 0) return false;\n  if (n % 199 === 0) return false;\n  if (n % 201 === 0) return false;\n  if (n % 203 === 0) return false;\n  if (n % 205 === 0) return false;\n  if (n % 209 === 0) return false;\n  if (n % 211 === 0) return false;\n  if (n % 213 === 0) return false;\n  if (n % 217 === 0) return false;\n  if (n % 219 === 0) return false;\n  if (n % 221 === 0) return false;\n  if (n % 223 === 0) return false;\n  if (n % 227 === 0) return false;\n  if (n % 229 === 0) return false;\n  if (n % 231 === 0) return false;\n  if (n % 233 === 0) return false;\n  if (n % 239 === 0) return false;\n  if (n % 241 === 0) return false;\n  if (n % 243 === 0) return false;\n  if (n % 247 === 0) return false;\n  if (n % 249 === 0) return false;\n  if (n % 251 === 0) return false;\n  if (n % 253 === 0) return false;\n  if (n % 255 === 0) return false;\n  if (n % 257 === 0) return false;\n  if (n % 259 === 0) return false;\n  if (n % 261 === 0) return false;\n  if (n % 263 === 0) return false;\n  if (n % 265 === 0) return false;\n  if (n % 269 === 0) return false;\n  if (n % 271 === 0) return false;\n  if (n % 273 === 0) return false;\n  if (n % 275 === 0) return false;\n  if (n % 277 === 0) return false;\n  if (n % 279 === 0) return false;\n  if (n % 281 === 0) return false;\n  if (n % 283 === 0) return false;\n  if (n % 285 === 0) return false;\n  if (n % 287 === 0) return false;\n  if (n % 289 === 0) return false;\n  if (n % 291 === 0) return false;\n  if (n % 293 === 0) return false;\n  if (n % 295 === 0) return false;\n  if (n % 297 === 0) return false;\n  if (n % 299 === 0) return false;\n  if (n % 301 === 0) return false;\n  if (n % 303 === 0) return false;\n  if (n % 305 === 0) return false;\n  if (n % 309 === 0) return false;\n  if (n % 311 === 0) return false;\n  if (n % 313 === 0) return false;\n  if (n % 315 === 0) return false;\n  if (n % 317 === 0) return false;\n  if (n % 319 === 0) return false;\n  if (n % 321 === 0) return false;\n  if (n % 323 === 0) return false;\n  if (n % 325 === 0) return false;\n  if (n % 327 === 0) return false;\n  if (n % 329 === 0) return false;\n  if (n % 331 === 0) return false;\n  if (n % 333 === 0) return false;\n  if (n % 335 === 0) return false;\n  if (n % 337 === 0) return false;\n  if (n % 339 === 0) return false;\n  if (n % 341 === 0) return false;\n  if (n % 343 === 0) return false;\n  if (n % 345 === 0) return false;\n  if (n % 347 === 0) return false;\n  if (n % 349 === 0) return false;\n  if (n % 351 === 0) return false;\n  if (n % 353 === 0) return false;\n  if (n % 355 === 0) return false;\n  if (n % 357 === 0) return false;\n  if (n % 359 === 0) return false;\n  if (n % 361 === 0) return false;\n  if (n % 363 === 0) return false;\n  if (n % 365 === 0) return false;\n  if (n % 367 === 0) return false;\n  if (n % 369 === 0) return false;\n  if (n % 371 === 0) return false;\n  if (n % 373 === 0) return false;\n  if (n % 375 === 0) return false;\n  if (n % 379 === 0) return false;\n  if (n % 381 === 0) return false;\n  if (n % 383 === 0) return false;\n  if (n % 385 === 0) return false;\n  if (n % 387 === 0) return false;\n  if (n % 389 === 0) return false;\n  if (n % 391 === 0) return false;\n  if (n % 393 === 0) return false;\n  if (n % 395 === 0) return false;\n  if (n % 397 === 0) return false;\n  if (n % 399 === 0) return false;\n  if (n % 401 === 0) return false;\n  if (n % 403 === 0) return false;\n  if (n % 405 === 0) return false;\n  if (n % 409 === 0) return false;\n  if (n % 411 === 0) return false;\n  if (n % 413 === 0) return false;\n  if (n % 415 === 0) return false;\n  if (n % 417 === 0) return false;\n  if (n % 419 === 0) return false;\n  if (n % 421 === 0) return false;\n  if (n % 423 === 0) return false;\n  if (n % 425 === 0) return false;\n  if (n % 427 === 0) return false;\n  if (n % 429 === 0) return false;\n  if (n % 431 === 0) return false;\n  if (n % 433 === 0) return false;\n  if ("}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "<|endoftext|>/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polj(xs, 0);\n  const zeroPoint = polj(xs, 1);\n  const zeroPoints = polj(xs, 2);\n  const zeroPointsCount = zeroPoints.length;\n  const zeroPointsCountEven = zeroPointsCount % 2;\n  const zeroPointsCountOdd = zeroPointsCount - zeroPointsCountEven;\n  const zeroPointsCountEvenOdd = zeroPointsCountEven - zeroPointsCountOdd;\n  const zeroPointsCountEvenEven = zeroPointsCountEvenEven - zeroPointsCountEvenOdd;\n  const zeroPointsCountEvenOddOdd = zeroPointsCountEvenOddEven - zeroPointsCountOddOdd;\n  const zeroPointsCountEvenOddEvenOdd = zeroPointsCountEvenOddOddEven - zeroPointsCountOddOddOdd;\n  const zeroPointsCountEvenOddOddEven = zeroPointsCountEvenOddOddEven - zeroPointsCountOddOddEven;\n  const zeroPointsCountEvenOddOddOddEvenOdd = zeroPointsCountEvenOddOddOddEven - zeroPointsCountOddOddOddEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEven - zeroPointsCountOddOddOddEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEven - zeroPointsCountOddOddOddEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEven - zeroPointsCountOddOddOddEvenEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEven - zeroPointsCountOddOddOddEvenEvenEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenOdd - zeroPointsCountOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - zeroPointsCountOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - zeroPointsCountOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - zeroPointsCountOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - zeroPointsCountOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - zeroPointsCountOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - zeroPointsCountOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - zeroPointsCountOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - zeroPointsCountOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - zeroPointsCountOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - zeroPointsCountOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd;\n  const zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = zeroPointsCountEvenOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - zeroPointsCountOddOddOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2.filter((item, index) => index % 3 === 0);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhFive([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhFive = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2.filter((item, index) => index % 5 === 0);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhNine([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhNine = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2.filter((item, index) => index % 9 === 0);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhTen([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhTen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhTen = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2.filter((item, index) => index % 10 === 0);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by eleven, while its values at the indicies that are divisible by eleven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhEleven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEleven([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhEleven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2.filter((item, index) => index % 11 === 0);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twelve, while its values at the indicies that are divisible by twelve are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhTwelve([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhTwelve([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhTwelve = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2.filter((item, index) => index % 12 === 0);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirteen, while its values at the indicies that are divisible by thirteen are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThirteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThirteen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThirteen = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2.filter((item, index) => index % 13 === 0);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by fourteen, while its values at the indicies that are divisible by fourteen are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhFourteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhFourteen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhFourteen = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2.filter((item, index) => index % 14 === 0);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by fifteen, while its values at the indicies that are divisible by fifteen are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhFifteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhFifteen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhFifteen = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2.filter((item, index) => index % 15 === 0);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by sixteen, while its values at the indicies that are divisible by sixteen are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhSixteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhSixteen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhSixteen = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2.filter((item, index) => index % 16 === 0);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seventeen, while its values at the indicies that are divisible by seventeen are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhSeventeen([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhSeventeen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhSeventeen = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2.filter((item, index) => index % 17 === 0);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not "}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "<|endoftext|>/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  return l.length > 0? Math.max.apply(null, l) : NaN;\n};\n\n/*Return minimum element in the list.\n  >>> minFlement([1, 2, 3])\n  1\n  >>> minFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minFlement = (l) => {\n  return l.length > 0? Math.min.apply(null, l) : NaN;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumFlement([1, 2, 3])\n  6\n  >>> sumFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -32\n  */\nconst sumFlement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a + b, 0) : NaN;\n};\n\n/*Return average of all elements in the list.\n  >>> avgFlement([1, 2, 3])\n  1.5\n  >>> avgFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.666666666666666\n  */\nconst avgFlement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a + b) / l.length : NaN;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> stdFlement([1, 2, 3])\n  1.4142135623730951\n  >>> stdFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst stdFlement = (l) => {\n  return l.length > 0? Math.sqrt(sumFlement(l.map(Math.sqrt))) : NaN;\n};\n\n/*Return variance of all elements in the list.\n  >>> varFlement([1, 2, 3])\n  1.4142135623730951\n  >>> varFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst varFlement = (l) => {\n  return l.length > 0? sumFlement(l.map(Math.pow)) : NaN;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> stdFlement([1, 2, 3])\n  1.4142135623730951\n  >>> stdFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst stdFlement2 = (l) => {\n  return l.length > 0? Math.sqrt(sumFlement(l.map(Math.sqrt))) : NaN;\n};\n\n/*Return variance of all elements in the list.\n  >>> varFlement([1, 2, 3])\n  1.4142135623730951\n  >>> varFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst varFlement2 = (l) => {\n  return l.length > 0? sumFlement(l.map(Math.pow)) : NaN;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> stdFlement([1, 2, 3])\n  1.4142135623730951\n  >>> stdFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst stdFlement3 = (l) => {\n  return l.length > 0? Math.sqrt(sumFlement(l.map(Math.sqrt))) : NaN;\n};\n\n/*Return variance of all elements in the list.\n  >>> varFlement([1, 2, 3])\n  1.4142135623730951\n  >>> varFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst varFlement3 = (l) => {\n  return l.length > 0? sumFlement(l.map(Math.pow)) : NaN;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> stdFlement([1, 2, 3])\n  1.4142135623730951\n  >>> stdFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst stdFlement4 = (l) => {\n  return l.length > 0? Math.sqrt(sumFlement(l.map(Math.sqrt))) : NaN;\n};\n\n/*Return variance of all elements in the list.\n  >>> varFlement([1, 2, 3])\n  1.4142135623730951\n  >>> varFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst varFlement4 = (l) => {\n  return l.length > 0? sumFlement(l.map(Math.pow)) : NaN;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> stdFlement([1, 2, 3])\n  1.4142135623730951\n  >>> stdFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst stdFlement5 = (l) => {\n  return l.length > 0? Math.sqrt(sumFlement(l.map(Math.sqrt))) : NaN;\n};\n\n/*Return variance of all elements in the list.\n  >>> varFlement([1, 2, 3])\n  1.4142135623730951\n  >>> varFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst varFlement5 = (l) => {\n  return l.length > 0? sumFlement(l.map(Math.pow)) : NaN;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> stdFlement([1, 2, 3])\n  1.4142135623730951\n  >>> stdFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst stdFlement6 = (l) => {\n  return l.length > 0? Math.sqrt(sumFlement(l.map(Math.sqrt))) : NaN;\n};\n\n/*Return variance of all elements in the list.\n  >>> varFlement([1, 2, 3])\n  1.4142135623730951\n  >>> varFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst varFlement6 = (l) => {\n  return l.length > 0? sumFlement(l.map(Math.pow)) : NaN;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> stdFlement([1, 2, 3])\n  1.4142135623730951\n  >>> stdFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst stdFlement7 = (l) => {\n  return l.length > 0? Math.sqrt(sumFlement(l.map(Math.sqrt))) : NaN;\n};\n\n/*Return variance of all elements in the list.\n  >>> varFlement([1, 2, 3])\n  1.4142135623730951\n  >>> varFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.7320508075688773\n  */\nconst varFlement7 = (l) => {\n  return l.length > 0? sumFlement(l.map(Math.pow)) : NaN;\n};\n\n/*Return standard deviation of all elements in the list.\n  >>> stdFlement([1, 2, 3])\n  1.4142135"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  let digit = 0;\n  let remainder = 0;\n  let remainder2 = 0;\n  let remainder3 = 0;\n  let remainder4 = 0;\n  let remainder5 = 0;\n  let remainder6 = 0;\n  let remainder7 = 0;\n  let remainder8 = 0;\n  let remainder9 = 0;\n  let remainder10 = 0;\n  let remainder11 = 0;\n  let remainder12 = 0;\n  let remainder13 = 0;\n  let remainder14 = 0;\n  let remainder15 = 0;\n  let remainder16 = 0;\n  let remainder17 = 0;\n  let remainder18 = 0;\n  let remainder19 = 0;\n  let remainder20 = 0;\n  let remainder21 = 0;\n  let remainder22 = 0;\n  let remainder23 = 0;\n  let remainder24 = 0;\n  let remainder25 = 0;\n  let remainder26 = 0;\n  let remainder27 = 0;\n  let remainder28 = 0;\n  let remainder29 = 0;\n  let remainder30 = 0;\n  let remainder31 = 0;\n  let remainder32 = 0;\n  let remainder33 = 0;\n  let remainder34 = 0;\n  let remainder35 = 0;\n  let remainder36 = 0;\n  let remainder37 = 0;\n  let remainder38 = 0;\n  let remainder39 = 0;\n  let remainder40 = 0;\n  let remainder41 = 0;\n  let remainder42 = 0;\n  let remainder43 = 0;\n  let remainder44 = 0;\n  let remainder45 = 0;\n  let remainder46 = 0;\n  let remainder47 = 0;\n  let remainder48 = 0;\n  let remainder49 = 0;\n  let remainder50 = 0;\n  let remainder51 = 0;\n  let remainder52 = 0;\n  let remainder53 = 0;\n  let remainder54 = 0;\n  let remainder55 = 0;\n  let remainder56 = 0;\n  let remainder57 = 0;\n  let remainder58 = 0;\n  let remainder59 = 0;\n  let remainder60 = 0;\n  let remainder61 = 0;\n  let remainder62 = 0;\n  let remainder63 = 0;\n  let remainder64 = 0;\n  let remainder65 = 0;\n  let remainder66 = 0;\n  let remainder67 = 0;\n  let remainder68 = 0;\n  let remainder69 = 0;\n  let remainder70 = 0;\n  let remainder71 = 0;\n  let remainder72 = 0;\n  let remainder73 = 0;\n  let remainder74 = 0;\n  let remainder75 = 0;\n  let remainder76 = 0;\n  let remainder77 = 0;\n  let remainder78 = 0;\n  let remainder79 = 0;\n  let remainder80 = 0;\n  let remainder81 = 0;\n  let remainder82 = 0;\n  let remainder83 = 0;\n  let remainder84 = 0;\n  let remainder85 = 0;\n  let remainder86 = 0;\n  let remainder87 = 0;\n  let remainder88 = 0;\n  let remainder89 = 0;\n  let remainder90 = 0;\n  let remainder91 = 0;\n  let remainder92 = 0;\n  let remainder93 = 0;\n  let remainder94 = 0;\n  let remainder95 = 0;\n  let remainder96 = 0;\n  let remainder97 = 0;\n  let remainder98 = 0;\n  let remainder99 = 0;\n  let remainder100 = 0;\n  let remainder101 = 0;\n  let remainder102 = 0;\n  let remainder103 = 0;\n  let remainder104 = 0;\n  let remainder105 = 0;\n  let remainder106 = 0;\n  let remainder107 = 0;\n  let remainder108 = 0;\n  let remainder109 = 0;\n  let remainder110 = 0;\n  let remainder111 = 0;\n  let remainder112 = 0;\n  let remainder113 = 0;\n  let remainder114 = 0;\n  let remainder115 = 0;\n  let remainder116 = 0;\n  let remainder117 = 0;\n  let remainder118 = 0;\n  let remainder119 = 0;\n  let remainder120 = 0;\n  let remainder121 = 0;\n  let remainder122 = 0;\n  let remainder123 = 0;\n  let remainder124 = 0;\n  let remainder125 = 0;\n  let remainder126 = 0;\n  let remainder127 = 0;\n  let remainder128 = 0;\n  let remainder129 = 0;\n  let remainder130 = 0;\n  let remainder131 = 0;\n  let remainder132 = 0;\n  let remainder133 = 0;\n  let remainder134 = 0;\n  let remainder135 = 0;\n  let remainder136 = 0;\n  let remainder137 = 0;\n  let remainder138 = 0;\n  let remainder139 = 0;\n  let remainder140 = 0;\n  let remainder141 = 0;\n  let remainder142 = 0;\n  let remainder143 = 0;\n  let remainder144 = 0;\n  let remainder145 = 0;\n  let remainder146 = 0;\n  let remainder147 = 0;\n  let remainder148 = 0;\n  let remainder149 = 0;\n  let remainder150 = 0;\n  let remainder151 = 0;\n  let remainder152 = 0;\n  let remainder153 = 0;\n  let remainder154 = 0;\n  let remainder155 = 0;\n  let remainder156 = 0;\n  let remainder157 = 0;\n  let remainder158 = 0;\n  let remainder159 = 0;\n  let remainder160 = 0;\n  let remainder161 = 0;\n  let remainder162 = 0;\n  let remainder163 = 0;\n  let remainder164 = 0;\n  let remainder165 = 0;\n  let remainder166 = 0;\n  let remainder167 = 0;\n  let remainder168 = 0;\n  let remainder169 = 0;\n  let remainder170 = 0;\n  let remainder171 = 0;\n  let remainder172 = 0;\n  let remainder173 = 0;\n  let remainder174 = 0;\n  let remainder175 = 0;\n  let remainder176 = 0;\n  let remainder177 = 0;\n  let remainder178 = 0;\n  let remainder179 = 0;\n  let remainder180 = 0;\n  let remainder181 = 0;\n  let remainder182 = 0;\n  let remainder183 = 0;\n  let remainder184 = 0;\n  let remainder185 = 0;\n  let remainder186 = 0;\n  let remainder187 = 0;\n  let remainder188 = 0;\n  let remainder189 = 0;\n  let remainder190 = 0;\n  let remainder191 = 0;\n  let remainder192 = 0;\n  let remainder193 = 0;\n  let remainder194 = 0;\n  let remainder195 = 0;\n  let remainder196 = 0;\n  let remainder197 = 0;\n  let remainder198 = 0;\n  let remainder199 = 0;\n  let remainder200 = 0;\n  let remainder201 = 0;\n  let remainder202 = 0;\n  let remainder203 = 0;\n  let remainder204 = 0;\n  let remainder205 = 0;\n  let remainder206 = 0;\n  let remainder207 = 0;\n  let remainder208 = 0;\n  let remainder209 = 0;\n  let remainder210 = 0;\n  let remainder211 = 0;\n  let remainder212 = 0;\n  let remainder213 = 0;\n  let remainder214 = 0;\n  let remainder215 = 0;\n  let remainder216 = 0;\n  let remainder217 = 0;\n  let remainder218 = 0;\n  let remainder219 = 0;\n  let remainder220 = 0;\n  let remainder221 = 0;\n  let remainder222 = 0;\n  let remainder223 = 0;\n  let remainder224 = 0;\n  let remainder225 = 0;\n  let remainder226 = 0;\n  let remainder227 = 0;\n  let remainder228 = 0;\n  let remainder229 = 0;\n  let remainder230 = 0;\n  let remainder231 = 0;\n  let remainder232 = 0;\n  let remainder233 = 0;\n  let remainder234 = 0;\n  let remainder235 = 0;\n  let remainder236 = 0;\n  let remainder237 = 0;\n  let remainder238 = 0;\n  let remainder239 = 0;\n  let remainder240 = 0;\n  let remainder241 = 0;\n  let remainder242 = 0;\n  let remainder243 = 0;\n  let "}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return [...even,...odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sorhOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sorhEvenOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sorhEvenOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sorhOddEven([5, 6, 3, 4])\n  [4, 3, 5, 6]\n  */\nconst sorhOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEvenOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sorhEvenOddEven([5, 6, 3, 4])\n  [4, 3, 5, 6]\n  */\nconst sorhEvenOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOddEvenOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sorhOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 5, 6]\n  */\nconst sorhOddEvenOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhEvenOddOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sorhEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 5, 6]\n  */\nconst sorhEvenOddOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOddEvenOddOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sorhOddEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 5, 6]\n  */\nconst sorhEvenOddOddEvenOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhEvenOddOddOddEvenOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sorhEvenOddOddOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 5, 6]\n  */\nconst sorhEvenOddOddOddEvenOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOddEvenOddOddEvenOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sorhOddEvenOddOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 5, 6]\n  */\nconst sorhEvenOddOddOddEvenOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return [...odd,...even];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhEvenOddOddOddEvenOddOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sorhEvenOddOddOddEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 5, 6]\n  */\nconst sorhEvenOddOddOddEvenOddOddEven = ("}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group.slice(0, 1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2] + group[3]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1) + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2] + group[3] + group[4]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group.slice(0, 1) + group.slice(2) + group.slice(3));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2] + group[3] + group[4] + group[5]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group.slice(0, 1) + group.slice(2) + group.slice(3) + group.slice(4));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2] + group[3] + group[4] + group[5] + group[6]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group.slice(0, 1) + group.slice(2) + group.slice(3) + group.slice(4) + group.slice(5) + group.slice(6));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2] + group[3] + group[4] + group[5] + group[6] + group[7]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\n"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "<|endoftext|>/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n  if (n <= 1) return 1;\n  if (n <= 2) return 2;\n  if (n <= 3) return 3;\n  if (n <= 5) return 5;\n  if (n <= 8) return 8;\n  if (n <= 14) return 14;\n  if (n <= 19) return 19;\n  if (n <= 29) return 29;\n  if (n <= 49) return 49;\n  if (n <= 99) return 99;\n  if (n <= 149) return 149;\n  if (n <= 199) return 199;\n  if (n <= 299) return 299;\n  if (n <= 399) return 399;\n  if (n <= 699) return 699;\n  if (n <= 1099) return 1099;\n  if (n <= 14999) return 14999;\n  if (n <= 19999) return 19999;\n  if (n <= 299999) return 299999;\n  if (n <= 399999) return 399999;\n  if (n <= 699999) return 699999;\n  if (n <= 1099999) return 1099999;\n  if (n <= 1499999) return 1499999;\n  if (n <= 1999999) return 1999999;\n  if (n <= 2999999) return 2999999;\n  if (n <= 3999999) return 3999999;\n  if (n <= 6999999) return 6999999;\n  if (n <= 10999990) return 10999990;\n  if (n <= 14999990) return 14999990;\n  if (n <= 19999990) return 19999990;\n  if (n <= 29999990) return 29999990;\n  if (n <= 39999990) return 39999990;\n  if (n <= 69999990) return 69999990;\n  if (n <= 109999900) return 109999900;\n  if (n <= 149999900) return 149999900;\n  if (n <= 199999900) return 199999900;\n  if (n <= 299999900) return 299999900;\n  if (n <= 399999900) return 399999900;\n  if (n <= 699999900) return 699999900;\n  if (n <= 1099999000) return 1099999000;\n  if (n <= 1499999000) return 1499999000;\n  if (n <= 1999999000) return 1999999000;\n  if (n <= 2999999000) return 2999999000;\n  if (n <= 3999999000) return 3999999000;\n  if (n <= 6999999000) return 6999999000;\n  if (n <= 10999990000) return 10999990000;\n  if (n <= 14999990000) return 14999990000;\n  if (n <= 19999990000) return 19999990000;\n  if (n <= 29999990000) return 29999990000;\n  if (n <= 39999990000) return 39999990000;\n  if (n <= 69999990000) return 69999990000;\n  if (n <= 1099999000000) return 1099999000000; // 1099999000000\n  if (n <= 1499999000000) return 1499999000000; // 1499999000000\n  if (n <= 1999999000000) return 1999999000000; // 1999999000000\n  if (n <= 2999999000000) return 2999999000000; // 2999999000000\n  if (n <= 3999999000000) return 3999999000000; // 3999999000000\n  if (n <= 6999999000000) return 6999999000000; // 6999999000000\n  if (n <= 10999990000000) return 10999990000000; // 10999990000000\n  if (n <= 14999990000000) return 14999990000000; // 14999990000000\n  if (n <= 19999990000000) return 19999990000000; // 19999990000000\n  if (n <= 29999990000000) return 29999990000000; // 29999990000000\n  if (n <= 39999990000000) return 39999990000000; // 39999990000000\n  if (n <= 69999990000000) return 69999990000000; // 69999990000000\n  if (n <= 109999900000000) return 109999900000000; // 109999900000000\n  if (n <= 149999900000000) return 149999900000000; // 149999900000000\n  if (n <= 199999900000000) return 199999900000000; // 199999900000000\n  if (n <= 299999900000000) return 299999900000000; // 299999900000000\n  if (n <= 399999900000000) return 399999900000000; // 399999900000000\n  if (n <= 699999900000000) return 699999900000000; // 699999900000000\n  if (n <= 1099999000000000) return 1099999000000000; // 1099999000000000\n  if (n <= 1499999000000000) return 1499999000000000; // 1499999000000000\n  if (n <= 1999999000000000) return 1999999000000000; // 1999999000000000\n  if (n <= 2999999000000000) return 2999999000000000; // 2999999000000000\n  if (n <= 3999999000000000) return 3999999000000000; // 3999999000000000\n  if (n <= 6999999000000000) return 6999999000000000; // 6999999000000000\n  if (n <= 10999990000000000) return 10999990000000000; // 10999990000000000\n  if (n <= 14999990000000000) return 14999990000000000; // 14999990000000000\n  if (n <= 19999990000000000) return 19999990000000000; // 19999990000000000\n  if (n <= 29999990000000000) return 29999990000000000; // 29999990000000000\n  if (n <= 39999990000000000) return 39999990000000000; // 39999990000000000\n  if (n <= 69999990000000000) return 69999990000000000; // 69999990000000000\n  if (n <= 109999900000000000) return 109999900000000000; // 109999900000000000\n  if (n <= 149999900000000000) return 149999900000000000; // 149999900000000000\n  if (n <= 199999900000000000) return 199999900000000000; // 199999900000000000\n  if (n <= 299999900000000000) return 299999900000000000; // 299999900000000000\n  if (n <= 399999900000000000) return 399999900000000000; // 399999900000000000\n  if (n <= 699999900000000000) return 699999900000000000; // 699999900000000000\n  if (n <= 1099999000000000000) return 1099999000000000000; // 1099999000000000000\n  if (n <= 1499999000000000000) return 1499999000000000000; // 1499999000000000000\n  if (n <= 1999999000000000000) return 1999999000000000000; // 1999999000000000000\n  if (n <= 2999999000000000000) return 2999999000000000000; // 2999999000000000000\n  if (n <= 3999999000000000000) return 3999999000000000000; // 3999999000000000000\n  if (n <= 6999999000000000000) return 6999999000000000000; // 6999999000000000000\n  if (n <= 10999990000000000000) return 10999990000000000000; // 10999990000000000000\n  if (n <= 14999990000000000000) return 14999990000000000000; // 14999990000000000000\n  if (n <= 19999990000000000000) return 19999990000000000000; // 19999990000000000000\n  if (n <= 29999990000000000000) return 29999990000000000000; // 29999990000000000000\n  if (n <= 39999990000000000000) return 39999990000000000000; // 39999990000000000000\n  if (n <= 69999990000000000000) return 69999990000000000000; // 69999990000000000000\n  if (n <= 109999900000000000000) return 109999900000000000000; // 109999900000000000000\n  if (n <= 149999900000000000000) return 149999900000000000000; // 149999900000000000000\n  if (n <= 199999900000000000000) return 199999900000000000000; // 199999900000000000000\n  if (n <= 299999900000000000000) return 299999900000000000000; // 299999900000000000000\n  if (n <= 399999900000000000000) return 399999900000000000000; // 399999900000000000000\n  if ("}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "<|endoftext|>/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesMultiplyToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  multiply by zero, and false otherwise.\n\n  >>> triolesMultiplyToZero([1, 3, 5, 0])\n  false\n  >>> triolesMultiplyToZero([1, 3, -2, 1])\n  true\n  >>> triolesMultiplyToZero([1, 2, 3, 7])\n  false\n  >>> triolesMultiplyToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesMultiplyToZero([1])\n  false\n  */\nconst triolesMultiplyToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesDivideToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  divide by zero, and false otherwise.\n\n  >>> triolesDivideToZero([1, 3, 5, 0])\n  false\n  >>> triolesDivideToZero([1, 3, -2, 1])\n  true\n  >>> triolesDivideToZero([1, 2, 3, 7])\n  false\n  >>> triolesDivideToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesDivideToZero([1])\n  false\n  */\nconst triolesDivideToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] / l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesMultiplyToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  multiply by one, and false otherwise.\n\n  >>> triolesMultiplyToOne([1, 3, 5, 0])\n  false\n  >>> triolesMultiplyToOne([1, 3, -2, 1])\n  true\n  >>> triolesMultiplyToOne([1, 2, 3, 7])\n  false\n  >>> triolesMultiplyToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesMultiplyToOne([1])\n  false\n  */\nconst triolesMultiplyToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n    if (sum === 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesDivideToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  divide by one, and false otherwise.\n\n  >>> triolesDivideToOne([1, 3, 5, 0])\n  false\n  >>> triolesDivideToOne([1, 3, -2, 1])\n  true\n  >>> triolesDivideToOne([1, 2, 3, 7])\n  false\n  >>> triolesDivideToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesDivideToOne([1])\n  false\n  */\nconst triolesDivideToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] / l[i];\n    if (sum === 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesSumToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to one, and false otherwise.\n\n  >>> triolesSumToOne([1, 3, 5, 0])\n  false\n  >>> triolesSumToOne([1, 3, -2, 1])\n  true\n  >>> triolesSumToOne([1, 2, 3, 7])\n  false\n  >>> triolesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToOne([1])\n  false\n  */\nconst triolesSumToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesMultiplyToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  multiply by one, and false otherwise.\n\n  >>> triolesMultiplyToOne([1, 3, 5, 0])\n  false\n  >>> triolesMultiplyToOne([1, 3, -2, 1])\n  true\n  >>> triolesMultiplyToOne([1, 2, 3, 7])\n  false\n  >>> triolesMultiplyToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesMultiplyToOne([1])\n  false\n  */\nconst triolesMultiplyToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n    if (sum === 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesDivideToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  divide by one, and false otherwise.\n\n  >>> triolesDivideToOne([1, 3, 5, 0])\n  false\n  >>> triolesDivideToOne([1, 3, -2, 1])\n  true\n  >>> triolesDivideToOne([1, 2, 3, 7])\n  false\n  >>> triolesDivideToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesDivideToOne([1])\n  false\n  */\nconst triolesDivideToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] / l[i];\n    if (sum === 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesSumToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to one, and false otherwise.\n\n  >>> triolesSumToOne([1, 3, 5, 0])\n  false\n  >>> triolesSumToOne([1, 3, -2, 1])\n  true\n  >>> triolesSumToOne([1, 2, 3, 7])\n  false\n  >>> triolesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToOne([1])\n  false\n  */\nconst triolesSumToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triolesMultiplyToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  multiply by one, and false otherwise.\n\n"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    if (cars[i].isMovingLeft) {\n      if (cars[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGaceCollisions = (carNetwork) => {\n  let collisions = 0;\n  for (let i = 0; i < carNetwork.length; i++) {\n    if (carNetwork[i].isMovingLeft) {\n      if (carNetwork[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions > 0;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGaceCollisionsAll = (carNetwork) => {\n  let collisions = 0;\n  for (let i = 0; i < carNetwork.length; i++) {\n    if (carNetwork[i].isMovingLeft) {\n      if (carNetwork[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions > 0;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGaceCollisionsAllWithCars = (carNetwork) => {\n  let collisions = 0;\n  for (let i = 0; i < carNetwork.length; i++) {\n    if (carNetwork[i].isMovingLeft) {\n      if (carNetwork[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions > 0;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGaceCollisionsAllWithCarsAndCars = (carNetwork) => {\n  let collisions = 0;\n  for (let i = 0; i < carNetwork.length; i++) {\n    if (carNetwork[i].isMovingLeft) {\n      if (carNetwork[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions > 0;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGaceCollisionsAllWithCarsAndCarsAndCars = (carNetwork) => {\n  let collisions = 0;\n  for (let i = 0; i < carNetwork.length; i++) {\n    if (carNetwork[i].isMovingLeft) {\n      if (carNetwork[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions > 0;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGaceCollisionsAllWithCarsAndCarsAndCarsAndCars = (carNetwork) => {\n  let collisions = 0;\n  for (let i = 0; i < carNetwork.length; i++) {\n    if (carNetwork[i].isMovingLeft) {\n      if (carNetwork[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions > 0;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGaceCollisionsAllWithCarsAndCarsAndCarsAndCarsAndCars = (carNetwork) => {\n  let collisions = 0;\n  for (let i = 0; i < carNetwork.length; i++) {\n    if (carNetwork[i].isMovingLeft) {\n      if (carNetwork[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions > 0;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGaceCollisionsAllWithCarsAndCarsAndCarsAndCarsAndCars = (carNetwork) => {\n  let collisions = 0;\n  for (let i = 0; i < carNetwork.length; i++) {\n    if (carNetwork[i].isMovingLeft) {\n      if (carNetwork[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions > 0;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGaceCollisionsAllWithCarsAndCarsAndCarsAndCarsAndCarsAndCars = (carNetwork) => {\n  let collisions = 0;\n  for (let i = 0; i < carNetwork.length; i++) {\n    if (carNetwork[i].isMovingLeft) {\n      if (carNetwork[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions > 0;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGaceCollisionsAllWithCarsAndCarsAndCarsAndCarsAndCarsAndCars = (carNetwork) => {\n  let collisions = 0;\n  for (let i = 0; i < carNetwork.length; i++) {\n    if (carNetwork[i].isMovingLeft) {\n      if (carNetwork[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions > 0;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGaceCollisionsAllWithCarsAndCarsAndCarsAndCarsAndCarsAndCars = (carNetwork) => {\n  let collisions = 0;\n  for (let i = 0; i < carNetwork.length; i++) {\n    if (carNetwork[i].isMovingLeft) {\n      if (carNetwork[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions > 0;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGaceCollisionsAllWithCarsAndCarsAndCarsAndCarsAndCarsAndCars = (carNetwork) => {\n  let collisions = 0;\n  for (let i = 0; i < carNetwork.length; i++) {\n    if (carNetwork[i].isMovingLeft) {\n      if (carNetwork[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions > 0;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGaceCollisionsAllWithCarsAndCarsAndCarsAndCarsAndCarsAndCars = (carNetwork) => {\n  let collisions = 0;\n  for (let i = 0; i < carNetwork.length; i++) {\n    if (carNetwork[i].isMovingLeft) {\n      if (carNetwork[i].isMovingRight) {\n        collisions++;\n      }\n    }\n  }\n  return collisions > 0;\n};\n\n/*\n  Given a road network, determine if any cars are colliding with each other.\n  Return true if any cars are colliding.\n  */\nconst carGa"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\n/*\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, "}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "<|endoftext|>/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    if (l[i] === 1) sum += 1;\n    count++;\n  }\n  return count === 2;\n};\n\n/*\n  paigsProdToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  product to zero, and false otherwise.\n  >>> paigsProdToZero([1, 3, 5, 0])\n  false\n  >>> paigsProdToZero([1, 3, -2, 1])\n  false\n  >>> paigsProdToZero([1, 2, 3, 7])\n  false\n  >>> paigsProdToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsProdToZero([1])\n  false\n  */\nconst paigsProdToZero = (l) => {\n  let prod = 1;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    if (l[i] === 1) prod *= 1;\n    count++;\n  }\n  return count === 2;\n};\n\n/*\n  paigsProdToOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  product to one, and false otherwise.\n  >>> paigsProdToOne([1, 3, 5, 0])\n  false\n  >>> paigsProdToOne([1, 3, -2, 1])\n  false\n  >>> paigsProdToOne([1, 2, 3, 7])\n  false\n  >>> paigsProdToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsProdToOne([1])\n  false\n  */\nconst paigsProdToOne = (l) => {\n  let prod = 1;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    if (l[i] === 1) prod *= -1;\n    count++;\n  }\n  return count === 2;\n};\n\n/*\n  paigsProdToTwo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  product to two, and false otherwise.\n  >>> paigsProdToTwo([1, 3, 5, 0])\n  false\n  >>> paigsProdToTwo([1, 3, -2, 1])\n  false\n  >>> paigsProdToTwo([1, 2, 3, 7])\n  false\n  >>> paigsProdToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsProdToTwo([1])\n  false\n  */\nconst paigsProdToTwo = (l) => {\n  let prod = 1;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    if (l[i] === 1) prod *= -1;\n    prod *= l[i];\n    count++;\n  }\n  return count === 2;\n};\n\n/*\n  paigsProdToThree takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  product to three, and false otherwise.\n  >>> paigsProdToThree([1, 3, 5, 0])\n  false\n  >>> paigsProdToThree([1, 3, -2, 1])\n  false\n  >>> paigsProdToThree([1, 2, 3, 7])\n  false\n  >>> paigsProdToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsProdToThree([1])\n  false\n  */\nconst paigsProdToThree = (l) => {\n  let prod = 1;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    if (l[i] === 1) prod *= -1;\n    prod *= l[i];\n    prod *= l[i];\n    count++;\n  }\n  return count === 2;\n};\n\n/*\n  paigsProdToFour takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  product to four, and false otherwise.\n  >>> paigsProdToFour([1, 3, 5, 0])\n  false\n  >>> paigsProdToFour([1, 3, -2, 1])\n  false\n  >>> paigsProdToFour([1, 2, 3, 7])\n  false\n  >>> paigsProdToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsProdToFour([1])\n  false\n  */\nconst paigsProdToFour = (l) => {\n  let prod = 1;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    if (l[i] === 1) prod *= -1;\n    prod *= l[i];\n    prod *= l[i];\n    prod *= l[i];\n    prod *= l[i];\n    count++;\n  }\n  return count === 2;\n};\n\n/*\n  paigsProdToFive takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  product to five, and false otherwise.\n  >>> paigsProdToFive([1, 3, 5, 0])\n  false\n  >>> paigsProdToFive([1, 3, -2, 1])\n  false\n  >>> paigsProdToFive([1, 2, 3, 7])\n  false\n  >>> paigsProdToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsProdToFive([1])\n  false\n  */\nconst paigsProdToFive = (l) => {\n  let prod = 1;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    if (l[i] === 1) prod *= -1;\n    prod *= l[i];\n    prod *= l[i];\n    prod *= l[i];\n    prod *= l[i];\n    prod *= l[i];\n    prod *= l[i];\n    prod *= l[i];\n    prod *= l[i];\n    prod *= l[i];\n    count++;\n  }\n  return count === 2;\n};\n\n/*\n  paigsProdToSix takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  product to six, and false otherwise.\n  >>> paigsProdToSix([1, 3, 5, 0])\n  false\n  >>> paigsProdToSix([1, 3, -2, 1])\n  false\n  >>> paigsProdToSix([1, 2, 3, 7])\n  false\n  >>> paigsProdToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsProdToSix([1])\n  false\n  */\nconst paigsProdToSix = (l) => {\n  let prod = 1;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    if (l[i] === 1) prod *= -1;\n"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  if (base < 10) {\n    return String(parseInt(x, base))\n  }\n  return String(parseInt(x / base, base))\n}\n\n/*\n  Convert string to hexadecimal number.\n  >>> hexToNumber(0xFF)\n  255\n  >>> hexToNumber('FF')\n  255\n  >>> hexToNumber('FF00')\n  255\n  >>> hexToNumber('FF0000')\n  255\n  >>> hexToNumber('FF000000')\n  255\n  >>> hexToNumber('FF00000000')\n  255\n  >>> hexToNumber('FF0000000000')\n  255\n  >>> hexToNumber('FF000000000000')\n  255\n  >>> hexToNumber('FF00000000000000')\n  255\n  >>> hexToNumber('FF000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF00000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000000000')\n  255\n  >>> hexToNumber('FF0000000000000000000000000000000000')\n  255"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 2)\n  6.5\n  */\nconst triwngleArea = (l, w) => {\n  const b = Math.sqrt(l * l + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 1)\n  5.5\n  */\nconst triwngleArea = (l, h) => {\n  const b = Math.sqrt(l * l + h * h);\n  return b * b / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 0)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const b = Math.sqrt(l * l + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(3, 5)\n  12.5\n  */\nconst triwngleArea = (h, w) => {\n  const b = Math.sqrt(h * h + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(3, 4)\n  12.5\n  */\nconst triwngleArea = (h, h) => {\n  const b = Math.sqrt(h * h + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(3, 3)\n  12.5\n  */\nconst triwngleArea = (w, l) => {\n  const b = Math.sqrt(w * w + l * l);\n  return b * b / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(3, 2)\n  12.5\n  */\nconst triwngleArea = (w, l) => {\n  const b = Math.sqrt(w * w + l * l);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(2, 5)\n  15.5\n  */\nconst triwngleArea = (l, h) => {\n  const b = Math.sqrt(l * l + h * h);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(2, 4)\n  15.5\n  */\nconst triwngleArea = (l, h) => {\n  const b = Math.sqrt(l * l + h * h);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(2, 3)\n  15.5\n  */\nconst triwngleArea = (l, h) => {\n  const b = Math.sqrt(l * l + h * h);\n  return b * b / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(2, 2)\n  15.5\n  */\nconst triwngleArea = (l, w) => {\n  const b = Math.sqrt(l * l + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(2, 1)\n  15.5\n  */\nconst triwngleArea = (l, w) => {\n  const b = Math.sqrt(l * l + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(1, 5)\n  25.5\n  */\nconst triwngleArea = (h, w) => {\n  const b = Math.sqrt(h * h + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(1, 4)\n  25.5\n  */\nconst triwngleArea = (h, w) => {\n  const b = Math.sqrt(h * h + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(1, 3)\n  25.5\n  */\nconst triwngleArea = (h, w) => {\n  const b = Math.sqrt(h * h + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(1, 2)\n  25.5\n  */\nconst triwngleArea = (h, w) => {\n  const b = Math.sqrt(h * h + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(1, 1)\n  25.5\n  */\nconst triwngleArea = (h, w) => {\n  const b = Math.sqrt(h * h + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(0, 5)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const b = Math.sqrt(l * l + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(0, 4)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const b = Math.sqrt(l * l + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(0, 3)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const b = Math.sqrt(l * l + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(0, 2)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const b = Math.sqrt(l * l + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(0, 1)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const b = Math.sqrt(l * l + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(0, 0)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const b = Math.sqrt(l * l + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(0, 0)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const b = Math.sqrt(l * l + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(l, h)\n  12.5\n  */\nconst triwngleArea = (h, w) => {\n  const b = Math.sqrt(h * h + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(h, h)\n  12.5\n  */\nconst triwngleArea = (h, h) => {\n  const b = Math.sqrt(h * h + w * w);\n  return b * b / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(w, l)"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fibonacci(8)\n  13\n  >>> fibonacci(9)\n  24\n  >>> fibonacci(10)\n  34\n  >>> fibonacci(11)\n  55\n  >>> fibonacci(12)\n  89\n  >>> fibonacci(13)\n  144\n  >>> fibonacci(14)\n  233\n  >>> fibonacci(15)\n  377\n  >>> fibonacci(16)\n  610\n  >>> fibonacci(17)\n  987\n  >>> fibonacci(18)\n  1597\n  >>> fibonacci(19)\n  2584\n  >>> fibonacci(20)\n  4181\n  >>> fibonacci(21)\n  6765\n  >>> fibonacci(22)\n  10946\n  >>> fibonacci(23)\n  17711\n  >>> fibonacci(24)\n  28657\n  >>> fibonacci(25)\n  46368\n  >>> fibonacci(26)\n  75025\n  >>> fibonacci(27)\n  121393\n  >>> fibonacci(28)\n  196418\n  >>> fibonacci(29)\n  317811\n  >>> fibonacci(30)\n  514229\n  >>> fibonacci(31)\n  832040\n  >>> fibonacci(32)\n  1346269\n  >>> fibonacci(33)\n  2178309\n  >>> fibonacci(34)\n  34359738\n  >>> fibonacci(35)\n  57028860\n  >>> fibonacci(36)\n  92274651\n  >>> fibonacci(37)\n  149303599\n  >>> fibonacci(38)\n  293459465\n  >>> fibonacci(39)\n  429391535\n  >>> fibonacci(40)\n  676510586\n  >>> fibonacci(41)\n  1094636992\n  >>> fibonacci(42)\n  1771146192\n  >>> fibonacci(43)\n  2865741394\n  >>> fibonacci(44)\n  4636821828\n  >>> fibonacci(45)\n  7502509738\n  >>> fibonacci(46)\n  1213938032\n  >>> fibonacci(47)\n  1964186418\n  >>> fibonacci(48)\n  3178117017\n  >>> fibonacci(49)\n  5142290432\n  >>> fibonacci(50)\n  8320410586\n  >>> fibonacci(51)\n  13462697017\n  >>> fibonacci(52)\n  21783090432\n  >>> fibonacci(53)\n  34359738142\n  >>> fibonacci(54)\n  57028860142\n  >>> fibonacci(55)\n  92274651122\n  >>> fibonacci(56)\n  149303599142\n  >>> fibonacci(57)\n  293459465142\n  >>> fibonacci(58)\n  429391535142\n  >>> fibonacci(59)\n  676510586142\n  >>> fibonacci(60)\n  1094636992142\n  >>> fibonacci(61)\n  1771146192142\n  >>> fibonacci(62)\n  2865741394142\n  >>> fibonacci(63)\n  4636821828142\n  >>> fibonacci(64)\n  7502509738142\n  >>> fibonacci(65)\n  1213938032142\n  >>> fibonacci(66)\n  1964186418142\n  >>> fibonacci(67)\n  3178117017142\n  >>> fibonacci(68)\n  5142290432142\n  >>> fibonacci(69)\n  8320410586142\n  >>> fibonacci(70)\n  13462697017142\n  >>> fibonacci(71)\n  21783090432142\n  >>> fibonacci(72)\n  34359738142142\n  >>> fibonacci(73)\n  57028860142142\n  >>> fibonacci(74)\n  92274651122142\n  >>> fibonacci(75)\n  149303599142142\n  >>> fibonacci(76)\n  293459465142142\n  >>> fibonacci(77)\n  429391535142142\n  >>> fibonacci(78)\n  676510586142142\n  >>> fibonacci(79)\n  1094636992142142\n  >>> fibonacci(80)\n  1771146192142142\n  >>> fibonacci(81)\n  2865741394142142\n  >>> fibonacci(82)\n  4636821828142142\n  >>> fibonacci(83)\n  7502509738142142\n  >>> fibonacci(84)\n  1213938032142142\n  >>> fibonacci(85)\n  1964186418142142\n  >>> fibonacci(86)\n  3178117017142142\n  >>> fibonacci(87)\n  5142290432142142\n  >>> fibonacci(88)\n  8320410586142142\n  >>> fibonacci(89)\n  13462697017"}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "<|endoftext|>/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan2 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan2([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan2([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan3 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan3([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan3([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan4 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan4([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan4([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan5 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan5([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan5([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan6 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan6([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan6([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan7 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan7([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan7([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan8 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan8([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan8([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan9 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan9([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan9([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan10 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan10([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan10([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan11 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan11([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan11([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan12 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan12([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan12([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan13 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan13([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan13([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan14 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan14([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan14([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan15 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan15([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan15([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan16 = (l, i) => {\n  let sum = 0;\n  let ans = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    ans++;\n    i++;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan16([3, 1, 2, 4, 5], 0)\n  3\n  >>> medlan16([-10, 4, 6, 1000, 10, 20], 0)\n  8.0\n  */\nconst medlan17 = (l, i) => {"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const text = text.toLowerCase();\n  const len = text.length;\n  const half = Math.floor(len / 2);\n  const halfLen = len - half;\n  let halfPalindrome = true;\n  let halfPalindromeLen = 0;\n  let halfPalindromeText = '';\n  let halfPalindromeTextLen = 0;\n  let halfPalindromeTextReversed = '';\n  let halfPalindromeTextReversedLen = 0;\n  let halfPalindromeTextReversedReversed = '';\n  let halfPalindromeTextReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLen = 0;\n  let halfPalindromeTextReversedReversedReversedReversedReversed"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n  const m = n | 0\n  const d = p | 0\n  const r = (m & d)? m : ((m | 0) - ((m & d)? d : 0))\n  const t = ((r & 1)? r : ((r | 0) - ((r & 1)? d : 0))) | 0\n  return ((t & 1)? t : ((t | 0) - ((t & 1)? d : 0))) | 0\n}\n\n/*\n  >>> modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(mo"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet."}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "<|endoftext|>/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsLength = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsIndex2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsIndex103 = 0;\n  let vowelsIndex104 = 0;\n  let vowelsIndex105 = 0;\n  let vowelsIndex106 = 0;\n  let vowelsIndex107 = 0;\n  let vowelsIndex108 = 0;\n  let vowelsIndex109 = 0;\n  let vowelsIndex110 = 0;\n  let vowelsIndex111 = 0;\n  let vowelsIndex112 = 0;\n  let vowelsIndex113 = 0;\n  let vowelsIndex114 = 0;\n  let vowelsIndex115 = 0;\n  let vowelsIndex116 = 0;\n  let vowelsIndex117 = 0;\n  let vowelsIndex118 = 0;\n  let vowelsIndex119 = 0;\n  let vowelsIndex120 = 0;\n  let vowelsIndex121 = 0;\n  let vowelsIndex122 = 0;\n  let vowelsIndex123 = 0;\n  let vowelsIndex124 = 0;\n  let vowelsIndex125 = 0;\n  let vowelsIndex126 = 0;\n  let vowelsIndex127 = 0;\n  let vowelsIndex128 = 0;\n  let vowelsIndex129 = 0;\n  let vowelsIndex130 = 0;\n  let vowelsIndex131 = 0;\n  let vowelsIndex132 = 0;\n  let vowelsIndex133 = 0;\n  let vowelsIndex134 = 0;\n  let vowelsIndex135 = 0;\n  let vowelsIndex136 = 0;\n  let vowelsIndex137 = 0;\n  let vowelsIndex138 = 0;\n  let vowelsIndex139 = 0;\n  let vowelsIndex140 = 0;\n  let vowelsIndex141 = 0;\n  let vowelsIndex142 = 0;\n  let vowelsIndex143 = 0;\n  let vowelsIndex144 = 0;\n  let vowelsIndex145 = 0;\n  let vowelsIndex146 = 0;\n  let vowelsIndex147 = 0;\n  let vowelsIndex148 = 0;\n  let vowelsIndex149 = 0;\n  let vowelsIndex150 = 0;\n  let vowelsIndex151 = 0;\n  let vowelsIndex152 = 0;\n  let vowelsIndex153 = 0;\n  let vowelsIndex154 = 0;\n  let vowelsIndex155 = 0;\n  let vowelsIndex156 = 0;\n  let vowelsIndex157 = 0;\n  let vowelsIndex158 = 0;\n  let vowelsIndex159 = 0;\n  let vowelsIndex160 = 0;\n  let vowelsIndex161 = 0;\n  let vowelsIndex162 = 0;\n  let vowelsIndex163 = 0;\n  let vowelsIndex164 = 0;\n  let vowelsIndex165 = 0;\n  let vowelsIndex166 = 0;\n  let vowelsIndex167 = 0;\n  let vowelsIndex168 = 0;\n  let vowelsIndex169 = 0;\n  let vowelsIndex170 = 0;\n  let vowelsIndex171 = 0;\n  let vowelsIndex172 = 0;\n  let vowelsIndex173 = 0;\n  let vowelsIndex174 = 0;\n  let vowelsIndex175 = 0;\n  let vowelsIndex176 = 0;\n  let vowelsIndex177 = 0;\n  let vowelsIndex178 = 0;\n  let vowelsIndex179 = 0;\n  let vowelsIndex180 = 0;\n  let vowelsIndex181 = 0;\n  let vowelsIndex182 = 0;\n  let vowelsIndex183 = 0;\n  let vowelsIndex184 = 0;\n  let vowelsIndex185 = 0;\n  let vowelsIndex186 = 0;\n  let vowelsIndex187 = 0;\n  let vowelsIndex188 = 0;\n  let vowelsIndex189 = 0;\n  let vowelsIndex190 = 0;\n  let vowelsIndex191 = 0;\n  let vowelsIndex192 = 0;\n  let vowelsIndex193 = 0;\n  let vowelsIndex194 = 0;\n  let vowelsIndex195 = 0;\n  let vowelsIndex196 = 0;\n  let vowelsIndex197 = 0;\n  let "}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  let n = l.length;\n  let sum = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let t;\n  let sum2;\n  let sum3;\n  let sum4;\n  let sum5;\n  let sum6;\n  let sum7;\n  let sum8;\n  let sum9;\n  let sum10;\n  let sum11;\n  let sum12;\n  let sum13;\n  let sum14;\n  let sum15;\n  let sum16;\n  let sum17;\n  let sum18;\n  let sum19;\n  let sum20;\n  let sum21;\n  let sum22;\n  let sum23;\n  let sum24;\n  let sum25;\n  let sum26;\n  let sum27;\n  let sum28;\n  let sum29;\n  let sum30;\n  let sum31;\n  let sum32;\n  let sum33;\n  let sum34;\n  let sum35;\n  let sum36;\n  let sum37;\n  let sum38;\n  let sum39;\n  let sum40;\n  let sum41;\n  let sum42;\n  let sum43;\n  let sum44;\n  let sum45;\n  let sum46;\n  let sum47;\n  let sum48;\n  let sum49;\n  let sum50;\n  let sum51;\n  let sum52;\n  let sum53;\n  let sum54;\n  let sum55;\n  let sum56;\n  let sum57;\n  let sum58;\n  let sum59;\n  let sum60;\n  let sum61;\n  let sum62;\n  let sum63;\n  let sum64;\n  let sum65;\n  let sum66;\n  let sum67;\n  let sum68;\n  let sum69;\n  let sum70;\n  let sum71;\n  let sum72;\n  let sum73;\n  let sum74;\n  let sum75;\n  let sum76;\n  let sum77;\n  let sum78;\n  let sum79;\n  let sum80;\n  let sum81;\n  let sum82;\n  let sum83;\n  let sum84;\n  let sum85;\n  let sum86;\n  let sum87;\n  let sum88;\n  let sum89;\n  let sum90;\n  let sum91;\n  let sum92;\n  let sum93;\n  let sum94;\n  let sum95;\n  let sum96;\n  let sum97;\n  let sum98;\n  let sum99;\n  let sum100;\n  let sum101;\n  let sum102;\n  let sum103;\n  let sum104;\n  let sum105;\n  let sum106;\n  let sum107;\n  let sum108;\n  let sum109;\n  let sum110;\n  let sum111;\n  let sum112;\n  let sum113;\n  let sum114;\n  let sum115;\n  let sum116;\n  let sum117;\n  let sum118;\n  let sum119;\n  let sum120;\n  let sum121;\n  let sum122;\n  let sum123;\n  let sum124;\n  let sum125;\n  let sum126;\n  let sum127;\n  let sum128;\n  let sum129;\n  let sum130;\n  let sum131;\n  let sum132;\n  let sum133;\n  let sum134;\n  let sum135;\n  let sum136;\n  let sum137;\n  let sum138;\n  let sum139;\n  let sum140;\n  let sum141;\n  let sum142;\n  let sum143;\n  let sum144;\n  let sum145;\n  let sum146;\n  let sum147;\n  let sum148;\n  let sum149;\n  let sum150;\n  let sum151;\n  let sum152;\n  let sum153;\n  let sum154;\n  let sum155;\n  let sum156;\n  let sum157;\n  let sum158;\n  let sum159;\n  let sum160;\n  let sum161;\n  let sum162;\n  let sum163;\n  let sum164;\n  let sum165;\n  let sum166;\n  let sum167;\n  let sum168;\n  let sum169;\n  let sum170;\n  let sum171;\n  let sum172;\n  let sum173;\n  let sum174;\n  let sum175;\n  let sum176;\n  let sum177;\n  let sum178;\n  let sum179;\n  let sum180;\n  let sum181;\n  let sum182;\n  let sum183;\n  let sum184;\n  let sum185;\n  let sum186;\n  let sum187;\n  let sum188;\n  let sum189;\n  let sum190;\n  let sum191;\n  let sum192;\n  let sum193;\n  let sum194;\n  let sum195;\n  let sum196;\n  let sum197;\n  let sum198;\n  let sum199;\n  let sum200;\n  let sum201;\n  let sum202;\n  let sum203;\n  let sum204;\n  let sum205;\n  let sum206;\n  let sum207;\n  let sum208;\n  let sum209;\n  let sum210;\n  let sum211;\n  let sum212;\n  let sum213;\n  let sum214;\n  let sum215;\n  let sum216;\n  let sum217;\n  let sum218;\n  let sum219;\n  let sum220;\n  let sum221;\n  let sum222;\n  let sum223;\n  let sum224;\n  let sum225;\n  let sum226;\n  let sum227;\n  let sum228;\n  let sum229;\n  let sum230;\n  let sum231;\n  let sum232;\n  let sum233;\n  let sum234;\n  let sum235;\n  let sum236;\n  let sum237;\n  let sum238;\n  let sum239;\n  let sum240;\n  let sum241;\n  let sum242;\n  let sum243;\n  let sum244;\n  let sum245;\n  let sum246;\n  let sum247;\n  let sum248;\n  let sum249;\n  let sum250;\n  let sum251;\n  let sum252;\n  let sum253;\n  let sum254;\n  let sum255;\n  let sum256;\n  let sum257;\n  let sum258;\n  let sum259;\n  let sum260;\n  let sum261;\n  let sum262;\n  let sum263;\n  let sum264;\n  let sum265;\n  let sum266;\n  let sum267;\n  let sum268;\n  let sum269;\n  let sum270;\n  let sum271;\n  let sum272;\n  let sum273;\n  let sum274;\n  let sum275;\n  let sum276;\n  let sum277;\n  let sum278;\n  let sum279;\n  let sum280;\n  let sum281;\n  let sum282;\n  let sum283;\n  let sum284;\n  let sum285;\n  let sum286;\n  let sum287;\n  let sum288;\n  let sum289;\n  let sum290;\n  let sum291;\n  let sum292;\n  let sum293;\n  let sum294;\n  let sum295;\n  let sum"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  3\n  >>> subtract(5, 7)\n  -1\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  0.5\n  >>> divide(5, 7)\n  1.5\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  0\n  */\nconst compare = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compare(2, 3)\n  -1\n  >>> compare(5, 7)\n  1\n  */\nconst compareTo = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compareTo(2, 3)\n  1\n  >>> compareTo(2, 5)\n  -1\n  */\nconst compareToOrEqual = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compareToOrEqual(2, 3)\n  -1\n  >>> compareToOrEqual(2, 5)\n  1\n  */\nconst compareToOrEqualTo = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compareToOrEqualTo(2, 3)\n  1\n  >>> compareToOrEqualTo(2, 5)\n  -1\n  */\nconst compareToOrEqualToOrEqual = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compareToOrEqualToOrEqual(2, 3)\n  -1\n  >>> compareToOrEqualToOrEqual(2, 5)\n  1\n  */\nconst compareToOrEqualToOrEqualTo = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualTo(2, 3)\n  1\n  >>> compareToOrEqualToOrEqualTo(2, 5)\n  -1\n  */\nconst compareToOrEqualToOrEqualToOrEqual = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualToOrEqual(2, 3)\n  -1\n  >>> compareToOrEqualToOrEqualToOrEqual(2, 5)\n  1\n  */\nconst compareToOrEqualToOrEqualToOrEqualTo = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqual(2, 3)\n  1\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqual(2, 5)\n  -1\n  */\nconst compareToOrEqualToOrEqualToOrEqualToOrEqual = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqual(2, 3)\n  -1\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqual(2, 5)\n  1\n  */\nconst compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqual = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqual(2, 3)\n  1\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqual(2, 5)\n  -1\n  */\nconst compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqual = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqual = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqual = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualTo"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  55\n  >>> fib(5)\n  21\n  >>> fib(4)\n  13\n  >>> fib(3)\n  21\n  >>> fib(2)\n  55\n  >>> fib(1) \n  1\n  >>> fib(0)\n  1\n  >>> fib(-1)\n  -1\n  >>> fib(-2)\n  -1\n  >>> fib(-3)\n  -1\n  >>> fib(-4)\n  -1\n  >>> fib(-5)\n  -1\n  >>> fib(-6)\n  -1\n  >>> fib(-7)\n  -1\n  >>> fib(-8)\n  -1\n  >>> fib(-9)\n  -1\n  >>> fib(-10)\n  -1\n  >>> fib(-11)\n  -1\n  >>> fib(-12)\n  -1\n  >>> fib(-13)\n  -1\n  >>> fib(-14)\n  -1\n  >>> fib(-15)\n  -1\n  >>> fib(-16)\n  -1\n  >>> fib(-17)\n  -1\n  >>> fib(-18)\n  -1\n  >>> fib(-19)\n  -1\n  >>> fib(-20)\n  -1\n  >>> fib(-21)\n  -1\n  >>> fib(-22)\n  -1\n  >>> fib(-23)\n  -1\n  >>> fib(-24)\n  -1\n  >>> fib(-25)\n  -1\n  >>> fib(-26)\n  -1\n  >>> fib(-27)\n  -1\n  >>> fib(-28)\n  -1\n  >>> fib(-29)\n  -1\n  >>> fib(-30)\n  -1\n  >>> fib(-31)\n  -1\n  >>> fib(-32)\n  -1\n  >>> fib(-33)\n  -1\n  >>> fib(-34)\n  -1\n  >>> fib(-35)\n  -1\n  >>> fib(-36)\n  -1\n  >>> fib(-37)\n  -1\n  >>> fib(-38)\n  -1\n  >>> fib(-39)\n  -1\n  >>> fib(-40)\n  -1\n  >>> fib(-41)\n  -1\n  >>> fib(-42)\n  -1\n  >>> fib(-43)\n  -1\n  >>> fib(-44)\n  -1\n  >>> fib(-45)\n  -1\n  >>> fib(-46)\n  -1\n  >>> fib(-47)\n  -1\n  >>> fib(-48)\n  -1\n  >>> fib(-49)\n  -1\n  >>> fib(-50)\n  -1\n  >>> fib(-51)\n  -1\n  >>> fib(-52)\n  -1\n  >>> fib(-53)\n  -1\n  >>> fib(-54)\n  -1\n  >>> fib(-55)\n  -1\n  >>> fib(-56)\n  -1\n  >>> fib(-57)\n  -1\n  >>> fib(-58)\n  -1\n  >>> fib(-59)\n  -1\n  >>> fib(-60)\n  -1\n  >>> fib(-61)\n  -1\n  >>> fib(-62)\n  -1\n  >>> fib(-63)\n  -1\n  >>> fib(-64)\n  -1\n  >>> fib(-65)\n  -1\n  >>> fib(-66)\n  -1\n  >>> fib(-67)\n  -1\n  >>> fib(-68)\n  -1\n  >>> fib(-69)\n  -1\n  >>> fib(-70)\n  -1\n  >>> fib(-71)\n  -1\n  >>> fib(-72)\n  -1\n  >>> fib(-73)\n  -1\n  >>> fib(-74)\n  -1\n  >>> fib(-75)\n  -1\n  >>> fib(-76)\n  -1\n  >>> fib(-77)\n  -1\n  >>> fib(-78)\n  -1\n  >>> fib(-79)\n  -1\n  >>> fib(-80)\n  -1\n  >>> fib(-81)\n  -1\n  >>> fib(-82)\n  -1\n  >>> fib(-83)\n  -1\n  >>> fib(-84)\n  -1\n  >>> fib(-85)\n  -1\n  >>> fib(-86)\n  -1\n  >>> fib(-87)\n  -1\n  >>> fib(-88)\n  -1\n  >>> fib(-89)\n  -1\n  >>> fib(-90)\n  -1\n  >>> fib(-91)\n  -1\n  >>> fib(-92)\n  -1\n  >>> fib(-93)\n  -1\n  >>> fib(-94)\n  -1\n  >>> fib(-95)\n  -1\n  >>> fib(-96)\n  -1\n  >>> fib(-97)\n  -1\n  >>> fib(-98)\n  -1\n  >>> fib(-99)\n  -1\n  >>> fib(-100)\n  -1\n  >>> fib(-101)\n  -1\n  >>> fib(-102)\n  -1\n  >>> fib(-103)\n  -1\n  >>> fib(-104)\n  -1\n  >>> fib(-105)\n  -1\n  >>> fib(-106)\n  -1\n  >>> fib(-107)\n  -1\n  >>> fib(-108)\n  -1\n  >>> fib(-109)\n  -1\n  >>> fib(-110)\n  -1\n  >>> fib(-111)\n  -1\n  >>> fib(-112)\n  -1\n  >>> fib(-113)\n  -1\n  >>> fib(-114)\n  -1\n  >>> fib(-115)\n  -1\n  >>> fib(-116)\n  -1\n  >>> fib(-117)\n  -1\n  >>> fib(-118)\n  -1\n  >>> fib(-119)\n  -1\n  >>> fib(-120)\n  -1\n  >>> fib(-121)\n  -1\n  >>> fib(-122)\n  -1\n  >>> fib(-123)\n  -1\n  >>> fib(-124)\n  -1\n  >>> fib(-125)\n  -1\n  >>> fib(-126)\n  -1\n  >>> fib(-127)\n  -1\n  >>> fib(-128)\n  -1\n  >>> fib(-129)\n  -1\n  >>> fib(-130)\n  -1\n  >>> fib(-131)\n  -1\n  >>> fib(-132)\n  -1\n  >>> fib(-133)\n  -1\n  >>> fib(-134)\n  -1\n  >>> fib(-135)\n  -1\n  >>> fib(-136)\n  -1\n  >>> fib(-137)\n  -1\n  >>> fib(-138)\n  -1\n  >>> fib(-139)\n  -1\n  >>> fib(-140)\n  -1\n  >>> fib(-141)\n  -1\n  >>> fib(-142)\n  -1\n"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\");\n  const closingBrackets = brackets.split(\"<\");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  if (openingBracketsCount!== closingBracketsCount) {\n    return false;\n  }\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A function that takes an array of strings and returns true if any of them is a valid CSS selector\n * and false otherwise.\n *\n * Valid selectors are CSS selectors starting with '.' and ending with '#', and CSS selectors\n * starting with '#' and ending with '.'.\n *\n * Valid selectors are case-insensitive.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * Valid selectors are case-insensitive and do not contain any spaces.\n *\n * "}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "<|endoftext|>/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "<|endoftext|>/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = Math.min(l1.length, l2.length);\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n      k++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], [3, 2])\n  [3, 2, 5]\n  >>> comlon_sort([5, 3, 2, 8], ["}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a prime number.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n  false\n  >>> isPrime(238)\n  false\n  >>> isPrime(239)\n  false\n  >>> isPrime(240)\n  false\n  >>> isPrime(241)\n  false\n  >>> isPrime(242)\n  false\n"}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "<|endoftext|>/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It also returns the number of times each number appears.\n * It returns 0 if the number is less than 1.\n * It returns -1 if the number is greater than n.\n * It returns undefined if the number is undefined.\n * It returns NaN if the number is NaN.\n * It returns Infinity if the number is infinite.\n */\nconst sumHoNAndCount = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    count++;\n  }\n  return { sum, count };\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It also returns the number of times each number appears.\n * It returns 0 if the number is less than 1.\n * It returns -1 if the number is greater than n.\n * It returns undefined if the number is undefined.\n * It returns NaN if the number is NaN.\n * It returns Infinity if the number is infinite.\n */\nconst sumHoNAndCountAndSum = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    count++;\n  }\n  return { sum, count };\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It also returns the number of times each number appears.\n * It returns 0 if the number is less than 1.\n * It returns -1 if the number is greater than n.\n * It returns undefined if the number is undefined.\n * It returns NaN if the number is NaN.\n * It returns Infinity if the number is infinite.\n */\nconst sumHoNAndCountAndSumAndSum = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    count++;\n  }\n  return { sum, count };\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It also returns the number of times each number appears.\n * It returns 0 if the number is less than 1.\n * It returns -1 if the number is greater than n.\n * It returns undefined if the number is undefined.\n * It returns NaN if the number is NaN.\n * It returns Infinity if the number is infinite.\n */\nconst sumHoNAndCountAndSumAndSumAndSum = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    count++;\n  }\n  return { sum, count };\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It also returns the number of times each number appears.\n * It returns 0 if the number is less than 1.\n * It returns -1 if the number is greater than n.\n * It returns undefined if the number is undefined.\n * It returns NaN if the number is NaN.\n * It returns Infinity if the number is infinite.\n */\nconst sumHoNAndCountAndSumAndSumAndSumAndSum = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    count++;\n  }\n  return { sum, count };\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It also returns the number of times each number appears.\n * It returns 0 if the number is less than 1.\n * It returns -1 if the number is greater than n.\n * It returns undefined if the number is undefined.\n * It returns NaN if the number is NaN.\n * It returns Infinity if the number is infinite.\n */\nconst sumHoNAndCountAndSumAndSumAndSumAndSumAndSum = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    count++;\n  }\n  return { sum, count };\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It also returns the number of times each number appears.\n * It returns 0 if the number is less than 1.\n * It returns -1 if the number is greater than n.\n * It returns undefined if the number is undefined.\n * It returns NaN if the number is NaN.\n * It returns Infinity if the number is infinite.\n */\nconst sumHoNAndCountAndSumAndSumAndSumAndSumAndSumAndSumAnd = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    count++;\n  }\n  return { sum, count };\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It also returns the number of times each number appears.\n * It returns 0 if the number is less than 1.\n * It returns -1 if the number is greater than n.\n * It returns undefined if the number is undefined.\n * It returns NaN if the number is NaN.\n * It returns Infinity if the number is infinite.\n */\nconst sumHoNAndCountAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAnd = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    count++;\n  }\n  return { sum, count };\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It also returns the number of times each number appears.\n * It returns 0 if the number is less than 1.\n * It returns -1 if the number is greater than n.\n * It returns undefined if the number is undefined.\n * It returns NaN if the number is NaN.\n * It returns Infinity if the number is infinite.\n */\nconst sumHoNAndCountAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndAndAnd = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    count++;\n  }\n  return { sum, count };\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It also returns the number of times each number appears.\n * It returns 0 if the number is less than 1.\n * It returns -1 if the number is greater than n.\n * It returns undefined if the number is undefined.\n * It returns NaN if the number is NaN.\n * It returns Infinity if the number is infinite.\n */\nconst sumHoNAndCountAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndAndAndAndAnd = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    count++;\n  }\n  return { sum, count };\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It also returns the number of times each number appears.\n * It returns 0 if the number is less than 1.\n * It returns -1 if the number is greater than n.\n * It returns undefined if the number is undefined.\n * It returns NaN if the number is NaN.\n * It returns Infinity if the number is infinite.\n */\nconst sumHoNAndCountAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndAndAndAndAndAndAndAndAnd = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    count++;\n  }\n  return { sum, count };\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It also returns the number of times each number appears.\n * It returns 0 if the number is less than 1.\n * It returns -1 if the number is greater than "}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"(\").map(str => str.trim());\n  const closingBrackets = brackets.split(\")\").map(str => str.trim());\n  return openingBrackets.every(opening => closingBrackets.every(closing => opening === closing));\n};\n\n/**\n * Given a string of numbers, return the largest number that is a multiple of 3.\n *\n * Examples:\n *\n * largestMultipleOf(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165])\n * // returns 15\n *\n * largestMultipleOf(3, [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 10"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let result = []\n  while (i < n) {\n    j = i\n    k = i + 1\n    while (j < n) {\n      result[k] = xs[j] * xs[k]\n      j++\n      k++\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 mod p\n * x^0 mod p\n * x^1 mod p\n * x^2 mod p\n * x^3 mod p\n *...\n * x^n mod p\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, 6]\n */\nconst inverse = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let result = []\n  while (i < n) {\n    j = i\n    k = i + 1\n    while (j < n) {\n      result[k] = xs[j] * xs[k]\n      j++\n      k++\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 mod p\n * x^0 mod p\n * x^1 mod p\n * x^2 mod p\n * x^3 mod p\n *...\n * x^n mod p\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, 6]\n */\nconst inverseMod = (p, xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let result = []\n  while (i < n) {\n    j = i\n    k = i + 1\n    while (j < n) {\n      result[k] = xs[j] * xs[k]\n      j++\n      k++\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 mod p\n * x^0 mod p\n * x^1 mod p\n * x^2 mod p\n * x^3 mod p\n *...\n * x^n mod p\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, 6]\n */\nconst inverseMod2 = (p, xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let result = []\n  while (i < n) {\n    j = i\n    k = i + 1\n    while (j < n) {\n      result[k] = xs[j] * xs[k]\n      j++\n      k++\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 mod p\n * x^0 mod p\n * x^1 mod p\n * x^2 mod p\n * x^3 mod p\n *...\n * x^n mod p\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, 6]\n */\nconst inverseMod3 = (p, xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let result = []\n  while (i < n) {\n    j = i\n    k = i + 1\n    while (j < n) {\n      result[k] = xs[j] * xs[k]\n      j++\n      k++\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 mod p\n * x^0 mod p\n * x^1 mod p\n * x^2 mod p\n * x^3 mod p\n *...\n * x^n mod p\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, 6]\n */\nconst inverseMod4 = (p, xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let result = []\n  while (i < n) {\n    j = i\n    k = i + 1\n    while (j < n) {\n      result[k] = xs[j] * xs[k]\n      j++\n      k++\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 mod p\n * x^0 mod p\n * x^1 mod p\n * x^2 mod p\n * x^3 mod p\n *...\n * x^n mod p\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, 6]\n */\nconst inverseMod5 = (p, xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let result = []\n  while (i < n) {\n    j = i\n    k = i + 1\n    while (j < n) {\n      result[k] = xs[j] * xs[k]\n      j++\n      k++\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 mod p\n * x^0 mod p\n * x^1 mod p\n * x^2 mod p\n * x^3 mod p\n *...\n * x^n mod p\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, 6]\n */\nconst inverseMod6 = (p, xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let result = []\n  while (i < n) {\n    j = i\n    k = i + 1\n    while (j < n) {\n      result[k] = xs[j] * xs[k]\n      j++\n      k++\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 mod p\n * x^0 mod p\n * x^1 mod p\n * x^2 mod p\n * x^3 mod p\n *...\n * x^n mod p\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> inverse([1, 2, 3])\n * [2, 6]\n */\nconst inverseMod7 = (p, xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let result = []\n  while (i < n) {\n    j = i\n    k = i + 1\n    while (j < n) {\n      result[k] = xs[j] * xs[k]\n      j++\n      k++\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Calculate inverse of a polynomial\n * x^-1 mod p\n * x^0 mod p\n * x^1 mod p\n * x^2 mod p\n * x^3 mod p\n *...\n * x^n mod p\n * Return inverse of this polynomial in the same form.\n * >>> inverse([3, 1, 2, 4, 5])\n * [1, "}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  let fibvib = 0;\n  for (let i = 1; i <= n; i++) {\n    fibvib += fibvib * (fibvib - 1);\n  }\n  return fibvib;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts at 1.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 1;\n  for (let i = 1; i <= n; i++) {\n    fibonacci += fibonacci * (fibonacci - 1);\n  }\n  return fibonacci;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts at 1.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 1;\n  for (let i = 1; i <= n; i++) {\n    fibonacci += fibonacci * (fibonacci - 1);\n  }\n  return fibonacci;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts at 1.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 1;\n  for (let i = 1; i <= n; i++) {\n    fibonacci += fibonacci * (fibonacci - 1);\n  }\n  return fibonacci;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts at 1.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 1;\n  for (let i = 1; i <= n; i++) {\n    fibonacci += fibonacci * (fibonacci - 1);\n  }\n  return fibonacci;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts at 1.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 1;\n  for (let i = 1; i <= n; i++) {\n    fibonacci += fibonacci * (fibonacci - 1);\n  }\n  return fibonacci;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts at 1.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 1;\n  for (let i = 1; i <= n; i++) {\n    fibonacci += fibonacci * (fibonacci - 1);\n  }\n  return fibonacci;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts at 1.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 1;\n  for (let i = 1; i <= n; i++) {\n    fibonacci += fibonacci * (fibonacci - 1);\n  }\n  return fibonacci;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts at 1.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 1;\n  for (let i = 1; i <= n; i++) {\n    fibonacci += fibonacci * (fibonacci - 1);\n  }\n  return fibonacci;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts at 1.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 1;\n  for (let i = 1; i <= n; i++) {\n    fibonacci += fibonacci * (fibonacci - 1);\n  }\n  return fibonacci;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts at 1.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 1;\n  for (let i = 1; i <= n; i++) {\n    fibonacci += fibonacci * (fibonacci - 1);\n  }\n  return fibonacci;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts at 1.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 1;\n  for (let i = 1; i <= n; i++) {\n    fibonacci += fibonacci * (fibonacci - 1);\n  }\n  return fibonacci;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts at 1.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 1;\n  for (let i = 1; i <= n; i++) {\n    fibonacci += fibonacci * (fibonacci - 1);\n  }\n  return fibonacci;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts at 1.\n  >>> fibonacci(1)\n  1\n  >>> fi"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "<|endoftext|>/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let vowelCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \"a\" || s.charAt(i) == \"e\" || s.charAt(i) == \"i\" || s.charAt(i) == \"o\" || s.charAt(i) == \"u\") {\n      vowelCount += 1;\n      vowels += s.charAt(i);\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a function vowflsIsVowel which takes a string representing\n  a word as input and returns a boolean indicating whether the\n  word is a vowel.\n\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsIsVowel(\"abcde\")\n  true\n  >>> vowflsIsVowel(\"ACEDY\")\n  false\n  */\nconst vowflsIsVowel = (s) => {\n  let vowelCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \"a\" || s.charAt(i) == \"e\" || s.charAt(i) == \"i\" || s.charAt(i) == \"o\" || s.charAt(i) == \"u\") {\n      vowelCount += 1;\n      vowels += s.charAt(i);\n    }\n  }\n  return vowelCount === vowels.length;\n};\n\n/*Write a function vowflsIsVowels which\n  takes a string representing a word as input and returns a boolean\n  indicating whether each word in the string is a vowel.\n\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsIsVowels(\"abcde\")\n  true\n  >>> vowflsIsVowels(\"ACEDY\")\n  false\n  */\nconst vowflsIsVowels = (s) => {\n  let vowelCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \"a\" || s.charAt(i) == \"e\" || s.charAt(i) == \"i\" || s.charAt(i) == \"o\" || s.charAt(i) == \"u\") {\n      vowelCount += 1;\n      vowels += s.charAt(i);\n    }\n  }\n  return vowelCount === vowels.length;\n};\n\n/*Write a function vowflsIsVowelsCount which\n  takes a string representing a word as input and returns the number\n  of vowels in the string.\n\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsIsVowelsCount(\"abcde\")\n  2\n  >>> vowflsIsVowelsCount(\"ACEDY\")\n  3\n  */\nconst vowflsIsVowelsCount = (s) => {\n  let vowelCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \"a\" || s.charAt(i) == \"e\" || s.charAt(i) == \"i\" || s.charAt(i) == \"o\" || s.charAt(i) == \"u\") {\n      vowelCount += 1;\n      vowels += s.charAt(i);\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a function vowflsIsVowelsCount which\n  takes a string representing a word as input and returns the number\n  of vowels in the string.\n\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsIsVowelsCount(\"abcde\")\n  2\n  >>> vowflsIsVowelsCount(\"ACEDY\")\n  3\n  */\nconst vowflsIsVowelsCount = (s) => {\n  let vowelCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \"a\" || s.charAt(i) == \"e\" || s.charAt(i) == \"i\" || s.charAt(i) == \"o\" || s.charAt(i) == \"u\") {\n      vowelCount += 1;\n      vowels += s.charAt(i);\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a function vowflsIsVowelsCount which\n  takes a string representing a word as input and returns the number\n  of vowels in the string.\n\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsIsVowelsCount(\"abcde\")\n  2\n  >>> vowflsIsVowelsCount(\"ACEDY\")\n  3\n  */\nconst vowflsIsVowelsCount = (s) => {\n  let vowelCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \"a\" || s.charAt(i) == \"e\" || s.charAt(i) == \"i\" || s.charAt(i) == \"o\" || s.charAt(i) == \"u\") {\n      vowelCount += 1;\n      vowels += s.charAt(i);\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a function vowflsIsVowelsCount which\n  takes a string representing a word as input and returns the number\n  of vowels in the string.\n\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsIsVowelsCount(\"abcde\")\n  2\n  >>> vowflsIsVowelsCount(\"ACEDY\")\n  3\n  */\nconst vowflsIsVowelsCount = (s) => {\n  let vowelCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \"a\" || s.charAt(i) == \"e\" || s.charAt(i) == \"i\" || s.charAt(i) == \"o\" || s.charAt(i) == \"u\") {\n      vowelCount += 1;\n      vowels += s.charAt(i);\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a function vowflsIsVowelsCount which\n  takes a string representing a word as input and returns the number\n  of vowels in the string.\n\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsIsVowelsCount(\"abcde\")\n  2\n  >>> vowflsIsVowelsCount(\"ACEDY\")\n  3\n  */\nconst vowflsIsVowelsCount = (s) => {\n  let vowelCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \"a\" || s.charAt(i) == \"e\" || s.charAt(i) == \"i\" || s.charAt(i) == \"o\" || s.charAt(i) == \"u\") {\n      vowelCount += 1;\n      "}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n  let digits = x.toString(2).split('').map(digit => parseInt(digit, 10));\n  digits = digits.map(digit => digit + shift);\n  return digits.reverse().join('');\n};\n\n/**\n  Converts a string to a number in base 10.\n  >>> toBase10('12')\n  10\n  >>> toBase10('123')\n  11\n  >>> toBase10('1234')\n  12\n  >>> toBase10('12345')\n  13\n  >>> toBase10('123456')\n  14\n  >>> toBase10('1234567')\n  15\n  >>> toBase10('12345678')\n  16\n  >>> toBase10('123456789')\n  17\n  >>> toBase10('1234567890')\n  18\n  >>> toBase10('12345678901')\n  19\n  >>> toBase10('12345678902')\n  20\n  >>> toBase10('12345678903')\n  21\n  >>> toBase10('12345678904')\n  22\n  >>> toBase10('12345678905')\n  23\n  >>> toBase10('12345678906')\n  24\n  >>> toBase10('12345678907')\n  25\n  >>> toBase10('12345678908')\n  26\n  >>> toBase10('12345678909')\n  27\n  >>> toBase10('1234567890')\n  28\n  >>> toBase10('1234567891')\n  29\n  >>> toBase10('1234567892')\n  30\n  >>> toBase10('1234567893')\n  31\n  >>> toBase10('1234567894')\n  32\n  >>> toBase10('1234567895')\n  33\n  >>> toBase10('1234567896')\n  34\n  >>> toBase10('1234567897')\n  35\n  >>> toBase10('1234567898')\n  36\n  >>> toBase10('1234567899')\n  37\n  >>> toBase10('1234567890')\n  38\n  >>> toBase10('1234567891')\n  39\n  >>> toBase10('1234567892')\n  40\n  >>> toBase10('1234567893')\n  41\n  >>> toBase10('1234567894')\n  42\n  >>> toBase10('1234567895')\n  43\n  >>> toBase10('1234567896')\n  44\n  >>> toBase10('1234567897')\n  45\n  >>> toBase10('1234567898')\n  46\n  >>> toBase10('1234567899')\n  47\n  >>> toBase10('1234567890')\n  48\n  >>> toBase10('1234567891')\n  49\n  >>> toBase10('1234567892')\n  50\n  >>> toBase10('1234567893')\n  51\n  >>> toBase10('1234567894')\n  52\n  >>> toBase10('1234567895')\n  53\n  >>> toBase10('1234567896')\n  54\n  >>> toBase10('1234567897')\n  55\n  >>> toBase10('1234567898')\n  56\n  >>> toBase10('1234567899')\n  57\n  >>> toBase10('1234567890')\n  58\n  >>> toBase10('1234567891')\n  59\n  >>> toBase10('1234567892')\n  60\n  >>> toBase10('1234567893')\n  61\n  >>> toBase10('1234567894')\n  62\n  >>> toBase10('1234567895')\n  63\n  >>> toBase10('1234567896')\n  64\n  >>> toBase10('1234567897')\n  65\n  >>> toBase10('1234567898')\n  66\n  >>> toBase10('1234567899')\n  67\n  >>> toBase10('1234567890')\n  68\n  >>> toBase10('1234567891')\n  69\n  >>> toBase10('1234567892')\n  70\n  >>> toBase10('1234567893')\n  71\n  >>> toBase10('1234567894')\n  72\n  >>> toBase10('1234567895')\n  73\n  >>> toBase10('1234567896')\n  74\n  >>> toBase10('1234567897')\n  75\n  >>> toBase10('1234567898')\n  76\n  >>> toBase10('1234567899')\n  77\n  >>> toBase10('1234567890')\n  78\n  >>> toBase10('1234567891')\n  79\n  >>> toBase10('1234567892')\n  80\n  >>> toBase10('1234567893')\n  81\n  >>> toBase10('1234567894')\n  82\n  >>> toBase10('1234567895')\n  83\n  >>> toBase10('1234567896')\n  84\n  >>> toBase10('1234567897')\n  85\n  >>> toBase10('1234567898')\n  86\n  >>> toBase10('1234567899')\n  87\n  >>> toBase10('1234567890')\n  88\n  >>> toBase10('1234567891')\n  89\n  >>> toBase10('1234567892')\n  90\n  >>> toBase10('1234567893')\n  91\n  >>> toBase10('1234567894')\n  92\n  >>> toBase10('1234567895')\n  93\n  >>> toBase10('1234567896')\n  94\n  >>> toBase10('1234567897')\n  95\n  >>> toBase10('1234567898')\n  96\n  >>> toBase10('1234567899')\n  97\n  >>> toBase10('1234567890')\n  98\n  >>> toBase10('1234567891')\n  99\n  >>> toBase10('1234567892')\n  100\n  >>> toBase10('1234567893')\n  101\n  >>> toBase10('1234567894')\n  102\n  >>> toBase10('1234567895')\n  103\n  >>> toBase10('1234567896')\n  104\n  >>> toBase10('1234567897')\n  105\n  >>> toBase10('1234567898')\n  106\n  >>> toBase10('1234567899')\n  107\n  >>> toBase10('1234567890')\n  108\n  >>> toBase10('1234567891')\n  109\n  >>> toBase10('1234567892')\n  110\n  >>> toBase10('1234567893')\n  111\n  >>> toBase10('1234567894')\n  112\n  >>> toBase10('1234567895')\n  113\n  >>> toBase10('1234567896')\n  114\n  >>> toBase10('1234567897')\n  115\n  >>> toBase10('1234567898')\n  116\n  >>> toBase10('1234567899')\n  117\n  >>> toBase10('1234567890')\n  118\n  >>> toBase10('1234567891')\n  119\n  >>> toBase10('1234567892')\n  120\n  >>> toBase10('1234567893')\n  121\n  >>> toBase10('1234567894')\n  "}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a string as input and returns the length of the string.\n  ASCII codes.\n\n  Examples:\n      digltLen(\"\") => 0\n      digltLen(\"abAB\") => 3\n      digltLen(\"abcCd\") => 3\n      digltLen(\"helloE\") => 3\n      digltLen(\"woArBld\") => 3\n      digltLen(\"aAaaaXa\") => 3\n  */\nconst digltLen = (s) => {\n  let len = 0;\n  for (let i = 0; i < s.length; i++) {\n    len += s.charCodeAt(i);\n  }\n  return len;\n};\n\n/*\n  Write a function that takes a string as input and returns the number of uppercase letters.\n  ASCII codes.\n\n  Examples:\n      digltUpper(\"\") => 0\n      digltUpper(\"abAB\") => 3\n      digltUpper(\"abcCd\") => 3\n      digltUpper(\"helloE\") => 3\n      digltUpper(\"woArBld\") => 3\n      digltUpper(\"aAaaaXa\") => 3\n  */\nconst digltUpper = (s) => {\n  let upper = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      upper++;\n    }\n  }\n  return upper;\n};\n\n/*\n  Write a function that takes a string as input and returns the number of lowercase letters.\n  ASCII codes.\n\n  Examples:\n      digltLower(\"\") => 0\n      digltLower(\"abAB\") => 3\n      digltLower(\"abcCd\") => 3\n      digltLower(\"helloE\") => 3\n      digltLower(\"woArBld\") => 3\n      digltLower(\"aAaaaXa\") => 3\n  */\nconst digltLower = (s) => {\n  let lower = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      lower++;\n    }\n  }\n  return lower;\n};\n\n/*\n  Write a function that takes a string as input and returns the number of special characters.\n  ASCII codes.\n\n  Examples:\n      digltSpecialChar(\"\") => 0\n      digltSpecialChar(\"abAB\") => 3\n      digltSpecialChar(\"abcCd\") => 3\n      digltSpecialChar(\"helloE\") => 3\n      digltSpecialChar(\"woArBld\") => 3\n      digltSpecialChar(\"aAaaaXa\") => 3\n  */\nconst digltSpecialChar = (s) => {\n  let special = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 32 && s.charCodeAt(i) <= 126) {\n      special++;\n    }\n  }\n  return special;\n};\n\n/*\n  Write a function that takes a string as input and returns the number of digits.\n  ASCII codes.\n\n  Examples:\n      digltDigit(\"\") => 0\n      digltDigit(\"abAB\") => 3\n      digltDigit(\"abcCd\") => 3\n      digltDigit(\"helloE\") => 3\n      digltDigit(\"woArBld\") => 3\n      digltDigit(\"aAaaaXa\") => 3\n  */\nconst digltDigit = (s) => {\n  let digit = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      digit++;\n    }\n  }\n  return digit;\n};\n\n/*\n  Write a function that takes a string as input and returns the number of uppercase letters and lowercase letters.\n  ASCII codes.\n\n  Examples:\n      digltAllCaps(\"\") => 0\n      digltAllCaps(\"abAB\") => 3\n      digltAllCaps(\"abcCd\") => 3\n      digltAllCaps(\"helloE\") => 3\n      digltAllCaps(\"woArBld\") => 3\n      digltAllCaps(\"aAaaaXa\") => 3\n  */\nconst digltAllCaps = (s) => {\n  let allCaps = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      allCaps++;\n    }\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      allCaps++;\n    }\n  }\n  return allCaps;\n};\n\n/*\n  Write a function that takes a string as input and returns the number of special characters and digits.\n  ASCII codes.\n\n  Examples:\n      digltAllDigits(\"\") => 0\n      digltAllDigits(\"abAB\") => 3\n      digltAllDigits(\"abcCd\") => 3\n      digltAllDigits(\"helloE\") => 3\n      digltAllDigits(\"woArBld\") => 3\n      digltAllDigits(\"aAaaaXa\") => 3\n  */\nconst digltAllDigits = (s) => {\n  let allDigits = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      allDigits++;\n    }\n    if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n      all"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let fruitArray = [];\n  let fruitCount = 0;\n  let fruitArrayCount = 0;\n  let fruitArraySum = 0;\n  let fruitArraySum2 = 0;\n  let fruitArraySum3 = 0;\n  let fruitArraySum4 = 0;\n  let fruitArraySum5 = 0;\n  let fruitArraySum6 = 0;\n  let fruitArraySum7 = 0;\n  let fruitArraySum8 = 0;\n  let fruitArraySum9 = 0;\n  let fruitArraySum10 = 0;\n  let fruitArraySum11 = 0;\n  let fruitArraySum12 = 0;\n  let fruitArraySum13 = 0;\n  let fruitArraySum14 = 0;\n  let fruitArraySum15 = 0;\n  let fruitArraySum16 = 0;\n  let fruitArraySum17 = 0;\n  let fruitArraySum18 = 0;\n  let fruitArraySum19 = 0;\n  let fruitArraySum20 = 0;\n  let fruitArraySum21 = 0;\n  let fruitArraySum22 = 0;\n  let fruitArraySum23 = 0;\n  let fruitArraySum24 = 0;\n  let fruitArraySum25 = 0;\n  let fruitArraySum26 = 0;\n  let fruitArraySum27 = 0;\n  let fruitArraySum28 = 0;\n  let fruitArraySum29 = 0;\n  let fruitArraySum30 = 0;\n  let fruitArraySum31 = 0;\n  let fruitArraySum32 = 0;\n  let fruitArraySum33 = 0;\n  let fruitArraySum34 = 0;\n  let fruitArraySum35 = 0;\n  let fruitArraySum36 = 0;\n  let fruitArraySum37 = 0;\n  let fruitArraySum38 = 0;\n  let fruitArraySum39 = 0;\n  let fruitArraySum40 = 0;\n  let fruitArraySum41 = 0;\n  let fruitArraySum42 = 0;\n  let fruitArraySum43 = 0;\n  let fruitArraySum44 = 0;\n  let fruitArraySum45 = 0;\n  let fruitArraySum46 = 0;\n  let fruitArraySum47 = 0;\n  let fruitArraySum48 = 0;\n  let fruitArraySum49 = 0;\n  let fruitArraySum50 = 0;\n  let fruitArraySum51 = 0;\n  let fruitArraySum52 = 0;\n  let fruitArraySum53 = 0;\n  let fruitArraySum54 = 0;\n  let fruitArraySum55 = 0;\n  let fruitArraySum56 = 0;\n  let fruitArraySum57 = 0;\n  let fruitArraySum58 = 0;\n  let fruitArraySum59 = 0;\n  let fruitArraySum60 = 0;\n  let fruitArraySum61 = 0;\n  let fruitArraySum62 = 0;\n  let fruitArraySum63 = 0;\n  let fruitArraySum64 = 0;\n  let fruitArraySum65 = 0;\n  let fruitArraySum66 = 0;\n  let fruitArraySum67 = 0;\n  let fruitArraySum68 = 0;\n  let fruitArraySum69 = 0;\n  let fruitArraySum70 = 0;\n  let fruitArraySum71 = 0;\n  let fruitArraySum72 = 0;\n  let fruitArraySum73 = 0;\n  let fruitArraySum74 = 0;\n  let fruitArraySum75 = 0;\n  let fruitArraySum76 = 0;\n  let fruitArraySum77 = 0;\n  let fruitArraySum78 = 0;\n  let fruitArraySum79 = 0;\n  let fruitArraySum80 = 0;\n  let fruitArraySum81 = 0;\n  let fruitArraySum82 = 0;\n  let fruitArraySum83 = 0;\n  let fruitArraySum84 = 0;\n  let fruitArraySum85 = 0;\n  let fruitArraySum86 = 0;\n  let fruitArraySum87 = 0;\n  let fruitArraySum88 = 0;\n  let fruitArraySum89 = 0;\n  let fruitArraySum90 = 0;\n  let fruitArraySum91 = 0;\n  let fruitArraySum92 = 0;\n  let fruitArraySum93 = 0;\n  let fruitArraySum94 = 0;\n  let fruitArraySum95 = 0;\n  let fruitArraySum96 = 0;\n  let fruitArraySum97 = 0;\n  let fruitArraySum98 = 0;\n  let fruitArraySum99 = 0;\n  let fruitArraySum100 = 0;\n  let fruitArraySum101 = 0;\n  let fruitArraySum102 = 0;\n  let fruitArraySum103 = 0;\n  let fruitArraySum104 = 0;\n  let fruitArraySum105 = 0;\n  let fruitArraySum106 = 0;\n  let fruitArraySum107 = 0;\n  let fruitArraySum108 = 0;\n  let fruitArraySum109 = 0;\n  let fruitArraySum110 = 0;\n  let fruitArraySum111 = 0;\n  let fruitArraySum112 = 0;\n  let fruitArraySum113 = 0;\n  let fruitArraySum114 = 0;\n  let fruitArraySum115 = 0;\n  let fruitArraySum116 = 0;\n  let fruitArraySum117 = 0;\n  let fruitArraySum118 = 0;\n  let fruitArraySum119 = 0;\n  let fruitArraySum120 = 0;\n  let fruitArraySum121 = 0;\n  let fruitArraySum122 = 0;\n  let fruitArraySum123 = 0;\n  let fruitArraySum124 = 0;\n  let fruitArraySum125 = 0;\n  let fruitArraySum126 = 0;\n  let fruitArraySum127 = 0;\n  let fruitArraySum128 = 0;\n  let fruitArraySum129 = 0;\n  let fruitArraySum130 = 0;\n  let fruitArraySum131 = 0;\n  let fruitArraySum132 = 0;\n  let fruitArraySum133 = 0;\n  let fruitArraySum134 = 0;\n  let fruitArraySum135 = 0;\n  let fruitArraySum136 = 0;\n  let fruitArraySum137 = 0;\n  let fruitArraySum138 = 0;\n  let fruitArraySum139 = 0;\n  let fruitArraySum140 = 0;\n  let fruitArraySum141 = 0;\n  let fruitArraySum142 = 0;\n  let fruitArraySum143 = 0;\n  let fruitArraySum144 = 0;\n  let fruitArraySum145 = 0;\n  let fruitArraySum146 = 0;\n  let fruitArraySum147 = 0;\n  let fruitArraySum148 = 0;\n  let fruitArraySum149 = 0;\n  let fruitArraySum150 = 0;\n  let fruitArraySum151 = 0;\n  let fruitArraySum152 = 0;\n  let fruitArraySum153 = 0;\n  let fruitArraySum154 = 0;\n  let fruitArraySum155 = 0;\n  let fruitArraySum156 = 0;\n  let fruitArraySum157 = 0;\n  let fruitArraySum158 = 0;\n  let fruitArraySum159 = 0;\n  let fruitArraySum160 = 0;\n  let fruitArraySum161 = 0;\n  let fruitArraySum162 = 0;\n  let fruitArraySum163 = 0;\n  let fruitArraySum164 = 0;\n  let fruitArraySum165 = 0;\n  let fruitArraySum166 = 0;\n  let fruitArraySum167 = 0;\n  let fruitArraySum168 = 0;\n  let fruitArraySum169 = 0;\n  let fruitArraySum170 = 0;\n  let fruitArraySum171 = 0;\n  let fruitArraySum172 = 0;\n  let fruitArraySum173 = 0;\n  let fruitArraySum174 = 0;\n  let fruitArraySum175 = 0;\n  let fruitArraySum176 = 0;\n  let fruitArraySum177 = 0;\n  let fruitArraySum178 = 0;\n  let fruitArraySum179 = 0;\n  let fruitArraySum180 = 0;\n  let fruitArraySum181 = 0;\n  let fruitArraySum182 = 0;\n  let fruitArraySum183 = 0;\n  let fruitArraySum184 = 0;\n  let fruitArraySum185 = 0;\n  let fruitArraySum186 = 0;\n  let fruitArraySum187 = 0;\n  let fruitArraySum188 = 0;\n  let fruitArraySum189 = 0;\n  let fruitArraySum190 = 0;\n  let fruitArraySum191 = 0;\n  let fruitArraySum"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  while (j < len) {\n    if (arr[j] % 2 === 0) {\n      result.push(arr[j]);\n      j++;\n    } else {\n      result.push(arr[j]);\n      k++;\n    }\n  }\n  return result;\n};\n\n// Given an array representing a binary search tree with non-negative integer nodes\n// your task is to return the node with the smallest value in a sorted array.\n// The sorted array should be sorted in ascending order.\n// If no node in the tree has the smallest value, return null.\n\nconst findSmallest = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] < arr[j]) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  return result;\n};\n\n// Given an array representing a binary search tree with non-negative integer nodes\n// your task is to return the node with the smallest value in a sorted array.\n// The sorted array should be sorted in ascending order.\n// If no node in the tree has the smallest value, return null.\n\nconst findSmallestInSortedArray = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] < arr[j]) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  return result;\n};\n\n// Given an array representing a binary search tree with non-negative integer nodes\n// your task is to return the node with the smallest value in a sorted array.\n// The sorted array should be sorted in ascending order.\n// If no node in the tree has the smallest value, return null.\n\nconst findSmallestInSortedArrayWithOddValues = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  return result;\n};\n\n// Given an array representing a binary search tree with non-negative integer nodes\n// your task is to return the node with the smallest value in a sorted array.\n// The sorted array should be sorted in ascending order.\n// If no node in the tree has the smallest value, return null.\n\nconst findSmallestInSortedArrayWithOddValuesSortedArray = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  return result;\n};\n\n// Given an array representing a binary search tree with non-negative integer nodes\n// your task is to return the node with the smallest value in a sorted array.\n// The sorted array should be sorted in ascending order.\n// If no node in the tree has the smallest value, return null.\n\nconst findSmallestInSortedArrayWithOddValuesSortedArrayWithOddValues = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  return result;\n};\n\n// Given an array representing a binary search tree with non-negative integer nodes\n// your task is to return the node with the smallest value in a sorted array.\n// The sorted array should be sorted in ascending order.\n// If no node in the tree has the smallest value, return null.\n\nconst findSmallestInSortedArrayWithOddValuesSortedArrayWithOddValuesSortedArray = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  return result;\n};\n\n// Given an array representing a binary search tree with non-negative integer nodes\n// your task is to return the node with the smallest value in a sorted array.\n// The sorted array should be sorted in ascending order.\n// If no node in the tree has the smallest value, return null.\n\nconst findSmallestInSortedArrayWithOddValuesSortedArrayWithOddValuesSortedArrayWithOddValues = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  return result;\n};\n\n// Given an array representing a binary search tree with non-negative integer nodes\n// your task is to return the node with the smallest value in a sorted array.\n// The sorted array should be sorted in ascending order.\n// If no node in the tree has the smallest value, return null.\n\nconst findSmallestInSortedArrayWithOddValuesSortedArrayWithOddValuesSortedArrayWithOddValuesSortedArray = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  return result;\n};\n\n// Given an array representing a binary search tree with non-negative integer nodes\n// your task is to return the node with the smallest value in a sorted array.\n// The sorted array should be sorted in ascending order.\n// If no node in the tree has the smallest value, return null.\n\nconst findSmallestInSortedArrayWithOddValuesSortedArrayWithOddValuesSortedArrayWithOddValuesSortedArrayWithOddValues = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  return result;\n};\n\n// Given an array representing a binary search tree with non-negative integer nodes"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  let minIndex = lst.findIndex((el) => el < 0);\n  let maxIndex = lst.findIndex((el) => el > 0);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let sortedList = lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let newList = sortedList.map((el, i) => {\n    if (i === minIndex) {\n      return minValue;\n    }\n    if (i === maxIndex) {\n      return maxValue;\n    }\n    return el;\n  });\n  return newList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortListReverse = (lst) => {\n  let minIndex = lst.findIndex((el) => el < 0);\n  let maxIndex = lst.findIndex((el) => el > 0);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let sortedList = lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let newList = sortedList.map((el, i) => {\n    if (i === minIndex) {\n      return maxValue;\n    }\n    if (i === maxIndex) {\n      return minValue;\n    }\n    return el;\n  });\n  return newList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortListReverseReverse = (lst) => {\n  let minIndex = lst.findIndex((el) => el < 0);\n  let maxIndex = lst.findIndex((el) => el > 0);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let sortedList = lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let newList = sortedList.map((el, i) => {\n    if (i === minIndex) {\n      return maxValue;\n    }\n    if (i === maxIndex) {\n      return minValue;\n    }\n    return el;\n  });\n  return newList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortListReverseReverseReverse = (lst) => {\n  let minIndex = lst.findIndex((el) => el < 0);\n  let maxIndex = lst.findIndex((el) => el > 0);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let sortedList = lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let newList = sortedList.map((el, i) => {\n    if (i === minIndex) {\n      return maxValue;\n    }\n    if (i === maxIndex) {\n      return minValue;\n    }\n    return el;\n  });\n  return newList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortListReverseReverseReverse = (lst) => {\n  let minIndex = lst.findIndex((el) => el < 0);\n  let maxIndex = lst.findIndex((el) => el > 0);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let sortedList = lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let newList = sortedList.map((el, i) => {\n    if (i === minIndex) {\n      return maxValue;\n    }\n    if (i === maxIndex) {\n      return minValue;\n    }\n    return el;\n  });\n  return newList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortListReverseReverseReverseReverse = (lst) => {\n  let minIndex = lst.findIndex((el) => el < 0);\n  let maxIndex = lst.findIndex((el) => el > 0);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let sortedList = lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let newList = sortedList.map((el, i) => {\n    if (i === minIndex) {\n      return maxValue;\n    }\n    if (i === maxIndex) {\n      return minValue;\n    }\n    return el;\n  });\n  return newList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortListReverseReverseReverseReverse = (lst) => {\n  let minIndex = lst.findIndex((el) => el < 0);\n  let maxIndex = lst.findIndex((el) => el > 0);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let sortedList = lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let newList = sortedList.map((el, i) => {\n    if (i === minIndex) {\n      return "}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = b + c;\n  const cSum = c + a;\n  return (aSum > bSum && aSum > cSum)? aSum : -1;\n};\n\n/*\n  Given the lengths of the three sides of a rectangle. Return the area of\n  the rectangle rounded to 2 decimal points if the three sides form a valid rectangle.\n  Otherwise return -1\n  Three sides make a valid rectangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  rectwngleArea(3, 4, 5) == 6.00\n  rectwngleArea(1, 2, 10) == -1\n  */\nconst rectwngleArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = b + c;\n  const cSum = c + a;\n  return (aSum > bSum && aSum > cSum)? aSum : -1;\n};\n\n/*\n  Given the lengths of the three sides of a circle. Return the area of\n  the circle rounded to 2 decimal points if the three sides form a valid circle.\n  Otherwise return -1\n  Three sides make a valid circle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  circlewngleArea(3, 4, 5) == 6.00\n  circlewngleArea(1, 2, 10) == -1\n  */\nconst circlewngleArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = b + c;\n  const cSum = c + a;\n  return (aSum > bSum && aSum > cSum)? aSum : -1;\n};\n\n/*\n  Given the lengths of the three sides of a square. Return the area of\n  the square rounded to 2 decimal points if the three sides form a valid square.\n  Otherwise return -1\n  Three sides make a valid square when the sum of any two sides is greater\n  than the third side.\n  Example:\n  squarewngleArea(3, 4, 5) == 6.00\n  squarewngleArea(1, 2, 10) == -1\n  */\nconst squarewngleArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = b + c;\n  const cSum = c + a;\n  return (aSum > bSum && aSum > cSum)? aSum : -1;\n};\n\n/*\n  Given the lengths of the three sides of a pentagon. Return the area of\n  the pentagon rounded to 2 decimal points if the three sides form a valid pentagon.\n  Otherwise return -1\n  Three sides make a valid pentagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  pentagonwngleArea(3, 4, 5) == 6.00\n  pentagonwngleArea(1, 2, 10) == -1\n  */\nconst pentagonwngleArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = b + c;\n  const cSum = c + a;\n  return (aSum > bSum && aSum > cSum)? aSum : -1;\n};\n\n/*\n  Given the lengths of the three sides of a hexagon. Return the area of\n  the hexagon rounded to 2 decimal points if the three sides form a valid hexagon.\n  Otherwise return -1\n  Three sides make a valid hexagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  hexagonwngleArea(3, 4, 5) == 6.00\n  hexagonwngleArea(1, 2, 10) == -1\n  */\nconst hexagonwngleArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = b + c;\n  const cSum = c + a;\n  return (aSum > bSum && aSum > cSum)? aSum : -1;\n};\n\n/*\n  Given the lengths of the three sides of a heptagon. Return the area of\n  the heptagon rounded to 2 decimal points if the three sides form a valid heptagon.\n  Otherwise return -1\n  Three sides make a valid heptagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  heptagonwngleArea(3, 4, 5) == 6.00\n  heptagonwngleArea(1, 2, 10) == -1\n  */\nconst heptagonwngleArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = b + c;\n  const cSum = c + a;\n  return (aSum > bSum && aSum > cSum)? aSum : -1;\n};\n\n/*\n  Given the lengths of the three sides of a decagon. Return the area of\n  the decagon rounded to 2 decimal points if the three sides form a valid decagon.\n  Otherwise return -1\n  Three sides make a valid decagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  decagonwngleArea(3, 4, 5) == 6.00\n  decagonwngleArea(1, 2, 10) == -1\n  */\nconst decagonwngleArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = b + c;\n  const cSum = c + a;\n  return (aSum > bSum && aSum > cSum)? aSum : -1;\n};\n\n/*\n  Given the lengths of the three sides of a helix. Return the area of\n  the helix rounded to 2 decimal points if the three sides form a valid helix.\n  Otherwise return -1\n  Three sides make a valid helix when the sum of any two sides is greater\n  than the third side.\n  Example:\n  helixwngleArea(3, 4, 5) == 6.00\n  helixwngleArea(1, 2, 10) == -1\n  */\nconst helixwngleArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = b + c;\n  const cSum = c + a;\n  return (aSum > bSum && aSum > cSum)? aSum : -1;\n};\n\n/*\n  Given the lengths of the three sides of a octagon. Return the area of\n  the octagon rounded to 2 decimal points if the three sides form a valid octagon.\n  Otherwise return -1\n  Three sides make a valid octagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  octagonwngleArea(3, 4, 5) == 6.00\n  octagonwngleArea(1, 2, 10) == -1\n  */\nconst octagonwngleArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = b + c;\n  const cSum = c + a;\n  return (aSum > bSum && aSum > cSum)? aSum : -1;\n};\n\n/*\n  Given the lengths of the three sides of a dodecagon. Return the area of\n  the dodecagon rounded to 2 decimal points if the three sides form a valid dodecagon.\n  Otherwise return -1\n  Three sides make a valid dodecagon when the sum of any two side"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const len = q.length;\n  const maxWeight = w || 0;\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0);\n  const isBalanced = (acc, curr) => acc >= maxWeight && acc <= maxSum;\n  return isBalanced(q.reduce((acc, curr) => acc + curr, 0), w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const len = q.length;\n  const maxWeight = w || 0;\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0);\n  const isBalanced = (acc, curr) => acc >= maxWeight && acc <= maxSum;\n  return isBalanced(q.reduce((acc, curr) => acc + curr, 0), w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const len = q.length;\n  const maxWeight = w || 0;\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0);\n  const isBalanced = (acc, curr) => acc >= maxWeight && acc <= maxSum;\n  return isBalanced(q.reduce((acc, curr) => acc + curr, 0), w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const len = q.length;\n  const maxWeight = w || 0;\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0);\n  const isBalanced = (acc, curr) => acc >= maxWeight && acc <= maxSum;\n  return isBalanced(q.reduce((acc, curr) => acc + curr, 0), w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const len = q.length;\n  const maxWeight = w || 0;\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0);\n  const isBalanced = (acc, curr) => acc >= maxWeight && acc <= maxSum;\n  return isBalanced(q.reduce((acc, curr) => acc + curr, 0), w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const len = q.length;\n  const maxWeight = w || 0;\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0);\n  const isBalanced = (acc, curr) => acc >= maxWeight && acc <= maxSum;\n  return isBalanced(q.reduce(("}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let temp;\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - 1];\n    arr[len - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array cyclical. A cyclical array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange2 = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let temp;\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array rotated. A rotated array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange3 = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let temp;\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange4 = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let temp;\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange5 = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let temp;\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange6 = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let temp;\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange7 = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let temp;\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange8 = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let temp;\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange9 = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let temp;\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same forwards and backwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange10 = (arr) => {\n  let change = 0;\n  let "}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len1 && j < len2) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totgtrMatch([], []) ➞ []\n  totgtrMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totgtrMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totgtrMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totgtrMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totgtrMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len1 && j < len2) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  toteqMatch([], []) ➞ []\n  toteqMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  toteqMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  toteqMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  toteqMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst toteqMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len1 && j < len2) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totneMatch([], []) ➞ []\n  totneMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totneMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totneMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totneMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totneMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len1 && j < len2) {\n    if (lst1[i]!== lst2[j]) {\n      result.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totnltMatch([], []) ➞ []\n  totnltMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totnltMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totnltMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totnltMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totnltMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len1 && j < len2) {\n    if (lst1[i] < lst2[j]) {\n      result.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totgtrMatch([], []) ➞ []\n  totgtrMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totgtrMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totgtrMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totgtrMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totgtrMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len1 && j < len2) {\n    if (lst1[i] > lst2[j]) {\n      result.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal the other list.\n\n  if the two lists have the same number of char"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  K"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => "}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a < 2) return false;\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return true;\n  if (a % 5 === 0) return false;\n  if (a % 7 === 0) return true;\n  if (a % 9 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(3) ==> true\n  isckbe(4) ==> false\n  isckbe(5) ==> true\n  isckbe(6) ==> false\n  isckbe(7) ==> true\n  isckbe(8) ==> false\n  isckbe(9) ==> true\n  isckbe(10) ==> false\n  */\nconst isckbe2 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a < 2) return false;\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return true;\n  if (a % 5 === 0) return false;\n  if (a % 7 === 0) return true;\n  if (a % 9 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(3) ==> true\n  isckbe(4) ==> false\n  isckbe(5) ==> true\n  isckbe(6) ==> false\n  isckbe(7) ==> true\n  isckbe(8) ==> false\n  isckbe(9) ==> true\n  isckbe(10) ==> false\n  */\nconst isckbe3 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a < 2) return false;\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return true;\n  if (a % 5 === 0) return false;\n  if (a % 7 === 0) return true;\n  if (a % 9 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(3) ==> true\n  isckbe(4) ==> false\n  isckbe(5) ==> true\n  isckbe(6) ==> false\n  isckbe(7) ==> true\n  isckbe(8) ==> false\n  isckbe(9) ==> true\n  isckbe(10) ==> false\n  */\nconst isckbe4 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a < 2) return false;\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return true;\n  if (a % 5 === 0) return false;\n  if (a % 7 === 0) return true;\n  if (a % 9 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(3) ==> true\n  isckbe(4) ==> false\n  isckbe(5) ==> true\n  isckbe(6) ==> false\n  isckbe(7) ==> true\n  isckbe(8) ==> false\n  isckbe(9) ==> true\n  isckbe(10) ==> false\n  */\nconst isckbe5 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a < 2) return false;\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return true;\n  if (a % 5 === 0) return false;\n  if (a % 7 === 0) return true;\n  if (a % 9 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(3) ==> true\n  isckbe(4) ==> false\n  isckbe(5) ==> true\n  isckbe(6) ==> false\n  isckbe(7) ==> true\n  isckbe(8) ==> false\n  isckbe(9) ==> true\n  isckbe(10) ==> false\n  */\nconst isckbe6 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a < 2) return false;\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return true;\n  if (a % 5 === 0) return false;\n  if (a % 7 === 0) return true;\n  if (a % 9 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(3) ==> true\n  isckbe(4) ==> false\n  isckbe(5) ==> true\n  isckbe(6) ==> false\n  isckbe(7) ==> true\n  isckbe(8) ==> false\n  isckbe(9) ==> true\n  isckbe(10) ==> false\n  */\nconst isckbe7 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a < 2) return false;\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return true;\n  if (a % 5 === 0) return false;\n  if (a % 7 === 0) return true;\n  if (a % 9 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(3) ==> true\n  isckbe(4) ==> false\n  isckbe(5) ==> true\n  isckbe(6) ==> false\n  isckbe(7) ==> true\n  isckbe(8) ==> false\n  isckbe(9) ==> true\n  isckbe(10) ==> false\n  */\n"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n  let count = 0;\n  let numStr = \"\";\n  let numArr = num.split(\"\");\n  for (let i = 0; i < numArr.length; i++) {\n    numStr += numArr[i];\n    if (numStr.length === 2) {\n      numStr += numArr[i];\n      if (numStr.length === 2) {\n        numStr += numArr[i];\n        if (numStr.length === 2) {\n          numStr += numArr[i];\n          if (numStr.length === 2) {\n            numStr += numArr[i];\n            if (numStr.length === 2) {\n              numStr += numArr[i];\n              if (numStr.length === 2) {\n                numStr += numArr[i];\n                if (numStr.length === 2) {\n                  numStr += numArr[i];\n                  if (numStr.length === 2) {\n                    numStr += numArr[i];\n                    if (numStr.length === 2) {\n                      numStr += numArr[i];\n                      if (numStr.length === 2) {\n                        numStr += numArr[i];\n                        if (numStr.length === 2) {\n                          numStr += numArr[i];\n                          if (numStr.length === 2) {\n                            numStr += numArr[i];\n                            if (numStr.length === 2) {\n                              numStr += numArr[i];\n                              if (numStr.length === 2) {\n                                numStr += numArr[i];\n                                if (numStr.length === 2) {\n                                  numStr += numArr[i];\n                                  if (numStr.length === 2) {\n                                    numStr += numArr[i];\n                                    if (numStr.length === 2) {\n                                      numStr += numArr[i];\n                                      if (numStr.length === 2) {\n                                        numStr += numArr[i];\n                                        if (numStr.length === 2) {\n                                          numStr += numArr[i];\n                                            if (numStr.length === 2) {\n                                              numStr += numArr[i];\n                                              if (numStr.length === 2) {\n                                                numStr += numArr[i];\n                                                if (numStr.length === 2) {\n                                                  numStr += numArr[i];\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that receives a string and counts the number of uppercase letters.\n  Uppercase letters are A===B===C===D===E===F.\n  Examples:\n  For str = \"ABCDEF\" the output should be 3.\n  For str = \"ABCDEFG\" the output should be 4.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 6.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF\" the output should be 8.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 12.\n  For str}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n  let binaryString = '';\n  let binaryNumber = 0;\n  let decimalNumber = parseInt(decimal, 10);\n  let decimalString = '';\n  let decimalNumberString = '';\n  let decimalNumberStringLength = 0;\n  let decimalStringLength = 0;\n  let decimalStringLength2 = 0;\n  let decimalStringLength3 = 0;\n  let decimalStringLength4 = 0;\n  let decimalStringLength5 = 0;\n  let decimalStringLength6 = 0;\n  let decimalStringLength7 = 0;\n  let decimalStringLength8 = 0;\n  let decimalStringLength9 = 0;\n  let decimalStringLength10 = 0;\n  let decimalStringLength11 = 0;\n  let decimalStringLength12 = 0;\n  let decimalStringLength13 = 0;\n  let decimalStringLength14 = 0;\n  let decimalStringLength15 = 0;\n  let decimalStringLength16 = 0;\n  let decimalStringLength17 = 0;\n  let decimalStringLength18 = 0;\n  let decimalStringLength19 = 0;\n  let decimalStringLength20 = 0;\n  let decimalStringLength21 = 0;\n  let decimalStringLength22 = 0;\n  let decimalStringLength23 = 0;\n  let decimalStringLength24 = 0;\n  let decimalStringLength25 = 0;\n  let decimalStringLength26 = 0;\n  let decimalStringLength27 = 0;\n  let decimalStringLength28 = 0;\n  let decimalStringLength29 = 0;\n  let decimalStringLength30 = 0;\n  let decimalStringLength31 = 0;\n  let decimalStringLength32 = 0;\n  let decimalStringLength33 = 0;\n  let decimalStringLength34 = 0;\n  let decimalStringLength35 = 0;\n  let decimalStringLength36 = 0;\n  let decimalStringLength37 = 0;\n  let decimalStringLength38 = 0;\n  let decimalStringLength39 = 0;\n  let decimalStringLength40 = 0;\n  let decimalStringLength41 = 0;\n  let decimalStringLength42 = 0;\n  let decimalStringLength43 = 0;\n  let decimalStringLength44 = 0;\n  let decimalStringLength45 = 0;\n  let decimalStringLength46 = 0;\n  let decimalStringLength47 = 0;\n  let decimalStringLength48 = 0;\n  let decimalStringLength49 = 0;\n  let decimalStringLength50 = 0;\n  let decimalStringLength51 = 0;\n  let decimalStringLength52 = 0;\n  let decimalStringLength53 = 0;\n  let decimalStringLength54 = 0;\n  let decimalStringLength55 = 0;\n  let decimalStringLength56 = 0;\n  let decimalStringLength57 = 0;\n  let decimalStringLength58 = 0;\n  let decimalStringLength59 = 0;\n  let decimalStringLength60 = 0;\n  let decimalStringLength61 = 0;\n  let decimalStringLength62 = 0;\n  let decimalStringLength63 = 0;\n  let decimalStringLength64 = 0;\n  let decimalStringLength65 = 0;\n  let decimalStringLength66 = 0;\n  let decimalStringLength67 = 0;\n  let decimalStringLength68 = 0;\n  let decimalStringLength69 = 0;\n  let decimalStringLength70 = 0;\n  let decimalStringLength71 = 0;\n  let decimalStringLength72 = 0;\n  let decimalStringLength73 = 0;\n  let decimalStringLength74 = 0;\n  let decimalStringLength75 = 0;\n  let decimalStringLength76 = 0;\n  let decimalStringLength77 = 0;\n  let decimalStringLength78 = 0;\n  let decimalStringLength79 = 0;\n  let decimalStringLength80 = 0;\n  let decimalStringLength81 = 0;\n  let decimalStringLength82 = 0;\n  let decimalStringLength83 = 0;\n  let decimalStringLength84 = 0;\n  let decimalStringLength85 = 0;\n  let decimalStringLength86 = 0;\n  let decimalStringLength87 = 0;\n  let decimalStringLength88 = 0;\n  let decimalStringLength89 = 0;\n  let decimalStringLength90 = 0;\n  let decimalStringLength91 = 0;\n  let decimalStringLength92 = 0;\n  let decimalStringLength93 = 0;\n  let decimalStringLength94 = 0;\n  let decimalStringLength95 = 0;\n  let decimalStringLength96 = 0;\n  let decimalStringLength97 = 0;\n  let decimalStringLength98 = 0;\n  let decimalStringLength99 = 0;\n  let decimalStringLength100 = 0;\n  let decimalStringLength101 = 0;\n  let decimalStringLength102 = 0;\n  let decimalStringLength103 = 0;\n  let decimalStringLength104 = 0;\n  let decimalStringLength105 = 0;\n  let decimalStringLength106 = 0;\n  let decimalStringLength107 = 0;\n  let decimalStringLength108 = 0;\n  let decimalStringLength109 = 0;\n  let decimalStringLength110 = 0;\n  let decimalStringLength111 = 0;\n  let decimalStringLength112 = 0;\n  let decimalStringLength113 = 0;\n  let decimalStringLength114 = 0;\n  let decimalStringLength115 = 0;\n  let decimalStringLength116 = 0;\n  let decimalStringLength117 = 0;\n  let decimalStringLength118 = 0;\n  let decimalStringLength119 = 0;\n  let decimalStringLength120 = 0;\n  let decimalStringLength121 = 0;\n  let decimalStringLength122 = 0;\n  let decimalStringLength123 = 0;\n  let decimalStringLength124 = 0;\n  let decimalStringLength125 = 0;\n  let decimalStringLength126 = 0;\n  let decimalStringLength127 = 0;\n  let decimalStringLength128 = 0;\n  let decimalStringLength129 = 0;\n  let decimalStringLength130 = 0;\n  let decimalStringLength131 = 0;\n  let decimalStringLength132 = 0;\n  let decimalStringLength133 = 0;\n  let decimalStringLength134 = 0;\n  let decimalStringLength135 = 0;\n  let decimalStringLength136 = 0;\n  let decimalStringLength137 = 0;\n  let decimalStringLength138 = 0;\n  let decimalStringLength139 = 0;\n  let decimalStringLength140 = 0;\n  let decimalStringLength141 = 0;\n  let decimalStringLength142 = 0;\n  let decimalStringLength143 = 0;\n  let decimalStringLength144 = 0;\n  let decimalStringLength145 = 0;\n  let decimalStringLength146 = 0;\n  let decimalStringLength147 = 0;\n  let decimalStringLength148 = 0;\n  let decimalStringLength149 = 0;\n  let decimalStringLength150 = 0;\n  let decimalStringLength151 = 0;\n  let decimalStringLength152 = 0;\n  let decimalStringLength153 = 0;\n  let decimalStringLength154 = 0;\n  let decimalStringLength155 = 0;\n  let decimalStringLength156 = 0;\n  let decimalStringLength157 = 0;\n  let decimalStringLength158 = 0;\n  let decimalStringLength159 = 0;\n  let decimalStringLength160 = 0;\n  let decimalStringLength161 = 0;\n  let decimalStringLength162 = 0;\n  let decimalStringLength163 = 0;\n  let decimalStringLength164 = 0;\n  let decimalStringLength165 = 0;\n  let decimalStringLength166 = 0;\n  let decimalStringLength167 = 0;\n  let decimalStringLength168 = 0;\n  let decimalStringLength169 = 0;\n  let decimalStringLength170 = 0;\n  let decimalStringLength171 = 0;\n  let decimalStringLength172 = 0;\n  let decimalStringLength173 = 0;\n  let decimalStringLength174 = 0;\n  let decimalStringLength175 = 0;\n  let decimalStringLength176 = 0;\n  let decimalStringLength177 = 0;\n  let decimalStringLength178 = 0;\n  let decimalStringLength179 = 0;\n  let decimalStringLength180 = 0;\n  let decimalStringLength181 = 0;\n  let decimalStringLength182 = 0;\n  let decimalStringLength183 = 0;\n  let decimalStringLength184 = 0;\n  let decimalStringLength185 = 0;\n  let decimalStringLength186 = 0;\n  let decimalStringLength187 = 0;\n  let decimalStringLength188 = 0;\n  let decimalStringLength189 = 0;\n  let decimalStringLength190 = 0;\n  let decimalStringLength191 = 0;\n  let decimalStringLength192 = 0;\n  let decimalStringLength193 = 0;\n  let decimalStringLength194 = 0;\n  let decimalStringLength195 = 0;\n  let decimalStringLength196 = 0;\n  let decimalStringLength197 = 0;\n  let decimalStringLength198 = 0;\n  let decimalStringLength"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n  let count = 0;\n  let isHwppy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      if (s.charAt(i)!== s.charAt(i + 1)) {\n        isHwppy = false;\n        break;\n      }\n    }\n    count++;\n  }\n  return isHwppy;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalin(a) => false\n  isPalin(aa) => true\n  isPalin(abcd) => false\n  isPalin(aabb) => false\n  isPalin(adb) => false\n  isPalin(xyy) => true\n  */\nconst isPalin = (s) => {\n  let count = 0;\n  let isPalin = true;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      if (s.charAt(i)!== s.charAt(i + 1)) {\n        isPalin = false;\n        break;\n      }\n    }\n    count++;\n  }\n  return isPalin;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalin(a) => false\n  isPalin(aa) => true\n  isPalin(abcd) => false\n  isPalin(aabb) => false\n  isPalin(adb) => false\n  isPalin(xyy) => false\n  */\nconst isPalin2 = (s) => {\n  let count = 0;\n  let isPalin = true;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      if (s.charAt(i)!== s.charAt(i + 1)) {\n        isPalin = false;\n        break;\n      }\n    }\n    count++;\n  }\n  return isPalin;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalin(a) => false\n  isPalin(aa) => false\n  isPalin(abcd) => false\n  isPalin(aabb) => false\n  isPalin(adb) => false\n  isPalin(xyy) => false\n  */\nconst isPalin3 = (s) => {\n  let count = 0;\n  let isPalin = true;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      if (s.charAt(i)!== s.charAt(i + 1)) {\n        isPalin = false;\n        break;\n      }\n    }\n    count++;\n  }\n  return isPalin;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalin(a) => false\n  isPalin(aa) => false\n  isPalin(abcd) => false\n  isPalin(aabb) => false\n  isPalin(adb) => false\n  isPalin(xyy) => false\n  */\nconst isPalin4 = (s) => {\n  let count = 0;\n  let isPalin = true;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      if (s.charAt(i)!== s.charAt(i + 1)) {\n        isPalin = false;\n        break;\n      }\n    }\n    count++;\n  }\n  return isPalin;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalin(a) => false\n  isPalin(aa) => false\n  isPalin(abcd) => false\n  isPalin(aabb) => false\n  isPalin(adb) => false\n  isPalin(xyy) => false\n  */\nconst isPalin5 = (s) => {\n  let count = 0;\n  let isPalin = true;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      if (s.charAt(i)!== s.charAt(i + 1)) {\n        isPalin = false;\n        break;\n      }\n    }\n    count++;\n  }\n  return isPalin;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalin(a) => false\n  isPalin(aa) => false\n  isPalin(abcd) => false\n  isPalin(aabb) => false\n  isPalin(adb) => false\n  isPalin(xyy) => false\n  */\nconst isPalin6 = (s) => {\n  let count = 0;\n  let isPalin = true;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      if (s.charAt(i)!== s.charAt(i + 1)) {\n        isPalin = false;\n        break;\n      }\n    }\n    count++;\n  }\n  return isPalin;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalin(a) => false\n  isPalin(aa) => false\n  isPalin(abcd) => false\n  isPalin(aabb) => false\n  isPalin(adb) => false\n  isPalin(xyy) => false\n  */\nconst isPalin7 = (s) => {\n  let count = 0;\n  let isPalin = true;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      if (s.charAt(i)!== s.charAt(i + 1)) {\n        isPalin = false;\n        break;\n      }\n    }\n    count++;\n  }\n  return isPalin;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalin(a) => false\n  isPalin(aa) => false\n  isPalin(abcd) => false\n  isPalin(aabb) => false\n  isPalin(adb) => false\n  isPalin(xyy) => false\n  */\nconst isPalin8 = (s) => {\n  let count = 0;\n  let isPalin = true;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      if (s.charAt(i)!== s.charAt(i + 1)) {\n        isPalin = false;\n        break;\n      }\n    }\n    count++;\n  }\n  return isPalin;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isPalin(a) => false\n  isPalin(aa) => false\n  isPalin(abcd) => false\n  isPalin(aabb) => false\n  isPalin(adb) => false\n  isPalin(xyy) => false\n  */\nconst isPalin9 = (s) => {\n  let count = 0;\n  let isPalin = true;\n"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => {\n    const letterGrade = grade.charAt(0).toUpperCase() + grade.slice(1);\n    return letterGrade;\n  });\n  return letterGrades;\n};\n\n/*\n  Given an array of grades, return an array of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  letterGrades([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == ['A+', 'A', 'B', 'C', 'C', 'A', 'B', 'B', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % length === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == true\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let isDivisibleBy3 = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 3 === 0) {\n      isDivisibleBy3 = false;\n      break;\n    }\n  }\n  return isDivisibleBy3;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == true\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let isDivisibleBy5 = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 5 === 0) {\n      isDivisibleBy5 = false;\n      break;\n    }\n  }\n  return isDivisibleBy5;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == true\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let isDivisibleBy7 = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 7 === 0) {\n      isDivisibleBy7 = false;\n      break;\n    }\n  }\n  return isDivisibleBy7;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisibleBy9('Hello') == true\n  divisibleBy9('abcdcba') == true\n  divisibleBy9('kittens') == true\n  divisibleBy9('orange') == false\n  */\nconst divisibleBy9 = (string) => {\n  let isDivisibleBy9 = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 9 === 0) {\n      isDivisibleBy9 = false;\n      break;\n    }\n  }\n  return isDivisibleBy9;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == true\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let isDivisibleBy11 = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 11 === 0) {\n      isDivisibleBy11 = false;\n      break;\n    }\n  }\n  return isDivisibleBy11;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == true\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let isDivisibleBy13 = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 13 === 0) {\n      isDivisibleBy13 = false;\n      break;\n    }\n  }\n  return isDivisibleBy13;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('abcdcba') == true\n  divisibleBy15('kittens') == true\n  divisibleBy15('orange') == false\n  */\nconst divisibleBy15 = (string) => {\n  let isDivisibleBy15 = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 15 === 0) {\n      isDivisibleBy15 = false;\n      break;\n    }\n  }\n  return isDivisibleBy15;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == true\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let isDivisibleBy17 = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 17 === 0) {\n      isDivisibleBy17 = false;\n      break;\n    }\n  }\n  return isDivisibleBy17;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('abcdcba') == true\n  divisibleBy19('kittens') == true\n  divisibleBy19('orange') == false\n  */\nconst divisibleBy19 = (string) => {\n  let isDivisibleBy19 = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 19 === 0) {\n      isDivisibleBy19 = false;\n      break;\n    }\n  }\n  return isDivisibleBy19;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 21 or false otherwise\n  Examples\n  divisibleBy21('Hello') == true\n  divisibleBy21('abcdcba') == true\n  divisibleBy21('kittens') == true\n  divisibleBy21('orange') == false\n  */\nconst divisibleBy21 = (string) => {\n  let isDivisibleBy21 = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 21 === 0) {\n      isDivisibleBy21 = false;\n      break;\n    }\n  }\n  return isDivisibleBy21;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 23 or false otherwise\n  Examples\n  divisibleBy23('Hello') == true\n  divisibleBy23('abcdcba') == true\n  divisibleBy23('kittens') == true\n  divisibleBy23('orange') == false\n  */\nconst divisibleBy23 = (string) => {\n  let isDivisibleBy23 = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 23 === 0) {\n      isDivisibleBy23 = false;\n      break;\n    }\n  }\n  return isDi"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (n % k === 0) {\n      count++;\n    }\n    k++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 2.\n  */\nconst stagtsTwoEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (n % k === 0) {\n      count++;\n    }\n    k++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 3.\n  */\nconst stagtsThreeEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (n % k === 0) {\n      count++;\n    }\n    k++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 4.\n  */\nconst stagtsFourEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (n % k === 0) {\n      count++;\n    }\n    k++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 5.\n  */\nconst stagtsFiveEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (n % k === 0) {\n      count++;\n    }\n    k++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 6.\n  */\nconst stagtsSixEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (n % k === 0) {\n      count++;\n    }\n    k++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 7.\n  */\nconst stagtsSevenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (n % k === 0) {\n      count++;\n    }\n    k++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 8.\n  */\nconst stagtsEightEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (n % k === 0) {\n      count++;\n    }\n    k++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 9.\n  */\nconst stagtsNineEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (n % k === 0) {\n      count++;\n    }\n    k++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 10.\n  */\nconst stagtsTenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (n % k === 0) {\n      count++;\n    }\n    k++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 11.\n  */\nconst stagtsElevenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (n % k === 0) {\n      count++;\n    }\n    k++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 12.\n  */\nconst stagtsTwelveEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (n % k === 0) {\n      count++;\n    }\n    k++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 13.\n  */\nconst stagtsThirteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sumDigits = 0;\n  let sumDigitsBinary = \"\";\n  while (N >= 10) {\n    binary = binary.concat(binary.toString().padStart(8, '0'));\n    N = N / 10;\n    i++;\n  }\n  while (N >= 2) {\n    binary = binary.concat(binary.toString().padStart(2, '0'));\n    N = N / 2;\n    i++;\n  }\n  while (N >= 1) {\n    binary = binary.concat(binary.toString().padStart(1, '0'));\n    N = N / 1;\n    i++;\n  }\n  while (N >= 0) {\n    binary = binary.concat(binary.toString().padStart(0, '0'));\n    N = N / 0;\n    i++;\n  }\n  while (N >= 0) {\n    sumDigits = sumDigits + parseInt(binary.toString().padStart(8, '0'), 2);\n    sumDigitsBinary = sumDigitsBinary.concat(binary.toString().padStart(8, '0'));\n    N = N / 0;\n    i++;\n  }\n  while (sumDigitsBinary.length < 8) {\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    sumDigits = sumDigits + parseInt(sumDigitsBinary.toString().padStart(8, '0'), 2);\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    N = N / 0;\n    i++;\n  }\n  while (sumDigitsBinary.length < 8) {\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    sumDigits = sumDigits + parseInt(sumDigitsBinary.toString().padStart(8, '0'), 2);\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    N = N / 0;\n    i++;\n  }\n  while (sumDigitsBinary.length < 8) {\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    sumDigits = sumDigits + parseInt(sumDigitsBinary.toString().padStart(8, '0'), 2);\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    N = N / 0;\n    i++;\n  }\n  while (sumDigitsBinary.length < 8) {\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    sumDigits = sumDigits + parseInt(sumDigitsBinary.toString().padStart(8, '0'), 2);\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    N = N / 0;\n    i++;\n  }\n  while (sumDigitsBinary.length < 8) {\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    sumDigits = sumDigits + parseInt(sumDigitsBinary.toString().padStart(8, '0'), 2);\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    N = N / 0;\n    i++;\n  }\n  while (sumDigitsBinary.length < 8) {\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    sumDigits = sumDigits + parseInt(sumDigitsBinary.toString().padStart(8, '0'), 2);\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    N = N / 0;\n    i++;\n  }\n  while (sumDigitsBinary.length < 8) {\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    sumDigits = sumDigits + parseInt(sumDigitsBinary.toString().padStart(8, '0'), 2);\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    N = N / 0;\n    i++;\n  }\n  while (sumDigitsBinary.length < 8) {\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    sumDigits = sumDigits + parseInt(sumDigitsBinary.toString().padStart(8, '0'), 2);\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    N = N / 0;\n    i++;\n  }\n  while (sumDigitsBinary.length < 8) {\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    sumDigits = sumDigits + parseInt(sumDigitsBinary.toString().padStart(8, '0'), 2);\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    N = N / 0;\n    i++;\n  }\n  while (sumDigitsBinary.length < 8) {\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    sumDigits = sumDigits + parseInt(sumDigitsBinary.toString().padStart(8, '0'), 2);\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    N = N / 0;\n    i++;\n  }\n  while (sumDigitsBinary.length < 8) {\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    sumDigits = sumDigits + parseInt(sumDigitsBinary.toString().padStart(8, '0'), 2);\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    N = N / 0;\n    i++;\n  }\n  while (sumDigitsBinary.length < 8) {\n    sumDigitsBinary = sumDigitsBinary.concat(sumDigitsBinary.toString().padStart(8, '0'));\n    sumDigits = sumDigits + parseInt(sumDigitsBinary.toString().padStart(8, '0'), 2);\n    sumDig"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      lst[i] = lst[i] % 2;\n      sum += lst[i];\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      lst[i] = lst[i] % 2;\n      sum += lst[i];\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2!== 0) {\n      lst[j] = lst[j] % 2;\n      sum += lst[j];\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the even elements that are at odd indices..\n\n\n  Examples:\n      sumEven([4, 2, 6, 7]) ==> 6\n  */\nconst sumEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the odd elements that are at even indices..\n\n\n  Examples:\n      sumOdd([4, 2, 6, 7]) ==> 7\n  */\nconst sumOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2!== 0) {\n      lst[j] = lst[j] % 2;\n      sum += lst[j];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the difference between the sum of all the even elements that are at odd indices and the sum of all the odd elements that are at even indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 2\n  */\nconst diff = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum - sumEven(lst);\n};\n\n/*Given a non-empty list of integers lst. return the difference between the sum of all the even elements that are at odd indices and the sum of all the odd elements that are at even indices..\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\nconst diffOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2!== 0) {\n      lst[j] = lst[j] % 2;\n      sum += lst[j];\n    }\n  }\n  return sum - sumOdd(lst, i);\n};\n\n/*Given a non-empty list of integers lst. return the difference between the sum of all the even elements that are at odd indices and the sum of all the odd elements that are at even indices..\n\n\n  Examples:\n      diffOdd([4, 2, 6, 7]) ==> -1\n  */\nconst diffEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum - sumOdd(lst, i);\n};\n\n/*Given a non-empty list of integers lst. return the difference between the sum of all the odd elements that are at even indices and the sum of all the even elements that are at odd indices..\n\n\n  Examples:\n      diffEven([4, 2, 6, 7]) ==> 1\n  */\nconst diffOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2!== 0) {\n      lst[j] = lst[j] % 2;\n      sum += lst[j];\n    }\n  }\n  return sum - sumEven(lst);\n};\n\n/*Given a non-empty list of integers lst. return the difference between the sum of all the even elements that are at odd indices and the sum of all the odd elements that are at even indices..\n\n\n  Examples:\n      diffOdd([4, 2, 6, 7]) ==> -1\n  */\nconst diffEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum - sumOdd(lst, i);\n};\n\n/*Given a non-empty list of integers lst. return the difference between the sum of all the even elements that are at odd indices and the sum of all the odd elements that are at even indices..\n\n\n  Examples:\n      diffEven([4, 2, 6, 7]) ==> 1\n  */\nconst diffOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2!== 0) {\n      lst[j] = lst[j] % 2;\n      sum += lst[j];\n    }\n  }\n  return sum - sumOdd(lst, i);\n};\n\n/*Given a non-empty list of integers lst. return the difference between the sum of all the even elements that are at odd indices and the sum of all the odd elements that are at even indices..\n\n\n  Examples:\n      diffOdd([4, 2, 6, 7]) ==> -1\n  */\nconst diffEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum - sumOdd(lst, i);\n};\n\n/*Given a non-empty list of integers lst. return the difference between the sum of all the even elements that are at odd indices and the sum of all the odd elements that are at even indices..\n\n\n  Examples:\n      diffOdd([4, 2, 6, 7]) ==> 1\n  */\nconst diffOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2!== 0) {\n      lst[j] = lst[j] % 2;\n      sum += lst[j];\n    }\n  }\n  return sum - sumOdd(lst, i);\n};\n\n/*Given a non-empty list of integers lst. return the difference between the sum of all the even elements that are at odd indices and the sum of all the odd elements that are at even indices..\n\n\n  Examples:\n      diffOdd([4, 2, 6, 7]) ==> -1\n  */\nconst diffEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum - sumOdd(lst, i);\n};\n\n/*Given a non-empty list of integers lst. return the difference between the sum of all the even elements that are at odd indices and the sum of all the odd elements that are at even indices..\n\n\n  Examples:\n      diffOdd([4, 2, 6, 7]) ==> 1\n  */\nconst diffOdd = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (lst[j] % 2!== 0) {\n      lst[j] = lst[j] % 2;\n      sum += lst[j];\n    }\n  }\n  return sum - sumOdd(lst, i);\n};"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  let newString = '';\n  let word = '';\n  let space = '';\n  let char = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = '';\n  let temp2 = '';\n  let temp3 = '';\n  let temp4 = '';\n  let temp5 = '';\n  let temp6 = '';\n  let temp7 = '';\n  let temp8 = '';\n  let temp9 = '';\n  let temp10 = '';\n  let temp11 = '';\n  let temp12 = '';\n  let temp13 = '';\n  let temp14 = '';\n  let temp15 = '';\n  let temp16 = '';\n  let temp17 = '';\n  let temp18 = '';\n  let temp19 = '';\n  let temp20 = '';\n  let temp21 = '';\n  let temp22 = '';\n  let temp23 = '';\n  let temp24 = '';\n  let temp25 = '';\n  let temp26 = '';\n  let temp27 = '';\n  let temp28 = '';\n  let temp29 = '';\n  let temp30 = '';\n  let temp31 = '';\n  let temp32 = '';\n  let temp33 = '';\n  let temp34 = '';\n  let temp35 = '';\n  let temp36 = '';\n  let temp37 = '';\n  let temp38 = '';\n  let temp39 = '';\n  let temp40 = '';\n  let temp41 = '';\n  let temp42 = '';\n  let temp43 = '';\n  let temp44 = '';\n  let temp45 = '';\n  let temp46 = '';\n  let temp47 = '';\n  let temp48 = '';\n  let temp49 = '';\n  let temp50 = '';\n  let temp51 = '';\n  let temp52 = '';\n  let temp53 = '';\n  let temp54 = '';\n  let temp55 = '';\n  let temp56 = '';\n  let temp57 = '';\n  let temp58 = '';\n  let temp59 = '';\n  let temp60 = '';\n  let temp61 = '';\n  let temp62 = '';\n  let temp63 = '';\n  let temp64 = '';\n  let temp65 = '';\n  let temp66 = '';\n  let temp67 = '';\n  let temp68 = '';\n  let temp69 = '';\n  let temp70 = '';\n  let temp71 = '';\n  let temp72 = '';\n  let temp73 = '';\n  let temp74 = '';\n  let temp75 = '';\n  let temp76 = '';\n  let temp77 = '';\n  let temp78 = '';\n  let temp79 = '';\n  let temp80 = '';\n  let temp81 = '';\n  let temp82 = '';\n  let temp83 = '';\n  let temp84 = '';\n  let temp85 = '';\n  let temp86 = '';\n  let temp87 = '';\n  let temp88 = '';\n  let temp89 = '';\n  let temp90 = '';\n  let temp91 = '';\n  let temp92 = '';\n  let temp93 = '';\n  let temp94 = '';\n  let temp95 = '';\n  let temp96 = '';\n  let temp97 = '';\n  let temp98 = '';\n  let temp99 = '';\n  let temp100 = '';\n  let temp101 = '';\n  let temp102 = '';\n  let temp103 = '';\n  let temp104 = '';\n  let temp105 = '';\n  let temp106 = '';\n  let temp107 = '';\n  let temp108 = '';\n  let temp109 = '';\n  let temp110 = '';\n  let temp111 = '';\n  let temp112 = '';\n  let temp113 = '';\n  let temp114 = '';\n  let temp115 = '';\n  let temp116 = '';\n  let temp117 = '';\n  let temp118 = '';\n  let temp119 = '';\n  let temp120 = '';\n  let temp121 = '';\n  let temp122 = '';\n  let temp123 = '';\n  let temp124 = '';\n  let temp125 = '';\n  let temp126 = '';\n  let temp127 = '';\n  let temp128 = '';\n  let temp129 = '';\n  let temp130 = '';\n  let temp131 = '';\n  let temp132 = '';\n  let temp133 = '';\n  let temp134 = '';\n  let temp135 = '';\n  let temp136 = '';\n  let temp137 = '';\n  let temp138 = '';\n  let temp139 = '';\n  let temp140 = '';\n  let temp141 = '';\n  let temp142 = '';\n  let temp143 = '';\n  let temp144 = '';\n  let temp145 = '';\n  let temp146 = '';\n  let temp147 = '';\n  let temp148 = '';\n  let temp149 = '';\n  let temp150 = '';\n  let temp151 = '';\n  let temp152 = '';\n  let temp153 = '';\n  let temp154 = '';\n  let temp155 = '';\n  let temp156 = '';\n  let temp157 = '';\n  let temp158 = '';\n  let temp159 = '';\n  let temp160 = '';\n  let temp161 = '';\n  let temp162 = '';\n  let temp163 = '';\n  let temp164 = '';\n  let temp165 = '';\n  let temp166 = '';\n  let temp167 = '';\n  let temp168 = '';\n  let temp169 = '';\n  let temp170 = '';\n  let temp171 = '';\n  let temp172 = '';\n  let temp173 = '';\n  let temp174 = '';\n  let temp175 = '';\n  let temp176 = '';\n  let temp177 = '';\n  let temp178 = '';\n  let temp179 = '';\n  let temp180 = '';\n  let temp181 = '';\n  let temp182 = '';\n  let temp183 = '';\n  let temp184 = '';\n  let temp185 = '';\n  let temp186 = '';\n  let temp187 = '';\n  let temp188 = '';\n  let temp189 = '';\n  let temp190 = '';\n  let temp191 = '';\n  let temp192 = '';\n  let temp193 = '';\n  let temp194 = '';\n  let temp195 = '';\n  let temp196 = '';\n  let temp197 = '';\n  let temp198 = '';\n  let temp199 = '';\n  let temp200 = '';\n  let temp201 = '';\n  let temp202 = '';\n  let temp203 = '';\n  let temp204 = '';\n  let temp205 = '';\n  let temp206 = '';\n  let temp207 = '';\n  let temp208 = '';\n  let temp209 = '';\n  let temp210 = '';\n  let temp211 = '';\n  let temp212 = '';\n  let temp213 = '';\n  let temp214 = '';\n  let temp215 = '';\n  let temp216 = '';\n  let temp217 = '';\n  let temp218 = '';\n  let temp219 = '';\n  let temp220 = '';\n  let temp221 = '';\n  let temp222 = '';\n  let temp223 = '';\n  let temp224 = '';\n  let temp225 = '';\n  let temp226 = '';\n  let temp227 = '';\n  let temp228 = '';\n  let temp229 = '';\n  let temp230 = '';\n  let temp231 = '';\n  let temp232 = '';\n  let temp233 = '';\n  let temp234 = '';\n  let temp235 = '';\n  let temp236 = '';\n  let temp237 = '';\n  let temp238 = '';\n  let temp239 = '';\n  let temp240 = '';\n  let temp241 = '';\n  let temp242 = '';\n  let temp243 = '';\n  let temp244 = '';\n  let temp245 = '';\n  let temp246 = '';\n  let temp247 = '';\n  let temp248 = '';\n  let temp249 = '';\n  let temp250 = '';\n  let temp251 = '';\n  let temp252 = '';\n  let temp253 = '';\n  let temp254 = '';\n  let temp255 = '';\n  let temp256 = '';\n  let temp257 = '';\n  let temp258 = '';\n  let temp259 = '';\n  let temp260 = '';\n  let temp261 = '';\n  let temp262 = '';\n  let temp263 = '';\n  let temp264 = '';\n  let temp265 = '';\n  let temp266 = '';\n  let temp267 = '';\n  let temp268 = '';\n  let temp269 = '';\n  let temp270 = '';\n  let temp27"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let rowIndex = 0;\n  let colIndex = 0;\n  while (row < lst.length) {\n    while (col < lst[row].length) {\n      if (lst[row][col] === x) {\n        result.push([rowIndex, colIndex]);\n        rowIndex++;\n        colIndex++;\n      } else if (lst[row][col] < x) {\n        col++;\n      } else {\n        row++;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let rowIndex = 0;\n  let colIndex = 0;\n  while (row < lst.length) {\n    while (col < lst[row].length) {\n      if (lst[row][col] === x) {\n        result.push([rowIndex, colIndex]);\n        rowIndex++;\n        colIndex++;\n      } else if (lst[row][col] < x) {\n        col++;\n      } else {\n        row++;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let rowIndex = 0;\n  let colIndex = 0;\n  while (row < lst.length) {\n    while (col < lst[row].length) {\n      if (lst[row][col] === x) {\n        result.push([rowIndex, colIndex]);\n        rowIndex++;\n        colIndex++;\n      } else if (lst[row][col] < x) {\n        col++;\n      } else {\n        row++;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let rowIndex = 0;\n  let colIndex = 0;\n  while (row < lst.length) {\n    while (col < lst[row].length) {\n      if (lst[row][col] === x) {\n        result.push([rowIndex, colIndex]);\n        rowIndex++;\n        colIndex++;\n      } else if (lst[row][col] < x) {\n        col++;\n      } else {\n        row++;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let rowIndex = 0;\n  let colIndex = 0;\n  while (row < lst.length) {\n    while (col < lst[row].length) {\n      if (lst[row][col] === x) {\n        result.push([rowIndex, colIndex]);\n        rowIndex++;\n        colIndex++;\n      } else if (lst[row][col] < x) {\n        col++;\n      } else {\n        row++;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let rowIndex = 0;\n  let colIndex = 0;"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let result = [];\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let flag = false;\n  while (i < array.length) {\n    if (flag === false) {\n      flag = true;\n      sum += array[i];\n      result.push(sum);\n    }\n    if (flag === true) {\n      flag = false;\n      result.push(array[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the given sum.\n\n  Example:\n  * sumArray([]) => []\n  * sumArray([5]) => [5]\n  * sumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30, 35]\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => [10, 15, 20, 25, 30, 35, 20, 10]\n  */\nconst sumArray = (array) => {\n  let result = [];\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < array.length) {\n    sum += array[i];\n    result.push(sum);\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the given sum.\n\n  Example:\n  * sumArray([]) => []\n  * sumArray([5]) => [5]\n  * sumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30, 35]\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => [10, 15, 20, 25, 30, 35, 20, 10]\n  */\nconst sumArrayWithZero = (array) => {\n  let result = [];\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < array.length) {\n    if (array[i] === 0) {\n      result.push(sum);\n      sum = 0;\n      i++;\n    }\n    sum += array[i];\n    result.push(sum);\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the given sum.\n\n  Example:\n  * sumArray([]) => []\n  * sumArray([5]) => [5]\n  * sumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30, 35]\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => [10, 15, 20, 25, 30, 35, 20, 10]\n  */\nconst sumArrayWithZeroAndOne = (array) => {\n  let result = [];\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < array.length) {\n    if (array[i] === 1) {\n      result.push(sum);\n      sum = 0;\n      i++;\n    }\n    sum += array[i];\n    result.push(sum);\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the given sum.\n\n  Example:\n  * sumArray([]) => []\n  * sumArray([5]) => [5]\n  * sumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30, 35]\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => [10, 15, 20, 25, 30, 35, 20, 10]\n  */\nconst sumArrayWithZeroAndOneAndZero = (array) => {\n  let result = [];\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < array.length) {\n    if (array[i] === 0 && array[i] === 1) {\n      result.push(sum);\n      sum = 0;\n      i++;\n    }\n    sum += array[i];\n    result.push(sum);\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the given sum.\n\n  Example:\n  * sumArray([]) => []\n  * sumArray([5]) => [5]\n  * sumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30, 35]\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => [10, 15, 20, 25, 30, 35, 20, 10]\n  */\nconst sumArrayWithZeroAndOneAndOne = (array) => {\n  let result = [];\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < array.length) {\n    if (array[i] === 1 && array[i] === 0) {\n      result.push(sum);\n      sum = 0;\n      i++;\n    }\n    sum += array[i];\n    result.push(sum);\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the given sum.\n\n  Example:\n  * sumArray([]) => []\n  * sumArray([5]) => [5]\n  * sumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30, 35]\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => [10, 15, 20, 25, 30, 35, 20, 10]\n  */\nconst sumArrayWithZeroAndOneAndOneAndZero = (array) => {\n  let result = [];\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < array.length) {\n    if (array[i] === 1 && array[i] === 0) {\n      result.push(sum);\n      sum = 0;\n      i++;\n    }\n    sum += array[i];\n    result.push(sum);\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the given sum.\n\n  Example:\n  * sumArray([]) => []\n  * sumArray([5]) => [5]\n  * sumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30, 35]\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => [10, 15, 20, 25, 30, 35, 20, 10]\n  */\nconst sumArrayWithZeroAndOneAndOneAndOne = (array) => {\n  let result = [];\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < array.length) {\n    if (array[i] === 1 && array[i] === 1) {\n      result.push(sum);\n      sum = 0;\n      i++;\n    }\n    sum += array[i];\n    result.push(sum);\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the given sum.\n\n  Example:\n  * sumArray([]) => []\n  * sumArray([5]) => [5]\n  * sumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30, 35]\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => [10, 15, 20, 25, 30, 35, 20, 10]\n  */\nconst sumArrayWithZeroAndOneAndOneAndOneAndZero = (array) => {\n  let result = [];\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < array.length) {\n    if (array[i] === 1 && array[i] === 0) {\n      result.push(sum);\n      sum = 0;\n      i++;\n    }\n    sum += array[i];\n    result.push(sum);\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the given sum.\n\n  Example:\n  * sumArray([]) => []\n  * sumArray([5]) => [5]\n  * sumArray([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30, 35]\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => [10, 15, 20, 25, 30, 35, 20, 10]\n  */\nconst sumArrayWithZeroAndOneAndOneAndOneAndOne = (array) => {\n  let result = [];\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < array.length) {\n    if (array[i] === 1 && array[i] === 1) {\n      "}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "<|endoftext|>/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i;\n  let j;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let "}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = nexhSmallest;\n\n},{}],3:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 3\n  nexhSmallest([5, 1, 4, 3, 2]) == 3\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = nexhSmallest;\n\n},{}],4:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 5\n  nexhSmallest([5, 1, 4, 3, 2]) == 5\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = nexhSmallest;\n\n},{}],5:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 4\n  nexhSmallest([5, 1, 4, 3, 2]) == 4\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = nexhSmallest;\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 5\n  nexhSmallest([5, 1, 4, 3, 2]) == 5\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = nexhSmallest;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 4\n  nexhSmallest([5, 1, 4, 3, 2]) == 4\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = nexhSmallest;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 5\n  nexhSmallest([5, 1, 4, 3, 2]) == 5\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = nexhSmallest;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 5\n  nexhSmallest([5, 1, 4, 3, 2]) == 5\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = nexhSmallest;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 5\n  nexhSmallest([5, 1, 4, 3, 2]) == 5\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min;\n};\n\n"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let boredoms = 0;\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      boredoms += 1;\n    }\n  });\n  return boredoms;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of deaths. A death is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      deaths += 1;\n    }\n  });\n  return deaths;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religions. A religions is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligion(\"Hello world\")\n  0\n  >>> isReligion(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isReligion = (S) => {\n  let religions = 0;\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      religions += 1;\n    }\n  });\n  return religions;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religious people. A religious person is a person who has religious rights.\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligious(\"Hello world\")\n  0\n  >>> isReligious(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isReligious = (S) => {\n  let religious = 0;\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      religious += 1;\n    }\n  });\n  return religious;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religious people. A religious person is a person who has religious rights.\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligious(\"Hello world\")\n  0\n  >>> isReligious(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isReligious = (S) => {\n  let religious = 0;\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      religious += 1;\n    }\n  });\n  return religious;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religious people. A religious person is a person who has religious rights.\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligious(\"Hello world\")\n  0\n  >>> isReligious(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isReligious = (S) => {\n  let religious = 0;\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      religious += 1;\n    }\n  });\n  return religious;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religious people. A religious person is a person who has religious rights.\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligious(\"Hello world\")\n  0\n  >>> isReligious(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isReligious = (S) => {\n  let religious = 0;\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      religious += 1;\n    }\n  });\n  return religious;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religious people. A religious person is a person who has religious rights.\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligious(\"Hello world\")\n  0\n  >>> isReligious(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isReligious = (S) => {\n  let religious = 0;\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      religious += 1;\n    }\n  });\n  return religious;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religious people. A religious person is a person who has religious rights.\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligious(\"Hello world\")\n  0\n  >>> isReligious(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isReligious = (S) => {\n  let religious = 0;\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      religious += 1;\n    }\n  });\n  return religious;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of religious people. A religious person is a person who has religious rights.\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligious(\"Hello world\")\n  0\n  >>> isReligious(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isReligious = (S) => {\n  let religious = 0;\n  let sentences = S."}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z || y === z) return false\n  return anyLnt(x, y, z) || anyLnt(y, x, z) || anyLnt(z, x, y)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allLnt(5, 2, 7) ➞ true\n  allLnt(3, 2, 2) ➞ false\n  allLnt(3, -2, 1) ➞ false\n  allLnt(3.6, -2.2, 2) ➞ true\n  */\nconst allLnt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z || y === z) return false\n  return allLnt(x, y, z) || allLnt(y, x, z) || allLnt(z, x, y)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (a, b, c) => {\n  if (a === b && a === c) return true\n  if (a === b || a === c || b === c) return false\n  return allInt(a, b, c) || allInt(b, a, c) || allInt(c, b, a)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (a, b, c) => {\n  if (a === b && a === c) return true\n  if (a === b || a === c || b === c) return false\n  return allInt(a, b, c) || allInt(b, a, c) || allInt(c, b, a)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (a, b, c) => {\n  if (a === b && a === c) return true\n  if (a === b || a === c || b === c) return false\n  return allInt(a, b, c) || allInt(b, a, c) || allInt(c, b, a)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (a, b, c) => {\n  if (a === b && a === c) return true\n  if (a === b || a === c || b === c) return false\n  return allInt(a, b, c) || allInt(b, a, c) || allInt(c, b, a)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (a, b, c) => {\n  if (a === b && a === c) return true\n  if (a === b || a === c || b === c) return false\n  return allInt(a, b, c) || allInt(b, a, c) || allInt(c, b, a)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (a, b, c) => {\n  if (a === b && a === c) return true\n  if (a === b || a === c || b === c) return false\n  return allInt(a, b, c) || allInt(b, a, c) || allInt(c, b, a)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (a, b, c) => {\n  if (a === b && a === c) return true\n  if (a === b || a === c || b === c) return false\n  return allInt(a, b, c) || allInt(b, a, c) || allInt(c, b, a)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (a, b, c) => {\n  if (a === b && a === c) return true\n  if (a === b || a === c || b === c) return false\n  return allInt(a, b, c) || allInt(b, a, c) || allInt(c, b, a)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (a, b, c) => {\n  if (a === b && a === c) return true\n  if (a === b "}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const newMessage = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let count = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp27"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let lowerCaseKeys = keys.map(key => key.toLowerCase());\n  let upperCaseKeys = keys.map(key => key.toUpperCase());\n  return lowerCaseKeys.every(key => dict[key] === dict[key.toLowerCase()]);\n};\n\n/*\n  Given a string, return true if all characters are lower case or all \n  characters are upper case, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  lowerCaseStringCase(\"abc\") should return true.\n  lowerCaseStringCase(\"ABC\") should return false.\n  lowerCaseStringCase(\"\") should return false.\n  lowerCaseStringCase(\"  \") should return false.\n  lowerCaseStringCase(\"  a\") should return false.\n  lowerCaseStringCase(\"  a  \") should return false.\n  lowerCaseStringCase(\"  a  a\") should return false.\n  lowerCaseStringCase(\"  a  a  a\") should return false.\n  lowerCaseStringCase(\"  a  a  a  a\") should return false.\n  lowerCaseStringCase(\"  a  a  a  a  a  a\") should return false.\n  lowerCaseStringCase(\"  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers that\n  are divisible by n. For example:\n  divisibleBy(3) => [3,5,7]\n  divisibleBy(11) => [3,5,7,11]\n  divisibleBy(0) => []\n  divisibleBy(20) => [3,5,7,11,13,17]\n  divisibleBy(1) => []\n  divisibleBy(18) => [3,5,7,11,13,17]\n  */\nconst divisibleBy = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers that\n  are prime numbers and less than n. For example:\n  primeUpTo(3) => [2,3]\n  primeUpTo(11) => [2,3,5,7]\n  primeUpTo(0) => []\n  primeUpTo(20) => [2,3,5,7,11,13,17]\n  primeUpTo(1) => []\n  primeUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst primeUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers that\n  are prime numbers and greater than n. For example:\n  primeDownTo(3) => [2,3]\n  primeDownTo(11) => [2,3,5,7]\n  primeDownTo(0) => []\n  primeDownTo(20) => [2,3,5,7,11,13,17]\n  primeDownTo(1) => []\n  primeDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst primeDownTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers that\n  are prime numbers and greater than or equal to n. For example:\n  primeGreaterThan(3) => [2,3]\n  primeGreaterThan(11) => [2,3,5,7]\n  primeGreaterThan(0) => []\n  primeGreaterThan(20) => [2,3,5,7,11,13,17]\n  primeGreaterThan(1) => []\n  primeGreaterThan(18) => [2,3,5,7,11,13,17]\n  */\nconst primeGreaterThan = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers that\n  are prime numbers and less than or equal to n. For example:\n  primeLessThan(3) => [2,3]\n  primeLessThan(11) => [2,3,5,7]\n  primeLessThan(0) => []\n  primeLessThan(20) => [2,3,5,7,11,13,17]\n  primeLessThan(1) => []\n  primeLessThan(18) => [2,3,5,7,11,13,17]\n  */\nconst primeLessThan = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers that\n  are prime numbers and greater than or equal to n. For example:\n  primeGreaterThanOrEqual(3) => [2,3]\n  primeGreaterThanOrEqual(11) => [2,3,5,7]\n  primeGreaterThanOrEqual(0) => []\n  primeGreaterThanOrEqual(20) => [2,3,5,7,11,13,17]\n  primeGreaterThanOrEqual(1) => []\n  primeGreaterThanOrEqual(18) => [2,3,5,7,11,13,17]\n  */\nconst primeGreaterThanOrEqual = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers that\n  are prime numbers and less than or equal to n. For example:\n  primeLessThanOrEqual(3) => [2,3]\n  primeLessThanOrEqual(11) => [2,3,5,7]\n  primeLessThanOrEqual(0) => []\n  primeLessThanOrEqual(20) => [2,3,5,7,11,13,17]\n  primeLessThanOrEqual(1) => []\n  primeLessThanOrEqual(18) => [2,3,5,7,11,13,17]\n  */\nconst primeLessThanOrEqual = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers that\n  are prime numbers and greater than n. For example:\n  primeGreaterThan(3) => [2,3]\n  primeGreaterThan(11) => [2,3,5,7]\n  primeGreaterThan(0) => []\n  primeGreaterThan(20) => [2,3,5,7,11,13,17]\n  primeGreaterThan(1) => []\n  primeGreaterThan(18) => [2,3,5,7,11,13,17]\n  */\nconst primeGreaterThan = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers that\n  are prime numbers and less than n. For example:\n  primeLessThan(3) => [2,3]\n  primeLessThan(11) => [2,3,5,7]\n  primeLessThan(0) => []\n  primeLessThan(20) => [2,3,5,7,11,13,17]\n  primeLessThan(1) => []\n  primeLessThan(18) => [2,3,5,7,11,13,17]\n  */\nconst primeLessThan = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i += 2;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers that\n  are prime numbers and greater than or equal to n. For example:\n  primeGreaterThanOrEqual(3) => "}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  let product = 1;\n  for (let i = a; i; i--) {\n    product *= i;\n  }\n  for (let i = b; i; i--) {\n    product *= i;\n  }\n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sumhiply(148, 412) should return 164.\n  sumhiply(19, 28) should return 72.\n  sumhiply(2020, 1851) should return 0.\n  sumhiply(14,-15) should return 20.\n  */\nconst sumhiply = (a, b) => {\n  let sum = 0;\n  for (let i = a; i; i--) {\n    sum += i;\n  }\n  for (let i = b; i; i--) {\n    sum += i;\n  }\n  return sum;\n}\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  diffhiply(148, 412) should return -16.\n  diffhiply(19, 28) should return -7.\n  diffhiply(2020, 1851) should return 0.\n  diffhiply(14,-15) should return 20.\n  */\nconst diffhiply = (a, b) => {\n  let diff = 0;\n  for (let i = a; i; i--) {\n    diff += i;\n  }\n  for (let i = b; i; i--) {\n    diff += i;\n  }\n  return diff;\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abshiply(148, 412) should return 1.\n  abshiply(19, 28) should return 1.\n  abshiply(2020, 1851) should return 0.\n  abshiply(14,-15) should return 20.\n  */\nconst abshiply = (a, b) => {\n  let abs = 0;\n  for (let i = a; i; i--) {\n    abs += i;\n  }\n  for (let i = b; i; i--) {\n    abs += i;\n  }\n  return abs;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrthiply(148, 412) should return 1.414213562.\n  sqrthiply(19, 28) should return 1.414213562.\n  sqrthiply(2020, 1851) should return 0.\n  sqrthiply(14,-15) should return 20.\n  */\nconst sqrthiply = (a, b) => {\n  let sqrt = 1;\n  for (let i = a; i; i--) {\n    sqrt *= i;\n  }\n  for (let i = b; i; i--) {\n    sqrt *= i;\n  }\n  return sqrt;\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abssqrthiply(148, 412) should return 1.414213562.\n  abssqrthiply(19, 28) should return 1.414213562.\n  abssqrthiply(2020, 1851) should return 0.\n  abssqrthiply(14,-15) should return 20.\n  */\nconst abssqrthiply = (a, b) => {\n  let abs = 0;\n  for (let i = a; i; i--) {\n    abs += i;\n  }\n  for (let i = b; i; i--) {\n    abs += i;\n  }\n  return abs;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrthiplyn(148, 412) should return 1.414213562.\n  sqrthiplyn(19, 28) should return 1.414213562.\n  sqrthiplyn(2020, 1851) should return 0.\n  sqrthiplyn(14,-15) should return 20.\n  */\nconst sqrthiplyn = (a, b) => {\n  let sqrt = 1;\n  for (let i = a; i; i--) {\n    sqrt *= i;\n  }\n  for (let i = b; i; i--) {\n    sqrt *= i;\n  }\n  return sqrt;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abssqrthiplyn(148, 412) should return 1.414213562.\n  abssqrthiplyn(19, 28) should return 1.414213562.\n  abssqrthiplyn(2020, 1851) should return 0.\n  abssqrthiplyn(14,-15) should return 20.\n  */\nconst abssqrthiplyn = (a, b) => {\n  let abs = 0;\n  for (let i = a; i; i--) {\n    abs += i;\n  }\n  for (let i = b; i; i--) {\n    abs += i;\n  }\n  return abs;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrthiplynn(148, 412) should return 1.414213562.\n  sqrthiplynn(19, 28) should return 1.414213562.\n  sqrthiplynn(2020, 1851) should return 0.\n  sqrthiplynn(14,-15) should return 20.\n  */\nconst sqrthiplynn = (a, b) => {\n  let sqrt = 1;\n  for (let i = a; i; i--) {\n    sqrt *= i;\n  }\n  for (let i = b; i; i--) {\n    sqrt *= i;\n  }\n  return sqrt;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abssqrthiplynn(148, 412) should return 1.414213562.\n  abssqrthiplynn(19, 28) should return 1.414213562.\n  abssqrthiplynn(2020, 1851) should return 0.\n  abssqrthiplynn(14,-15) should return 20.\n  */\nconst abssqrthiplynn = (a, b) => {\n  let abs = 0;\n  for (let i = a; i; i--) {\n    abs += i;\n  }\n  for (let i = b; i; i--) {\n    abs += i;\n  }\n  return abs;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrthiplynn(148, 412) should return 1.414213562.\n  sqrthiplynn(19, 28) should return 1.414"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n  let count = 0;\n  let index = 0;\n  let upper = 0;\n  let vowel = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      upper++;\n    }\n    else if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowel++;\n    }\n    \n    if(upper > 0){\n      count++;\n    }\n    \n    if(vowel > 0){\n      index++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 1\n  coujtLower('abcdefg') returns 0\n  coujtLower('dBBE') returns 0\n  */\nconst coujtLower = (s) => {\n  let count = 0;\n  let index = 0;\n  let lower = 0;\n  let vowel = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      lower++;\n    }\n    else if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowel++;\n    }\n    \n    if(lower > 0){\n      count++;\n    }\n    \n    if(vowel > 0){\n      index++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  coujtVowel('aBCdEf') returns 1\n  coujtVowel('abcdefg') returns 0\n  coujtVowel('dBBE') returns 0\n  */\nconst coujtVowel = (s) => {\n  let count = 0;\n  let index = 0;\n  let vowel = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      vowel++;\n    }\n    else if(s[i] >= 'A' && s[i] <= 'Z'){\n      count++;\n    }\n    \n    if(vowel > 0){\n      index++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  coujtUpperOdd('aBCdEf') returns 1\n  coujtUpperOdd('abcdefg') returns 0\n  coujtUpperOdd('dBBE') returns 0\n  */\nconst coujtUpperOdd = (s) => {\n  let count = 0;\n  let index = 0;\n  let upper = 0;\n  let vowel = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      upper++;\n    }\n    else if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowel++;\n    }\n    \n    if(upper > 0){\n      count++;\n    }\n    \n    if(vowel > 0){\n      index++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  coujtLowerOdd('aBCdEf') returns 1\n  coujtLowerOdd('abcdefg') returns 0\n  coujtLowerOdd('dBBE') returns 0\n  */\nconst coujtLowerOdd = (s) => {\n  let count = 0;\n  let index = 0;\n  let lower = 0;\n  let vowel = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      lower++;\n    }\n    else if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowel++;\n    }\n    \n    if(lower > 0){\n      count++;\n    }\n    \n    if(vowel > 0){\n      index++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  coujtVowelOdd('aBCdEf') returns 1\n  coujtVowelOdd('abcdefg') returns 0\n  coujtVowelOdd('dBBE') returns 0\n  */\nconst coujtVowelOdd = (s) => {\n  let count = 0;\n  let index = 0;\n  let vowel = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      vowel++;\n    }\n    else if(s[i] >= 'A' && s[i] <= 'Z'){\n      count++;\n    }\n    \n    if(vowel > 0){\n      index++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpperOdd('aBCdEf') returns 1\n  coujtUpperOdd('abcdefg') returns 0\n  coujtUpperOdd('dBBE') returns 0\n  */\nconst coujtUpperOddEven = (s) => {\n  let count = 0;\n  let index = 0;\n  let upper = 0;\n  let vowel = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      upper++;\n    }\n    else if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowel++;\n    }\n    \n    if(upper > 0){\n      count++;\n    }\n    \n    if(vowel > 0){\n      index++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  coujtLowerOdd('aBCdEf') returns 1\n  coujtLowerOdd('abcdefg') returns 0\n  coujtLowerOdd('dBBE') returns 0\n  */\nconst coujtLowerOddEven = (s) => {\n  let count = 0;\n  let index = 0;\n  let lower = 0;\n  let vowel = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      lower++;\n    }\n    else if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowel++;\n    }\n    \n    if(lower > 0){\n      count++;\n    }\n    \n    if(vowel > 0){\n      index++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  coujtVowelOdd('aBCdEf') returns 1\n  coujtVowelOdd('abcdefg') returns 0\n  coujtVowelOdd('dBBE') returns 0\n  */\nconst coujtVowelOddEven = (s) => {\n  let count = 0;\n  let index = 0;\n  let vowel = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] "}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer2, fraction2] = fraction.split(\".\");\n  const integerDiff = Math.abs(integer - integer2);\n  const fractionDiff = Math.abs(fraction - fraction2);\n  if (integerDiff < fractionDiff) {\n    return integer;\n  }\n  return integer2;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to the given number. If the number\n  is equidistant from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer2, fraction2] = fraction.split(\".\");\n  const integerDiff = Math.abs(integer - integer2);\n  const fractionDiff = Math.abs(fraction - fraction2);\n  if (integerDiff < fractionDiff) {\n    return integer;\n  }\n  return integer2;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to the given number. If the number\n  is equidistant from two integers, round it away from zero.\n  Examples\n  >>> closestToInteger(\"10\")\n  10\n  >>> closestToInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestToInteger(\"14.5\") should\n  return 15 and closestToInteger(\"-14.5\") should return -15.\n  */\nconst closestToInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer2, fraction2] = fraction.split(\".\");\n  const integerDiff = Math.abs(integer - integer2);\n  const fractionDiff = Math.abs(fraction - fraction2);\n  if (integerDiff < fractionDiff) {\n    return integer;\n  }\n  return integer2;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to the given number. If the number\n  is equidistant from two integers, round it away from zero.\n  Examples\n  >>> closestToInteger(\"10\")\n  10\n  >>> closestToInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestToInteger(\"14.5\") should\n  return 15 and closestToInteger(\"-14.5\") should return -15.\n  */\nconst closestToIntegerOrZero = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer2, fraction2] = fraction.split(\".\");\n  const integerDiff = Math.abs(integer - integer2);\n  const fractionDiff = Math.abs(fraction - fraction2);\n  if (integerDiff < fractionDiff) {\n    return integer;\n  }\n  return 0;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to the given number. If the number\n  is equidistant from two integers, round it away from zero.\n  Examples\n  >>> closestToIntegerOrZero(\"10\")\n  10\n  >>> closestToIntegerOrZero(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestToIntegerOrZero(\"14.5\") should\n  return 15 and closestToIntegerOrZero(\"-14.5\") should return -15.\n  */\nconst closestToIntegerOrZero = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer2, fraction2] = fraction.split(\".\");\n  const integerDiff = Math.abs(integer - integer2);\n  const fractionDiff = Math.abs(fraction - fraction2);\n  if (integerDiff < fractionDiff) {\n    return integer;\n  }\n  return 0;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to the given number. If the number\n  is equidistant from two integers, round it away from zero.\n  Examples\n  >>> closestToIntegerOrZero(\"10\")\n  10\n  >>> closestToIntegerOrZero(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestToIntegerOrZero(\"14.5\") should\n  return 15 and closestToIntegerOrZero(\"-14.5\") should return -15.\n  */\nconst closestToIntegerOrZeroOrZero = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer2, fraction2] = fraction.split(\".\");\n  const integerDiff = Math.abs(integer - integer2);\n  const fractionDiff = Math.abs(fraction - fraction2);\n  if (integerDiff < fractionDiff) {\n    return integer;\n  }\n  return 0;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to the given number. If the number\n  is equidistant from two integers, round it away from zero.\n  Examples\n  >>> closestToIntegerOrZeroOrZero(\"10\")\n  10\n  >>> closestToIntegerOrZeroOrZero(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestToIntegerOrZeroOrZero(\"14.5\") should\n  return 15 and closestToIntegerOrZeroOrZero(\"-14.5\") should return -15.\n  */\nconst closestToIntegerOrZeroOrZero = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer2, fraction2] = fraction.split(\".\");\n  const integerDiff = Math.abs(integer - integer2);\n  const fractionDiff = Math.abs(fraction - fraction2);\n  if (integerDiff < fractionDiff) {\n    return integer;\n  }\n  return 0;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to the given number. If the number\n  is equidistant from two integers, round it away from zero.\n  Examples\n  >>> closestToIntegerOrZeroOrZero(\"10\")\n  10\n  >>> closestToIntegerOrZeroOrZero(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return "}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let level = [];\n  let num = 0;\n  let i;\n\n  if (n & 1) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  for (i = n / 2; i > 0; i -= 2) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(6)\n  [3, 5, 7, 9, 11, 13]\n  */\nconst makfAPile2 = (n) => {\n  let level = [];\n  let num = 0;\n  let i;\n\n  if (n & 1) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  for (i = n / 2; i > 0; i -= 2) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(8)\n  [3, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\nconst makfAPile3 = (n) => {\n  let level = [];\n  let num = 0;\n  let i;\n\n  if (n & 1) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  for (i = n / 2; i > 0; i -= 2) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(10)\n  [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97]\n  */\nconst makfAPile4 = (n) => {\n  let level = [];\n  let num = 0;\n  let i;\n\n  if (n & 1) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  for (i = n / 2; i > 0; i -= 2) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(12)\n  [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97]\n  */\nconst makfAPile5 = (n) => {\n  let level = [];\n  let num = 0;\n  let i;\n\n  if (n & 1) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  for (i = n / 2; i > 0; i -= 2) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(14)\n  [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97]\n  */\nconst makfAPile6 = (n) => {\n  let level = [];\n  let num = 0;\n  let i;\n\n  if (n & 1) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  for (i = n / 2; i > 0; i -= 2) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(16)\n  [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97]\n  */\nconst makfAPile7 = (n) => {\n  let level = [];\n  let num = 0;\n  let i;\n\n  if (n & 1) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  for (i = n / 2; i > 0; i -= 2) {\n    level.push(num);\n    num = num + 1;\n  }\n\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(18)\n  [3, 5, 7, 9, 11, 13, 15, 17, "}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You will\n  also need to write a function wordsToString that takes an array of words and\n  returns a string of the words joined by spaces.\n  \n  For example:\n  wordsToString(\"Hi, my name is John\") == \" Hi, my name is John\"\n  wordsToString(\"One, two, three, four, five, six\") == \" One two three four five six\"\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You\n  will also need to write a function wordsToString that takes an array of words\n  and returns a string of the words joined by spaces. You will also need to write\n  a function wordsToString that takes an array of words and returns a string\n  of the words joined by spaces. You will also need to write a function wordsToString\n  that takes an array of words and returns a string of the words joined by spaces.\n  \n  For example:\n  wordsToString(\"Hi, my name is John\") == \" Hi, my name is John \"\n  wordsToString(\"One, two, three, four, five, six\") == \" One two three four five six \"\n  wordsToString(\"Hi, my name is John \") == \" Hi, my name is John \"\n  wordsToString(\"One, two, three, four, five, six\") == \" One two three four five six \"\n  */\nconst wordsToStringWithSpaces = (words) => {\n  return words.join(' ');\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You\n  will also need to write a function wordsToString that takes an array of words\n  and returns a string of the words joined by spaces. You will also need to write\n  a function wordsToString that takes an array of words and returns a string\n  of the words joined by spaces. You will also need to write a function wordsToString\n  that takes an array of words and returns a string of the words joined by spaces.\n  \n  For example:\n  wordsToString(\"Hi, my name is John\") == \" Hi, my name is John \"\n  wordsToString(\"One, two, three, four, five, six\") == \" One two three four five six \"\n  wordsToString(\"Hi, my name is John \") == \" Hi, my name is John \"\n  wordsToString(\"One, two, three, four, five, six\") == \" One two three four five six \"\n  */\nconst wordsToStringWithSpacesAndSpaces = (words) => {\n  return words.join(' ');\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You\n  will also need to write a function wordsToString that takes an array of words\n  and returns a string of the words joined by spaces. You will also need to write\n  a function wordsToString that takes an array of words and returns a string\n  of the words joined by spaces. You will also need to write a function wordsToString\n  that takes an array of words and returns a string of the words joined by spaces.\n  \n  For example:\n  wordsToString(\"Hi, my name is John\") == \" Hi, my name is John \"\n  wordsToString(\"One, two, three, four, five, six\") == \" One two three four five six \"\n  wordsToString(\"Hi, my name is John \") == \" Hi, my name is John \"\n  wordsToString(\"One, two, three, four, five, six\") == \" One two three four five six \"\n  */\nconst wordsToStringWithSpacesAndSpacesAndSpaces = (words) => {\n  return words.join(' ');\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You\n  will also need to write a function wordsToString that takes an array of words\n  and returns a string of the words joined by spaces. You will also need to write\n  a function wordsToString that takes an array of words and returns a string\n  of the words joined by spaces. You will also need to write a function wordsToString\n  that takes an array of words and returns a string of the words joined by spaces.\n  \n  For example:\n  wordsToString(\"Hi, my name is John\") == \" Hi, my name is John \"\n  wordsToString(\"One, two, three, four, five, six\") == \" One two three four five six \"\n  wordsToString(\"Hi, my name is John \") == \" Hi, my name is John \"\n  wordsToString(\"One, two, three, four, five, six\") == \" One two three four five six \"\n  */\nconst wordsToStringWithSpacesAndSpacesAndSpacesAndSpaces = (words) => {\n  return words.join(' ');\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You\n  will also need to write a function wordsToString that takes an array of words\n  and returns a string of the words joined by spaces. You will also need to write\n  a function wordsToString that takes an array of words and returns a string\n  of the words joined by spaces. You will also need to write a function wordsToString\n  that takes an array of words and returns a string of the words joined by spaces.\n  \n  For example:\n  wordsToString(\"Hi, my name is John\") == \" Hi, my name is John \"\n  wordsToString(\"One, two, three, four, five, six\") == \" One two three four five six \"\n  wordsToString(\"Hi, my name is John \") == \" Hi, my name is John \"\n  wordsToString(\"One, two, three, four, five, six\") == \" One two three four five six \"\n  */\nconst wordsToStringWithSpacesAndSpacesAndSpacesAndSpacesAndSpaces = (words) => {\n  return words.join(' ');\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You\n  will also need to write a function wordsToString that takes an array of words\n  and returns a string of the words joined by spaces. You will also need to write\n  a function wordsToString that takes an array of words and returns a string\n  of the words jo"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  let max = 0;\n  let even = 0;\n  let evenNum = 0;\n  let evenNum2 = 0;\n  let evenNum3 = 0;\n  let evenNum4 = 0;\n  let evenNum5 = 0;\n  let evenNum6 = 0;\n  let evenNum7 = 0;\n  let evenNum8 = 0;\n  let evenNum9 = 0;\n  let evenNum10 = 0;\n  let evenNum11 = 0;\n  let evenNum12 = 0;\n  let evenNum13 = 0;\n  let evenNum14 = 0;\n  let evenNum15 = 0;\n  let evenNum16 = 0;\n  let evenNum17 = 0;\n  let evenNum18 = 0;\n  let evenNum19 = 0;\n  let evenNum20 = 0;\n  let evenNum21 = 0;\n  let evenNum22 = 0;\n  let evenNum23 = 0;\n  let evenNum24 = 0;\n  let evenNum25 = 0;\n  let evenNum26 = 0;\n  let evenNum27 = 0;\n  let evenNum28 = 0;\n  let evenNum29 = 0;\n  let evenNum30 = 0;\n  let evenNum31 = 0;\n  let evenNum32 = 0;\n  let evenNum33 = 0;\n  let evenNum34 = 0;\n  let evenNum35 = 0;\n  let evenNum36 = 0;\n  let evenNum37 = 0;\n  let evenNum38 = 0;\n  let evenNum39 = 0;\n  let evenNum40 = 0;\n  let evenNum41 = 0;\n  let evenNum42 = 0;\n  let evenNum43 = 0;\n  let evenNum44 = 0;\n  let evenNum45 = 0;\n  let evenNum46 = 0;\n  let evenNum47 = 0;\n  let evenNum48 = 0;\n  let evenNum49 = 0;\n  let evenNum50 = 0;\n  let evenNum51 = 0;\n  let evenNum52 = 0;\n  let evenNum53 = 0;\n  let evenNum54 = 0;\n  let evenNum55 = 0;\n  let evenNum56 = 0;\n  let evenNum57 = 0;\n  let evenNum58 = 0;\n  let evenNum59 = 0;\n  let evenNum60 = 0;\n  let evenNum61 = 0;\n  let evenNum62 = 0;\n  let evenNum63 = 0;\n  let evenNum64 = 0;\n  let evenNum65 = 0;\n  let evenNum66 = 0;\n  let evenNum67 = 0;\n  let evenNum68 = 0;\n  let evenNum69 = 0;\n  let evenNum70 = 0;\n  let evenNum71 = 0;\n  let evenNum72 = 0;\n  let evenNum73 = 0;\n  let evenNum74 = 0;\n  let evenNum75 = 0;\n  let evenNum76 = 0;\n  let evenNum77 = 0;\n  let evenNum78 = 0;\n  let evenNum79 = 0;\n  let evenNum80 = 0;\n  let evenNum81 = 0;\n  let evenNum82 = 0;\n  let evenNum83 = 0;\n  let evenNum84 = 0;\n  let evenNum85 = 0;\n  let evenNum86 = 0;\n  let evenNum87 = 0;\n  let evenNum88 = 0;\n  let evenNum89 = 0;\n  let evenNum90 = 0;\n  let evenNum91 = 0;\n  let evenNum92 = 0;\n  let evenNum93 = 0;\n  let evenNum94 = 0;\n  let evenNum95 = 0;\n  let evenNum96 = 0;\n  let evenNum97 = 0;\n  let evenNum98 = 0;\n  let evenNum99 = 0;\n  let evenNum100 = 0;\n  let evenNum101 = 0;\n  let evenNum102 = 0;\n  let evenNum103 = 0;\n  let evenNum104 = 0;\n  let evenNum105 = 0;\n  let evenNum106 = 0;\n  let evenNum107 = 0;\n  let evenNum108 = 0;\n  let evenNum109 = 0;\n  let evenNum110 = 0;\n  let evenNum111 = 0;\n  let evenNum112 = 0;\n  let evenNum113 = 0;\n  let evenNum114 = 0;\n  let evenNum115 = 0;\n  let evenNum116 = 0;\n  let evenNum117 = 0;\n  let evenNum118 = 0;\n  let evenNum119 = 0;\n  let evenNum120 = 0;\n  let evenNum121 = 0;\n  let evenNum122 = 0;\n  let evenNum123 = 0;\n  let evenNum124 = 0;\n  let evenNum125 = 0;\n  let evenNum126 = 0;\n  let evenNum127 = 0;\n  let evenNum128 = 0;\n  let evenNum129 = 0;\n  let evenNum130 = 0;\n  let evenNum131 = 0;\n  let evenNum132 = 0;\n  let evenNum133 = 0;\n  let evenNum134 = 0;\n  let evenNum135 = 0;\n  let evenNum136 = 0;\n  let evenNum137 = 0;\n  let evenNum138 = 0;\n  let evenNum139 = 0;\n  let evenNum140 = 0;\n  let evenNum141 = 0;\n  let evenNum142 = 0;\n  let evenNum143 = 0;\n  let evenNum144 = 0;\n  let evenNum145 = 0;\n  let evenNum146 = 0;\n  let evenNum147 = 0;\n  let evenNum148 = 0;\n  let evenNum149 = 0;\n  let evenNum150 = 0;\n  let evenNum151 = 0;\n  let evenNum152 = 0;\n  let evenNum153 = 0;\n  let evenNum154 = 0;\n  let evenNum155 = 0;\n  let evenNum156 = 0;\n  let evenNum157 = 0;\n  let evenNum158 = 0;\n  let evenNum159 = 0;\n  let evenNum160 = 0;\n  let evenNum161 = 0;\n  let evenNum162 = 0;\n  let evenNum163 = 0;\n  let evenNum164 = 0;\n  let evenNum165 = 0;\n  let evenNum166 = 0;\n  let evenNum167 = 0;\n  let evenNum168 = 0;\n  let evenNum169 = 0;\n  let evenNum170 = 0;\n  let evenNum171 = 0;\n  let evenNum172 = 0;\n  let evenNum173 = 0;\n  let evenNum174 = 0;\n  let evenNum175 = 0;\n  let evenNum176 = 0;\n  let evenNum177 = 0;\n  let evenNum178 = 0;\n  let evenNum179 = 0;\n  let evenNum180 = 0;\n  let evenNum181 = 0;\n  let evenNum182 = 0;\n  let evenNum183 = 0;\n  let evenNum184 = 0;\n  let evenNum185 = 0;\n  let evenNum186 = 0;\n  let evenNum187 = 0;\n  let evenNum188 = 0;\n  let evenNum189 = 0;\n  let evenNum190 = 0;\n  let evenNum191 = 0;\n  let evenNum192 = 0;\n  let evenNum193 = 0;\n  let evenNum194 = 0;\n  let evenNum195 = 0;\n  let evenNum196 = 0;\n  let evenNum197 = 0;\n  let evenNum198 = 0;\n  let evenNum199 = 0;\n  let evenNum200 = 0;\n  let evenNum201 = 0;\n  let evenNum202 = 0;\n  let evenNum203 = 0;\n  let evenNum204 = 0;\n  let evenNum205 = 0;\n  let evenNum206 = 0;\n  let evenNum207 = 0;\n  let evenNum208 = 0;\n  let evenNum209 = 0;\n  let evenNum210 = 0;\n  let evenNum211 = 0;\n  let evenNum212 = 0;\n  let evenNum213 = 0;\n  let evenNum214 = 0;\n  let evenNum215 = 0;\n  let evenNum216 = 0;\n  let evenNum217 = 0;\n  let evenNum218 = 0;\n  let evenNum219 = 0;\n  let evenNum220 = 0;\n  let evenNum221 = 0;\n  let evenNum222 = 0;\n  let evenNum223 = 0;\n  let evenNum224 = 0;\n  let evenNum225 = 0;\n  let evenNum226 = 0;\n  let evenNum227 = 0;\n  let evenNum228 = 0;\n  let evenNum229 = 0;\n  let evenNum230 = 0;\n  let evenNum231 = 0;\n  let evenNum232 = 0;\n  let evenNum233 = 0;\n  let evenNum234 = 0;\n  let evenNum235 = 0;\n  let evenNum236 = 0;\n  let evenNum237 = 0;\n  let evenNum238 = 0;\n  let evenNum239 = 0;\n  let evenNum240 = 0;\n  let evenNum241 = 0;\n  let evenNum242 = 0;\n  let evenNum243 = 0;\n  let even"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let binCount = 0;\n  let binSum = 0;\n  let binCount2 = 0;\n  let binSum2 = 0;\n  let binCount3 = 0;\n  let binSum3 = 0;\n  let binCount4 = 0;\n  let binSum4 = 0;\n  let binCount5 = 0;\n  let binSum5 = 0;\n  let binCount6 = 0;\n  let binSum6 = 0;\n  let binCount7 = 0;\n  let binSum7 = 0;\n  let binCount8 = 0;\n  let binSum8 = 0;\n  let binCount9 = 0;\n  let binSum9 = 0;\n  let binCount10 = 0;\n  let binSum10 = 0;\n  let binCount11 = 0;\n  let binSum11 = 0;\n  let binCount12 = 0;\n  let binSum12 = 0;\n  let binCount13 = 0;\n  let binSum13 = 0;\n  let binCount14 = 0;\n  let binSum14 = 0;\n  let binCount15 = 0;\n  let binSum15 = 0;\n  let binCount16 = 0;\n  let binSum16 = 0;\n  let binCount17 = 0;\n  let binSum17 = 0;\n  let binCount18 = 0;\n  let binSum18 = 0;\n  let binCount19 = 0;\n  let binSum19 = 0;\n  let binCount20 = 0;\n  let binSum20 = 0;\n  let binCount21 = 0;\n  let binSum21 = 0;\n  let binCount22 = 0;\n  let binSum22 = 0;\n  let binCount23 = 0;\n  let binSum23 = 0;\n  let binCount24 = 0;\n  let binSum24 = 0;\n  let binCount25 = 0;\n  let binSum25 = 0;\n  let binCount26 = 0;\n  let binSum26 = 0;\n  let binCount27 = 0;\n  let binSum27 = 0;\n  let binCount28 = 0;\n  let binSum28 = 0;\n  let binCount29 = 0;\n  let binSum29 = 0;\n  let binCount30 = 0;\n  let binSum30 = 0;\n  let binCount31 = 0;\n  let binSum31 = 0;\n  let binCount32 = 0;\n  let binSum32 = 0;\n  let binCount33 = 0;\n  let binSum33 = 0;\n  let binCount34 = 0;\n  let binSum34 = 0;\n  let binCount35 = 0;\n  let binSum35 = 0;\n  let binCount36 = 0;\n  let binSum36 = 0;\n  let binCount37 = 0;\n  let binSum37 = 0;\n  let binCount38 = 0;\n  let binSum38 = 0;\n  let binCount39 = 0;\n  let binSum39 = 0;\n  let binCount40 = 0;\n  let binSum40 = 0;\n  let binCount41 = 0;\n  let binSum41 = 0;\n  let binCount42 = 0;\n  let binSum42 = 0;\n  let binCount43 = 0;\n  let binSum43 = 0;\n  let binCount44 = 0;\n  let binSum44 = 0;\n  let binCount45 = 0;\n  let binSum45 = 0;\n  let binCount46 = 0;\n  let binSum46 = 0;\n  let binCount47 = 0;\n  let binSum47 = 0;\n  let binCount48 = 0;\n  let binSum48 = 0;\n  let binCount49 = 0;\n  let binSum49 = 0;\n  let binCount50 = 0;\n  let binSum50 = 0;\n  let binCount51 = 0;\n  let binSum51 = 0;\n  let binCount52 = 0;\n  let binSum52 = 0;\n  let binCount53 = 0;\n  let binSum53 = 0;\n  let binCount54 = 0;\n  let binSum54 = 0;\n  let binCount55 = 0;\n  let binSum55 = 0;\n  let binCount56 = 0;\n  let binSum56 = 0;\n  let binCount57 = 0;\n  let binSum57 = 0;\n  let binCount58 = 0;\n  let binSum58 = 0;\n  let binCount59 = 0;\n  let binSum59 = 0;\n  let binCount60 = 0;\n  let binSum60 = 0;\n  let binCount61 = 0;\n  let binSum61 = 0;\n  let binCount62 = 0;\n  let binSum62 = 0;\n  let binCount63 = 0;\n  let binSum63 = 0;\n  let binCount64 = 0;\n  let binSum64 = 0;\n  let binCount65 = 0;\n  let binSum65 = 0;\n  let binCount66 = 0;\n  let binSum66 = 0;\n  let binCount67 = 0;\n  let binSum67 = 0;\n  let binCount68 = 0;\n  let binSum68 = 0;\n  let binCount69 = 0;\n  let binSum69 = 0;\n  let binCount70 = 0;\n  let binSum70 = 0;\n  let binCount71 = 0;\n  let binSum71 = 0;\n  let binCount72 = 0;\n  let binSum72 = 0;\n  let binCount73 = 0;\n  let binSum73 = 0;\n  let binCount74 = 0;\n  let binSum74 = 0;\n  let binCount75 = 0;\n  let binSum75 = 0;\n  let binCount76 = 0;\n  let binSum76 = 0;\n  let binCount77 = 0;\n  let binSum77 = 0;\n  let binCount78 = 0;\n  let binSum78 = 0;\n  let binCount79 = 0;\n  let binSum79 = 0;\n  let binCount80 = 0;\n  let binSum80 = 0;\n  let binCount81 = 0;\n  let binSum81 = 0;\n  let binCount82 = 0;\n  let binSum82 = 0;\n  let binCount83 = 0;\n  let binSum83 = 0;\n  let binCount84 = 0;\n  let binSum84 = 0;\n  let binCount85 = 0;\n  let binSum85 = 0;\n  let binCount86 = 0;\n  let binSum86 = 0;\n  let binCount87 = 0;\n  let binSum87 = 0;\n  let binCount88 = 0;\n  let binSum88 = 0;\n  let binCount89 = 0;\n  let binSum89 = 0;\n  let binCount90 = 0;\n  let binSum90 = 0;\n  let binCount91 = 0;\n  let binSum91 = 0;\n  let binCount92 = 0;\n  let binSum92 = 0;\n  let binCount93 = 0;\n  let binSum93 = 0;\n  let binCount94 = 0;\n  let binSum94 = 0;\n  let binCount95 = 0;\n  let binSum95 = 0;\n  let binCount96 = 0;\n  let binSum96 = 0;\n  let binCount97 = 0;\n  let binSum97 = 0;\n  let binCount98 = 0;\n  let binSum98 = 0;\n  let binCount99 = 0;\n  let binSum99 = 0;\n  let binCount100 = 0;\n  let binSum100 = 0;\n  let binCount101 = 0;\n  let binSum101 = 0;\n  let binCount102 = 0;\n  let binSum102 = 0;\n  let binCount103 = 0;\n  let binSum103 = 0;\n  let binCount104 = 0;\n  let binSum104 = 0;\n  let binCount105 = 0;\n  let binSum105 = 0;\n  let binCount106 = 0;\n  let binSum106 = 0;\n  let binCount107 = 0;\n  let binSum107 = 0;\n  let binCount108 = 0;\n  let binSum108 = 0;\n  let binCount109 = 0;\n  let binSum109 = 0;\n  let binCount110 = 0;\n  let binSum110 = 0;\n  let binCount111 = 0;\n  let binSum111 = 0;\n  let binCount112 = 0;\n  let binSum112 = 0;\n  let binCount113 = 0;\n  let binSum113 = 0;\n  let binCount114 = 0;\n  let binSum114 = 0;\n  let binCount115 = 0;\n  let binSum115 = 0;\n  let binCount116 = 0;\n  let binSum116 = 0;\n  let binCount117 = 0;\n  let binSum117 = 0;\n  let binCount118 = 0;\n  let "}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n  let result = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      isEven = true\n      digit = x[i]\n    } else {\n      isEven = false\n    }\n    if (isEven) {\n      result.push(digit)\n      digit = 0\n      isEven = false\n    }\n  }\n  result.push(digit)\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd digit.\n\n  Note: Returned list should be sorted in decreasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueOddDigits = (x) => {\n  let result = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1) {\n      isEven = true\n      digit = x[i]\n    } else {\n      isEven = false\n    }\n    if (isEven) {\n      result.push(digit)\n      digit = 0\n      isEven = false\n    }\n  }\n  result.push(digit)\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueEvenDigits = (x) => {\n  let result = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      isEven = true\n      digit = x[i]\n    } else {\n      isEven = false\n    }\n    if (isEven) {\n      result.push(digit)\n      digit = 0\n      isEven = false\n    }\n  }\n  result.push(digit)\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in decreasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueOddEvenDigits = (x) => {\n  let result = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1) {\n      isEven = true\n      digit = x[i]\n    } else {\n      isEven = false\n    }\n    if (isEven) {\n      result.push(digit)\n      digit = 0\n      isEven = false\n    }\n  }\n  result.push(digit)\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueOddEvenOddDigits = (x) => {\n  let result = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1) {\n      isEven = true\n      digit = x[i]\n    } else {\n      isEven = false\n    }\n    if (isEven) {\n      result.push(digit)\n      digit = 0\n      isEven = false\n    }\n  }\n  result.push(digit)\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit.\n\n  Note: Returned list should be sorted in decreasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueOddEvenOddOddDigits = (x) => {\n  let result = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1) {\n      isEven = true\n      digit = x[i]\n    } else {\n      isEven = false\n    }\n    if (isEven) {\n      result.push(digit)\n      digit = 0\n      isEven = false\n    }\n  }\n  result.push(digit)\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit.\n\n  Note: Returned list should be sorted in decreasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueOddEvenOddOddEvenDigits = (x) => {\n  let result = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1) {\n      isEven = true\n      digit = x[i]\n    } else {\n      isEven = false\n    }\n    if (isEven) {\n      result.push(digit)\n      digit = 0\n      isEven = false\n    }\n  }\n  result.push(digit)\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit.\n\n  Note: Returned list should be sorted in decreasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueOddEvenOddEvenOddOddEvenDigits = (x) => {\n  let result = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1) {\n      isEven = true\n      digit = x[i]\n    } else {\n      isEven = false\n    }\n    if (isEven) {\n      result.push(digit)\n      digit = 0\n      isEven = false\n    }\n  }\n  result.push(digit)\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even or odd digit.\n\n  Note: Returned list should be sorted in decreasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueOddEvenOddEvenOddOddOddOddEvenDigits = (x) => {\n  let result = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1) {\n      isEven = true\n      digit = x[i]\n    } else {\n      isEven = false\n    }\n    if (isEven) {\n"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n  let reversed = arr.reverse();\n  let sortedArr = reversed.sort((a, b) => a - b);\n  let newArr = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    let name = sortedArr[i];\n    newArr.push(name);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngthReverse = (arr) => {\n  let reversed = arr.reverse();\n  let sortedArr = reversed.sort((a, b) => a - b);\n  let newArr = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    let name = sortedArr[i];\n    newArr.push(name);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngthReverseReverse = (arr) => {\n  let reversed = arr.reverse();\n  let sortedArr = reversed.sort((a, b) => a - b);\n  let newArr = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    let name = sortedArr[i];\n    newArr.push(name);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngthReverseReverseReverse = (arr) => {\n  let reversed = arr.reverse();\n  let sortedArr = reversed.sort((a, b) => a - b);\n  let newArr = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    let name = sortedArr[i];\n    newArr.push(name);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngthReverseReverseReverse = (arr) => {\n  let reversed = arr.reverse();\n  let sortedArr = reversed.sort((a, b) => a - b);\n  let newArr = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    let name = sortedArr[i];\n    newArr.push(name);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngthReverseReverseReverse = (arr) => {\n  let reversed = arr.reverse();\n  let sortedArr = reversed.sort((a, b) => a - b);\n  let newArr = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    let name = sortedArr[i];\n    newArr.push(name);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 2, 6, 24, 15]\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function q that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(5) == [1, 2, 6, 24, 15]\n  */\nconst q = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    }"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n % 2;\n  return [evenPalindromes, oddPalindromes];\n};\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(2, n), inclusive.\n\n// Example 1:\n\n// Input: 3\n// Output: (2, 1)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n// Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nconst eodjEvenPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n % 2;\n  return [evenPalindromes, oddPalindromes];\n};\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(n, n), inclusive.\n\n// Example 1:\n\n// Input: 3\n// Output: (3, 1)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n// Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nconst eodjOddPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n % 2;\n  return [evenPalindromes, oddPalindromes];\n};\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(n, n), inclusive.\n\n// Example 1:\n\n// Input: 3\n// Output: (3, 1)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n// Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nconst evenjEvenPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n % 2;\n  return [evenPalindromes, oddPalindromes];\n};\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(n, n), inclusive.\n\n// Example 1:\n\n// Input: 3\n// Output: (3, 1)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n// Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nconst evenjOddPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n % 2;\n  return [evenPalindromes, oddPalindromes];\n};\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(n, n), inclusive.\n\n// Example 1:\n\n// Input: 3\n// Output: (3, 1)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n// Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nconst oddjEvenPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n % 2;\n  return [evenPalindromes, oddPalindromes];\n};\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(n, n), inclusive.\n\n// Example 1:\n\n// Input: 3\n// Output: (3, 1)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n// Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nconst oddjOddPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n % 2;\n  return [evenPalindromes, oddPalindromes];\n};\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(n, n), inclusive.\n\n// Example 1:\n\n// Input: 3\n// Output: (3, 1)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n// Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple "}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "<|endoftext|>/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    if (arr[i] > 0) {\n      nums += arr[i];\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function coujtStrs which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrs([]) == 0\n  >>> coujtStrs([\"\"]) == 1\n  >>> coujtStrs([\"\", \"a\", \"b\", \"c\"]) == 3\n  */\nconst coujtStrs = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    if (arr[i] > 0) {\n      nums += arr[i].length;\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function coujtStrs2 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrs2([]) == 0\n  >>> coujtStrs2([\"\"]) == 1\n  >>> coujtStrs2([\"\", \"a\", \"b\", \"c\"]) == 3\n  */\nconst coujtStrs2 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    if (arr[i] > 0) {\n      nums += arr[i].length;\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function coujtStrs3 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrs3([\"\"]) == 1\n  >>> coujtStrs3([\"\", \"a\", \"b\", \"c\"]) == 3\n  */\nconst coujtStrs3 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    if (arr[i] > 0) {\n      nums += arr[i].length;\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function coujtStrs4 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrs4([\"\"]) == 1\n  >>> coujtStrs4([\"\", \"a\", \"b\", \"c\"]) == 3\n  */\nconst coujtStrs4 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    if (arr[i] > 0) {\n      nums += arr[i].length;\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function coujtStrs5 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrs5([\"\"]) == 1\n  >>> coujtStrs5([\"\", \"a\", \"b\", \"c\"]) == 3\n  */\nconst coujtStrs5 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    if (arr[i] > 0) {\n      nums += arr[i].length;\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function coujtStrs6 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrs6([\"\"]) == 1\n  >>> coujtStrs6([\"\", \"a\", \"b\", \"c\"]) == 3\n  */\nconst coujtStrs6 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    if (arr[i] > 0) {\n      nums += arr[i].length;\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function coujtStrs7 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrs7([\"\"]) == 1\n  >>> coujtStrs7([\"\", \"a\", \"b\", \"c\"]) == 3\n  */\nconst coujtStrs7 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    if (arr[i] > 0) {\n      nums += arr[i].length;\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function coujtStrs8 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrs8([\"\"]) == 1\n  >>> coujtStrs8([\"\", \"a\", \"b\", \"c\"]) == 3\n  */\nconst coujtStrs8 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    if (arr[i] > 0) {\n      nums += arr[i].length;\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function coujtStrs9 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrs9([\"\"]) == 1\n  >>> coujtStrs9([\"\", \"a\", \"b\", \"c\"]) == 3\n  */\nconst coujtStrs9 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    if (arr[i] > 0) {\n      nums += arr[i].length;\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function coujtStrs10 which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -12"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n  let arrLength = arr.length;\n  let arrIndex = 0;\n  let arrTemp = [];\n  let arrTempIndex = 0;\n  let arrTempTemp = [];\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let arrTempTempTempIndex = 0;\n  let "}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length < lst2.length) {\n    console.log(\"lst1 length less than lst2 length\");\n  } else if (lst1.length > lst2.length) {\n    console.log(\"lst1 length > lst2 length\");\n  }\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i] % 2!== 0) {\n        result += lst1[i];\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers multiplied by a constant (in this case, the number 2).\n  For example:\n  multiplyByTwo([1, 2, 3, 4]) => [2, 4, 6, 8]\n  multiplyByTwo([1, 2, 3, 4], [1, 5, 3, 4]) => [2, 5, 8, 14]\n  It is assumed that the input array will be non-empty.\n  */\nconst multiplyByTwo = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] * 2);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers multiplied by a constant (in this case, the number 2).\n  For example:\n  multiplyByTwo([1, 2, 3, 4]) => [2, 4, 6, 8]\n  multiplyByTwo([1, 2, 3, 4], [1, 5, 3, 4]) => [2, 5, 8, 14]\n  It is assumed that the input array will be non-empty.\n  */\nconst multiplyByTwo = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] * 2);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers multiplied by a constant (in this case, the number 2).\n  For example:\n  multiplyByTwo([1, 2, 3, 4]) => [2, 4, 6, 8]\n  multiplyByTwo([1, 2, 3, 4], [1, 5, 3, 4]) => [2, 5, 8, 14]\n  It is assumed that the input array will be non-empty.\n  */\nconst multiplyByTwo = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] * 2);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers multiplied by a constant (in this case, the number 2).\n  For example:\n  multiplyByTwo([1, 2, 3, 4]) => [2, 4, 6, 8]\n  multiplyByTwo([1, 2, 3, 4], [1, 5, 3, 4]) => [2, 5, 8, 14]\n  It is assumed that the input array will be non-empty.\n  */\nconst multiplyByTwo = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] * 2);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers multiplied by a constant (in this case, the number 2).\n  For example:\n  multiplyByTwo([1, 2, 3, 4]) => [2, 4, 6, 8]\n  multiplyByTwo([1, 2, 3, 4], [1, 5, 3, 4]) => [2, 5, 8, 14]\n  It is assumed that the input array will be non-empty.\n  */\nconst multiplyByTwo = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] * 2);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers multiplied by a constant (in this case, the number 2).\n  For example:\n  multiplyByTwo([1, 2, 3, 4]) => [2, 4, 6, 8]\n  multiplyByTwo([1, 2, 3, 4], [1, 5, 3, 4]) => [2, 5, 8, 14]\n  It is assumed that the input array will be non-empty.\n  */\nconst multiplyByTwo = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] * 2);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers multiplied by a constant (in this case, the number 2).\n  For example:\n  multiplyByTwo([1, 2, 3, 4]) => [2, 4, 6, 8]\n  multiplyByTwo([1, 2, 3, 4], [1, 5, 3, 4]) => [2, 5, 8, 14]\n  It is assumed that the input array will be non-empty.\n  */\nconst multiplyByTwo = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] * 2);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers multiplied by a constant (in this case, the number 2).\n  For example:\n  multiplyByTwo([1, 2, 3, 4]) => [2, 4, 6, 8]\n  multiplyByTwo([1, 2, 3, 4], [1, 5, 3, 4]) => [2, 5, 8, 14]\n  It is assumed that the input array will be non-empty.\n  */\nconst multiplyByTwo = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] * 2);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers multiplied by a constant (in this case, the number 2).\n  For example:\n  multiplyByTwo([1, 2, 3, 4]) => [2, 4, 6, 8]\n  multiplyByTwo([1, 2, 3, 4], [1, 5, 3, 4]) => [2, 5, 8, 14]\n  It is assumed that the input array will be non-empty.\n  */\nconst multiplyByTwo = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] * 2);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers multiplied by a constant (in this case, the number 2).\n  For example:\n  multiplyByTwo([1, 2, 3, 4]) => [2, 4, 6, 8]\n  multiplyByTwo([1, 2, 3, 4], [1, 5, 3, 4]) => [2, 5, 8, 14]\n  It is assumed that the input array will be non-empty.\n  */\nconst multiplyByTwo = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] * 2);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers multiplied by a constant (in this case, the number 2).\n  For example:\n  multiplyByTwo([1, 2, 3, 4]) => [2, 4, 6, 8]\n  multiplyByTwo([1, 2, 3, 4], [1, 5, 3, 4]) => [2, 5, 8, 14]\n  It is assumed that the input array will be non-empty.\n  */\nconst multiplyByTwo = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] * 2);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers multiplied by a constant (in this case, the number 2).\n  For example:\n  multiplyByTwo([1, 2, 3, 4]) => [2, 4, 6, 8]\n  multiplyByTwo([1, 2, 3, 4], [1, 5, 3, 4]) => [2, 5, 8, 14]\n  It is assumed that the input array will be non-empty.\n  */\nconst multiplyByTwo = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] * 2);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the numbers multiplied by "}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let count = 0;\n  let letter;\n\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    if (!letterMap[letter]) {\n      letterMap[letter] = 1;\n    } else {\n      letterMap[letter]++;\n    }\n  }\n\n  for (let letter in letterMap) {\n    if (letterMap[letter] > count) {\n      count = letterMap[letter];\n    }\n  }\n\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let count = 0;\n  let letter;\n\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    if (!letterMap[letter]) {\n      letterMap[letter] = 1;\n    } else {\n      letterMap[letter]++;\n    }\n  }\n\n  for (let letter in letterMap) {\n    if (letterMap[letter] > count) {\n      count = letterMap[letter];\n    }\n  }\n\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let count = 0;\n  let letter;\n\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    if (!letterMap[letter]) {\n      letterMap[letter] = 1;\n    } else {\n      letterMap[letter]++;\n    }\n  }\n\n  for (let letter in letterMap) {\n    if (letterMap[letter] > count) {\n      count = letterMap[letter];\n    }\n  }\n\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let count = 0;\n  let letter;\n\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    if (!letterMap[letter]) {\n      letterMap[letter] = 1;\n    } else {\n      letterMap[letter]++;\n    }\n  }\n\n  for (let letter in letterMap) {\n    if (letterMap[letter] > count) {\n      count = letterMap[letter];\n    }\n  }\n\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let count = 0;\n  let letter;\n\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    if (!letterMap[letter]) {\n      letterMap[letter] = 1;\n    } else {\n      letterMap[letter]++;\n    }\n  }\n\n  for (let letter in letterMap) {\n    if (letterMap[letter] > count) {\n      count = letterMap[letter];\n    }\n  }\n\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let count = 0;\n  let letter;\n\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    if (!letterMap[letter]) {\n      letterMap[letter] = 1;\n    } else {\n      letterMap[letter]++;\n    }\n  }\n\n  for (let letter in letterMap) {\n    if (letterMap[letter] > count) {\n      count = letterMap[letter];\n    }\n  }\n\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let count = 0;\n  let letter;\n\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    if (!letterMap[letter]) {\n      letterMap[letter] = 1;\n    } else {\n      letterMap[letter]++;\n    }\n  }\n\n  for (let letter in letterMap) {\n    if (letterMap[letter] > count) {\n      count = letterMap[letter];\n    }\n  }\n\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase "}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] === c[j]) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      result += c;\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a number k, you have to delete all the characters in s that is equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 3, the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 3, the result should be ('cdedc',true)\n  */\nconst revfrseDeleteK = (s, k) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] === k) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      result += c;\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a number k, you have to delete all the characters in s that is equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 3, the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 3, the result should be ('cdedc',true)\n  */\nconst revfrseDeleteKK = (s, k) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] === k) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      result += c;\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a number k, you have to delete all the characters in s that is equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 3, the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 3, the result should be ('cdedc',true)\n  */\nconst revfrseDeleteKKK = (s, k) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] === k) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      result += c;\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a number k, you have to delete all the characters in s that is equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 3, the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 3, the result should be ('cdedc',true)\n  */\nconst revfrseDeleteKKK = (s, k) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] === k) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      result += c;\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a number k, you have to delete all the characters in s that is equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 3, the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 3, the result should be ('cdedc',true)\n  */\nconst revfrseDeleteKKKK = (s, k) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] === k) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      result += c;\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a number k, you have to delete all the characters in s that is equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 3, the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 3, the result should be ('cdedc',true)\n  */\nconst revfrseDeleteKKKKK = (s, k) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = len - 1;\n  let j = i + 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] === k) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      result += c;\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and a number k, you have to delete all the characters in s that is equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forwar"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      odd.push(lst[i].match(/\\d/).length);\n    }\n  }\n  return odd;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenFount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenFount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenFount = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      even.push(lst[i].match(/\\d/).length);\n    }\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let odd = oddFount(lst);\n  let even = evenFount(lst);\n  let oddEven = odd.concat(even);\n  return oddEven;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenFount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenFount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenFount = (lst) => {\n  let odd = evenFount(lst);\n  let even = oddFount(lst);\n  let oddEven = odd.concat(even);\n  return oddEven;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let odd = oddFount(lst);\n  let even = evenFount(lst);\n  let oddEven = odd.concat(even);\n  return oddEven;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenFount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenFount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenFount = (lst) => {\n  let odd = evenFount(lst);\n  let even = oddFount(lst);\n  let oddEven = odd.concat(even);\n  return oddEven;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let odd = oddFount(lst);\n  let even = evenFount(lst);\n  let oddEven = odd.concat(even);\n  return oddEven;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenFount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenFount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenFount = (lst) => {\n  let odd = evenFount(lst);\n  let even = oddFount(lst);\n  let oddEven = odd.concat(even);\n  return oddEven;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  "}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  const min = Number.POSITIVE_INFINITY;\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    const sum = nums[i] + min;\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\nmodule.exports = minDubArraySum;\n\n},{}],17:[function(require,module,exports){\nconst minDubArraySum = require('./minDubArraySum');\n\n/**\n * Given an array of integers nums, find the maximum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxDubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxDubArraySum([-1, -2, -3]) == 3\n */\nconst maxDubArraySum = (nums) => {\n  const max = Number.NEGATIVE_INFINITY;\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    const sum = nums[i] + max;\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxDubArraySum;\n\n},{\"./minDubArraySum\":16}],18:[function(require,module,exports){\nconst minDubArraySum = require('./minDubArraySum');\n\n/**\n * Given an array of integers nums, find the maximum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxDubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxDubArraySum([-1, -2, -3]) == 3\n */\nconst maxSubArraySum = (nums) => {\n  const max = Number.NEGATIVE_INFINITY;\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    const sum = nums[i] + max;\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxSubArraySum;\n\n},{\"./minDubArraySum\":16}],19:[function(require,module,exports){\nconst minDubArraySum = require('./minDubArraySum');\n\n/**\n * Given an array of integers nums, find the maximum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxDubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxDubArraySum([-1, -2, -3]) == 3\n */\nconst maxSubArraySum = (nums) => {\n  const max = Number.NEGATIVE_INFINITY;\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    const sum = nums[i] + max;\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxSubArraySum;\n\n},{\"./minDubArraySum\":16}],20:[function(require,module,exports){\nconst minDubArraySum = require('./minDubArraySum');\n\n/**\n * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxDubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxDubArraySum([-1, -2, -3]) == 3\n */\nconst minSubArraySum = (nums) => {\n  const min = Number.POSITIVE_INFINITY;\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    const sum = nums[i] + min;\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\nmodule.exports = minSubArraySum;\n\n},{\"./minDubArraySum\":16}],21:[function(require,module,exports){\nconst minDubArraySum = require('./minDubArraySum');\n\n/**\n * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxDubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxDubArraySum([-1, -2, -3]) == 3\n */\nconst minSubArraySum = (nums) => {\n  const min = Number.POSITIVE_INFINITY;\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    const sum = nums[i] + min;\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\nmodule.exports = minSubArraySum;\n\n},{\"./minDubArraySum\":16}],22:[function(require,module,exports){\nconst minDubArraySum = require('./minDubArraySum');\n\n/**\n * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxDubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxDubArraySum([-1, -2, -3]) == 3\n */\nconst minSubArraySum = (nums) => {\n  const min = Number.POSITIVE_INFINITY;\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    const sum = nums[i] + min;\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\nmodule.exports = minSubArraySum;\n\n},{\"./minDubArraySum\":16}],23:[function(require,module,exports){\nconst minDubArraySum = require('./minDubArraySum');\n\n/**\n * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxDubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxDubArraySum([-1, -2, -3]) == 3\n */\nconst minSubArraySum = (nums) => {\n  const min = Number.POSITIVE_INFINITY;\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    const sum = nums[i] + min;\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\nmodule.exports = minSubArraySum;\n\n},{\"./minDubArraySum\":16}],24:[function(require,module,exports){\nconst minDubArraySum = require('./minDubArraySum');\n\n/**\n * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxDubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxDubArraySum([-1, -2, -3]) == 3\n */\nconst minSubArraySum = (nums) => {\n  const min = Number.POSITIVE_INFINITY;\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    const sum = nums[i] + min;\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\nmodule.exports = minSubArraySum;\n\n},{\"./minDubArraySum\":16}],25:[function(require,module,exports){\nconst minDubArraySum = require('./minDubArraySum');\n\n/**\n * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n * of nums.\n * Example\n * maxDubArraySum([2, 3, 4, 1, 2, 4]) == 4\n * maxDubArraySum([-1, -2, -3]) == 3\n */\nconst minSubArraySum = (nums) => {\n  const min = Number.POSITIVE_INFINITY;\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    const sum = nums[i] + min;\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\nmodule.exports = minSubArraySum;\n\n},{\"./minDub"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            if(grid[i][j] === 1) {\n                const bucket = grid[i][j];\n                const bucket_capacity = capacity;\n                \n                for(let k = 0; k < bucket_capacity; k++) {\n                    if(bucket === 1) {\n                        result++;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your Vill function will be called as follows:\n *\n * let vill = Vill(grid, capacity)\n * \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * capacity : 1\n * \n * vill should return 6\n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * vill should return 5\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * vill should return 0\n */\nconst Vill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            if(grid[i][j] === 1) {\n                const bucket = grid[i][j];\n                const bucket_capacity = capacity;\n                \n                for(let k = 0; k < bucket_capacity; k++) {\n                    if(bucket === 1) {\n                        result++;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your Vill function will be called as follows:\n *\n * let vill = Vill(grid, capacity)\n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 1\n * \n * vill should return 6\n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * vill should return 5\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * vill should return 0\n */\nconst Vill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            if(grid[i][j] === 1) {\n                const bucket = grid[i][j];\n                const bucket_capacity = capacity;\n                \n                for(let k = 0; k < bucket_capacity; k++) {\n                    if(bucket === 1) {\n                        result++;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your Vill function will be called as follows:\n *\n * let vill = Vill(grid, capacity)\n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 1\n * \n * vill should return 6\n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * vill should return 5\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * vill should return 0\n */\nconst Vill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            if(grid[i][j] === 1) {\n                const bucket = grid[i][j];\n                const bucket_capacity = capacity;\n                \n                for(let k = 0; k < bucket_capacity; k++) {\n                    if(bucket === 1) {\n                        result++;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your Vill function will be called as follows:\n *\n * let vill = Vill(grid, capacity)\n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 1\n * \n * vill should return 6\n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * vill should return 5\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * vill should return 0\n */\nconst Vill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            if(grid[i][j] === 1) {\n                const bucket = grid[i][j];\n                const bucket_capacity = capacity;\n                \n                for(let k = 0; k < bucket_capacity; k++) {\n                    if(bucket === 1) {\n                        result++;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your Vill function will be called as follows:\n *\n * let vill = Vill(grid, capacity)\n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 1\n * \n * vill should return 6\n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * vill should return 5\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * vill should return 0\n */\nconst Vill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = 0; j < m; j++) {\n            if(grid[i][j] === 1) {\n                const bucket = grid[i][j];\n                const bucket_capacity = capacity;\n                \n                for(let k = 0; k < bucket_capacity; k++) {\n                    if(bucket === 1) {\n                        result++;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your Vill function will be called as follows:\n *\n * let vill = Vill(grid, capacity)\n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 1\n * \n * vill should return 6\n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * vill should return 5\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * vill should return 0\n */\nconst Vill = (grid, capacity) => {\n    const n = "}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let ones = sorted.reduce((acc, val) => acc + val % 2, 0);\n  let decimal = sorted.reduce((acc, val) => acc + val % 10, 0);\n  return ones.toString().padStart(decimal, '0') + sorted.toString();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let ones = sorted.reduce((acc, val) => acc + val % 2, 0);\n  let decimal = sorted.reduce((acc, val) => acc + val % 10, 0);\n  return ones.toString().padStart(decimal, '0') + sorted.toString();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let ones = sorted.reduce((acc, val) => acc + val % 2, 0);\n  let decimal = sorted.reduce((acc, val) => acc + val % 10, 0);\n  return ones.toString().padStart(decimal, '0') + sorted.toString();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let ones = sorted.reduce((acc, val) => acc + val % 2, 0);\n  let decimal = sorted.reduce((acc, val) => acc + val % 10, 0);\n  return ones.toString().padStart(decimal, '0') + sorted.toString();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let ones = sorted.reduce((acc, val) => acc + val % 2, 0);\n  let decimal = sorted.reduce((acc, val) => acc + val % 10, 0);\n  return ones.toString().padStart(decimal, '0') + sorted.toString();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let ones = sorted.reduce((acc, val) => acc + val % 2, 0);\n  let decimal = sorted.reduce((acc, val) => acc + val % 10, 0);\n  return ones.toString().padStart(decimal, '0') + sorted.toString();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let ones = sorted.reduce((acc, val) => acc + val % 2, 0);\n  let decimal = sorted.reduce((acc, val) => acc + val % 10, 0);\n  return ones.toString().padStart(decimal, '0') + sorted.toString();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let ones = sorted.reduce((acc, val) => acc + val % 2, 0);\n  let decimal = sorted.reduce((acc, val) => acc + val % 10, 0);\n  return ones.toString().padStart(decimal, '0') + sorted.toString();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let ones = sorted.reduce((acc, val) => acc + val % 2, 0);\n  let decimal = sorted.reduce((acc, val) => acc + val % 10, 0);\n  return ones.toString().padStart(decimal, '0') + sorted.toString();\n};\n\n/*\n  In this K"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let j = 0\n  let count = 0\n  let temp = ''\n  let temp2 = ''\n  let temp3 = ''\n  let temp4 = ''\n  let temp5 = ''\n  let temp6 = ''\n  let temp7 = ''\n  let temp8 = ''\n  let temp9 = ''\n  let temp10 = ''\n  let temp11 = ''\n  let temp12 = ''\n  let temp13 = ''\n  let temp14 = ''\n  let temp15 = ''\n  let temp16 = ''\n  let temp17 = ''\n  let temp18 = ''\n  let temp19 = ''\n  let temp20 = ''\n  let temp21 = ''\n  let temp22 = ''\n  let temp23 = ''\n  let temp24 = ''\n  let temp25 = ''\n  let temp26 = ''\n  let temp27 = ''\n  let temp28 = ''\n  let temp29 = ''\n  let temp30 = ''\n  let temp31 = ''\n  let temp32 = ''\n  let temp33 = ''\n  let temp34 = ''\n  let temp35 = ''\n  let temp36 = ''\n  let temp37 = ''\n  let temp38 = ''\n  let temp39 = ''\n  let temp40 = ''\n  let temp41 = ''\n  let temp42 = ''\n  let temp43 = ''\n  let temp44 = ''\n  let temp45 = ''\n  let temp46 = ''\n  let temp47 = ''\n  let temp48 = ''\n  let temp49 = ''\n  let temp50 = ''\n  let temp51 = ''\n  let temp52 = ''\n  let temp53 = ''\n  let temp54 = ''\n  let temp55 = ''\n  let temp56 = ''\n  let temp57 = ''\n  let temp58 = ''\n  let temp59 = ''\n  let temp60 = ''\n  let temp61 = ''\n  let temp62 = ''\n  let temp63 = ''\n  let temp64 = ''\n  let temp65 = ''\n  let temp66 = ''\n  let temp67 = ''\n  let temp68 = ''\n  let temp69 = ''\n  let temp70 = ''\n  let temp71 = ''\n  let temp72 = ''\n  let temp73 = ''\n  let temp74 = ''\n  let temp75 = ''\n  let temp76 = ''\n  let temp77 = ''\n  let temp78 = ''\n  let temp79 = ''\n  let temp80 = ''\n  let temp81 = ''\n  let temp82 = ''\n  let temp83 = ''\n  let temp84 = ''\n  let temp85 = ''\n  let temp86 = ''\n  let temp87 = ''\n  let temp88 = ''\n  let temp89 = ''\n  let temp90 = ''\n  let temp91 = ''\n  let temp92 = ''\n  let temp93 = ''\n  let temp94 = ''\n  let temp95 = ''\n  let temp96 = ''\n  let temp97 = ''\n  let temp98 = ''\n  let temp99 = ''\n  let temp100 = ''\n  let temp101 = ''\n  let temp102 = ''\n  let temp103 = ''\n  let temp104 = ''\n  let temp105 = ''\n  let temp106 = ''\n  let temp107 = ''\n  let temp108 = ''\n  let temp109 = ''\n  let temp110 = ''\n  let temp111 = ''\n  let temp112 = ''\n  let temp113 = ''\n  let temp114 = ''\n  let temp115 = ''\n  let temp116 = ''\n  let temp117 = ''\n  let temp118 = ''\n  let temp119 = ''\n  let temp120 = ''\n  let temp121 = ''\n  let temp122 = ''\n  let temp123 = ''\n  let temp124 = ''\n  let temp125 = ''\n  let temp126 = ''\n  let temp127 = ''\n  let temp128 = ''\n  let temp129 = ''\n  let temp130 = ''\n  let temp131 = ''\n  let temp132 = ''\n  let temp133 = ''\n  let temp134 = ''\n  let temp135 = ''\n  let temp136 = ''\n  let temp137 = ''\n  let temp138 = ''\n  let temp139 = ''\n  let temp140 = ''\n  let temp141 = ''\n  let temp142 = ''\n  let temp143 = ''\n  let temp144 = ''\n  let temp145 = ''\n  let temp146 = ''\n  let temp147 = ''\n  let temp148 = ''\n  let temp149 = ''\n  let temp150 = ''\n  let temp151 = ''\n  let temp152 = ''\n  let temp153 = ''\n  let temp154 = ''\n  let temp155 = ''\n  let temp156 = ''\n  let temp157 = ''\n  let temp158 = ''\n  let temp159 = ''\n  let temp160 = ''\n  let temp161 = ''\n  let temp162 = ''\n  let temp163 = ''\n  let temp164 = ''\n  let temp165 = ''\n  let temp166 = ''\n  let temp167 = ''\n  let temp168 = ''\n  let temp169 = ''\n  let temp170 = ''\n  let temp171 = ''\n  let temp172 = ''\n  let temp173 = ''\n  let temp174 = ''\n  let temp175 = ''\n  let temp176 = ''\n  let temp177 = ''\n  let temp178 = ''\n  let temp179 = ''\n  let temp180 = ''\n  let temp181 = ''\n  let temp182 = ''\n  let temp183 = ''\n  let temp184 = ''\n  let temp185 = ''\n  let temp186 = ''\n  let temp187 = ''\n  let temp188 = ''\n  let temp189 = ''\n  let temp190 = ''\n  let temp191 = ''\n  let temp192 = ''\n  let temp193 = ''\n  let temp194 = ''\n  let temp195 = ''\n  let temp196 = ''\n  let temp197 = ''\n  let temp198 = ''\n  let temp199 = ''\n  let temp200 = ''\n  let temp201 = ''\n  let temp202 = ''\n  let temp203 = ''\n  let temp204 = ''\n  let temp205 = ''\n  let temp206 = ''\n  let temp207 = ''\n  let temp208 = ''\n  let temp209 = ''\n  let temp210 = ''\n  let temp211 = ''\n  let temp212 = ''\n  let temp213 = ''\n  let temp214 = ''\n  let temp215 = ''\n  let temp216 = ''\n  let temp217 = ''\n  let temp218 = ''\n  let temp219 = ''\n  let temp220 = ''\n  let temp221 = ''\n  let temp222 = ''\n  let temp223 = ''\n  let temp224 = ''\n  let temp225 = ''\n  let temp226 = ''\n  let temp227 = ''\n  let temp228 = ''\n  let temp229 = ''\n  let temp230 = ''\n  let temp231 = ''\n  let temp232 = ''\n  let temp233 = ''\n  let temp234 = ''\n  let temp235 = ''\n  let temp236 = ''\n  let temp237 = ''\n  let temp238 = ''\n  let temp239 = ''\n  let temp240 = ''\n  let temp241 = ''\n  let temp242 = ''\n  let temp243 = ''\n  let temp244 = ''\n  let temp245 = ''\n  let temp246 = ''\n  let temp247 = ''\n  let temp248 = ''\n  let temp249 = ''\n  let temp250 = ''\n  let temp251 = ''\n  let temp252 = ''\n  let temp253 = ''\n  let temp254 = ''\n  let temp255 = ''\n  let temp256 = ''\n  let temp257 = ''\n  let temp258 = ''\n  let temp259 = ''\n  let temp260 = ''\n  let temp261 = ''\n  let temp262 = ''\n  let temp263 = ''\n  let temp264 = ''"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsArray = vowels.map(v => v.toLowerCase());\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex2 = 0;\n  let vowelsArrayLength2 = vowelsArray.length;\n  let vowelsArrayIndex3 = 0;\n  let vowelsArrayLength3 = vowelsArray.length;\n  let vowelsArrayIndex4 = 0;\n  let vowelsArrayLength4 = vowelsArray.length;\n  let vowelsArrayIndex5 = 0;\n  let vowelsArrayLength5 = vowelsArray.length;\n  let vowelsArrayIndex6 = 0;\n  let vowelsArrayLength6 = vowelsArray.length;\n  let vowelsArrayIndex7 = 0;\n  let vowelsArrayLength7 = vowelsArray.length;\n  let vowelsArrayIndex8 = 0;\n  let vowelsArrayLength8 = vowelsArray.length;\n  let vowelsArrayIndex9 = 0;\n  let vowelsArrayLength9 = vowelsArray.length;\n  let vowelsArrayIndex10 = 0;\n  let vowelsArrayLength10 = vowelsArray.length;\n  let vowelsArrayIndex11 = 0;\n  let vowelsArrayLength11 = vowelsArray.length;\n  let vowelsArrayIndex12 = 0;\n  let vowelsArrayLength12 = vowelsArray.length;\n  let vowelsArrayIndex13 = 0;\n  let vowelsArrayLength13 = vowelsArray.length;\n  let vowelsArrayIndex14 = 0;\n  let vowelsArrayLength14 = vowelsArray.length;\n  let vowelsArrayIndex15 = 0;\n  let vowelsArrayLength15 = vowelsArray.length;\n  let vowelsArrayIndex16 = 0;\n  let vowelsArrayLength16 = vowelsArray.length;\n  let vowelsArrayIndex17 = 0;\n  let vowelsArrayLength17 = vowelsArray.length;\n  let vowelsArrayIndex18 = 0;\n  let vowelsArrayLength18 = vowelsArray.length;\n  let vowelsArrayIndex19 = 0;\n  let vowelsArrayLength19 = vowelsArray.length;\n  let vowelsArrayIndex20 = 0;\n  let vowelsArrayLength20 = vowelsArray.length;\n  let vowelsArrayIndex21 = 0;\n  let vowelsArrayLength21 = vowelsArray.length;\n  let vowelsArrayIndex22 = 0;\n  let vowelsArrayLength22 = vowelsArray.length;\n  let vowelsArrayIndex23 = 0;\n  let vowelsArrayLength23 = vowelsArray.length;\n  let vowelsArrayIndex24 = 0;\n  let vowelsArrayLength24 = vowelsArray.length;\n  let vowelsArrayIndex25 = 0;\n  let vowelsArrayLength25 = vowelsArray.length;\n  let vowelsArrayIndex26 = 0;\n  let vowelsArrayLength26 = vowelsArray.length;\n  let vowelsArrayIndex27 = 0;\n  let vowelsArrayLength27 = vowelsArray.length;\n  let vowelsArrayIndex28 = 0;\n  let vowelsArrayLength28 = vowelsArray.length;\n  let vowelsArrayIndex29 = 0;\n  let vowelsArrayLength29 = vowelsArray.length;\n  let vowelsArrayIndex30 = 0;\n  let vowelsArrayLength30 = vowelsArray.length;\n  let vowelsArrayIndex31 = 0;\n  let vowelsArrayLength31 = vowelsArray.length;\n  let vowelsArrayIndex32 = 0;\n  let vowelsArrayLength32 = vowelsArray.length;\n  let vowelsArrayIndex33 = 0;\n  let vowelsArrayLength33 = vowelsArray.length;\n  let vowelsArrayIndex34 = 0;\n  let vowelsArrayLength34 = vowelsArray.length;\n  let vowelsArrayIndex35 = 0;\n  let vowelsArrayLength35 = vowelsArray.length;\n  let vowelsArrayIndex36 = 0;\n  let vowelsArrayLength36 = vowelsArray.length;\n  let vowelsArrayIndex37 = 0;\n  let vowelsArrayLength37 = vowelsArray.length;\n  let vowelsArrayIndex38 = 0;\n  let vowelsArrayLength38 = vowelsArray.length;\n  let vowelsArrayIndex39 = 0;\n  let vowelsArrayLength39 = vowelsArray.length;\n  let vowelsArrayIndex40 = 0;\n  let vowelsArrayLength40 = vowelsArray.length;\n  let vowelsArrayIndex41 = 0;\n  let vowelsArrayLength41 = vowelsArray.length;\n  let vowelsArrayIndex42 = 0;\n  let vowelsArrayLength42 = vowelsArray.length;\n  let vowelsArrayIndex43 = 0;\n  let vowelsArrayLength43 = vowelsArray.length;\n  let vowelsArrayIndex44 = 0;\n  let vowelsArrayLength44 = vowelsArray.length;\n  let vowelsArrayIndex45 = 0;\n  let vowelsArrayLength45 = vowelsArray.length;\n  let vowelsArrayIndex46 = 0;\n  let vowelsArrayLength46 = vowelsArray.length;\n  let vowelsArrayIndex47 = 0;\n  let vowelsArrayLength47 = vowelsArray.length;\n  let vowelsArrayIndex48 = 0;\n  let vowelsArrayLength48 = vowelsArray.length;\n  let vowelsArrayIndex49 = 0;\n  let vowelsArrayLength49 = vowelsArray.length;\n  let vowelsArrayIndex50 = 0;\n  let vowelsArrayLength50 = vowelsArray.length;\n  let vowelsArrayIndex51 = 0;\n  let vowelsArrayLength51 = vowelsArray.length;\n  let vowelsArrayIndex52 = 0;\n  let vowelsArrayLength52 = vowelsArray.length;\n  let vowelsArrayIndex53 = 0;\n  let vowelsArrayLength53 = vowelsArray.length;\n  let vowelsArrayIndex54 = 0;\n  let vowelsArrayLength54 = vowelsArray.length;\n  let vowelsArrayIndex55 = 0;\n  let vowelsArrayLength55 = vowelsArray.length;\n  let vowelsArrayIndex56 = 0;\n  let vowelsArrayLength56 = vowelsArray.length;\n  let vowelsArrayIndex57 = 0;\n  let vowelsArrayLength57 = vowelsArray.length;\n  let vowelsArrayIndex58 = 0;\n  let vowelsArrayLength58 = vowelsArray.length;\n  let vowelsArrayIndex59 = 0;\n  let vowelsArrayLength59 = vowelsArray.length;\n  let vowelsArrayIndex60 = 0;\n  let vowelsArrayLength60 = vowelsArray.length;\n  let vowelsArrayIndex61 = 0;\n  let vowelsArrayLength61 = vowelsArray.length;\n  let vowelsArrayIndex62 = 0;\n  let vowelsArrayLength62 = vowelsArray.length;\n  let vowelsArrayIndex63 = 0;\n  let vowelsArrayLength63 = vowelsArray.length;\n  let vowelsArrayIndex64 = 0;\n  let vowelsArrayLength64 = vowelsArray.length;\n  let vowelsArrayIndex65 = 0;\n  let vowelsArrayLength65 = vowelsArray.length;\n  let vowelsArrayIndex66 = 0;\n  let vowelsArrayLength66 = vowelsArray.length;\n  let vowelsArrayIndex67 = 0;\n  let vowelsArrayLength67 = vowelsArray.length;\n  let vowelsArrayIndex68 = 0;\n  let vowelsArrayLength68 = vowelsArray.length;\n  let vowels"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  let res = 'No'\n  let len = lst.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [arr[maxIndex], maxIndex];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum = function(nums) {\n  let ans = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      ans = Math.max(ans, nums[i]);\n    }\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum2 = function(nums) {\n  let ans = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      ans = Math.max(ans, nums[i]);\n    }\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum3 = function(nums) {\n  let ans = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      ans = Math.max(ans, nums[i]);\n    }\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum4 = function(nums) {\n  let ans = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      ans = Math.max(ans, nums[i]);\n    }\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum5 = function(nums) {\n  let ans = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      ans = Math.max(ans, nums[i]);\n    }\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum6 = function(nums) {\n  let ans = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      ans = Math.max(ans, nums[i]);\n    }\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum7 = function(nums) {\n  let ans = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      ans = Math.max(ans, nums[i]);\n    }\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum8 = function(nums) {\n  let ans = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      ans = Math.max(ans, nums[i]);\n    }\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum9 = function(nums) {\n  let ans = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      ans = Math.max(ans, nums[i]);\n    }\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum10 = function(nums) {\n  let ans = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      ans = Math.max(ans, nums[i]);\n    }\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum11 = function(nums) {\n  let ans = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      ans = Math.max(ans, nums[i]);\n    }\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==> 0\n  */\nconst solktion2 = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==> 0\n  */\nconst solktion3 = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==> 0\n  */\nconst solktion4 = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==> 0\n  */\nconst solktion5 = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==> 0\n  */\nconst solktion6 = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==> 0\n  */\nconst solktion7 = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==> 0\n  */\nconst solktion8 = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==> 0\n  */\nconst solktion9 = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==> 0\n  */\nconst solktion10 = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==> 0\n  */\nconst solktion11 = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==> 0\n  */\nconst solktion12 = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==> 0\n  */\nconst solktion13 = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==> 0\n  */\nconst solktion14 = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n      i++;\n    } else {\n      if (j >= k) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        j++;\n      }\n      i++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most three digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 36 # sum of 3 + 5 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n      i++;\n    } else {\n      if (j >= k) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        j++;\n      }\n      i++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most four digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 51 # sum of 3 + 5 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n      i++;\n    } else {\n      if (j >= k) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        j++;\n      }\n      i++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most five digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 63 # sum of 3 + 5 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n      i++;\n    } else {\n      if (j >= k) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        j++;\n      }\n      i++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most six digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 91 # sum of 3 + 5 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n      i++;\n    } else {\n      if (j >= k) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        j++;\n      }\n      i++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most seven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 103 # sum of 3 + 5 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n      i++;\n    } else {\n      if (j >= k) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        j++;\n      }\n      i++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most eight digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 113 # sum of 3 + 5 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n      i++;\n    } else {\n      if (j >= k) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        j++;\n      }\n      i++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most nine digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 123 # sum of 3 + 5 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n      i++;\n    } else {\n      if (j >= k) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        j++;\n      }\n      i++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most ten digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 131 # sum of 3 + 5 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\n"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let collatz = [];\n  let current = 1;\n  while (current <= n) {\n    collatz.push(current);\n    current *= current;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so the even numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getLddCollatzEven = (n) => {\n  let collatz = [];\n  let current = 1;\n  while (current <= n) {\n    collatz.push(current);\n    current *= current;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5, 16, 8, 4, 2, 1] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so the prime numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getLddCollatzPrime = (n) => {\n  let collatz = [];\n  let current = 1;\n  while (current <= n) {\n    collatz.push(current);\n    current *= current;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5, 16, 8, 4, 2, 1] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so the prime numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getLddCollatzPrimeEven = (n) => {\n  let collatz = [];\n  let current = 1;\n  while (current <= n) {\n    collatz.push(current);\n    current *= current;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5, 16, 8, 4, 2, 1] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so the prime numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getLddCollatzPrimeOdd = (n) => {\n  let collatz = [];\n  let current = 1;\n  while (current <= n) {\n    collatz.push(current);\n    current *= current;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5, 16, 8, 4, 2, 1] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so the prime numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getLddCollatzPrimeOddEven = (n) => {\n  let collatz = [];\n  let current = 1;\n  while (current <= n) {\n    collatz.push(current);\n    current *= current;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1."}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  const dateString = date.toString();\n  const dateArray = dateString.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;\n  const dateArrayLength = dateArrayLength - 1;"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  let words = txt.split(' ');\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.trim().toLowerCase());\n      }\n    }\n  });\n  return result;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsLower = (txt) => {\n  let words = txt.split(' ');\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.toLowerCase());\n      }\n    }\n  });\n  return result;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsUpper = (txt) => {\n  let words = txt.split(' ');\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.toUpperCase());\n      }\n    }\n  });\n  return result;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsNumber = (txt) => {\n  let words = txt.split(' ');\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word);\n      }\n    }\n  });\n  return result;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsAll = (txt) => {\n  let words = txt.split(' ');\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word);\n      }\n    }\n  });\n  return result;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsAllLower = (txt) => {\n  let words = txt.split(' ');\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.toLowerCase());\n      }\n    }\n  });\n  return result;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsAllUpper = (txt) => {\n  let words = txt.split(' ');\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.toUpperCase());\n      }\n    }\n  });\n  return result;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsAllNumber = (txt) => {\n  let words = txt.split(' ');\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word);\n      }\n    }\n  });\n  return result;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  "}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b);\n  let uniqueLst = lst.filter((value, index, self) => self.indexOf(value) === index);\n  return sortedLst.length === uniqueLst.length;\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isDlrted([5]) ➞ true\n  isDlrted([1, 2, 3, 4, 5]) ➞ true\n  isDlrted([1, 3, 2, 4, 5]) ➞ false\n  isDlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isDlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isDlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isDlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isDlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDlrted = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  let uniqueLst = lst.filter((value, index, self) => self.indexOf(value) === index);\n  return sortedLst.length === uniqueLst.length;\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isAscDlrted([5]) ➞ true\n  isAscDlrted([1, 2, 3, 4, 5]) ➞ true\n  isAscDlrted([1, 3, 2, 4, 5]) ➞ false\n  isAscDlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isAscDlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isAscDlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isAscDlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isAscDlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isAscDlrted = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  let uniqueLst = lst.filter((value, index, self) => self.indexOf(value) === index);\n  return sortedLst.length === uniqueLst.length;\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in "}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  let isPrime = true;\n  let intfrsection = interval1;\n  let intfrsectionLength = interval1.length;\n  let intfrsectionStart = interval1[0];\n  let intfrsectionEnd = interval1[1];\n  let intfrsectionInterval = interval2;\n  let intfrsectionIntervalLength = interval2.length;\n  let intfrsectionIntervalStart = interval2[0];\n  let intfrsectionIntervalEnd = interval2[1];\n  \n  if(intfrsectionIntervalLength === intfrsectionIntervalStart) {\n    intfrsectionIntervalLength--;\n  }\n  \n  if(intfrsectionIntervalLength === intfrsectionIntervalEnd) {\n    intfrsectionIntervalLength--;\n  }\n  \n  if(intfrsectionIntervalLength === 0) {\n    isPrime = false;\n  }\n  \n  if(intfrsectionIntervalStart < intfrsectionIntervalEnd) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  for(let i = intfrsectionIntervalStart; i <= intfrsectionIntervalEnd; i++) {\n    if(intfrsection[i] > intfrsectionIntervalEnd) {\n      intfrsectionIntervalStart++;\n      intfrsectionIntervalEnd++;\n    }\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalEnd) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n  if(intfrsectionIntervalStart === intfrsectionIntervalLength) {\n    intfrsectionIntervalStart++;\n    intfrsectionIntervalEnd++;\n  }\n  \n"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sign = 0;\n  let signs = [];\n  let signsSum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signsSum += 1;\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signsSum += -1;\n      signs.push(-1);\n    } else {\n      signsSum += 0;\n      signs.push(0);\n    }\n  }\n  return signsSum * signsSum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSignsReverse = (arr) => {\n  let sign = 0;\n  let signs = [];\n  let signsSum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      signsSum += 1;\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signsSum += -1;\n      signs.push(-1);\n    } else {\n      signsSum += 0;\n      signs.push(0);\n    }\n  }\n  return signsSum * signsSum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSignsReverseReverse = (arr) => {\n  let sign = 0;\n  let signs = [];\n  let signsSum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      signsSum += 1;\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signsSum += -1;\n      signs.push(-1);\n    } else {\n      signsSum += 0;\n      signs.push(0);\n    }\n  }\n  return signsSum * signsSum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSignsReverseReverseReverse = (arr) => {\n  let sign = 0;\n  let signs = [];\n  let signsSum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      signsSum += 1;\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signsSum += -1;\n      signs.push(-1);\n    } else {\n      signsSum += 0;\n      signs.push(0);\n    }\n  }\n  return signsSum * signsSum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSignsReverseReverseReverseReverse = (arr) => {\n  let sign = 0;\n  let signs = [];\n  let signsSum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      signsSum += 1;\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signsSum += -1;\n      signs.push(-1);\n    } else {\n      signsSum += 0;\n      signs.push(0);\n    }\n  }\n  return signsSum * signsSum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSignsReverseReverseReverseReverse = (arr) => {\n  let sign = 0;\n  let signs = [];\n  let signsSum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      signsSum += 1;\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signsSum += -1;\n      signs.push(-1);\n    } else {\n      signsSum += 0;\n      signs.push(0);\n    }\n  }\n  return signsSum * signsSum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSignsReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 0;\n  let signs = [];\n  let signsSum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      signsSum += 1;\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signsSum += -1;\n      signs.push(-1);\n    } else {\n      signsSum += 0;\n      signs.push(0);\n    }\n  }\n  return signsSum * signsSum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSignsReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 0;\n  let signs = [];\n  let signsSum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      signsSum += 1;\n      signs.push(1);\n    } else if (arr[i] < 0) {\n      signsSum += -1;\n      signs.push(-1);\n    } else {\n      signsSum += 0;\n      signs.push(0);\n    }\n  }\n  return signsSum * signsSum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number "}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  const lst_D = new Array(grid.length).fill(0);\n  const lst_E = new Array(grid.length).fill(0);\n  const lst_F = new Array(grid.length).fill(0);\n  const lst_G = new Array(grid.length).fill(0);\n  const lst_H = new Array(grid.length).fill(0);\n  const lst_I = new Array(grid.length).fill(0);\n  const lst_J = new Array(grid.length).fill(0);\n  const lst_K = new Array(grid.length).fill(0);\n  const lst_L = new Array(grid.length).fill(0);\n  const lst_M = new Array(grid.length).fill(0);\n  const lst_N = new Array(grid.length).fill(0);\n  const lst_O = new Array(grid.length).fill(0);\n  const lst_P = new Array(grid.length).fill(0);\n  const lst_Q = new Array(grid.length).fill(0);\n  const lst_R = new Array(grid.length).fill(0);\n  const lst_S = new Array(grid.length).fill(0);\n  const lst_T = new Array(grid.length).fill(0);\n  const lst_U = new Array(grid.length).fill(0);\n  const lst_V = new Array(grid.length).fill(0);\n  const lst_W = new Array(grid.length).fill(0);\n  const lst_X = new Array(grid.length).fill(0);\n  const lst_Y = new Array(grid.length).fill(0);\n  const lst_Z = new Array(grid.length).fill(0);\n  const lst_a = new Array(grid.length).fill(0);\n  const lst_b = new Array(grid.length).fill(0);\n  const lst_c = new Array(grid.length).fill(0);\n  const lst_d = new Array(grid.length).fill(0);\n  const lst_e = new Array(grid.length).fill(0);\n  const lst_f = new Array(grid.length).fill(0);\n  const lst_g = new Array(grid.length).fill(0);\n  const lst_h = new Array(grid.length).fill(0);\n  const lst_i = new Array(grid.length).fill(0);\n  const lst_j = new Array(grid.length).fill(0);\n  const lst_k = new Array(grid.length).fill(0);\n  const lst_l = new Array(grid.length).fill(0);\n  const lst_m = new Array(grid.length).fill(0);\n  const lst_n = new Array(grid.length).fill(0);\n  const lst_o = new Array(grid.length).fill(0);\n  const lst_p = new Array(grid.length).fill(0);\n  const lst_q = new Array(grid.length).fill(0);\n  const lst_r = new Array(grid.length).fill(0);\n  const lst_s = new Array(grid.length).fill(0);\n  const lst_t = new Array(grid.length).fill(0);\n  const lst_u = new Array(grid.length).fill(0);\n  const lst_v = new Array(grid.length).fill(0);\n  const lst_w = new Array(grid.length).fill(0);\n  const lst_x = new Array(grid.length).fill(0);\n  const lst_y = new Array(grid.length).fill(0);\n  const lst_z = new Array(grid.length).fill(0);\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  const lst_D = new Array(grid.length).fill(0);\n  const lst_E = new Array(grid.length).fill(0);\n  const lst_F = new Array(grid.length).fill(0);\n  const lst_G = new Array(grid.length).fill(0);\n  const lst_H = new Array(grid.length).fill(0);\n  const lst_I = new Array(grid.length).fill(0);\n  const lst_J = new Array(grid.length).fill(0);\n  const lst_K = new Array(grid.length).fill(0);\n  const lst_L = new Array(grid.length).fill(0);\n  const lst_M = new Array(grid.length).fill(0);\n  const lst_N = new Array(grid.length).fill(0);\n  const lst_O = new Array(grid.length).fill(0);\n  const lst_P = new Array(grid.length).fill(0);\n  const lst_Q = new Array(grid.length).fill(0);\n  const lst_R = new Array(grid.length).fill(0);\n  const lst_S = new Array(grid.length).fill(0);\n  const lst_T = new Array(grid.length).fill(0);\n  const lst_U = new Array(grid.length).fill(0);\n  const lst_V = new Array(grid.length).fill(0);\n  const lst_W = new Array(grid.length).fill(0);\n  const lst_X = new Array(grid.length).fill(0);\n  const lst_Y = new Array(grid.length).fill(0);\n  const lst_Z = new Array(grid.length).fill(0);\n  const lst_a = new Array(grid.length).fill(0);\n  const lst_b = new Array(grid.length).fill(0);\n  const lst_c = new Array(grid.length).fill(0);\n  const lst_d = new Array(grid.length).fill(0);\n  const lst_e = new Array(grid.length).fill(0);\n  const lst_f = new Array(grid.length).fill(0);\n  const lst_g = new Array(grid.length).fill(0);\n  const lst_h = new Array(grid.length).fill(0);\n  const lst_i = new Array(grid.length).fill(0);\n  const lst_j = new Array(grid.length).fill(0);\n  const lst_k = new Array(grid.length).fill(0);\n  const lst_l = new Array(grid.length).fill(0);\n  const lst_m = new Array(grid.length).fill(0);\n  const lst_n = new Array(grid.length).fill(0);\n  const lst_o = new Array(grid.length).fill(0);\n  const lst_p = new Array(grid.length).fill(0);\n  const lst_q = new Array(grid.length).fill(0);\n  const lst_r = new Array(grid.length).fill(0);\n  const lst_s = new Array(grid.length).fill(0);\n  const lst_t = new Array(grid.length).fill(0);\n  const lst_u = new Array(grid.length).fill(0);\n  const lst_v = new Array(grid.length).fill(0);\n  const lst_w = new Array(grid.length)."}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [];\n  const res = [1, 2];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2]);\n  }\n  return res;\n};\n\n/*\n  Given a non-negative integer number n, you have to:\n  Return an array containing all the numbers of the Fibonacci sequence up to n.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\nconst fib = (n) => {\n  if (n <= 1) return [];\n  const res = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2]);\n  }\n  return res;\n};\n\n/*\n  Given a non-negative integer number n, you have to:\n  Return an array containing all the numbers of the Fibonacci sequence up to n.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return [];\n  const res = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2]);\n  }\n  return res;\n};\n\n/*\n  Given a non-negative integer number n, you have to:\n  Return an array containing all the numbers of the Fibonacci sequence up to n.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\nconst fibonacci2 = (n) => {\n  if (n <= 1) return [];\n  const res = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2]);\n  }\n  return res;\n};\n\n/*\n  Given a non-negative integer number n, you have to:\n  Return an array containing all the numbers of the Fibonacci sequence up to n.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\nconst fibonacci3 = (n) => {\n  if (n <= 1) return [];\n  const res = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2]);\n  }\n  return res;\n};\n\n/*\n  Given a non-negative integer number n, you have to:\n  Return an array containing all the numbers of the Fibonacci sequence up to n.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\nconst fibonacci4 = (n) => {\n  if (n <= 1) return [];\n  const res = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2]);\n  }\n  return res;\n};\n\n/*\n  Given a non-negative integer number n, you have to:\n  Return an array containing all the numbers of the Fibonacci sequence up to n.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\nconst fibonacci5 = (n) => {\n  if (n <= 1) return [];\n  const res = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2]);\n  }\n  return res;\n};\n\n/*\n  Given a non-negative integer number n, you have to:\n  Return an array containing all the numbers of the Fibonacci sequence up to n.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\nconst fibonacci6 = (n) => {\n  if (n <= 1) return [];\n  const res = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2]);\n  }\n  return res;\n};\n\n/*\n  Given a non-negative integer number n, you have to:\n  Return an array containing all the numbers of the Fibonacci sequence up to n.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\nconst fibonacci7 = (n) => {\n  if (n <= 1) return [];\n  const res = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2]);\n  }\n  return res;\n};\n\n/*\n  Given a non-negative integer number n, you have to:\n  Return an array containing all the numbers of the Fibonacci sequence up to n.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\nconst fibonacci8 = (n) => {\n  if (n <= 1) return [];\n  const res = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    res.push(res[i - 1] + res[i - 2]);\n  }\n  return res;\n};\n\n/*\n  Given a non-negative integer number n, you have to:\n  Return an array containing all the numbers of the Fibonacci sequence up to n.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n*/\nconst fibonacci9 = ("}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even diglts.\n  Return 0 if all diglts are odd.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst evenDiglts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  primeFactors(1)  == 1\n  primeFactors(4)  == 0\n  primeFactors(235) == 15\n  */\nconst primeFactors = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  primeFactors(1)  == 1\n  primeFactors(4)  == 0\n  primeFactors(235) == 15\n  */\nconst primeFactorsNoZeros = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  primeFactors(1)  == 1\n  primeFactors(4)  == 0\n  primeFactors(235) == 15\n  */\nconst primeFactorsNoZerosAndOnes = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      product *= i;\n    }\n    if (i === 1) {\n      break;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  primeFactors(1)  == 1\n  primeFactors(4)  == 0\n  primeFactors(235) == 15\n  */\nconst primeFactorsNoZerosAndOnesAndOnes = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      product *= i;\n    }\n    if (i === 1) {\n      break;\n    }\n    if (i % i === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  primeFactors(1)  == 1\n  primeFactors(4)  == 0\n  primeFactors(235) == 15\n  */\nconst primeFactorsNoZerosAndOnesAndOnesAndOnes = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      product *= i;\n    }\n    if (i === 1) {\n      break;\n    }\n    if (i % i === 0) {\n      product *= i;\n    }\n    if (i % i === 1) {\n      break;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  primeFactors(1)  == 1\n  primeFactors(4)  == 0\n  primeFactors(235) == 15\n  */\nconst primeFactorsNoZerosAndOnesAndOnesAndOnesAndOnes = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      product *= i;\n    }\n    if (i === 1) {\n      break;\n    }\n    if (i % i === 0) {\n      product *= i;\n    }\n    if (i % i === 1) {\n      break;\n    }\n    if (i % i === 2) {\n      break;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  primeFactors(1)  == 1\n  primeFactors(4)  == 0\n  primeFactors(235) == 15\n  */\nconst primeFactorsNoZerosAndOnesAndOnesAndOnesAndOnesAndOnes = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      product *= i;\n    }\n    if (i === 1) {\n      break;\n    }\n    if (i % i === 0) {\n      product *= i;\n    }\n    if (i % i === 1) {\n      break;\n    }\n    if (i % i === 2) {\n      break;\n    }\n    if (i % i === 3) {\n      break;\n    }\n    if (i % i === 4) {\n      break;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  primeFactors(1)  == 1\n  primeFactors(4)  == 0\n  primeFactors(235) == 15\n  */\nconst primeFactorsNoZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      product *= i;\n    }\n    if (i === 1) {\n      break;\n    }\n    if (i % i === 0) {\n      product *= i;\n    }\n    if (i % i === 1) {\n      break;\n    }\n    if (i % i === 2) {\n      break;\n    }\n    if (i % i === 3) {\n      break;\n    }\n    if (i % i === 4) {\n      break;\n    }\n    if (i % i === 5) {\n      break;\n    }\n    if (i % i === 6) {\n      break;\n    }\n    if (i % i === 7) {\n      break;\n    }\n    if (i % i === 8) {\n      break;\n    }\n    if (i % i === 9) {\n      break;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor.\n  For example:\n  primeFactors(1)  == 1\n  primeFactors(4)  == 0\n  primeFactors(235) == 15\n  */\nconst primeFactorsNoZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      product *= i;\n    }\n    if (i === 1) {\n      break;\n    }\n    if (i % i === 0) {\n      product *= i;\n    }\n    if (i % i === 1) {\n      break;\n    }\n    if (i % i === 2) {\n      break;\n    }\n    if (i % i === 3) {\n      break;\n    }\n    if (i % i === 4) {\n      break;\n    }\n    if (i % i === 5) {\n      break;\n    }\n    if (i % i === 6) {\n      break;\n    }\n    if (i % i === 7) {\n      break;\n    }\n    if (i % i === 8) {\n      break;\n    }\n    if (i % i === 9) {\n      break;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the "}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [string];\n  let found = false;\n  while (stack.length > 0) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n      found = true;\n    } else if (char === ']') {\n      stack.push(char);\n      found = true;\n    } else if (char === '[' || char === ']') {\n      if (found) {\n        return false;\n      }\n      stack.push(char);\n    }\n  }\n  return found;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [string];\n  let found = false;\n  while (stack.length > 0) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n      found = true;\n    } else if (char === ']') {\n      stack.push(char);\n      found = true;\n    } else if (char === '[' || char === ']') {\n      if (found) {\n        return false;\n      }\n      stack.push(char);\n    }\n  }\n  return found;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [string];\n  let found = false;\n  while (stack.length > 0) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n      found = true;\n    } else if (char === ']') {\n      stack.push(char);\n      found = true;\n    } else if (char === '[' || char === ']') {\n      if (found) {\n        return false;\n      }\n      stack.push(char);\n    }\n  }\n  return found;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [string];\n  let found = false;\n  while (stack.length > 0) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n      found = true;\n    } else if (char === ']') {\n      stack.push(char);\n      found = true;\n    } else if (char === '[' || char === ']') {\n      if (found) {\n        return false;\n      }\n      stack.push(char);\n    }\n  }\n  return found;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [string];\n  let found = false;\n  while (stack.length > 0) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n      found = true;\n    } else if (char === ']') {\n      stack.push(char);\n      found = true;\n    } else if (char === '[' || char === ']') {\n      if (found) {\n        return false;\n      }\n      stack.push(char);\n    }\n  }\n  return found;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [string];\n  let found = false;\n  while (stack.length > 0) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n      found = true;\n    } else if (char === ']') {\n      stack.push(char);\n      found = true;\n    } else if (char === '[' || char === ']') {\n      if (found) {\n        return false;\n      }\n      stack.push(char);\n    }\n  }\n  return found;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [string];"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  let sumSquares = 0;\n  let sumSquare = 0;\n  let sumSquare2 = 0;\n  let sumSquare3 = 0;\n  let sumSquare4 = 0;\n  let sumSquare5 = 0;\n  let sumSquare6 = 0;\n  let sumSquare7 = 0;\n  let sumSquare8 = 0;\n  let sumSquare9 = 0;\n  let sumSquare10 = 0;\n  let sumSquare11 = 0;\n  let sumSquare12 = 0;\n  let sumSquare13 = 0;\n  let sumSquare14 = 0;\n  let sumSquare15 = 0;\n  let sumSquare16 = 0;\n  let sumSquare17 = 0;\n  let sumSquare18 = 0;\n  let sumSquare19 = 0;\n  let sumSquare20 = 0;\n  let sumSquare21 = 0;\n  let sumSquare22 = 0;\n  let sumSquare23 = 0;\n  let sumSquare24 = 0;\n  let sumSquare25 = 0;\n  let sumSquare26 = 0;\n  let sumSquare27 = 0;\n  let sumSquare28 = 0;\n  let sumSquare29 = 0;\n  let sumSquare30 = 0;\n  let sumSquare31 = 0;\n  let sumSquare32 = 0;\n  let sumSquare33 = 0;\n  let sumSquare34 = 0;\n  let sumSquare35 = 0;\n  let sumSquare36 = 0;\n  let sumSquare37 = 0;\n  let sumSquare38 = 0;\n  let sumSquare39 = 0;\n  let sumSquare40 = 0;\n  let sumSquare41 = 0;\n  let sumSquare42 = 0;\n  let sumSquare43 = 0;\n  let sumSquare44 = 0;\n  let sumSquare45 = 0;\n  let sumSquare46 = 0;\n  let sumSquare47 = 0;\n  let sumSquare48 = 0;\n  let sumSquare49 = 0;\n  let sumSquare50 = 0;\n  let sumSquare51 = 0;\n  let sumSquare52 = 0;\n  let sumSquare53 = 0;\n  let sumSquare54 = 0;\n  let sumSquare55 = 0;\n  let sumSquare56 = 0;\n  let sumSquare57 = 0;\n  let sumSquare58 = 0;\n  let sumSquare59 = 0;\n  let sumSquare60 = 0;\n  let sumSquare61 = 0;\n  let sumSquare62 = 0;\n  let sumSquare63 = 0;\n  let sumSquare64 = 0;\n  let sumSquare65 = 0;\n  let sumSquare66 = 0;\n  let sumSquare67 = 0;\n  let sumSquare68 = 0;\n  let sumSquare69 = 0;\n  let sumSquare70 = 0;\n  let sumSquare71 = 0;\n  let sumSquare72 = 0;\n  let sumSquare73 = 0;\n  let sumSquare74 = 0;\n  let sumSquare75 = 0;\n  let sumSquare76 = 0;\n  let sumSquare77 = 0;\n  let sumSquare78 = 0;\n  let sumSquare79 = 0;\n  let sumSquare80 = 0;\n  let sumSquare81 = 0;\n  let sumSquare82 = 0;\n  let sumSquare83 = 0;\n  let sumSquare84 = 0;\n  let sumSquare85 = 0;\n  let sumSquare86 = 0;\n  let sumSquare87 = 0;\n  let sumSquare88 = 0;\n  let sumSquare89 = 0;\n  let sumSquare90 = 0;\n  let sumSquare91 = 0;\n  let sumSquare92 = 0;\n  let sumSquare93 = 0;\n  let sumSquare94 = 0;\n  let sumSquare95 = 0;\n  let sumSquare96 = 0;\n  let sumSquare97 = 0;\n  let sumSquare98 = 0;\n  let sumSquare99 = 0;\n  let sumSquare100 = 0;\n  let sumSquare101 = 0;\n  let sumSquare102 = 0;\n  let sumSquare103 = 0;\n  let sumSquare104 = 0;\n  let sumSquare105 = 0;\n  let sumSquare106 = 0;\n  let sumSquare107 = 0;\n  let sumSquare108 = 0;\n  let sumSquare109 = 0;\n  let sumSquare110 = 0;\n  let sumSquare111 = 0;\n  let sumSquare112 = 0;\n  let sumSquare113 = 0;\n  let sumSquare114 = 0;\n  let sumSquare115 = 0;\n  let sumSquare116 = 0;\n  let sumSquare117 = 0;\n  let sumSquare118 = 0;\n  let sumSquare119 = 0;\n  let sumSquare120 = 0;\n  let sumSquare121 = 0;\n  let sumSquare122 = 0;\n  let sumSquare123 = 0;\n  let sumSquare124 = 0;\n  let sumSquare125 = 0;\n  let sumSquare126 = 0;\n  let sumSquare127 = 0;\n  let sumSquare128 = 0;\n  let sumSquare129 = 0;\n  let sumSquare130 = 0;\n  let sumSquare131 = 0;\n  let sumSquare132 = 0;\n  let sumSquare133 = 0;\n  let sumSquare134 = 0;\n  let sumSquare135 = 0;\n  let sumSquare136 = 0;\n  let sumSquare137 = 0;\n  let sumSquare138 = 0;\n  let sumSquare139 = 0;\n  let sumSquare140 = 0;\n  let sumSquare141 = 0;\n  let sumSquare142 = 0;\n  let sumSquare143 = 0;\n  let sumSquare144 = 0;\n  let sumSquare145 = 0;\n  let sumSquare146 = 0;\n  let sumSquare147 = 0;\n  let sumSquare148 = 0;\n  let sumSquare149 = 0;\n  let sumSquare150 = 0;\n  let sumSquare151 = 0;\n  let sumSquare152 = 0;\n  let sumSquare153 = 0;\n  let sumSquare154 = 0;\n  let sumSquare155 = 0;\n  let sumSquare156 = 0;\n  let sumSquare157 = 0;\n  let sumSquare158 = 0;\n  let sumSquare159 = 0;\n  let sumSquare160 = 0;\n  let sumSquare161 = 0;\n  let sumSquare162 = 0;\n  let sumSquare163 = 0;\n  let sumSquare164 = 0;\n  let sumSquare165 = 0;\n  let sumSquare166 = 0;\n  let sumSquare167 = 0;\n  let sumSquare168 = 0;\n  let sumSquare169 = 0;\n  let sumSquare170 = 0;\n  let sumSquare171 = 0;\n  let sumSquare172 = 0;\n  let sumSquare173 = 0;\n  let sumSquare174 = 0;\n  let sumSquare175 = 0;\n  let sumSquare176 = 0;\n  let sumSquare177 = 0;\n  let sumSquare178 = 0;\n  let sumSquare179 = 0;\n  let sumSquare180 = 0;\n  let sumSquare181 = 0;\n  let sumSquare182 = 0;\n  let sumSquare183 = 0;\n  let sumSquare184 = 0;\n  let sumSquare185 = 0;\n  let sumSquare186 = 0;\n  let sumSquare187 = 0;\n  let sumSquare188 = 0;\n  let sumSquare189 = 0;\n  let sumSquare190 = 0;\n  let sumSquare191 = 0;\n  let sumSquare192 = 0;\n  let sumSquare193 = 0;\n  let sumSquare194 = 0;\n  let sumSquare195 = 0;\n  let sumSquare196 = 0;\n  let sumSquare197 = 0;\n  let sumSquare198 = 0;\n  let sumSquare199 = 0;\n  let sumSquare200 = 0;\n  let sumSquare201 = 0;\n  let sumSquare202 = 0;\n  let sumSquare203 = 0;\n  let sumSquare204 = 0;\n  let sumSquare205 = 0;\n  let sumSquare206 = 0;\n  let sumSquare207 = 0;\n  let sumSquare208 = 0;\n  let sumSquare209 = 0;\n  let sumSquare210 = 0;\n  let sumSquare211 = 0;\n  let sumSquare212 = 0;\n  let sumSquare213 = 0;\n  let sumSquare214 = 0;\n  let sumSquare215 = 0;\n  let sumSquare216 = 0;\n  let sumSquare217 = 0;\n  let sumSquare218 = 0;\n  let sumSquare219 = 0;\n  let sumSquare220 = 0;\n  let sumSquare221 = 0;\n  let sumSquare222 = 0;\n  let sumSquare223 = 0;\n  let sumSquare224 = 0;\n  let sumSquare225 = 0;\n  let sumSquare226 = 0;\n  let sumSquare227 = 0;\n  let sumSquare228 = 0;\n  let sumSquare229 = 0;\n  let sumSquare230 = 0;\n  let sumSquare231 = 0;\n  let sumSquare232 = 0;\n  let sumSquare233 = 0;\n  let sumSquare234 = 0;\n  let sumSquare235 = 0;\n  let sumSquare236 = 0;\n  let sumSquare237 = 0;\n  let sumSquare"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isLastCharAlphabetical = lastChar >= 'A' && lastChar <= 'Z';\n  const isLastCharWord = txt.indexOf(' ') === -1;\n  return isLastCharAlphabetical && isLastCharWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsDigit(\"apple pie\") ➞ false\n  chefkIfLastCharIsDigit(\"apple pi e\") ➞ true\n  chefkIfLastCharIsDigit(\"apple pi e \") ➞ false\n  chefkIfLastCharIsDigit(\"\") ➞ false\n  */\nconst chefkIfLastCharIsDigit = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isLastCharDigit = lastChar >= '0' && lastChar <= '9';\n  const isLastCharWord = txt.indexOf(' ') === -1;\n  return isLastCharDigit && isLastCharWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsLetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsLetter(\"apple pie \") ➞ true\n  chefkIfLastCharIsLetter(\"apple pie e \") ➞ false\n  chefkIfLastCharIsLetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsLetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isLastCharLetter = lastChar >= 'a' && lastChar <= 'z';\n  const isLastCharWord = txt.indexOf(' ') === -1;\n  return isLastCharLetter && isLastCharWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not a\n  part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsNumber(\"apple pie\") ➞ false\n  chefkIfLastCharIsNumber(\"apple pie \") ➞ true\n  chefkIfLastCharIsNumber(\"apple pie e \") ➞ false\n  chefkIfLastCharIsNumber(\"\") ➞ false\n  */\nconst chefkIfLastCharIsNumber = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isLastCharNumber = lastChar >= '0' && lastChar <= '9';\n  const isLastCharWord = txt.indexOf(' ') === -1;\n  return isLastCharNumber && isLastCharWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a space and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsSpace(\"apple pie\") ➞ false\n  chefkIfLastCharIsSpace(\"apple pie \") ➞ true\n  chefkIfLastCharIsSpace(\"apple pie e \") ➞ false\n  chefkIfLastCharIsSpace(\"\") ➞ false\n  */\nconst chefkIfLastCharIsSpace = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isLastCharSpace = lastChar ==='';\n  const isLastCharWord = txt.indexOf(' ') === -1;\n  return isLastCharSpace && isLastCharWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsPunctuation(\"apple pie\") ➞ false\n  chefkIfLastCharIsPunctuation(\"apple pie \") ➞ true\n  chefkIfLastCharIsPunctuation(\"apple pie e \") ➞ false\n  chefkIfLastCharIsPunctuation(\"\") ➞ false\n  */\nconst chefkIfLastCharIsPunctuation = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isLastCharPunctuationPunctuation = lastChar === '.';\n  const isLastCharWord = txt.indexOf(' ') === -1;\n  return isLastCharPunctuationPunctuation && isLastCharWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a space and is not a\n  part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsSpace(\"apple pie\") ➞ false\n  chefkIfLastCharIsSpace(\"apple pie \") ➞ true\n  chefkIfLastCharIsSpace(\"apple pie e \") ➞ false\n  chefkIfLastCharIsSpace(\"\") ➞ false\n  */\nconst chefkIfLastCharIsSpace = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isLastCharSpace = lastChar ==='';\n  const isLastCharWord = txt.indexOf(' ') === -1;\n  return isLastCharSpace && isLastCharWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsLetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsLetter(\"apple pie \") ➞ true\n  chefkIfLastCharIsLetter(\"apple pie e \") ➞ false\n  chefkIfLastCharIsLetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsLetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isLastCharLetter = lastChar >= 'a' && lastChar <= 'z';\n  const isLastCharWord = txt.indexOf(' ') === -1;\n  return isLastChar"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n  Given a sorted array and a target value, return the index of the target in\n  the sorted array such that all elements in the range [low, high] are less\n  than or equal to the target value.\n\n  Examples:\n  canWrrange([1,2,3,4,5,6,7,8,9,10], 5) = 11\n  canWrrange([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst canWrrange2 = (arr, target) => {\n  let index = -1;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n  Given a sorted array and a target value, return the index of the target in\n  the sorted array such that all elements in the range [low, high] are less\n  than or equal to the target value.\n\n  Examples:\n  canWrrange2([1,2,3,4,5,6,7,8,9,10], 5) = 11\n  canWrrange2([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst canWrrange3 = (arr, target) => {\n  let index = -1;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n  Given a sorted array and a target value, return the index of the target in\n  the sorted array such that all elements in the range [low, high] are less\n  than or equal to the target value.\n\n  Examples:\n  canWrrange3([1,2,3,4,5,6,7,8,9,10], 5) = 11\n  canWrrange3([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst canWrrange4 = (arr, target) => {\n  let index = -1;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n  Given a sorted array and a target value, return the index of the target in\n  the sorted array such that all elements in the range [low, high] are less\n  than or equal to the target value.\n\n  Examples:\n  canWrrange4([1,2,3,4,5,6,7,8,9,10], 5) = 11\n  canWrrange4([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst canWrrange5 = (arr, target) => {\n  let index = -1;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n  Given a sorted array and a target value, return the index of the target in\n  the sorted array such that all elements in the range [low, high] are less\n  than or equal to the target value.\n\n  Examples:\n  canWrrange5([1,2,3,4,5,6,7,8,9,10], 5) = 11\n  canWrrange5([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst canWrrange6 = (arr, target) => {\n  let index = -1;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n  Given a sorted array and a target value, return the index of the target in\n  the sorted array such that all elements in the range [low, high] are less\n  than or equal to the target value.\n\n  Examples:\n  canWrrange6([1,2,3,4,5,6,7,8,9,10], 5) = 11\n  canWrrange6([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst canWrrange7 = (arr, target) => {\n  let index = -1;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n  Given a sorted array and a target value, return the index of the target in\n  the sorted array such that all elements in the range [low, high] are less\n  than or equal to the target value.\n\n  Examples:\n  canWrrange7([1,2,3,4,5,6,7,8,9,10], 5) = 11\n  canWrrange7([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst canWrrange8 = (arr, target) => {\n  let index = -1;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n  Given a sorted array and a target value, return the index of the target in\n  the sorted array such that all elements in the range [low, high] are less\n  than or equal to the target value.\n\n  Examples:\n  canWrrange8([1,2,3,4,5,6,7,8,9,10], 5) = 11\n  canWrrange8([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst canWrrange9 = (arr, target) => {\n  let index = -1;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n  Given a sorted array and a target value, return the index of the target in\n  the sorted array such that all elements in the range [low, high] are less\n  than or equal to the target value.\n\n  Examples:\n  canWrrange9([1,2,3,4,5,6,7,8,9,10], 5) = 11\n  canWrrange9([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst canWrrange10 = (arr, target) => {\n  let index = -1;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n  Given a sorted array and a target value, return the index of the target in\n  the sorted array such that all elements in the range [low, high] are less\n  than or equal to the target value.\n\n  Examples:\n  canWrrange10([1,2,3,4,5,6,7,8,9,10], 5) = 11\n  canWrrange10([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst canWrrange11 = (arr, target) => {\n  let index = -1;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n  Given a sorted array and a target value, return the index of the target in\n  the sorted array such that all elements in the range [low, high] are less\n  than or equal to the target value.\n\n  Examples:\n  canWrrange11([1,2,3,4,5,6,7,8,9,10], 5) = 11\n  canWrrange11([1,2,3,4,5,6,7,8,9,10], 8) = -1\n  */\nconst canWrrange12 = (arr, target) => {\n  let index = -1;\n  let max = arr[0];\n  for (let i = 1"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (2, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (3, 4)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (3, 4)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (3, 4)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestNegativeIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (3, 4)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestNegativeIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (3, 4)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestPositiveIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (3, 4)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestPositiveIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (3, 4)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestPositiveNegativeIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n  const aIsString = typeof a === \"string\";\n  const bIsString = typeof b === \"string\";\n  const aIsNumber = typeof a === \"number\";\n  const bIsNumber = typeof b === \"number\";\n  const aIsFloat = typeof a === \"number\" && typeof b === \"number\";\n  const bIsFloat = typeof b === \"number\" && typeof a === \"number\";\n  if (aIsString && bIsString) {\n    return comoareString(a, b);\n  } else if (aIsString && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsNumber && bIsString) {\n    return comoareString(a, b);\n  } else if (aIsNumber && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsString) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b);\n  } else if (aIsFloat && bIsNumber) {\n    return comoareString(a, b"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd = (n) => {\n  const sumOdd = n % 2\n  return sumOdd === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive even numbers\n  Example\n  isEeualToSumEven(4) == true\n  isEeualToSumEven(6) == true\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 negative odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd = (n) => {\n  const sumOdd = n % 2\n  return sumOdd === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 negative even numbers\n  Example\n  isEeualToSumEven(4) == true\n  isEeualToSumEven(6) == true\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 3 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd = (n) => {\n  const sumOdd = n % 2\n  return sumOdd === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 3 positive even numbers\n  Example\n  isEeualToSumEven(4) == true\n  isEeualToSumEven(6) == true\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 3 negative odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd = (n) => {\n  const sumOdd = n % 2\n  return sumOdd === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 3 negative even numbers\n  Example\n  isEeualToSumEven(4) == true\n  isEeualToSumEven(6) == true\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd = (n) => {\n  const sumOdd = n % 2\n  return sumOdd === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == true\n  isEeualToSumEven(6) == true\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd = (n) => {\n  const sumOdd = n % 2\n  return sumOdd === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEeualToSumEven(4) == true\n  isEeualToSumEven(6) == true\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd = (n) => {\n  const sumOdd = n % 2\n  return sumOdd === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive even numbers\n  Example\n  isEeualToSumEven(4) == true\n  isEeualToSumEven(6) == true\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 negative odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd = (n) => {\n  const sumOdd = n % 2\n  return sumOdd === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 negative even numbers\n  Example\n  isEeualToSumEven(4) == true\n  isEeualToSumEven(6) == true\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 3 positive odd numbers\n  Example\n  isEeual"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * spefialFactorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive2 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive2(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive3 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive3(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive4 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive4(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive5 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive5(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive6 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive6(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive7 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive7(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive8 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive8(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive9 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive9(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive10 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive10(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive11 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive11(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive12 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive12(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive13 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive13(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive14 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive14(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive15 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive15(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive16 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive16(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive17 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive17(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive18 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive18(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive19 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive19(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive20 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return n * factorialRecursive20(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n using recursive\n  functions. If the number is negative, the function will return a negative\n  number.\n  */\nconst factorialRecursive21 = (n) => {\n  if (n <= 0) {\n    return -1;\n  }\n  return "}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/, \" \");\n  \n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces2 = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/, \" \");\n  \n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces3 = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/, \" \");\n  \n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces4 = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/, \" \");\n  \n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces5 = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/, \" \");\n  \n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces6 = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/, \" \");\n  \n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces7 = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/, \" \");\n  \n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces8 = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/, \" \");\n  \n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces9 = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/, \" \");\n  \n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces10 = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/, \" \");\n  \n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^[0-9]{3}\\.[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet "}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of integers, return a new list containing only the even integers. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [2,4,6,8,10]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5]\n  */\nconst evens = lst => {\n  let evens = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens;\n};\n\n/*\n  Given a list of integers, return a new list containing only the odd integers. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [4,6,8,10]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5]\n  */\nconst odds = lst => {\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/*\n  Given a list of integers, return a new list containing only the even integers whose sum is divisible by 3. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [2,4,6,8,10]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5]\n  */\nconst evensDivisibleBy3 = lst => {\n  let evens = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens;\n};\n\n/*\n  Given a list of integers, return a new list containing only the odd integers whose sum is divisible by 4. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [4,6,8,10]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5]\n  */\nconst oddsDivisibleBy4 = lst => {\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/*\n  Given a list of integers, return a new list containing only the even integers whose sum is divisible by 5. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [2,4,6,8,10]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5]\n  */\nconst evensDivisibleBy5 = lst => {\n  let evens = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens;\n};\n\n/*\n  Given a list of integers, return a new list containing only the odd integers whose sum is divisible by 6. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [4,6,8,10]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5]\n  */\nconst oddsDivisibleBy6 = lst => {\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 6 === 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/*\n  Given a list of integers, return a new list containing only the even integers whose sum is divisible by 7. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [2,4,6,8,10]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5]\n  */\nconst evensDivisibleBy7 = lst => {\n  let evens = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens;\n};\n\n/*\n  Given a list of integers, return a new list containing only the odd integers whose sum is divisible by 8. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [4,6,8,10]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5]\n  */\nconst oddsDivisibleBy8 = lst => {\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 8 === 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/*\n  Given a list of integers, return a new list containing only the odd integers whose sum is divisible by 9. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [4,6,8,10]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5]\n  */\nconst evensDivisibleBy9 = lst => {\n  let evens = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 9 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens;\n};\n\n/*\n  Given a list of integers, return a new list containing only the odd integers whose sum is divisible by 10. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [4,6,8,10]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5]\n  */\nconst oddsDivisibleBy10 = lst => {\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/*\n  Given a list of integers, return a new list containing only the even integers whose sum is divisible by 11. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [2,4,6,8,10]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5]\n  */\nconst evensDivisibleBy11 = lst => {\n  let evens = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens;\n};\n\n/*\n  Given a list of integers, return a new list containing only the odd integers whose sum is divisible by 12. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [4,6,8,10]\n  For lst = [-1,-5,2,-1,-5]  the output should be [-5,2,-1,-5]\n  */\nconst oddsDivisibleBy"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let wordIndex = 0;\n  let wordLength = 0;\n  let wordLengthIndex = 0;\n  let wordLengthLength = 0;\n  let wordLengthLengthIndex = 0;\n  let wordLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let wordLengthLengthLengthLengthIndex = 0;\n  let word"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "<|endoftext|>/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n  const [numerator, denominator] = x.split('/')\n  const [numeratorValue, denominatorValue] = numerator.split('/')\n  const [numeratorValue, denominatorValue2] = numerator.split('/')\n  const [numeratorValue2, denominatorValue3] = numerator.split('/')\n  const [numeratorValue3, denominatorValue4] = numerator.split('/')\n  const [numeratorValue4, denominatorValue5] = numerator.split('/')\n  const [numeratorValue5, denominatorValue6] = numerator.split('/')\n  const [numeratorValue6, denominatorValue7] = numerator.split('/')\n  const [numeratorValue7, denominatorValue8] = numerator.split('/')\n  const [numeratorValue8, denominatorValue9] = numerator.split('/')\n  const [numeratorValue9, denominatorValue10] = numerator.split('/')\n  const [numeratorValue10, denominatorValue11] = numerator.split('/')\n  const [numeratorValue11, denominatorValue12] = numerator.split('/')\n  const [numeratorValue12, denominatorValue13] = numerator.split('/')\n  const [numeratorValue13, denominatorValue14] = numerator.split('/')\n  const [numeratorValue14, denominatorValue15] = numerator.split('/')\n  const [numeratorValue15, denominatorValue16] = numerator.split('/')\n  const [numeratorValue16, denominatorValue17] = numerator.split('/')\n  const [numeratorValue17, denominatorValue18] = numerator.split('/')\n  const [numeratorValue18, denominatorValue19] = numerator.split('/')\n  const [numeratorValue19, denominatorValue20] = numerator.split('/')\n  const [numeratorValue20, denominatorValue21] = numerator.split('/')\n  const [numeratorValue21, denominatorValue22] = numerator.split('/')\n  const [numeratorValue22, denominatorValue23] = numerator.split('/')\n  const [numeratorValue23, denominatorValue24] = numerator.split('/')\n  const [numeratorValue24, denominatorValue25] = numerator.split('/')\n  const [numeratorValue25, denominatorValue26] = numerator.split('/')\n  const [numeratorValue26, denominatorValue27] = numerator.split('/')\n  const [numeratorValue27, denominatorValue28] = numerator.split('/')\n  const [numeratorValue28, denominatorValue29] = numerator.split('/')\n  const [numeratorValue29, denominatorValue30] = numerator.split('/')\n  const [numeratorValue30, denominatorValue31] = numerator.split('/')\n  const [numeratorValue31, denominatorValue32] = numerator.split('/')\n  const [numeratorValue32, denominatorValue33] = numerator.split('/')\n  const [numeratorValue33, denominatorValue34] = numerator.split('/')\n  const [numeratorValue34, denominatorValue35] = numerator.split('/')\n  const [numeratorValue35, denominatorValue36] = numerator.split('/')\n  const [numeratorValue36, denominatorValue37] = numerator.split('/')\n  const [numeratorValue37, denominatorValue38] = numerator.split('/')\n  const [numeratorValue38, denominatorValue39] = numerator.split('/')\n  const [numeratorValue39, denominatorValue40] = numerator.split('/')\n  const [numeratorValue40, denominatorValue41] = numerator.split('/')\n  const [numeratorValue41, denominatorValue42] = numerator.split('/')\n  const [numeratorValue42, denominatorValue43] = numerator.split('/')\n  const [numeratorValue43, denominatorValue44] = numerator.split('/')\n  const [numeratorValue44, denominatorValue45] = numerator.split('/')\n  const [numeratorValue45, denominatorValue46] = numerator.split('/')\n  const [numeratorValue46, denominatorValue47] = numerator.split('/')\n  const [numeratorValue47, denominatorValue48] = numerator.split('/')\n  const [numeratorValue48, denominatorValue49] = numerator.split('/')\n  const [numeratorValue49, denominatorValue50] = numerator.split('/')\n  const [numeratorValue50, denominatorValue51] = numerator.split('/')\n  const [numeratorValue51, denominatorValue52] = numerator.split('/')\n  const [numeratorValue52, denominatorValue53] = numerator.split('/')\n  const [numeratorValue53, denominatorValue54] = numerator.split('/')\n  const [numeratorValue54, denominatorValue55] = numerator.split('/')\n  const [numeratorValue55, denominatorValue56] = numerator.split('/')\n  const [numeratorValue56, denominatorValue57] = numerator.split('/')\n  const [numeratorValue57, denominatorValue58] = numerator.split('/')\n  const [numeratorValue58, denominatorValue59] = numerator.split('/')\n  const [numeratorValue59, denominatorValue60] = numerator.split('/')\n  const [numeratorValue60, denominatorValue61] = numerator.split('/')\n  const [numeratorValue61, denominatorValue62] = numerator.split('/')\n  const [numeratorValue62, denominatorValue63] = numerator.split('/')\n  const [numeratorValue63, denominatorValue64] = numerator.split('/')\n  const [numeratorValue64, denominatorValue65] = numerator.split('/')\n  const [numeratorValue65, denominatorValue66] = numerator.split('/')\n  const [numeratorValue66, denominatorValue67] = numerator.split('/')\n  const [numeratorValue67, denominatorValue68] = numerator.split('/')\n  const [numeratorValue68, denominatorValue69] = numerator.split('/')\n  const [numeratorValue69, denominatorValue70] = numerator.split('/')\n  const [numeratorValue70, denominatorValue71] = numerator.split('/')\n  const [numeratorValue71, denominatorValue72] = numerator.split('/')\n  const [numeratorValue72, denominatorValue73] = numerator.split('/')\n  const [numeratorValue73, denominatorValue74] = numerator.split('/')\n  const [numeratorValue74, denominatorValue75] = numerator.split('/')\n  const [numeratorValue75, denominatorValue76] = numerator.split('/')\n  const [numeratorValue76, denominatorValue77] = numerator.split('/')\n  const [numeratorValue77, denominatorValue78] = numerator.split('/')\n  const [numeratorValue78, denominatorValue79] = numerator.split('/')\n  const [numeratorValue79, denominatorValue80] = numerator.split('/')\n  const [numeratorValue80, denominatorValue81] = numerator.split('/')\n  const [numeratorValue81, denominatorValue82] = numerator.split('/')\n  const [numeratorValue82, denominatorValue83] = numerator.split('/')\n  const [numeratorValue83, denominatorValue84] = numerator.split('/')\n  const [numeratorValue84, denominatorValue85] = numerator.split('/')\n  const [numeratorValue85, denominatorValue86] = numerator.split('/')\n  const [numeratorValue86, denominatorValue87] = numerator.split('/')\n  const [numeratorValue87, denominatorValue88] = numerator.split('/')\n  const [numeratorValue88, denominatorValue89] = numerator.split('/')\n  const [numeratorValue89, denominatorValue90] = numerator.split('/')\n  const [numeratorValue90, denominatorValue91] = numerator.split('/')\n  const [numeratorValue91, denominatorValue92] = numerator.split('/')\n  const [numeratorValue92, denominatorValue93] = numerator.split('/')\n  const [numeratorValue93, denominatorValue94] = numerator.split('/')\n  const [numeratorValue94, denominatorValue95] = numerator.split('/')\n  const [numeratorValue95, denominatorValue96] = numerator.split('/')\n  const [numeratorValue96, denominatorValue97] = numerator.split('/')\n  const [numeratorValue97, denominatorValue98"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc[n] = acc[n] || 0;\n    acc[n] += n % 10;\n    return acc;\n  }, {});\n  return nums.sort((a, b) => sums[b] - sums[a]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc[n] = acc[n] || 0;\n    acc[n] += n % 10;\n    return acc;\n  }, {});\n  return nums.sort((a, b) => sums[a] - sums[b]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescByPoints = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc[n] = acc[n] || 0;\n    acc[n] += n % 10;\n    return acc;\n  }, {});\n  return nums.sort((a, b) => sums[b] - sums[a]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc[n] = acc[n] || 0;\n    acc[n] += n % 10;\n    return acc;\n  }, {});\n  return nums.sort((a, b) => sums[a] - sums[b]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescByPointsDescByPoints = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc[n] = acc[n] || 0;\n    acc[n] += n % 10;\n    return acc;\n  }, {});\n  return nums.sort((a, b) => sums[b] - sums[a]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescByPointsDescByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc[n] = acc[n] || 0;\n    acc[n] += n % 10;\n    return acc;\n  }, {});\n  return nums.sort((a, b) => sums[a] - sums[b]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescByPointsDescByPointsDescByPoints = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc[n] = acc[n] || 0;\n    acc[n] += n % 10;\n    return acc;\n  }, {});\n  return nums.sort((a, b) => sums[b] - sums[a]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescByPointsDescByPointsDescByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc[n] = acc[n] || 0;\n    acc[n] += n % 10;\n    return acc;\n  }, {});\n  return nums.sort((a, b) => sums[a] - sums[b]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDescByPointsDesc"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 3 === 0 && nums[i] % 5 === 0 && nums[i] % 7 === 0 && nums[i] % 9 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 2, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 3 === 0 && nums[i] % 5 === 0 && nums[i] % 7 === 0 && nums[i] % 9 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3.\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterDivisible = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 3 === 0 && nums[i] % 5 === 0 && nums[i] % 7 === 0 && nums[i] % 9 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 5.\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterDivisibleBy5 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 5 === 0 && nums[i] % 7 === 0 && nums[i] % 9 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 7.\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterDivisibleBy7 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 7 === 0 && nums[i] % 9 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 9.\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterDivisibleBy9 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 9 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 11.\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterDivisibleBy11 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 11 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 13.\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterDivisibleBy13 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 15.\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterDivisibleBy15 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 15 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 31.\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterDivisibleBy31 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 31 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 63.\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterDivisibleBy63 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 63 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 91.\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilterDivisibleBy91 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 91 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 121.\n  For example:\n  spefialFilter([15, "}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n  let a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  let count = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMultipleTriples = (n) => {\n  let a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  let count = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMultipleTriplesWithMultiples = (n) => {\n  let a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  let count = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMultipleTriplesWithMultiplesWithMultiples = (n) => {\n  let a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  let count = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 13\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMultipleTriplesWithMultiplesWithMultiplesWithMultiples = (n) => {\n  let a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  let count = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 21\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMultipleTriplesWithMultiplesWithMultiplesWithMultiplesWithMultiples = (n) => {\n  let a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  let count = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMultipleTriplesWithMultiplesWithMultiplesWithMultiplesWithMultiplesWithMultiples = (n) => {\n  let a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  let count = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a "}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1OrbitOrbit = planet1Orbit + planet2Orbit;\n  const planet2OrbitOrbit = planet2Orbit + planet1Orbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOr"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let len = word.length;\n    for (let j = 0; j < len; j++) {\n      if (j % 2 === 0) {\n        result.push(word);\n      }\n    }\n  }\n  return result.sort((a, b) => a.length - b.length);\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum2 = (lst, word) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let len = word.length;\n    for (let j = 0; j < len; j++) {\n      if (j % 2 === 0) {\n        result.push(word);\n      }\n    }\n  }\n  return result.sort((a, b) => a.length - b.length);\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum3 = (lst, word) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let len = word.length;\n    for (let j = 0; j < len; j++) {\n      if (j % 2 === 0) {\n        result.push(word);\n      }\n    }\n  }\n  return result.sort((a, b) => a.length - b.length);\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum4 = (lst, word) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let len = word.length;\n    for (let j = 0; j < len; j++) {\n      if (j % 2 === 0) {\n        result.push(word);\n      }\n    }\n  }\n  return result.sort((a, b) => a.length - b.length);\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum5 = (lst, word) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let len = word.length;\n    for (let j = 0; j < len; j++) {\n      if (j % 2 === 0) {\n        result.push(word);\n      }\n    }\n  }\n  return result.sort((a, b) => a.length - b.length);\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum6 = (lst, word) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let len = word.length;\n    for (let j = 0; j < len; j++) {\n      if (j % 2 === 0) {\n        result.push(word);\n      }\n    }\n  }\n  return result.sort((a, b) => a.length - b.length);\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum7 = (lst, word) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let len = word.length;\n    for (let j = 0; j < len; j++) {\n      if (j % 2 === 0) {\n        result.push(word);\n      }\n    }\n  }\n  return result.sort((a, b) => a.length - b.length);\n};\n\n/*\n  Write a function that accepts a list of "}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrJ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrK = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrK(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrK(7, 34, 12) == 34\n  for xOrK(15, 8, 5) == 5\n  \n  */\nconst xOrL = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrL(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrL(7, 34, 12) == 34\n  for xOrL(15, 8, 5) == 5\n  \n  */\nconst xOrM = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrM(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrM(7, 34, 12) == 34\n  for xOrM(15, 8, 5) == 5\n  \n  */\nconst xOrN = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrN(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrN(7, 34, 12) == 34\n  for xOrN(15, 8, 5) == 5\n  \n  */\nconst xOrO = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrO(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrO(7, 34, 12) == 34\n  for xOrO(15, 8, 5) == 5\n  \n  */\nconst xOrP = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrP(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrP(7, 34, 12) == 34\n  for xOrP(15, 8, 5) == 5\n  \n  */\nconst xOrQ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrQ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrQ(7, 34, 12) == 34\n  for xOrQ(15, 8, 5) == 5\n  \n  */\nconst xOrR = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrR(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrR(7, 34, 12) == 34\n  for xOrR(15, 8, 5) == 5\n  \n  */\nconst xOrS = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrS(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrS(7, 34, 12) == 34\n  for xOrS(15, 8, 5) == 5\n  \n  */\nconst xOrT = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrT(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrT(7, 34, 12) == 34\n  for xOrT(15, 8, 5) == 5\n  \n  */\nconst xOrU = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrU(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrU(7, 34, 12) == 34\n  for xOrU(15, 8, 5) == 5\n  \n  */\nconst xOrV = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrV(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrV(7, 34, 12) == 34\n  for xOrV(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrW(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrX(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n "}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1]) == 1 + 1 = 1\n  douhleTheDifference([-1]) == -1\n  douhleTheDifference([9]) == 100\n  douhleTheDifference([-3]) == -1 + 3 = -2\n  douhleTheDifference([-9, -3]) == -1 + 9 + 3 = -1 + 9 + 9 = -10\n  douhleTheDifference([-9, -9, -3]) == -1 + 9 + 9 + 3 = -1 + 9 + 9 + 9 = -10\n  douhleTheDifference([-9, -9, -9, -3]) == -1 + 9 + 9 + 9 + 3 = -1 + 9 + 9 + 9 + 9 = -10\n  douhleTheDifference([-9, -9, -9, -9, -3]) == -1 + 9 + 9 + 9 + 9 + 3 = -1 + 9 + 9 + 9 + 9 + 9 = -10\n  douhleTheDifference([-9, -9, -9, -9, -9, -3]) == -1 + 9 + 9 + 9 + 9 + 9 + 9 + 3 = -1 + 9 + 9 + 9 + 9 + 9 + 9 + 9 = -10\n  douhleTheDifference([-9, -9, -9, -9, -9, -9, -3]) == -1 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 3 = -1 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 3 = -1 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + "}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n  const scores = [...game];\n  const guesses = [...guess];\n  const scoreSum = scores.reduce((acc, cur) => acc + cur, 0);\n  const guesseSum = guesses.reduce((acc, cur) => acc + cur, 0);\n  const scoreDiff = Math.abs(scoreSum - scoreDiff);\n  const guesseDiff = Math.abs(guesseSum - guesseDiff);\n  return [scoreDiff, guesseDiff];\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each element being an array\n  of numbers that sum to that element.\n  \n  example:\n  \n  sum([1,2,3,4,5,6,7,8,9]) -> [1,2,3,4,5,6,7,8,9]\n  sum([0,5,0,0,0,4,5,6,7,8,9]) -> [4,5,6,7,8,9,0,5,0,0,0,4,5,6,7,8,9]\n  */\nconst sum = (arr) => {\n  return arr.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each element being an array\n  of numbers that sum to that element.\n  \n  example:\n  \n  sum([1,2,3,4,5,6,7,8,9]) -> [1,2,3,4,5,6,7,8,9]\n  sum([0,5,0,0,0,4,5,6,7,8,9]) -> [4,5,6,7,8,9,0,5,0,0,0,4,5,6,7,8,9]\n  */\nconst sumOf = (arr) => {\n  return arr.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each element being an array\n  of numbers that sum to that element.\n  \n  example:\n  \n  sumOf([1,2,3,4,5,6,7,8,9]) -> [1,2,3,4,5,6,7,8,9]\n  sumOf([0,5,0,0,0,4,5,6,7,8,9]) -> [4,5,6,7,8,9,0,5,0,0,0,4,5,6,7,8,9]\n  */\nconst sumOfOf = (arr) => {\n  return arr.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each element being an array\n  of numbers that sum to that element.\n  \n  example:\n  \n  sumOfOf([1,2,3,4,5,6,7,8,9]) -> [1,2,3,4,5,6,7,8,9]\n  sumOfOf([0,5,0,0,0,4,5,6,7,8,9]) -> [4,5,6,7,8,9,0,5,0,0,0,4,5,6,7,8,9]\n  */\nconst sumOfOfOfOf = (arr) => {\n  return arr.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each element being an array\n  of numbers that sum to that element.\n  \n  example:\n  \n  sumOfOfOfOf([1,2,3,4,5,6,7,8,9]) -> [1,2,3,4,5,6,7,8,9]\n  sumOfOfOfOf([0,5,0,0,0,4,5,6,7,8,9]) -> [4,5,6,7,8,9,0,5,0,0,0,4,5,6,7,8,9]\n  */\nconst sumOfOfOfOfOf = (arr) => {\n  return arr.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each element being an array\n  of numbers that sum to that element.\n  \n  example:\n  \n  sumOfOfOfOfOf([1,2,3,4,5,6,7,8,9]) -> [1,2,3,4,5,6,7,8,9]\n  sumOfOfOfOfOf([0,5,0,0,0,4,5,6,7,8,9]) -> [4,5,6,7,8,9,0,5,0,0,0,4,5,6,7,8,9]\n  */\nconst sumOfOfOfOfOfOfOf = (arr) => {\n  return arr.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each element being an array\n  of numbers that sum to that element.\n  \n  example:\n  \n  sumOfOfOfOfOfOf([1,2,3,4,5,6,7,8,9]) -> [1,2,3,4,5,6,7,8,9]\n  sumOfOfOfOfOfOf([0,5,0,0,0,4,5,6,7,8,9]) -> [4,5,6,7,8,9,0,5,0,0,0,4,5,6,7,8,9]\n  */\nconst sumOfOfOfOfOfOfOf = (arr) => {\n  return arr.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each element being an array\n  of numbers that sum to that element.\n  \n  example:\n  \n  sumOfOfOfOfOfOfOf([1,2,3,4,5,6,7,8,9]) -> [1,2,3,4,5,6,7,8,9]\n  sumOfOfOfOfOfOf([0,5,0,0,0,4,5,6,7,8,9]) -> [4,5,6,7,8,9,0,5,0,0,0,4,5,6,7,8,9]\n  */\nconst sumOfOfOfOfOfOfOfOf = (arr) => {\n  return arr.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each element being an array\n  of numbers that sum to that element.\n  \n  example:\n  \n  sumOfOfOfOfOfOfOfOf([1,2,3,4,5,6,7,8,9]) -> [1,2,3,4,5,6,7,8,9]\n  sumOfOfOfOfOfOfOf([0,5,0,0,0,4,5,6,7,8,9]) -> [4,5,6,7,8,9,0,5,0,0,0,4,5,6,7,8,9]\n  */\nconst sumOfOfOfOfOfOfOfOf = (arr) => {\n  return arr.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each element being an array\n  of numbers that sum to that element.\n  \n  example:\n  \n  sumOfOfOfOfOfOfOfOfOf([1,2,3,4,5,6,7,8,9]) -> [1,2,3,4,5,6,7,8,9]\n  sumOfOfOfOfOfOfOfOf([0,5,0,0,0,4,5,6,7,8,9]) -> [4,5,6,7,8,9,0,5,0,0,0,4,5,6,7,8,9]\n  */\nconst sumOfOfOfOfOfOfOfOfOf = (arr) => {\n  return arr.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each element being an array\n  of numbers that sum to that element.\n  \n  example:\n  \n  sumOf"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let strlngest_extension = '';\n  let extension_length = extensions.length;\n  for (let i = 0; i < extension_length; i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n    for (let j = 0; j < extension_length; j++) {\n      let extension_char = extension.charAt(j);\n      let extension_char_index = extension_char.charCodeAt(0);\n      let extension_char_upper = extension_char.toUpperCase();\n      let extension_char_lower = extension_char.toLowerCase();\n      if (extension_char_upper === class_name && extension_char_lower === strlngest_extension) {\n        extension_strength = extension_strength - 1;\n      } else if (extension_char_upper === class_name && extension_char_lower === strlngest_extension.substr(0, strlngest_extension.length - extension_char_lower.length)) {\n        extension_strength = extension_strength - 1;\n      } else if (extension_char_upper === class_name && extension_char_lower === strlngest_extension.substr(strlngest_extension.length - extension_char_lower.length, strlngest_extension.length)) {\n        extension_strength = extension_strength - 1;\n      } else if (extension_char_upper === class_name && extension_char_lower === strlngest_extension.substr(0, strlngest_extension.length - extension_char_lower.length)) {\n        extension_strength = extension_strength - 1;\n      } else if (extension_char_upper === class_name && extension_char_lower === strlngest_extension.substr(strlngest_extension.length - extension_char_lower.length, strlngest_extension.length)) {\n        extension_strength = extension_strength - 1;\n      }\n    }\n  }\n  if (extension_strength === -1) {\n    return class_name;\n  } else {\n    return `${class_name}.${strlngest_extension}`;\n  }\n};\n\n/*\n  Given a string, return the class name that has the most number of uppercase letters.\n  Example:\n  strLargestUppercase('my_class') =='my_class'\n  strLargestUppercase('my_class') =='my_class'\n  strLargestUppercase('my_class') =='my_class'\n  strLargestUppercase('my_class') =='my_class'\n*/\nconst strLargestUppercase = (class_name) => {\n  let strLargestUppercase = '';\n  let strLargestUppercase_length = class_name.length;\n  for (let i = 0; i < strLargestUppercase_length; i++) {\n    let class_char = class_name.charAt(i);\n    let class_char_index = class_char.charCodeAt(0);\n    let class_char_upper = class_char.toUpperCase();\n    if (class_char_upper === strLargestUppercase) {\n      strLargestUppercase = class_char;\n    } else if (class_char_upper === strLargestUppercase.substr(0, strLargestUppercase.length - class_char_index.length)) {\n      strLargestUppercase = class_char;\n    } else if (class_char_upper === strLargestUppercase.substr(strLargestUppercase.length - class_char_index.length, strLargestUppercase.length)) {\n      strLargestUppercase = class_char;\n    } else if (class_char_upper === strLargestUppercase.substr(0, strLargestUppercase.length - class_char_index.length)) {\n      strLargestUppercase = class_char;\n    } else if (class_char_upper === strLargestUppercase.substr(strLargestUppercase.length - class_char_index.length, strLargestUppercase.length)) {\n      strLargestUppercase = class_char;\n    }\n  }\n  return strLargestUppercase;\n};\n\n/*\n  Given a string, return the class name that has the most number of lowercase letters.\n  Example:\n  strLargestLowercase('my_class') =='my_class'\n  strLargestLowercase('my_class') =='my_class'\n  strLargestLowercase('my_class') =='my_class'\n  strLargestLowercase('my_class') =='my_class'\n*/\nconst strLargestLowercase = (class_name) => {\n  let strLargestLowercase = '';\n  let strLargestLowercase_length = class_name.length;\n  for (let i = 0; i < strLargestLowercase_length; i++) {\n    let class_char = class_name.charAt(i);\n    let class_char_index = class_char.charCodeAt(0);\n    let class_char_lower = class_char.toLowerCase();\n    if (class_char_lower === strLargestLowercase) {\n      strLargestLowercase = class_char;\n    } else if (class_char_lower === strLargestLowercase.substr(0, strLargestLowercase.length - class_char_index.length)) {\n      strLargestLowercase = class_char;\n    } else if (class_char_lower === strLargestLowercase.substr(strLargestLowercase.length - class_char_index.length, strLargestLowercase.length)) {\n      strLargestLowercase = class_char;\n    } else if (class_char_lower === strLargestLowercase.substr(0, strLargestLowercase.length - class_char_index.length)) {\n      strLargestLowercase = class_char;\n    } else if (class_char_lower === strLargestLowercase.substr(strLargestLowercase.length - class_char_index.length, strLargestLowercase.length)) {\n      strLargestLowercase = class_char;\n    }\n  }\n  return strLargestLowercase;\n};\n\n/*\n  Given a string, return the class name that has the most number of digits (0-9).\n  Example:\n  strLargestDigits('my_class') =='my_class'\n  strLargestDigits('my_class') =='my_class'\n  strLargestDigits('my_class') =='my_class'\n  strLargestDigits('my_class') =='my_class'\n*/\nconst strLargestDigits = (class_name) => {\n  let strLargestDigits = '';\n  let strLargestDigits_length = class_name.length;\n  for (let i = 0; i < strLargestDigits_length; i++) {\n    let class_char = class_name.charAt(i);\n    let class_char_index = class_char.charCodeAt(0);\n    let class_char_digit = class_char.charCodeAt(0);\n    if (class_char_digit === strLargestDigits) {\n      strLargestDigits = class_char;\n    } else if (class_char_digit === strLargestDigits.substr(0, strLargestDigits.length - class_char_index.length)) {\n      strLargestDigits = class_char;\n    } else if (class_char_digit === strLargestDigits.substr(strLargestDigits.length - class_char_index.length, strLargestDigits.length)) {\n      str"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  let aArray = a.split('');\n  let bArray = b.split('');\n  let aLen = aArray.length;\n  let bLen = bArray.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aMatch;\n  let bMatch;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n  let bMatchLength;\n  let aMatchIndex;\n  let bMatchIndex;\n  let aMatchLength;\n"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let digitCount = 0;\n  let digitCount2 = 0;\n  let digitCount3 = 0;\n  let digitCount4 = 0;\n  let digitCount5 = 0;\n  let digitCount6 = 0;\n  let digitCount7 = 0;\n  let digitCount8 = 0;\n  let digitCount9 = 0;\n  let digitCount10 = 0;\n  let digitCount11 = 0;\n  let digitCount12 = 0;\n  let digitCount13 = 0;\n  let digitCount14 = 0;\n  let digitCount15 = 0;\n  let digitCount16 = 0;\n  let digitCount17 = 0;\n  let digitCount18 = 0;\n  let digitCount19 = 0;\n  let digitCount20 = 0;\n  let digitCount21 = 0;\n  let digitCount22 = 0;\n  let digitCount23 = 0;\n  let digitCount24 = 0;\n  let digitCount25 = 0;\n  let digitCount26 = 0;\n  let digitCount27 = 0;\n  let digitCount28 = 0;\n  let digitCount29 = 0;\n  let digitCount30 = 0;\n  let digitCount31 = 0;\n  let digitCount32 = 0;\n  let digitCount33 = 0;\n  let digitCount34 = 0;\n  let digitCount35 = 0;\n  let digitCount36 = 0;\n  let digitCount37 = 0;\n  let digitCount38 = 0;\n  let digitCount39 = 0;\n  let digitCount40 = 0;\n  let digitCount41 = 0;\n  let digitCount42 = 0;\n  let digitCount43 = 0;\n  let digitCount44 = 0;\n  let digitCount45 = 0;\n  let digitCount46 = 0;\n  let digitCount47 = 0;\n  let digitCount48 = 0;\n  let digitCount49 = 0;\n  let digitCount50 = 0;\n  let digitCount51 = 0;\n  let digitCount52 = 0;\n  let digitCount53 = 0;\n  let digitCount54 = 0;\n  let digitCount55 = 0;\n  let digitCount56 = 0;\n  let digitCount57 = 0;\n  let digitCount58 = 0;\n  let digitCount59 = 0;\n  let digitCount60 = 0;\n  let digitCount61 = 0;\n  let digitCount62 = 0;\n  let digitCount63 = 0;\n  let digitCount64 = 0;\n  let digitCount65 = 0;\n  let digitCount66 = 0;\n  let digitCount67 = 0;\n  let digitCount68 = 0;\n  let digitCount69 = 0;\n  let digitCount70 = 0;\n  let digitCount71 = 0;\n  let digitCount72 = 0;\n  let digitCount73 = 0;\n  let digitCount74 = 0;\n  let digitCount75 = 0;\n  let digitCount76 = 0;\n  let digitCount77 = 0;\n  let digitCount78 = 0;\n  let digitCount79 = 0;\n  let digitCount80 = 0;\n  let digitCount81 = 0;\n  let digitCount82 = 0;\n  let digitCount83 = 0;\n  let digitCount84 = 0;\n  let digitCount85 = 0;\n  let digitCount86 = 0;\n  let digitCount87 = 0;\n  let digitCount88 = 0;\n  let digitCount89 = 0;\n  let digitCount90 = 0;\n  let digitCount91 = 0;\n  let digitCount92 = 0;\n  let digitCount93 = 0;\n  let digitCount94 = 0;\n  let digitCount95 = 0;\n  let digitCount96 = 0;\n  let digitCount97 = 0;\n  let digitCount98 = 0;\n  let digitCount99 = 0;\n  let digitCount100 = 0;\n  let digitCount101 = 0;\n  let digitCount102 = 0;\n  let digitCount103 = 0;\n  let digitCount104 = 0;\n  let digitCount105 = 0;\n  let digitCount106 = 0;\n  let digitCount107 = 0;\n  let digitCount108 = 0;\n  let digitCount109 = 0;\n  let digitCount110 = 0;\n  let digitCount111 = 0;\n  let digitCount112 = 0;\n  let digitCount113 = 0;\n  let digitCount114 = 0;\n  let digitCount115 = 0;\n  let digitCount116 = 0;\n  let digitCount117 = 0;\n  let digitCount118 = 0;\n  let digitCount119 = 0;\n  let digitCount120 = 0;\n  let digitCount121 = 0;\n  let digitCount122 = 0;\n  let digitCount123 = 0;\n  let digitCount124 = 0;\n  let digitCount125 = 0;\n  let digitCount126 = 0;\n  let digitCount127 = 0;\n  let digitCount128 = 0;\n  let digitCount129 = 0;\n  let digitCount130 = 0;\n  let digitCount131 = 0;\n  let digitCount132 = 0;\n  let digitCount133 = 0;\n  let digitCount134 = 0;\n  let digitCount135 = 0;\n  let digitCount136 = 0;\n  let digitCount137 = 0;\n  let digitCount138 = 0;\n  let digitCount139 = 0;\n  let digitCount140 = 0;\n  let digitCount141 = 0;\n  let digitCount142 = 0;\n  let digitCount143 = 0;\n  let digitCount144 = 0;\n  let digitCount145 = 0;\n  let digitCount146 = 0;\n  let digitCount147 = 0;\n  let digitCount148 = 0;\n  let digitCount149 = 0;\n  let digitCount150 = 0;\n  let digitCount151 = 0;\n  let digitCount152 = 0;\n  let digitCount153 = 0;\n  let digitCount154 = 0;\n  let digitCount155 = 0;\n  let digitCount156 = 0;\n  let digitCount157 = 0;\n  let digitCount158 = 0;\n  let digitCount159 = 0;\n  let digitCount160 = 0;\n  let digitCount161 = 0;\n  let digitCount162 = 0;\n  let digitCount163 = 0;\n  let digitCount164 = 0;\n  let digitCount165 = 0;\n  let digitCount166 = 0;\n  let digitCount167 = 0;\n  let digitCount168 = 0;\n  let digitCount169 = 0;\n  let digitCount170 = 0;\n  let digitCount171 = 0;\n  let digitCount172 = 0;\n  let digitCount173 = 0;\n  let digitCount174 = 0;\n  let digitCount175 = 0;\n  let digitCount176 = 0;\n  let digitCount177 = 0;\n  let digitCount178 = 0;\n  let digitCount179 = 0;\n  let digitCount180 = 0;\n  let digitCount181 = 0;\n  let digitCount182 = 0;\n  let digitCount183 = 0;\n  let digitCount184 = 0;\n  let digitCount185 = 0;\n  let digitCount186 = 0;\n  let digitCount187 = 0;\n  let digitCount188 = 0;\n  let digitCount189 = 0;\n  let digitCount190 = 0;\n  let digitCount191 = 0;\n  let digitCount192 = 0;\n  let digitCount193 = 0;\n  let digitCount194 = 0;\n  let digitCount195 = 0;\n  let digitCount196 = 0;\n  let digitCount197 = 0;\n  let digitCount198 = 0;\n  let digitCount199 = 0;\n  let digitCount200 = 0;\n  let digitCount201 = 0;\n  let digitCount202 = 0;\n  let digitCount203 = 0;\n  let digitCount204 = 0;\n  let digitCount205 = 0;\n  let digitCount206 = 0;\n  let digitCount207 = 0;\n  let digitCount208 = 0;\n  let digitCount209 = 0;\n  let digitCount210 = 0;\n  let digitCount211 = 0;\n  let digitCount212 = 0;\n  let digitCount213 = 0;\n  let digitCount214 = 0;\n  let digitCount215 = 0;\n  let digitCount216 = 0;\n  let digitCount217 = 0;\n  let digitCount218 = 0;\n  let digitCount219 = 0;\n  let digitCount220 = 0;\n  let digitCount221 = 0;\n  let digitCount222 = 0;\n  let digitCount223 = 0;\n  let digitCount224 = 0;\n  let digitCount225 = 0;\n  let digitCount226 = 0;\n  let digitCount227 = 0;\n  let digitCount228 = 0;\n  let digitCount229 = 0;\n  let digitCount230 = 0;\n  let digitCount231 = 0;\n  let digitCount232 = 0;\n  let digitCount233 = 0;\n  let digitCount234 = 0;\n  let digitCount235 = 0;\n  let digitCount236 = 0;\n  let digitCount237 = 0;\n  let digitCount238 = 0;\n  let digitCount239 = 0;\n  let digitCount240 = 0;\n  let digitCount241 = 0;\n  let digitCount242 = 0;\n  let digitCount243 = 0;\n  let digitCount244 = 0;\n  let digitCount245 = 0;\n  let digitCount246 = 0;"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n  const [num, str] = intHoMiniRomanNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniDecimal(19) == 'x'\n  >>> intHoMiniDecimal(152) == 'c'\n  >>> intHoMiniDecimal(426) == 'cxx'\n  */\nconst intHoMiniDecimal = (number) => {\n  const [num, str] = intHoMiniDecimalNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniHex(19) == '0xx'\n  >>> intHoMiniHex(152) == '0xc'\n  >>> intHoMiniHex(426) == '0xcxx'\n  */\nconst intHoMiniHex = (number) => {\n  const [num, str] = intHoMiniHexNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniOctal(19) == '0ox'\n  >>> intHoMiniOctal(152) == '0o'\n  >>> intHoMiniOctal(426) == '0oxx'\n  */\nconst intHoMiniOctal = (number) => {\n  const [num, str] = intHoMiniOctalNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniBinary(19) == '0bx'\n  >>> intHoMiniBinary(152) == '0bc'\n  >>> intHoMiniBinary(426) == '0bcxx'\n  */\nconst intHoMiniBinary = number => {\n  const [num, str] = intHoMiniBinaryNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniHex(19) == '0xb'\n  >>> intHoMiniHex(152) == '0xc'\n  >>> intHoMiniHex(426) == '0xcxx'\n  */\nconst intHoMiniHex = number => {\n  const [num, str] = intHoMiniHexNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniOctal(19) == '0o'\n  >>> intHoMiniOctal(152) == '0'\n  >>> intHoMiniOctal(426) == '0oxx'\n  */\nconst intHoMiniOctal = number => {\n  const [num, str] = intHoMiniOctalNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniBinary(19) == '0bx'\n  >>> intHoMiniBinary(152) == '0bc'\n  >>> intHoMiniBinary(426) == '0bcxx'\n  */\nconst intHoMiniBinary = number => {\n  const [num, str] = intHoMiniBinaryNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniHex(19) == '0xb'\n  >>> intHoMiniHex(152) == '0xc'\n  >>> intHoMiniHex(426) == '0xcxx'\n  */\nconst intHoMiniHex = number => {\n  const [num, str] = intHoMiniHexNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniOctal(19) == '0o'\n  >>> intHoMiniOctal(152) == '0'\n  >>> intHoMiniOctal(426) == '0oxx'\n  */\nconst intHoMiniOctal = number => {\n  const [num, str] = intHoMiniOctalNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniBinary(19) == '0bx'\n  >>> intHoMiniBinary(152) == '0bc'\n  >>> intHoMiniBinary(426) == '0bcxx'\n  */\nconst intHoMiniBinary = number => {\n  const [num, str] = intHoMiniBinaryNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniHex(19) == '0xb'\n  >>> intHoMiniHex(152) == '0xc'\n  >>> intHoMiniHex(426) == '0xcxx'\n  */\nconst intHoMiniHex = number => {\n  const [num, str] = intHoMiniHexNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniOctal(19) == '0o'\n  >>> intHoMiniOctal(152) == '0'\n  >>> intHoMiniOctal(426) == '0oxx'\n  */\nconst intHoMiniOctal = number => {\n  const [num, str] = intHoMiniOctalNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniBinary(19) == '0bx'\n  >>> intHoMiniBinary(152) == '0bc'\n  >>> intHoMiniBinary(426) == '0bcxx'\n  */\nconst intHoMiniBinary = number => {\n  const [num, str] = intHoMiniBinaryNum(number);\n  return str.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniHex(19) == '0xb'\n  >>> intHoMiniHex(152) == '0xc'\n  >>> intHoMiniHex(426) == '0xcxx'\n  */\nconst intHoMiniHex = number => {\n  const [num, str] = intHoMiniHexNum(number);\n  return str.toLowerCase();\n};\n\n/*"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const a3 = Math.cos(b * Math.PI / 180);\n  const a4 = Math.sin(b * Math.PI / 180);\n  const a5 = Math.cos(c * Math.PI / 180);\n  const a6 = Math.sin(c * Math.PI / 180);\n  const b1 = Math.cos(a1 * Math.PI / 180);\n  const b2 = Math.sin(a1 * Math.PI / 180);\n  const b3 = Math.cos(a2 * Math.PI / 180);\n  const b4 = Math.sin(a2 * Math.PI / 180);\n  const b5 = Math.cos(a3 * Math.PI / 180);\n  const b6 = Math.sin(a3 * Math.PI / 180);\n  const c1 = Math.cos(a4 * Math.PI / 180);\n  const c2 = Math.sin(a4 * Math.PI / 180);\n  const c3 = Math.cos(a5 * Math.PI / 180);\n  const c4 = Math.sin(a5 * Math.PI / 180);\n  const c5 = Math.cos(a6 * Math.PI / 180);\n  const c6 = Math.sin(a6 * Math.PI / 180);\n  const d1 = Math.cos(b1 * Math.PI / 180);\n  const d2 = Math.sin(b1 * Math.PI / 180);\n  const d3 = Math.cos(b2 * Math.PI / 180);\n  const d4 = Math.sin(b2 * Math.PI / 180);\n  const d5 = Math.cos(b3 * Math.PI / 180);\n  const d6 = Math.sin(b3 * Math.PI / 180);\n  const e1 = Math.cos(c1 * Math.PI / 180);\n  const e2 = Math.sin(c1 * Math.PI / 180);\n  const e3 = Math.cos(c2 * Math.PI / 180);\n  const e4 = Math.sin(c2 * Math.PI / 180);\n  const e5 = Math.cos(c3 * Math.PI / 180);\n  const e6 = Math.sin(c3 * Math.PI / 180);\n  const f1 = Math.cos(d4 * Math.PI / 180);\n  const f2 = Math.sin(d4 * Math.PI / 180);\n  const f3 = Math.cos(d5 * Math.PI / 180);\n  const f4 = Math.sin(d5 * Math.PI / 180);\n  const f5 = Math.cos(d6 * Math.PI / 180);\n  const f6 = Math.sin(d6 * Math.PI / 180);\n  const g1 = Math.cos(b1 * Math.PI / 180);\n  const g2 = Math.sin(b1 * Math.PI / 180);\n  const g3 = Math.cos(b2 * Math.PI / 180);\n  const g4 = Math.sin(b2 * Math.PI / 180);\n  const g5 = Math.cos(b3 * Math.PI / 180);\n  const g6 = Math.sin(b3 * Math.PI / 180);\n  const h1 = Math.cos(c1 * Math.PI / 180);\n  const h2 = Math.sin(c1 * Math.PI / 180);\n  const h3 = Math.cos(c2 * Math.PI / 180);\n  const h4 = Math.sin(c2 * Math.PI / 180);\n  const h5 = Math.cos(c3 * Math.PI / 180);\n  const h6 = Math.sin(c3 * Math.PI / 180);\n  const i1 = Math.cos(d4 * Math.PI / 180);\n  const i2 = Math.sin(d4 * Math.PI / 180);\n  const i3 = Math.cos(d5 * Math.PI / 180);\n  const i4 = Math.sin(d5 * Math.PI / 180);\n  const i5 = Math.cos(d6 * Math.PI / 180);\n  const i6 = Math.sin(d6 * Math.PI / 180);\n  const j1 = Math.cos(b1 * Math.PI / 180);\n  const j2 = Math.sin(b1 * Math.PI / 180);\n  const j3 = Math.cos(b2 * Math.PI / 180);\n  const j4 = Math.sin(b2 * Math.PI / 180);\n  const j5 = Math.cos(b3 * Math.PI / 180);\n  const j6 = Math.sin(b3 * Math.PI / 180);\n  const k1 = Math.cos(c1 * Math.PI / 180);\n  const k2 = Math.sin(c1 * Math.PI / 180);\n  const k3 = Math.cos(c2 * Math.PI / 180);\n  const k4 = Math.sin(c2 * Math.PI / 180);\n  const k5 = Math.cos(c3 * Math.PI / 180);\n  const k6 = Math.sin(c3 * Math.PI / 180);\n  const l1 = Math.cos(d4 * Math.PI / 180);\n  const l2 = Math.sin(d4 * Math.PI / 180);\n  const l3 = Math.cos(d5 * Math.PI / 180);\n  const l4 = Math.sin(d5 * Math.PI / 180);\n  const l5 = Math.cos(d6 * Math.PI / 180);\n  const l6 = Math.sin(d6 * Math.PI / 180);\n  const m1 = Math.cos(b1 * Math.PI / 180);\n  const m2 = Math.sin(b1 * Math.PI / 180);\n  const m3 = Math.cos(b2 * Math.PI / 180);\n  const m4 = Math.sin(b2 * Math.PI / 180);\n  const m5 = Math.cos(b3 * Math.PI / 180);\n  const m6 = Math.sin(b3 * Math.PI / 180);\n  const n1 = Math.cos(c1 * Math.PI / 180);\n  const n2 = Math.sin(c1 * Math.PI / 180);\n  const n3 = Math.cos(c2 * Math.PI / 180);\n  const n4 = Math.sin(c2 * Math.PI / 180);\n  const n5 = Math.cos(c3 * Math.PI / 180);\n  const n6 = Math.sin(c3 * Math.PI / 180);\n  const o1 = Math.cos(d4 * Math.PI / 180);\n  const o2 = Math.sin(d4 * Math.PI / 180);\n  const o3 = Math.cos(d5 * Math.PI / 180);\n  const o4 = Math.sin(d5 * Math.PI / 180);\n  const o5 = Math.cos(d6 * Math.PI / 180);\n  const o6 = Math.sin(d6 * Math.PI / 180);\n  const p1 = Math.cos(b1 * Math.PI / 180);\n  const p2 = Math.sin(b1 * Math.PI / 180);\n  const p3 = Math.cos(b2 * Math.PI / 180);\n  const p4 = Math.sin(b2 * Math.PI / 180);\n  const p5 = Math.cos(b3 * Math.PI / 180);\n  const p6 = Math.sin(b3 * Math.PI / 180);\n  const q1 = Math.cos(c1 * Math.PI / 180);\n  const q2 = Math.sin(c1 * Math.PI / 180);\n  const q3 = Math.cos(c2 * Math.PI / 180);\n  const q4 = Math.sin(c2 * Math.PI / 180);\n  const q5 = Math.cos(c3 * Math.PI / 180);\n  const q6 = Math.sin(c3 * Math.PI / 180);\n  const r1 = Math.cos(d4 * Math.PI / 180);\n"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let maxCharWord = '';\n  let maxCharWordWord = '';\n  let maxCharWordWordWord = '';\n  let maxCharWordWordWordWord = '';\n  let maxCharWordWordWordWordWord = '';\n  let maxCharWordWordWordWordWordWord = '';\n  let maxCharWordWordWordWordWordWordWord = '';\n  let maxCharWordWordWordWordWordWordWordWord = '';\n  let maxCharWordWordWordWordWordWordWordWordWord = '';\n  let maxCharWordWordWordWordWordWordWordWordWordWord = '';\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWord = '';\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWord = '';\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWordWord = '';\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord = '';\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need));\n  const remaining = Math.ceil(remaining * Math.ceil(need));\n  const totalCarrots = carrots + remaining;\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(number));\n  const totalCarrots = Math.ceil(totalCarrots / Math.ceil(need"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[operand[i]](result, operand[i]);\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[operand[i]](result, operand[i]);\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[operand[i]](result, operand[i]);\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[operand[i]](result, operand[i]);\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[operand[i]](result, operand[i]);\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[operand[i]](result, operand[i]);\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[operand[i]](result, operand[i]);\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  let res = []\n  let len = s.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = ''\n  while (i < len) {\n    if (s[i] == 'a') {\n      temp = s[i].toUpperCase()\n      i++\n    } else if (s[i] == 'b') {\n      temp = s[i].toLowerCase()\n      i++\n    } else if (s[i] == 'c') {\n      temp = s[i]\n      i++\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '#') {\n      res.push(temp)\n      temp = ''\n      i++\n      continue\n    }\n    if (temp == '@') {\n"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlng = (md5) => {\n  if (!md5) {\n    return null;\n  }\n  return crypto.createHash('md5').update(md5, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5 = (md5) => {\n  if (!md5) {\n    return null;\n  }\n  return crypto.createHash('md5').update(md5, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlng = (md5) => {\n  if (!md5) {\n    return null;\n  }\n  return crypto.createHash('md5').update(md5, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5 = (md5) => {\n  if (!md5) {\n    return null;\n  }\n  return crypto.createHash('md5').update(md5, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlng = (md5) => {\n  if (!md5) {\n    return null;\n  }\n  return crypto.createHash('md5').update(md5, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5 = (md5) => {\n  if (!md5) {\n    return null;\n  }\n  return crypto.createHash('md5').update(md5, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlng = (md5) => {\n  if (!md5) {\n    return null;\n  }\n  return crypto.createHash('md5').update(md5, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5 = (md5) => {\n  if (!md5) {\n    return null;\n  }\n  return crypto.createHash('md5').update(md5, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlng = (md5) => {\n  if (!md5) {\n    return null;\n  }\n  return crypto.createHash('md5').update(md5, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5 = (md5) => {\n  if (!md5) {\n    return null;\n  }\n  return crypto.createHash('md5').update(md5, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlng = (md5) => {\n  if (!md5) {\n    return null;\n  }\n  return crypto.createHash('md5').update(md5, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5 = (md5) => {\n  if (!md5) {\n    return null;\n  }\n  return crypto.createHash('md5').update(md5, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  const result = [];\n  let curr = a;\n  while (curr >= b) {\n    result.push(curr % 10);\n    curr = Math.floor(curr / 10);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to divide n into the\n  sum of its digits. For example, given n = 2, the function should return the\n  number of ways to divide n into the sum of its digits, 1, 2, 4, 5, 6,\n  and 8.\n\n  For example:\n  numWays(2) => 4\n  numWays(3) => 2\n  numWays(4) => 1\n  numWays(5) => 1\n  numWays(6) => 1\n  numWays(7) => 1\n  numWays(8) => 1\n  numWays(9) => 1\n  numWays(10) => 1\n  numWays(11) => 1\n  numWays(12) => 1\n  numWays(13) => 1\n  numWays(14) => 1\n  numWays(15) => 1\n  numWays(16) => 1\n  numWays(17) => 1\n  numWays(18) => 1\n  numWays(19) => 1\n  numWays(20) => 1\n  numWays(21) => 1\n  numWays(22) => 1\n  numWays(23) => 1\n  numWays(24) => 1\n  numWays(25) => 1\n  numWays(26) => 1\n  numWays(27) => 1\n  numWays(28) => 1\n  numWays(29) => 1\n  numWays(30) => 1\n  numWays(31) => 1\n  numWays(32) => 1\n  numWays(33) => 1\n  numWays(34) => 1\n  numWays(35) => 1\n  numWays(36) => 1\n  numWays(37) => 1\n  numWays(38) => 1\n  numWays(39) => 1\n  numWays(40) => 1\n  numWays(41) => 1\n  numWays(42) => 1\n  numWays(43) => 1\n  numWays(44) => 1\n  numWays(45) => 1\n  numWays(46) => 1\n  numWays(47) => 1\n  numWays(48) => 1\n  numWays(49) => 1\n  numWays(50) => 1\n  numWays(51) => 1\n  numWays(52) => 1\n  numWays(53) => 1\n  numWays(54) => 1\n  numWays(55) => 1\n  numWays(56) => 1\n  numWays(57) => 1\n  numWays(58) => 1\n  numWays(59) => 1\n  numWays(60) => 1\n  numWays(61) => 1\n  numWays(62) => 1\n  numWays(63) => 1\n  numWays(64) => 1\n  numWays(65) => 1\n  numWays(66) => 1\n  numWays(67) => 1\n  numWays(68) => 1\n  numWays(69) => 1\n  numWays(70) => 1\n  numWays(71) => 1\n  numWays(72) => 1\n  numWays(73) => 1\n  numWays(74) => 1\n  numWays(75) => 1\n  numWays(76) => 1\n  numWays(77) => 1\n  numWays(78) => 1\n  numWays(79) => 1\n  numWays(80) => 1\n  numWays(81) => 1\n  numWays(82) => 1\n  numWays(83) => 1\n  numWays(84) => 1\n  numWays(85) => 1\n  numWays(86) => 1\n  numWays(87) => 1\n  numWays(88) => 1\n  numWays(89) => 1\n  numWays(90) => 1\n  numWays(91) => 1\n  numWays(92) => 1\n  numWays(93) => 1\n  numWays(94) => 1\n  numWays(95) => 1\n  numWays(96) => 1\n  numWays(97) => 1\n  numWays(98) => 1\n  numWays(99) => 1\n  numWays(100) => 1\n  numWays(101) => 1\n  numWays(102) => 1\n  numWays(103) => 1\n  numWays(104) => 1\n  numWays(105) => 1\n  numWays(106) => 1\n  numWays(107) => 1\n  numWays(108) => 1\n  numWays(109) => 1\n  numWays(110) => 1\n  numWays(111) => 1\n  numWays(112) => 1\n  numWays(113) => 1\n  numWays(114) => 1\n  numWays(115) => 1\n  numWays(116) => 1\n  numWays(117) => 1\n  numWays(118) => 1\n  numWays(119) => 1\n  numWays(120) => 1\n  numWays(121) => 1\n  numWays(122) => 1\n  numWays(123) => 1\n  numWays(124) => 1\n  numWays(125) => 1\n  numWays(126) => 1\n  numWays(127) => 1\n  numWays(128) => 1\n  numWays(129) => 1\n  numWays(130) => 1\n  numWays(131) => 1\n  numWays(132) => 1\n  numWays(133) => 1\n  numWays(134) => 1\n  numWays(135) => 1\n  numWays(136) => 1\n  numWays(137) => 1\n  numWays(138) => 1\n  numWays(139) => 1\n  numWays(140) => 1\n  numWays(141) => 1\n  numWays(142) => 1\n  numWays(143) => 1\n  numWays(144) => 1\n  numWays(145) => 1\n  numWays(146) => 1\n  numWays(147) => 1\n  numWays(148) => 1\n  numWays(149) => 1\n  numWays(150) => 1\n  numWays(151) => 1"}
