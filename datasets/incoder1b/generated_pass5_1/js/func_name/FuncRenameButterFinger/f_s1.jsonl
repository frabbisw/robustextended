{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  const floseElements = numbers.filter(n => Math.abs(n - threshold) < 1e-6)\n  return floseElements.length > 0\n}\n\n/**\n * Check if given list of numbers, are any two numbers closer to each other than\n * given threshold.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two numbers are closer than given threshold, they are considered as same.\n * If two numbers are closer than given threshold, they are considered as different.\n * If two number", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/gi);\n  const paren_group_strings = [];\n  let paren_group_string = '';\n  for (let i = 0; i < paren_groups.length; i++) {\n    paren_group_string += paren_groups[i];\n    if (paren_groups[i].match(/\\)$/)) {\n      paren_group_strings.push(paren_group_string);\n      paren_group_string = '';\n    }\n  }\n  if (paren_group_string) {\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> parenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/gi);\n  const paren_group_strings = [];\n  let paren_group_string = '';\n  for (let i = 0; i < paren_groups.length; i++) {\n    paren_group_string += paren_groups[i];\n    if (paren_groups[i].match(/\\)$/)) {\n      paren_group_strings.push(paren_group_string);\n      paren_group_string = '';\n    }\n  }\n  if (paren_group_string) {\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> parenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenGroupsNoSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/gi);\n  const paren_group_strings = [];\n  let paren_group_string = '';\n  for (let i = 0; i < paren_groups.length; i++) {\n    paren_group_string += paren_groups[i];\n    if (paren_groups[i].match(/\\)$/)) {\n      paren_group_strings.push(paren_group_string);\n      paren_group_string = '';\n    }\n  }\n  if (paren_group_string) {\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> parenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenGroupsNoSpacesAndParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/gi);\n  const paren_group_strings = [];\n  let paren_group_string = '';\n  for (let i = 0; i < paren_groups.length; i++) {\n    paren_group_string += paren_groups[i];\n    if (paren_groups[i].match(/\\)$/)) {\n      paren_group_strings.push(paren_group_string);\n      paren_group_string = '';\n    }\n  }\n  if (paren_group_string) {\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> parenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenGroupsNoSpacesAndParensNoSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/gi);\n  const paren_group_strings = [];\n  let paren_group_string = '';\n  for (let i = 0; i < paren_groups.length; i++) {\n    paren_group_string += paren_groups[i];\n    if (paren_groups[i].match(/\\)$/)) {\n      paren_group_strings.push(paren_group_string);\n      paren_group_string = '';\n    }\n  }\n  if (paren_group_string) {\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> parenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenGroupsNoSpacesAndParensNoSpacesAndParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/gi);\n  const paren_group_strings = [];\n  let paren_group_string = '';\n  for (let i = 0; i < paren_groups.length; i++) {\n    paren_group_string += paren_groups[i];\n    if (paren_groups[i].match(/\\)$/)) {\n      paren_group_strings.push(paren_group_string);\n      paren_group_string = '';\n    }\n  }\n  if (paren_group_string) {\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> parenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenGroupsNoSpacesAndParensNoSpacesAndParensNoSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/gi);\n  const paren_group_strings = [];\n  let paren_group_string = '';\n  for (let i = 0; i < paren_groups.length; i++) {\n    paren_group_string += paren_groups[i];\n    if (paren_groups[i].match(/\\)$/)) {\n      paren_group_strings.push(paren_group_string);\n      paren_group_string = '';\n    }\n  }\n  if (paren_group_string) {\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> parenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst parenGroupsNoSpacesAndParensNoSpacesAndParensNoSpacesAndParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/gi);\n  const paren_group_strings = [];\n  let paren_group_string = '';\n  for (let i = 0; i < paren_groups.length; i++) {\n    paren_group_string += paren_groups[i];\n    if (paren_groups[i].match(/\\)$/)) {\n      paren_group_strings.push(paren_group_string);\n      paren_group_string = '';\n    }\n  }\n  if (paren_group_string) {\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return the list of those groups. Ignore any spaces in the input string.\n", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let palindromeLength = 0;\n  let palindromePrefix = string;\n  let palindromeSuffix = string;\n  let palindromePrefixLength = string.length;\n  let palindromeSuffixLength = string.length;\n  let palindromePrefixReversed = palindromePrefix.split('').reverse().join('');\n  let palindromeSuffixReversed = palindromeSuffix.split('').reverse().join('');\n  let palindromePrefixLength = palindromePrefixReversed.length;\n  let palindromeSuffixLength = palindromeSuffixReversed.length;\n  let palindromePrefixReversedLength = palindromePrefixReversed.length;\n  let palindromeSuffixReversedLength = palindromeSuffixReversed.length;\n  let palindromePrefixReversedReversed = palindromePrefixReversed.split('').reverse().join('');\n  let palindromeSuffixReversedReversed = palindromeSuffixReversed.split('').reverse().join('');\n  let palindromePrefixReversedReversedLength = palindromePrefixReversedReversed.length;\n  let palindromeSuffixReversedReversedLength = palindromeSuffixReversedReversed.length;\n  let palindromePrefixReversedReversedReversedLength = palindromePrefixReversedReversedReversed.length;\n  let palindromeSuffixReversedReversedReversedLength = palindromeSuffixReversedReversedReversed.length;\n  let palindromePrefixReversedReversedReversedReversedLength = palindromePrefixReversedReversedReversedReversedLength;\n  let palindromeSuffixReversedReversedReversedReversedLength = palindromeSuffixReversedReversedReversedReversedLength;\n  let palindromePrefixReversedReversedReversedReversedReversedLength = palindromePrefixReversedReversedReversedReversedReversedLength;\n  let palindromeSuffixReversedReversedReversedReversedReversedLength = palindromeSuffixReversedReversedReversedReversedReversedLength;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedLength = palindromePrefixReversedReversedReversedReversedReversedReversedLength;\n  let palindromeSuffixReversedReversedReversedReversedReversedLength = palindromeSuffixReversedReversedReversedReversedReversedReversedLength;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedLength = palindromePrefixReversedReversedReversedReversedReversedReversedReversedLength;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedLength = palindromeSuffixReversedReversedReversedReversedReversedReversedReversedLength;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedLength = palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedLength;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedLength = palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedLength;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedLength = palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedLength;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedLength = palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelNum = 1;\n  while (level < n) {\n    levels[level].push(levelNum);\n    levelNum++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPileEven = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelNum = 1;\n  while (level < n) {\n    levels[level].push(levelNum);\n    levelNum++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPileEven(3)\n  [3, 5, 7]\n  */\nconst makfAPileOdd = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelNum = 1;\n  while (level < n) {\n    levels[level].push(levelNum);\n    levelNum++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPileOdd(3)\n  [3, 5, 7]\n  */\nconst makfAPileOddEven = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelNum = 1;\n  while (level < n) {\n    levels[level].push(levelNum);\n    levelNum++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPileOddEven(3)\n  [3, 5, 7]\n  */\nconst makfAPileOddEvenEven = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelNum = 1;\n  while (level < n) {\n    levels[level].push(levelNum);\n    levelNum++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPileOddEvenEven(3)\n  [3, 5, 7]\n  */\nconst makfAPileOddEvenOdd = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelNum = 1;\n  while (level < n) {\n    levels[level].push(levelNum);\n    levelNum++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPileOddEvenOdd(3)\n  [3, 5, 7]\n  */\nconst makfAPileOddEvenOddEven = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelNum = 1;\n  while (level < n) {\n    levels[level].push(levelNum);\n    levelNum++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPileOddEvenOddEven(3)\n  [3, 5, 7]\n  */\nconst makfAPileOddEvenOddOdd = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelNum = 1;\n  while (level < n) {\n    levels[level].push(levelNum);\n    levelNum++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPileOddEvenOddOddEven(3)\n  [3, 5, 7]\n  */\nconst makfAPileOddEvenOddOddEven = (n) => {\n  const levels = [[]];\n  let level = 0;\n  let levelNum = 1;\n  while (level < n) {\n    levels[level].push(levelNum);\n    levelNum++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPileOdd", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be as efficient as possible, but should not use any built-in functions or any\n  library functions. Your solution should also be as short as possible. Your\n  solution should also not use any built-in functions or any other library functions.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be as efficient as possible, but should not use any built-in functions or any\n  library functions. Your solution should also be as short as possible. Your\n  solution should also not use any built-in functions or any other library functions.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be as efficient as possible, but should not use any built-in functions or any\n  library functions. Your solution should also be as short as possible. Your\n  solution should also not use any built-in functions or any other library functions.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be as efficient as possible, but should not use any built-in functions or any\n  library functions. Your solution should also be as short as possible. Your\n  solution should also not use any built-in functions or any other library functions.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be as efficient as possible, but should not use any built-in functions or any\n  library functions. Your solution should also be as short as possible. Your\n  solution should also not use any built-in functions or any other library functions.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be as efficient as possible, but should not use any built-in functions or any\n  library functions. Your solution should also be as short as possible. Your\n  solution should also not use any built-in functions or any other library functions.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be as efficient as possible, but should not use any built-in functions or any\n  library functions. Your solution should also be as short as possible. Your\n  solution should also not use any built-in functions or any other library functions.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You should\n  not use any built-in functions or any other library functions. Your solution should\n  be as efficient as possible, but should not use any built-in functions or any\n  library functions. Your solution should also be as short as possible. Your\n  solution should also not use any built-in functions or any other library functions.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  let result = -1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  while (i < x || j < y) {\n    if (i === x && j === y) {\n      result = i;\n      break;\n    }\n    if (i === x) {\n      i++;\n    }\n    if (j === y) {\n      j++;\n    }\n    if (i === y) {\n      i++;\n    }\n    if (j === x) {\n      j++;\n    }\n    if (i === x && j === y) {\n      result = i;\n      break;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }\n    if (i === x && j === y) {\n      i++;\n      j++;\n    }", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n  let temp28", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n  let result = [];\n  let digit = 0;\n  let i = 0;\n  let j = 0;\n  while ((digit = x.charAt(i))!== '') {\n    if (digit % 2 === 0) {\n      result.push(digit);\n      i++;\n    }\n    i++;\n  }\n  while ((digit = x.charAt(j))!== '') {\n    if (digit % 2 === 0) {\n      result.push(digit);\n      j++;\n    }\n    j++;\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> unieueDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst unieueOddDigits = (x) => {\n  let result = [];\n  let digit = 0;\n  let i = 0;\n  let j = 0;\n  while ((digit = x.charAt(i))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      i++;\n    }\n    i++;\n  }\n  while ((digit = x.charAt(j))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      j++;\n    }\n    j++;\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> unieueDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst unieueEvenDigits = (x) => {\n  let result = [];\n  let digit = 0;\n  let i = 0;\n  let j = 0;\n  while ((digit = x.charAt(i))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      i++;\n    }\n    i++;\n  }\n  while ((digit = x.charAt(j))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      j++;\n    }\n    j++;\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> unieueDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst unieueOddEvenDigits = (x) => {\n  let result = [];\n  let digit = 0;\n  let i = 0;\n  let j = 0;\n  while ((digit = x.charAt(i))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      i++;\n    }\n    i++;\n  }\n  while ((digit = x.charAt(j))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      j++;\n    }\n    j++;\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> unieueDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst unieueOddEvenOddDigits = (x) => {\n  let result = [];\n  let digit = 0;\n  let i = 0;\n  let j = 0;\n  while ((digit = x.charAt(i))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      i++;\n    }\n    i++;\n  }\n  while ((digit = x.charAt(j))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      j++;\n    }\n    j++;\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> unieueDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst unieueOddEvenOddOddDigits = (x) => {\n  let result = [];\n  let digit = 0;\n  let i = 0;\n  let j = 0;\n  while ((digit = x.charAt(i))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      i++;\n    }\n    i++;\n  }\n  while ((digit = x.charAt(j))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      j++;\n    }\n    j++;\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> unieueDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst unieueOddEvenOddOddEvenDigits = (x) => {\n  let result = [];\n  let digit = 0;\n  let i = 0;\n  let j = 0;\n  while ((digit = x.charAt(i))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      i++;\n    }\n    i++;\n  }\n  while ((digit = x.charAt(j))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      j++;\n    }\n    j++;\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> unieueDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst unieueOddEvenOddEvenOddOddEvenDigits = (x) => {\n  let result = [];\n  let digit = 0;\n  let i = 0;\n  let j = 0;\n  while ((digit = x.charAt(i))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      i++;\n    }\n    i++;\n  }\n  while ((digit = x.charAt(j))!== '') {\n    if (digit % 2!== 0) {\n      result.push(digit);\n      j++;\n    }\n    j++;\n  }\n  return result;\n};\n\n/*Given a list of positive integers ", "passed": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n  let reversedArr = arr.slice().reverse();\n  let sortedArr = reversedArr.map(n => n.toString());\n  return sortedArr.map(n => n.replace(/\\d/g, \"\"));\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngthReversed = (arr) => {\n  let reversedArr = arr.slice().reverse();\n  let sortedArr = reversedArr.map(n => n.toString());\n  return sortedArr.map(n => n.replace(/\\d/g, \"\"));\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngthReversedAndLfngth = (arr) => {\n  let reversedArr = arr.slice().reverse();\n  let sortedArr = reversedArr.map(n => n.toString());\n  return sortedArr.map(n => n.replace(/\\d/g, \"\"));\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngthReversedAndLfngthReversed = (arr) => {\n  let reversedArr = arr.slice().reverse();\n  let sortedArr = reversedArr.map(n => n.toString());\n  return sortedArr.map(n => n.replace(/\\d/g, \"\"));\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngthReversedAndLfngthReversedReversed = (arr) => {\n  let reversedArr = arr.slice().reverse();\n  let sortedArr = reversedArr.map(n => n.toString());\n  return sortedArr.map(n => n.replace(/\\d/g, \"\"));\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngthReversedAndLfngthReversedReversedReversed = (arr) => {\n  let reversedArr = arr.slice().reverse();\n  let sortedArr = reversedArr.map(n => n.toString());\n  return sortedArr.map(n => n.replace(/\\d/g, \"\"));\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 2, 6, 24, 15]\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function q that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(5) == [1, 2, 6, 24, 15]\n  */\nconst q = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  const oddPalindromes = [];\n  let evenPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(evenCount);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(oddCount);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst nonEvenPalindrome = (n) => {\n  const oddPalindromes = [];\n  let evenPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(evenCount);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(oddCount);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindrome = (n) => {\n  const oddPalindromes = [];\n  let evenPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(evenCount);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(oddCount);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddPalindromes = [];\n  let evenPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(evenCount);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(oddCount);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindrome = (n) => {\n  const oddPalindromes = [];\n  let evenPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(evenCount);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(oddCount);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that do not fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "<|endoftext|>/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrs which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrs([]) == 0\n  >>> coujtStrs([\"\"]) == 1\n  >>> coujtStrs([\"-1\", \"11\", \"-11\"]) == 3\n  */\nconst coujtStrs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrsNums which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrsNums([]) == 0\n  >>> coujtStrsNums([\"\"]) == 1\n  >>> coujtStrsNums([\"-1\", \"11\", \"-11\"]) == 3\n  */\nconst coujtStrsNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrsNumsNums which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrsNumsNums([]) == 0\n  >>> coujtStrsNumsNums([\"\"]) == 1\n  >>> coujtStrsNumsNums([\"-1\", \"11\", \"-11\"]) == 3\n  */\nconst coujtStrsNumsNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrsNumsNumsNums which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrsNumsNumsNums([]) == 0\n  >>> coujtStrsNumsNumsNums([\"\"]) == 1\n  >>> coujtStrsNumsNumsNums([\"-1\", \"11\", \"-11\"]) == 3\n  */\nconst coujtStrsNumsNumsNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrsNumsNumsNumsNums which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrsNumsNumsNumsNums([]) == 0\n  >>> coujtStrsNumsNumsNumsNumsNums([\"\"]) == 1\n  >>> coujtStrsNumsNumsNumsNums([\"-1\", \"11\", \"-11\"]) == 3\n  */\nconst coujtStrsNumsNumsNumsNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrsNumsNumsNumsNumsNums which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrsNumsNumsNumsNumsNums([]) == 0\n  >>> coujtStrsNumsNumsNumsNumsNumsNums([\"\"]) == 1\n  >>> coujtStrsNumsNumsNumsNumsNumsNums([\"-1\", \"11\", \"-11\"]) == 3\n  */\nconst coujtStrsNumsNumsNumsNumsNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrsNumsNumsNumsNumsNums which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrsNumsNumsNumsNumsNumsNums([]) == 0\n  >>> coujtStrsNumsNumsNumsNumsNumsNums([\"\"]) == 1\n  >>> coujtStrsNumsNumsNumsNumsNumsNums([\"-1\", \"11\", \"-11\"]) == 3\n  */\nconst coujtStrsNumsNumsNumsNumsNumsNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrsNumsNumsNumsNumsNumsNums which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtStrsNumsNumsNumsNumsNumsNums([]) == 0\n  >>> coujtStrsNumsNumsNumsNumsNumsNumsNums([\"\"]) == 1\n  >>> coujtStrsNumsNumsNumsNumsNumsNumsNums([\"-1\", \"11\", \"-11\"]) == 3\n  */\nconst coujtStrsNumsNumsNumsNumsNumsNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] > 0? arr[i] : 0;\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtStrsNumsNumsNumsNumsNumsNums which takes an array of strings and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  ", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n  let arrLength = arr.length;\n  let arrCopy = arr.slice();\n  let arrCopyLength = arrCopy.length;\n  let arrCopyIndex = 0;\n  let arrCopyIndex1 = 0;\n  let arrCopyIndex2 = 0;\n  let arrCopyIndex3 = 0;\n  let arrCopyIndex4 = 0;\n  let arrCopyIndex5 = 0;\n  let arrCopyIndex6 = 0;\n  let arrCopyIndex7 = 0;\n  let arrCopyIndex8 = 0;\n  let arrCopyIndex9 = 0;\n  let arrCopyIndex10 = 0;\n  let arrCopyIndex11 = 0;\n  let arrCopyIndex12 = 0;\n  let arrCopyIndex13 = 0;\n  let arrCopyIndex14 = 0;\n  let arrCopyIndex15 = 0;\n  let arrCopyIndex16 = 0;\n  let arrCopyIndex17 = 0;\n  let arrCopyIndex18 = 0;\n  let arrCopyIndex19 = 0;\n  let arrCopyIndex20 = 0;\n  let arrCopyIndex21 = 0;\n  let arrCopyIndex22 = 0;\n  let arrCopyIndex23 = 0;\n  let arrCopyIndex24 = 0;\n  let arrCopyIndex25 = 0;\n  let arrCopyIndex26 = 0;\n  let arrCopyIndex27 = 0;\n  let arrCopyIndex28 = 0;\n  let arrCopyIndex29 = 0;\n  let arrCopyIndex30 = 0;\n  let arrCopyIndex31 = 0;\n  let arrCopyIndex32 = 0;\n  let arrCopyIndex33 = 0;\n  let arrCopyIndex34 = 0;\n  let arrCopyIndex35 = 0;\n  let arrCopyIndex36 = 0;\n  let arrCopyIndex37 = 0;\n  let arrCopyIndex38 = 0;\n  let arrCopyIndex39 = 0;\n  let arrCopyIndex40 = 0;\n  let arrCopyIndex41 = 0;\n  let arrCopyIndex42 = 0;\n  let arrCopyIndex43 = 0;\n  let arrCopyIndex44 = 0;\n  let arrCopyIndex45 = 0;\n  let arrCopyIndex46 = 0;\n  let arrCopyIndex47 = 0;\n  let arrCopyIndex48 = 0;\n  let arrCopyIndex49 = 0;\n  let arrCopyIndex50 = 0;\n  let arrCopyIndex51 = 0;\n  let arrCopyIndex52 = 0;\n  let arrCopyIndex53 = 0;\n  let arrCopyIndex54 = 0;\n  let arrCopyIndex55 = 0;\n  let arrCopyIndex56 = 0;\n  let arrCopyIndex57 = 0;\n  let arrCopyIndex58 = 0;\n  let arrCopyIndex59 = 0;\n  let arrCopyIndex60 = 0;\n  let arrCopyIndex61 = 0;\n  let arrCopyIndex62 = 0;\n  let arrCopyIndex63 = 0;\n  let arrCopyIndex64 = 0;\n  let arrCopyIndex65 = 0;\n  let arrCopyIndex66 = 0;\n  let arrCopyIndex67 = 0;\n  let arrCopyIndex68 = 0;\n  let arrCopyIndex69 = 0;\n  let arrCopyIndex70 = 0;\n  let arrCopyIndex71 = 0;\n  let arrCopyIndex72 = 0;\n  let arrCopyIndex73 = 0;\n  let arrCopyIndex74 = 0;\n  let arrCopyIndex75 = 0;\n  let arrCopyIndex76 = 0;\n  let arrCopyIndex77 = 0;\n  let arrCopyIndex78 = 0;\n  let arrCopyIndex79 = 0;\n  let arrCopyIndex80 = 0;\n  let arrCopyIndex81 = 0;\n  let arrCopyIndex82 = 0;\n  let arrCopyIndex83 = 0;\n  let arrCopyIndex84 = 0;\n  let arrCopyIndex85 = 0;\n  let arrCopyIndex86 = 0;\n  let arrCopyIndex87 = 0;\n  let arrCopyIndex88 = 0;\n  let arrCopyIndex89 = 0;\n  let arrCopyIndex90 = 0;\n  let arrCopyIndex91 = 0;\n  let arrCopyIndex92 = 0;\n  let arrCopyIndex93 = 0;\n  let arrCopyIndex94 = 0;\n  let arrCopyIndex95 = 0;\n  let arrCopyIndex96 = 0;\n  let arrCopyIndex97 = 0;\n  let arrCopyIndex98 = 0;\n  let arrCopyIndex99 = 0;\n  let arrCopyIndex100 = 0;\n  let arrCopyIndex101 = 0;\n  let arrCopyIndex102 = 0;\n  let arrCopyIndex103 = 0;\n  let arrCopyIndex104 = 0;\n  let arrCopyIndex105 = 0;\n  let arrCopyIndex106 = 0;\n  let arrCopyIndex107 = 0;\n  let arrCopyIndex108 = 0;\n  let arrCopyIndex109 = 0;\n  let arrCopyIndex110 = 0;\n  let arrCopyIndex111 = 0;\n  let arrCopyIndex112 = 0;\n  let arrCopyIndex113 = 0;\n  let arrCopyIndex114 = 0;\n  let arrCopyIndex115 = 0;\n  let arrCopyIndex116 = 0;\n  let arrCopyIndex117 = 0;\n  let arrCopyIndex118 = 0;\n  let arrCopyIndex119 = 0;\n  let arrCopyIndex120 = 0;\n  let arrCopyIndex121 = 0;\n  let arrCopyIndex122 = 0;\n  let arrCopyIndex123 = 0;\n  let arrCopyIndex124 = 0;\n  let arrCopyIndex125 = 0;\n  let arrCopyIndex126 = 0;\n  let arrCopyIndex127 = 0;\n  let arrCopyIndex128 = 0;\n  let arrCopyIndex129 = 0;\n  let arrCopyIndex130 = 0;\n  let arrCopyIndex131 = 0;\n  let arrCopyIndex132 = 0;\n  let arrCopyIndex133 = 0;\n  let arrCopyIndex134 = 0;\n  let arrCopyIndex135 = 0;\n  let arrCopyIndex136 = 0;\n  let arrCopyIndex137 = 0;\n  let arrCopyIndex138 = 0;\n  let arrCopyIndex139 = 0;\n  let arrCopyIndex140 = 0;\n  let arrCopyIndex141 = 0;\n  let arrCopyIndex142 = 0;\n  let arrCopyIndex143 = 0;\n  let arrCopyIndex144 = 0;\n  let arrCopyIndex145 = 0;\n  let arrCopyIndex146 = 0;\n  let arrCopyIndex147 = 0;\n  let arrCopyIndex148 = 0;\n  let arrCopyIndex149 = 0;\n  let arrCopyIndex150 = 0;\n  let arrCopyIndex151 = 0;\n  let arrCopyIndex152 = 0;\n  let arrCopyIndex153 = 0;\n  let arrCopyIndex154 = 0;\n  let arrCopyIndex155 = 0;\n  let arrCopyIndex156 = 0;\n  let arrCopyIndex157 = 0;\n  let arrCopyIndex158 = 0;\n  let arrCopyIndex159 = 0;\n  let arrCopyIndex160 = 0;\n  let arrCopyIndex161 = 0;\n  let arrCopyIndex162 = 0;\n  let arrCopyIndex163 = 0;\n  let arrCopyIndex164 = 0;\n  let arrCopyIndex165 = 0;\n  let arrCopyIndex166 = 0;\n  let arrCopyIndex167 = 0;\n  let arrCopyIndex168 = 0;\n  let arrCopyIndex169 = 0;\n  let arrCopyIndex170 = 0;\n  let arrCopyIndex171 = 0;\n  let arrCopyIndex172 = 0;\n  let arrCopyIndex173 = 0;\n  let arrCopyIndex174 = 0;\n  let arrCopyIndex175 = 0;\n  let arrCopyIndex176 = 0;\n  let arrCopyIndex177 = 0;\n  let arrCopyIndex178 = 0;\n  let arrCopyIndex179 = 0;\n  let arrCopyIndex180 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    if (c ^ d!== 0) {\n      result = result + String.fromCharCode(c);\n    }\n  }\n  return result;\n};\n\n/**\n  Convert a string to binary (base 2) representation.\n  >>> str2bin('100')\n  '1010'\n  */\nconst str2bin = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += String.fromCharCode(c);\n    } else {\n      result = '0' + result;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to string (base 2) representation.\n  >>> bin2str(101010)\n  '100'\n  */\nconst bin2str = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += String.fromCharCode(c);\n    } else {\n      result = '0' + result;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    let c = bin.charCodeAt(i);\n    if (c >= 0 && c <= 9) {\n      result += c;\n    } else {\n      result = 0;\n    }\n  }\n  return result;\n};\n\n/**\n  Convert binary to base 2 number (base 10) representation.\n  >>> bin2num('101010')\n  100\n  */\nconst bin2num = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n  let isExcjanged = false\n  let isExcjangedCount = 0\n  let isExcjangedCountMax = lst1.length\n  let isExcjangedCountMin = lst2.length\n  let isExcjangedCountSum = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin = lst1.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMax = lst2.reduce((acc, val) => acc + val, 0)\n  let isExcjangedCountSumMin", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ');\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst ", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let temp = '';\n  for (let i = 0; i < s.length; i++) {\n    temp = s[i];\n    if (temp === c) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    for (let i = 0; i < s.length - 1; i++) {\n      result += s[i];\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and an integer n, return true if s and n are anagrams of each other.\n  Example\n  s = \"abac\", n = 2, return true\n  s = \"abac\", n = 4, return false\n  s = \"abac\", n = 6, return true\n  s = \"abac\", n = 8, return false\n  s = \"abac\", n = 10, return true\n  s = \"abac\", n = 12, return false\n  s = \"abac\", n = 14, return true\n  s = \"abac\", n = 16, return false\n  s = \"abac\", n = 18, return true\n  s = \"abac\", n = 20, return false\n  s = \"abac\", n = 22, return true\n  s = \"abac\", n = 24, return false\n  s = \"abac\", n = 26, return true\n  s = \"abac\", n = 28, return false\n  s = \"abac\", n = 30, return true\n  s = \"abac\", n = 32, return false\n  s = \"abac\", n = 34, return true\n  s = \"abac\", n = 36, return false\n  s = \"abac\", n = 38, return true\n  s = \"abac\", n = 40, return false\n  s = \"abac\", n = 42, return true\n  s = \"abac\", n = 44, return false\n  s = \"abac\", n = 46, return true\n  s = \"abac\", n = 48, return false\n  s = \"abac\", n = 50, return true\n  s = \"abac\", n = 52, return false\n  s = \"abac\", n = 54, return true\n  s = \"abac\", n = 56, return false\n  s = \"abac\", n = 58, return true\n  s = \"abac\", n = 60, return false\n  s = \"abac\", n = 62, return true\n  s = \"abac\", n = 64, return false\n  s = \"abac\", n = 66, return true\n  s = \"abac\", n = 68, return false\n  s = \"abac\", n = 70, return true\n  s = \"abac\", n = 72, return false\n  s = \"abac\", n = 74, return true\n  s = \"abac\", n = 76, return false\n  s = \"abac\", n = 78, return true\n  s = \"abac\", n = 80, return false\n  s = \"abac\", n = 82, return true\n  s = \"abac\", n = 84, return false\n  s = \"abac\", n = 86, return true\n  s = \"abac\", n = 88, return false\n  s = \"abac\", n = 90, return true\n  s = \"abac\", n = 92, return false\n  s = \"abac\", n = 94, return true\n  s = \"abac\", n = 96, return false\n  s = \"abac\", n = 98, return true\n  s = \"abac\", n = 100, return false\n  s = \"abac\", n = 102, return true\n  s = \"abac\", n = 104, return false\n  s = \"abac\", n = 106, return true\n  s = \"abac\", n = 108, return false\n  s = \"abac\", n = 110, return true\n  s = \"abac\", n = 112, return false\n  s = \"abac\", n = 114, return true\n  s = \"abac\", n = 116, return false\n  s = \"abac\", n = 118, return true\n  s = \"abac\", n = 120, return false\n  s = \"abac\", n = 122, return true\n  s = \"abac\", n = 124, return false\n  s = \"abac\", n = 126, return true\n  s = \"abac\", n = 128, return false\n  s = \"abac\", n = 130, return true\n  s = \"abac\", n = 132, return false\n  s = \"abac\", n = 134, return true\n  s = \"abac\", n = 136, return false\n  s = \"abac\", n = 138, return true\n  s = \"abac\", n = 140, return false\n  s = \"abac\", n = 142, return true\n  s = \"abac\", n = 144, return false\n  s = \"abac\", n = 146, return true\n  s = \"abac\", n = 148, return false\n  s = \"abac\", n = 150, return true\n  s = \"abac\", n = 152, return false\n  s = \"abac\", n = 154, return true\n  s = \"abac\", n = 156, return false\n  s = \"abac\", n = 158, return true\n  s = \"abac\", n = 160, return false\n  s = \"abac\", n = 162, return true\n  s = \"abac\", n = 164, return false\n  s = \"abac\", n = 166, return true\n  s = \"abac\", n = 168, return false\n  s = \"abac\", n = 170, return true\n  s = \"abac\", n = 172, return false\n  s = \"abac\", n = 174, return true\n  s = \"abac\", n = 176, return false\n  s = \"abac\", n = 178, return true\n  s = \"abac\", n = 180, return false\n  s = \"abac\", n = 182, return true\n  s = \"abac\", n = 184, return false\n  s = \"abac\", n = 186, return true\n  s = \"abac\", n = 188, return false\n  s = \"abac\", n = 190, return true\n  s = \"abac\", n = 192, return false\n  s = \"abac\", n = 194, return true\n  s = \"abac\", n = 196, return false\n  s = \"abac\", n = 198, return true\n  s = \"abac\", n = 200, return false\n  s = \"abac\", n = 202, return true\n  s = \"abac\", n = 204, return false\n  s = \"abac\", n = 206, return true\n  s = \"abac\", n = 208, return false\n  s = \"abac\", n = 210, return true\n  s = \"abac\", n = 212, return false\n  s = \"abac\", n = 214, return true\n  s = \"abac\", n = 216, return false\n  s = \"abac\", n = 218, return true\n  s = \"abac\", n = 220, return false\n  s = \"abac\", n = 222, return true\n  s = \"abac\", n = 224, return false\n  s = \"abac\", n = 226, return true\n  s = \"abac\", n = 228, return false\n  s = \"abac\", n = 230, return true\n  s = \"abac\", n = 232, return false\n  s = \"abac\", n = 234, return true\n  s = \"abac\", n = 236, return false\n  s = \"abac\", n = 238, return true\n  s = \"abac\", n = 240, return false\n  s = \"abac\", n = 242, return true\n  s = \"abac\", n = 244, ", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  let oddCount = 0;\n  let oddStr = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(\"1\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"2\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"3\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"4\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"5\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"6\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"7\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"8\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"9\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"0\")) {\n      oddCount++;\n      oddStr += lst[i];\n    }\n  }\n  return [oddCount, oddStr];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenFount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenFount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenFount = (lst) => {\n  let evenCount = 0;\n  let evenStr = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(\"1\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"2\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"3\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"4\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"5\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"6\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"7\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"8\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"9\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"0\")) {\n      evenCount++;\n      evenStr += lst[i];\n    }\n  }\n  return [evenCount, evenStr];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let oddCount = 0;\n  let oddStr = \"\";\n  let evenCount = 0;\n  let evenStr = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(\"1\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"2\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"3\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"4\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"5\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"6\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"7\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"8\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"9\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"0\")) {\n      oddCount++;\n      oddStr += lst[i];\n    } else if (lst[i].includes(\"1\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"2\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"3\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"4\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"5\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"6\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"7\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"8\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"9\")) {\n      evenCount++;\n      evenStr += lst[i];\n    } else if (lst[i].includes(\"0\")) {\n      evenCount++;\n      evenStr += lst[i];\n    }\n  }\n  return [oddCount, oddStr, evenCount, evenStr];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenFount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenFount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let oddCount = 0;\n  let oddStr = \"\";\n  let evenCount = 0;\n  let evenStr = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(\"1\")) {\n      oddCount++;\n      oddStr += lst[i];", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxDubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxDubArraySum([-1, -2, -3]) == -3\n  */\nconst maxDubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums such that nums[i] is divisible by 3.\n  Example\n  nums = [2, 3, 4, 1, 2, 4]\n  nums = [-1, -2, -3]\n  nums = [1, 2]\n  nums = [2, 3]\n  nums = [2, 3, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]\n  nums = [2, 3, 4, 1, 2, 4, 5]", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const vill = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                vill[i] += capacity;\n            }\n        }\n    }\n    \n    return vill.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill2 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const vill = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                vill[i] += capacity;\n            }\n        }\n    }\n    \n    return vill.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill3 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const vill = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                vill[i] += capacity;\n            }\n        }\n    }\n    \n    return vill.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill4 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const vill = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                vill[i] += capacity;\n            }\n        }\n    }\n    \n    return vill.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill5 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const vill = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                vill[i] += capacity;\n            }\n        }\n    }\n    \n    return vill.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  You are given a rectangular grid of wells. Each ", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let sortedArray = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === 1) {\n      sortedArray.push(i);\n    }\n  }\n  return sortedArray;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let sortedArray = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === 1) {\n      sortedArray.push(i);\n    }\n  }\n  return sortedArray;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let sortedArray = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === 1) {\n      sortedArray.push(i);\n    }\n  }\n  return sortedArray;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let sortedArray = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === 1) {\n      sortedArray.push(i);\n    }\n  }\n  return sortedArray;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let sortedArray = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === 1) {\n      sortedArray.push(i);\n    }\n  }\n  return sortedArray;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let sortedArray = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === 1) {\n      sortedArray.push(i);\n    }\n  }\n  return sortedArray;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let sortedArray = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === 1) {\n      sortedArray.push(i);\n    }\n  }\n  return sortedArray;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let sortedArray = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === 1) {\n      sortedArray.push(i);\n    }\n  }\n  return sortedArray;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let sortedArray = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === 1) {\n      sortedArray.push(i);\n    }\n  }\n  return sortedArray;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let sortedArray = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === 1) {\n      sortedArray.push(i);\n    }\n  }\n  return sortedArray;\n};\n\n/*\n  In this K", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  let words = [];\n  let words = s.split(\" \");\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let temp = \"\";\n  let temp2 = \"\";\n  let temp3 = \"\";\n  let temp4 = \"\";\n  let temp5 = \"\";\n  let temp6 = \"\";\n  let temp7 = \"\";\n  let temp8 = \"\";\n  let temp9 = \"\";\n  let temp10 = \"\";\n  let temp11 = \"\";\n  let temp12 = \"\";\n  let temp13 = \"\";\n  let temp14 = \"\";\n  let temp15 = \"\";\n  let temp16 = \"\";\n  let temp17 = \"\";\n  let temp18 = \"\";\n  let temp19 = \"\";\n  let temp20 = \"\";\n  let temp21 = \"\";\n  let temp22 = \"\";\n  let temp23 = \"\";\n  let temp24 = \"\";\n  let temp25 = \"\";\n  let temp26 = \"\";\n  let temp27 = \"\";\n  let temp28 = \"\";\n  let temp29 = \"\";\n  let temp30 = \"\";\n  let temp31 = \"\";\n  let temp32 = \"\";\n  let temp33 = \"\";\n  let temp34 = \"\";\n  let temp35 = \"\";\n  let temp36 = \"\";\n  let temp37 = \"\";\n  let temp38 = \"\";\n  let temp39 = \"\";\n  let temp40 = \"\";\n  let temp41 = \"\";\n  let temp42 = \"\";\n  let temp43 = \"\";\n  let temp44 = \"\";\n  let temp45 = \"\";\n  let temp46 = \"\";\n  let temp47 = \"\";\n  let temp48 = \"\";\n  let temp49 = \"\";\n  let temp50 = \"\";\n  let temp51 = \"\";\n  let temp52 = \"\";\n  let temp53 = \"\";\n  let temp54 = \"\";\n  let temp55 = \"\";\n  let temp56 = \"\";\n  let temp57 = \"\";\n  let temp58 = \"\";\n  let temp59 = \"\";\n  let temp60 = \"\";\n  let temp61 = \"\";\n  let temp62 = \"\";\n  let temp63 = \"\";\n  let temp64 = \"\";\n  let temp65 = \"\";\n  let temp66 = \"\";\n  let temp67 = \"\";\n  let temp68 = \"\";\n  let temp69 = \"\";\n  let temp70 = \"\";\n  let temp71 = \"\";\n  let temp72 = \"\";\n  let temp73 = \"\";\n  let temp74 = \"\";\n  let temp75 = \"\";\n  let temp76 = \"\";\n  let temp77 = \"\";\n  let temp78 = \"\";\n  let temp79 = \"\";\n  let temp80 = \"\";\n  let temp81 = \"\";\n  let temp82 = \"\";\n  let temp83 = \"\";\n  let temp84 = \"\";\n  let temp85 = \"\";\n  let temp86 = \"\";\n  let temp87 = \"\";\n  let temp88 = \"\";\n  let temp89 = \"\";\n  let temp90 = \"\";\n  let temp91 = \"\";\n  let temp92 = \"\";\n  let temp93 = \"\";\n  let temp94 = \"\";\n  let temp95 = \"\";\n  let temp96 = \"\";\n  let temp97 = \"\";\n  let temp98 = \"\";\n  let temp99 = \"\";\n  let temp100 = \"\";\n  let temp101 = \"\";\n  let temp102 = \"\";\n  let temp103 = \"\";\n  let temp104 = \"\";\n  let temp105 = \"\";\n  let temp106 = \"\";\n  let temp107 = \"\";\n  let temp108 = \"\";\n  let temp109 = \"\";\n  let temp110 = \"\";\n  let temp111 = \"\";\n  let temp112 = \"\";\n  let temp113 = \"\";\n  let temp114 = \"\";\n  let temp115 = \"\";\n  let temp116 = \"\";\n  let temp117 = \"\";\n  let temp118 = \"\";\n  let temp119 = \"\";\n  let temp120 = \"\";\n  let temp121 = \"\";\n  let temp122 = \"\";\n  let temp123 = \"\";\n  let temp124 = \"\";\n  let temp125 = \"\";\n  let temp126 = \"\";\n  let temp127 = \"\";\n  let temp128 = \"\";\n  let temp129 = \"\";\n  let temp130 = \"\";\n  let temp131 = \"\";\n  let temp132 = \"\";\n  let temp133 = \"\";\n  let temp134 = \"\";\n  let temp135 = \"\";\n  let temp136 = \"\";\n  let temp137 = \"\";\n  let temp138 = \"\";\n  let temp139 = \"\";\n  let temp140 = \"\";\n  let temp141 = \"\";\n  let temp142 = \"\";\n  let temp143 = \"\";\n  let temp144 = \"\";\n  let temp145 = \"\";\n  let temp146 = \"\";\n  let temp147 = \"\";\n  let temp148 = \"\";\n  let temp149 = \"\";\n  let temp150 = \"\";\n  let temp151 = \"\";\n  let temp152 = \"\";\n  let temp153 = \"\";\n  let temp154 = \"\";\n  let temp155 = \"\";\n  let temp156 = \"\";\n  let temp157 = \"\";\n  let temp158 = \"\";\n  let temp159 = \"\";\n  let temp160 = \"\";\n  let temp161 = \"\";\n  let temp162 = \"\";\n  let temp163 = \"\";\n  let temp164 = \"\";\n  let temp165 = \"\";\n  let temp166 = \"\";\n  let temp167 = \"\";\n  let temp168 = \"\";\n  let temp169 = \"\";\n  let temp170 = \"\";\n  let temp171 = \"\";\n  let temp172 = \"\";\n  let temp173 = \"\";\n  let temp174 = \"\";\n  let temp175 = \"\";\n  let temp176 = \"\";\n  let temp177 = \"\";\n  let temp178 = \"\";\n  let temp179 = \"\";\n  let temp180 = \"\";\n  let temp181 = \"\";\n  let temp182 = \"\";\n  let temp183 = \"\";\n  let temp184 = \"\";\n  let temp185 = \"\";\n  let temp186 = \"\";\n  let temp187 = \"\";\n  let temp188 = \"\";\n  let temp189 = \"\";\n  let temp190 = \"\";\n  let temp191 = \"\";\n  let temp192 = \"\";\n  let temp193 = \"\";\n  let temp194 = \"\";\n  let temp195 = \"\";\n  let temp196 = \"\";\n  let temp197 = \"\";\n  let temp198 = \"\";\n  let temp199 = \"\";\n  let temp200 = \"\";\n  let temp201 = \"\";\n  let temp202 = \"\";\n  let temp203 = \"\";\n  let temp204 = \"\";\n  let temp205 = \"\";\n  let temp206 = \"\";\n  let temp207 = \"\";\n  let temp208 = \"\";\n  let temp209 = \"\";\n  let temp210 = \"\";\n  let temp211 = \"\";\n  let temp212 = \"\";\n  let temp213 = \"\";\n  let temp214 = \"\";\n  let temp215 = \"\";\n  let temp216 = \"\";\n  let temp217 = \"\";\n  let temp218 = \"\";\n  let temp219 = \"\";\n  let temp220 = \"\";\n  let temp221 = \"\";\n  let temp222 = \"\";\n  let temp223 = \"\";\n  let temp224 = \"\";\n  let temp225 = \"\";\n  let temp226 = \"\";\n  let temp227 = \"\";\n  let temp228 = \"\";\n  let temp229 = \"\";\n  let temp230 = \"\";\n  let temp231 = \"\";\n  let temp232 = \"\";\n  let temp233 = \"\";\n  let temp234 = \"\";\n  let temp235 = \"\";\n  let temp236 = \"\";\n  let temp237 = \"\";\n  let temp238 = \"\";\n  let temp239 = \"\";\n  let temp240 = \"\";\n  let temp241 = \"\";\n  let temp242 = \"\";\n  let temp243 = \"\";\n  let temp244 = \"\";\n  let temp245 = \"\";\n  let temp246 = \"\";\n  let temp247 = \"\";\n  let ", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n  let vowels = \"\";\n  let vowelsArray = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex1 = 0;\n  let vowelsArrayLength1 = vowelsArray.length;\n  let vowelsArrayIndex2 = 0;\n  let vowelsArrayLength2 = vowelsArray.length;\n  let vowelsArrayIndex3 = 0;\n  let vowelsArrayLength3 = vowelsArray.length;\n  let vowelsArrayIndex4 = 0;\n  let vowelsArrayLength4 = vowelsArray.length;\n  let vowelsArrayIndex5 = 0;\n  let vowelsArrayLength5 = vowelsArray.length;\n  let vowelsArrayIndex6 = 0;\n  let vowelsArrayLength6 = vowelsArray.length;\n  let vowelsArrayIndex7 = 0;\n  let vowelsArrayLength7 = vowelsArray.length;\n  let vowelsArrayIndex8 = 0;\n  let vowelsArrayLength8 = vowelsArray.length;\n  let vowelsArrayIndex9 = 0;\n  let vowelsArrayLength9 = vowelsArray.length;\n  let vowelsArrayIndex10 = 0;\n  let vowelsArrayLength10 = vowelsArray.length;\n  let vowelsArrayIndex11 = 0;\n  let vowelsArrayLength11 = vowelsArray.length;\n  let vowelsArrayIndex12 = 0;\n  let vowelsArrayLength12 = vowelsArray.length;\n  let vowelsArrayIndex13 = 0;\n  let vowelsArrayLength13 = vowelsArray.length;\n  let vowelsArrayIndex14 = 0;\n  let vowelsArrayLength14 = vowelsArray.length;\n  let vowelsArrayIndex15 = 0;\n  let vowelsArrayLength15 = vowelsArray.length;\n  let vowelsArrayIndex16 = 0;\n  let vowelsArrayLength16 = vowelsArray.length;\n  let vowelsArrayIndex17 = 0;\n  let vowelsArrayLength17 = vowelsArray.length;\n  let vowelsArrayIndex18 = 0;\n  let vowelsArrayLength18 = vowelsArray.length;\n  let vowelsArrayIndex19 = 0;\n  let vowelsArrayLength19 = vowelsArray.length;\n  let vowelsArrayIndex20 = 0;\n  let vowelsArrayLength20 = vowelsArray.length;\n  let vowelsArrayIndex21 = 0;\n  let vowelsArrayLength21 = vowelsArray.length;\n  let vowelsArrayIndex22 = 0;\n  let vowelsArrayLength22 = vowelsArray.length;\n  let vowelsArrayIndex23 = 0;\n  let vowelsArrayLength23 = vowelsArray.length;\n  let vowelsArrayIndex24 = 0;\n  let vowelsArrayLength24 = vowelsArray.length;\n  let vowelsArrayIndex25 = 0;\n  let vowelsArrayLength25 = vowelsArray.length;\n  let vowelsArrayIndex26 = 0;\n  let vowelsArrayLength26 = vowelsArray.length;\n  let vowelsArrayIndex27 = 0;\n  let vowelsArrayLength27 = vowelsArray.length;\n  let vowelsArrayIndex28 = 0;\n  let vowelsArrayLength28 = vowelsArray.length;\n  let vowelsArrayIndex29 = 0;\n  let vowelsArrayLength29 = vowelsArray.length;\n  let vowelsArrayIndex30 = 0;\n  let vowelsArrayLength30 = vowelsArray.length;\n  let vowelsArrayIndex31 = 0;\n  let vowelsArrayLength31 = vowelsArray.length;\n  let vowelsArrayIndex32 = 0;\n  let vowelsArrayLength32 = vowelsArray.length;\n  let vowelsArrayIndex33 = 0;\n  let vowelsArrayLength33 = vowelsArray.length;\n  let vowelsArrayIndex34 = 0;\n  let vowelsArrayLength34 = vowelsArray.length;\n  let vowelsArrayIndex35 = 0;\n  let vowelsArrayLength35 = vowelsArray.length;\n  let vowelsArrayIndex36 = 0;\n  let vowelsArrayLength36 = vowelsArray.length;\n  let vowelsArrayIndex37 = 0;\n  let vowelsArrayLength37 = vowelsArray.length;\n  let vowelsArrayIndex38 = 0;\n  let vowelsArrayLength38 = vowelsArray.length;\n  let vowelsArrayIndex39 = 0;\n  let vowelsArrayLength39 = vowelsArray.length;\n  let vowelsArrayIndex40 = 0;\n  let vowelsArrayLength40 = vowelsArray.length;\n  let vowelsArrayIndex41 = 0;\n  let vowelsArrayLength41 = vowelsArray.length;\n  let vowelsArrayIndex42 = 0;\n  let vowelsArrayLength42 = vowelsArray.length;\n  let vowelsArrayIndex43 = 0;\n  let vowelsArrayLength43 = vowelsArray.length;\n  let vowelsArrayIndex44 = 0;\n  let vowelsArrayLength44 = vowelsArray.length;\n  let vowelsArrayIndex45 = 0;\n  let vowelsArrayLength45 = vowelsArray.length;\n  let vowelsArrayIndex46 = 0;\n  let vowelsArrayLength46 = vowelsArray.length;\n  let vowelsArrayIndex47 = 0;\n  let vowelsArrayLength47 = vowelsArray.length;\n  let vowelsArrayIndex48 = 0;\n  let vowelsArrayLength48 = vowelsArray.length;\n  let vowelsArrayIndex49 = 0;\n  let vowelsArrayLength49 = vowelsArray.length;\n  let vowelsArrayIndex50 = 0;\n  let vowelsArrayLength50 = vowelsArray.length;\n  let vowelsArrayIndex51 = 0;\n  let vowelsArrayLength51 = vowelsArray.length;\n  let vowelsArrayIndex52 = 0;\n  let vowelsArrayLength52 = vowelsArray.length;\n  let vowelsArrayIndex53 = 0;\n  let vowelsArrayLength53 = vowelsArray.length;\n  let vowelsArrayIndex54 = 0;\n  let vowelsArrayLength54 = vowelsArray.length;\n  let vowelsArrayIndex55 = 0;\n  let vowelsArrayLength55 = vowelsArray.length;\n  let vowelsArrayIndex56 = 0;\n  let vowelsArrayLength56 = vowelsArray.length;\n  let vowelsArrayIndex57 = 0;\n  let vowelsArrayLength57 = vowelsArray.length;\n  let vowelsArrayIndex58 = 0;\n  let vowelsArrayLength58 = vowelsArray.length;\n  let vowelsArrayIndex59 = 0;\n  let vowelsArrayLength59 = vowelsArray.length;\n  let vowelsArrayIndex60 = 0;\n  let vowelsArrayLength60 = vowelsArray.length;\n  let vowelsArrayIndex61 = 0;\n  let vowelsArrayLength61 = vowelsArray.length;\n  let vowelsArrayIndex62 = 0;\n  let vowelsArrayLength62 = vowelsArray.length;\n  let vowelsArrayIndex63 = 0;\n  let vowelsArrayLength63 = vowelsArray.length;\n  let vowelsArrayIndex64 = 0;\n  let vowelsArrayLength64 = vowelsArray.length;\n  let vowelsArrayIndex65 = 0;\n  let vowelsArrayLength65 = vowelsArray.length;\n  let vowelsArrayIndex66 = 0;\n  let vowelsArrayLength66 = vowelsArray.length;\n  let vowelsArrayIndex67 = 0;\n  let vowelsArrayLength67 = vowelsArray.length;\n  let vowels", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  const stack = [lst[0]];\n  let result = 'No';\n  while (stack.length) {\n    const curr = stack.pop();\n    if (curr === '(') {\n      stack.push(curr);\n      continue;\n    }\n    if (curr === ')') {\n      stack.push(curr);\n      continue;\n    }\n    if (curr === '') {\n      result = 'Yes';\n      break;\n    }\n    if (curr === '(' || curr === ')') {\n      result = 'No';\n      break;\n    }\n  }\n  return result;\n};\n\n/* You are given a string S consisting of n characters. Your task is to find\n  the longest common prefix of the string S.\n  Return 'Yes' if there's a way to make a good prefix, and return\n  'No' otherwise.\n  Examples:\n  longestPrefix('abcabc') == 'abcabc'\n  longestPrefix('abcabcabc') == 'abcabcabc'\n  longestPrefix('abcabcabcabc') == 'abcabcabcabc'\n  longestPrefix('abcabcabcabcabc') == 'abcabcabcabcabc'\n  */\nconst longestPrefix = (str) => {\n  const stack = [];\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n      continue;\n    }\n    if (str[i] === ')') {\n      stack.push(str[i]);\n      continue;\n    }\n    if (str[i] === '') {\n      result = '';\n      break;\n    }\n    if (str[i] === '(' || str[i] === ')') {\n      result = '';\n      break;\n    }\n    if (str[i] === 'a' || str[i] === 'b' || str[i] === 'c' || str[i] === 'd' || str[i] === 'e' || str[i] === 'f' || str[i] === 'g' || str[i] === 'h' || str[i] === 'i' || str[i] === 'j' || str[i] === 'k' || str[i] === 'l' || str[i] ==='m' || str[i] === 'n' || str[i] === 'o' || str[i] === 'p' || str[i] === 'q' || str[i] === 'r' || str[i] ==='s' || str[i] === 't' || str[i] === 'u' || str[i] === 'v' || str[i] === 'w' || str[i] === 'x' || str[i] === 'y' || str[i] === 'z') {\n      result += str[i];\n      continue;\n    }\n    if (str[i] === 'A' || str[i] === 'B' || str[i] === 'C' || str[i] === 'D' || str[i] === 'E' || str[i] === 'F' || str[i] === 'G' || str[i] === 'H' || str[i] === 'I' || str[i] === 'J' || str[i] === 'K' || str[i] === 'L' || str[i] === 'M' || str[i] === 'N' || str[i] === 'O' || str[i] === 'P' || str[i] === 'Q' || str[i] === 'R' || str[i] === 'S' || str[i] === 'T' || str[i] === 'U' || str[i] === 'V' || str[i] === 'W' || str[i] === 'X' || str[i] === 'Y' || str[i] === 'Z') {\n      result += str[i];\n      continue;\n    }\n  }\n  if (stack.length!== 0) {\n    result = '';\n  }\n  return result;\n};\n\n/* You are given a string S consisting of n characters. Your task is to find\n  the longest common suffix of the string S.\n  Return 'Yes' if there's a way to make a good suffix, and return\n  'No' otherwise.\n  Examples:\n  longestSuffix('abcabc') == 'abcabc'\n  longestSuffix('abcabcabc') == 'abcabcabc'\n  longestSuffix('abcabcabcabc') == 'abcabcabcabc'\n  longestSuffix('abcabcabcabcabc') == 'abcabcabcabcabc'\n  */\nconst longestSuffix = (str) => {\n  const stack = [];\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n      continue;\n    }\n    if (str[i] === ')') {\n      stack.push(str[i]);\n      continue;\n    }\n    if (str[i] === '') {\n      result = '';\n      break;\n    }\n    if (str[i] === '(' || str[i] === ')') {\n      result = '';\n      break;\n    }\n    if (str[i] === 'a' || str[i] === 'b' || str[i] === 'c' || str[i] === 'd' || str[i] === 'e' || str[i] === 'f' || str[i] === 'g' || str[i] === 'h' || str[i] === 'i' || str[i] === 'j' || str[i] === 'k' || str[i] === 'l' || str[i] ==='m' || str[i] === 'n' || str[i] === 'o' || str[i] === 'p' || str[i] === 'q' || str[i] === 'r' || str[i] ==='s' || str[i] === 't' || str[i] === 'u' || str[i] === 'v' || str[i] === 'w' || str[i] === 'x' || str[i] === 'y' || str[i] === 'z') {\n      result += str[i];\n      continue;\n    }\n    if (str[i] === 'A' || str[i] === 'B' || str[i] === 'C' || str[i] === 'D' || str[i] === 'E' || str[i] === 'F' || str[i] === 'G' || str[i] === 'H' || str[i] === 'I' || str[i] === 'J' || str[i] === 'K' || str[i] === 'L' || str[i] === 'M' || str[i] === 'N' || str[i] === 'O' || str[i] === 'P' || str[i] === 'Q' || str[i] === 'R' || str[i] === 'S' || str[i] === 'T' || str[i] === 'U' || str[i] === 'V' || str[i] === 'W' || str[i] === 'X' || str[i] === 'Y' || str[i] === 'Z') {\n      result += str[i];\n      continue;\n    }\n  }\n  if (stack.length!== 0) {\n    result = '';\n  }\n  return result;\n};\n\n/* You are given a string S consisting of n characters. Your task is to find\n  the longest common prefix of the string S.\n  Return 'Yes' if there's a way to make a good prefix, and return\n  'No' otherwise.\n  Examples:\n  longestPrefix('abcabc') == 'abcabc'\n  longestPrefix('abcabcabc') == 'abcabcabc'\n  longestPrefix('abcabcabcabc') == 'abcabcabcabc'\n  longestPrefix('abcabcabcabcabc') == 'abcabcabcabcabc'\n  */\nconst longestCommonPrefix = (str) => {\n  const stack = [];\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n      continue;\n    }\n    if (str[i] === ')') {\n      stack.push(str[i]);\n      continue;\n    }\n    if (str[i] === '') {\n      result = '';\n      break;\n    }\n    if (str[i] === '(' || str[i] === ')') {\n      result = '';\n      break;\n    }\n    if (str[i] === 'a' || str[i] === 'b' || str[i] === 'c' || str[i] === 'd' || str[i] === 'e' || str[i] === 'f' || str[i] === 'g' || str[i] === 'h' || str[i] === 'i' || str[i] === 'j' || str[i] === 'k' || str[i] === 'l' || str[i] ==='m' || str[i] === 'n' || str[i] === 'o' || str[i] === 'p' || str[i] === 'q' || str[i] === '", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "<|endoftext|>/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n * Given a string, return its length in characters. If the string contains only digits, return 0.\n * If the string contains only letters, return 1.\n * If the string contains only whitespace, return 0.\n * If the string contains only punctuation, return 0.\n * If the string contains only uppercase letters, return 1.\n * If the string contains only lowercase letters, return 1.\n * If the string contains only digits and letters, return 2.\n * If the string contains only digits and whitespace, return 2.\n * If the string contains only digits and punctuation, return 2.\n * If the string contains only digits and uppercase letters, return 2.\n * If the string contains only digits and lowercase letters, return 2.\n * If the string contains only letters and whitespace, return 2.\n * If the string contains only letters and punctuation, return 2.\n * If the string contains only letters and uppercase letters, return 2.\n * If the string contains only letters and lowercase letters, return 2.\n */\nconst length = (str) => {\n  if (str === '') {\n    return 0\n  }\n  let len = str.length\n  if (str.length === 1) {\n    return len\n  }\n  if (str.length === 2) {\n    return len * 2\n  }\n  if (str.length === 3) {\n    return len * 3\n  }\n  if (str.length === 4) {\n    return len * 4\n  }\n  if (str.length === 5) {\n    return len * 5\n  }\n  if (str.length === 6) {\n    return len * 6\n  }\n  if (str.length === 7) {\n    return len * 7\n  }\n  if (str.length === 8) {\n    return len * 8\n  }\n  if (str.length === 9) {\n    return len * 9\n  }\n  if (str.length === 10) {\n    return len * 10\n  }\n  if (str.length === 11) {\n    return len * 11\n  }\n  if (str.length === 12) {\n    return len * 12\n  }\n  if (str.length === 13) {\n    return len * 13\n  }\n  if (str.length === 14) {\n    return len * 14\n  }\n  if (str.length === 15) {\n    return len * 15\n  }\n  if (str.length === 16) {\n    return len * 16\n  }\n  if (str.length === 17) {\n    return len * 17\n  }\n  if (str.length === 18) {\n    return len * 18\n  }\n  if (str.length === 19) {\n    return len * 19\n  }\n  if (str.length === 20) {\n    return len * 20\n  }\n  if (str.length === 21) {\n    return len * 21\n  }\n  if (str.length === 22) {\n    return len * 22\n  }\n  if (str.length === 23) {\n    return len * 23\n  }\n  if (str.length === 24) {\n    return len * 24\n  }\n  if (str.length === 25) {\n    return len * 25\n  }\n  if (str.length === 26) {\n    return len * 26\n  }\n  if (str.length === 27) {\n    return len * 27\n  }\n  if (str.length === 28) {\n    return len * 28\n  }\n  if (str.length === 29) {\n    return len * 29\n  }\n  if (str.length === 30) {\n    return len * 30\n  }\n  if (str.length === 31) {\n    return len * 31\n  }\n  if (str.length === 32) {\n    return len * 32\n  }\n  if (str.length === 33) {\n    return len * 33\n  }\n  if (str.length === 34) {\n    return len * 34\n  }\n  if (str.length === 35) {\n    return len * 35\n  }\n  if (str.length === 36) {\n    return len * 36\n  }\n  if (str.length === 37) {\n    return len * 37\n  }\n  if (str.length === 38) {\n    return len * 38\n  }\n  if (str.length === 39) {\n    return len * 39\n  }\n  if (str.length === 40) {\n    return len * 40\n  }\n  if (str.length === 41) {\n    return len * 41\n  }\n  if (str.length === 42) {\n    return len * 42\n  }\n  if (str.length === 43) {\n    return len * 43\n  }\n  if (str.length === 44) {\n    return len * 44\n  }\n  if (str.length === 45) {\n    return len * 45\n  }\n  if (str.length === 46) {\n    return len * 46\n  }\n  if (str.length === 47) {\n    return len * 47\n  }\n  if (str.length === 48) {\n    return len * 48\n  }\n  if (str.length === 49) {\n    return len * 49\n  }\n  if (str.length === 50) {\n    return len * 50\n  }\n  if (str.length === 51) {\n    return len * 51\n  }\n  if (str.length === 52) {\n    return len * 52\n  }\n  if (str.length === 53) {\n    return len * 53\n  }\n  if (str.length === 54) {\n    return len * 54\n  }\n  if (str.length === 55) {\n    return len * 55\n  }\n  if (str.length === 56) {\n    return len * 56\n  }\n  if (str.length === 57) {\n    return len * 57\n  }\n  if (str.length === 58) {\n    return len * 58\n  }\n  if (str.length === 59) {\n    return len * 59\n  }\n  if (str.length === 60) {\n    return len * 60\n  }\n  if (str.length === 61) {\n    return len * 61\n  }\n  if (str.length === 62) {\n    return len * 62\n  }\n  if (str.length === 63) {\n    return len * 63\n  }\n  if (str.length === 64) {\n    return len * 64\n  }\n  if (str.length === 65) {\n    return len * 65\n  }\n  if (str.length === 66) {\n    return len * 66\n  }\n  if (str.length === 67) {\n    return len * 67\n  }\n  if (str.length === 68) {\n    return len * 68\n  }\n  if (str.length === 69) {\n    return len * 69\n  }\n  if (str.length === 70) {\n    return len * 70\n  }\n  if (str.length === 71) {\n    return len * 71\n  }\n  if (str.length === 72) {\n    return len * 72\n  }\n  if (str.length === 73) {\n    return len * 73\n  }\n  if (str.length === 74) {\n    return len * 74\n  }\n  if (str.length === 75) {\n    return len * 75\n  }\n  if (str.length === 76) {\n    return len * 76\n  }\n  if (str.length === 77) {\n    return len * 77\n  }\n  if (str.length === 78) {\n    return len * 78\n  }\n  if (str.length === 79) {\n    return len * 79\n  }\n  if (str.length === 80) {\n    return len * 80\n  }\n  if (str.length === 81) {\n    return len * 81\n  }\n  if (str.length === 82) {\n    return len * 82\n  }\n  if (str.length === 83) {\n    return len * 83\n  }\n  if (str.length === 84) {\n    return len * 84\n  }\n  if (str.length === 85) {\n    return len * 85\n  }\n  if (str.length === 86) {\n    return len * 86\n  }\n  if (str.length === 87) {\n    return len * 87\n  }\n  if (str.length === 88) {\n    return len * 88\n  }\n  if (str.length === 89) {\n    return len * 89\n  }\n  if (str.length === 90) {\n    return len * 90\n  }\n  if (str.length === 91) {\n    return len * 91\n  }\n  if (str.length === 92) {\n    return len * 92\n  }\n  if (str.length === 93) {", "passed": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr.slice(maxIndex + 1, arr.length);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/78741/Java-solution-with-O(N)-complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = Number.MAX_VALUE;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  while (curSum < k) {\n    curSum = 0;\n    curIndex = 0;\n    while (curIndex < head.val) {\n      curSum += head.val;\n      curIndex++;\n    }\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n    curSum = 0;\n    curIndex = 0;\n    while (curIndex < head.val) {\n      curSum += head.val;\n      curIndex++;\n    }\n  }\n  return head.next;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/78741/Java-solution-with-O(N)-complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = Number.MAX_VALUE;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  while (curSum < k) {\n    curSum = 0;\n    curIndex = 0;\n    while (curIndex < head.val) {\n      curSum += head.val;\n      curIndex++;\n    }\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n    curSum = 0;\n    curIndex = 0;\n    while (curIndex < head.val) {\n      curSum += head.val;\n      curIndex++;\n    }\n  }\n  return head.next;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/78741/Java-solution-with-O(N)-complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = Number.MAX_VALUE;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  while (curSum < k) {\n    curSum = 0;\n    curIndex = 0;\n    while (curIndex < head.val) {\n      curSum += head.val;\n      curIndex++;\n    }\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n    curSum = 0;\n    curIndex = 0;\n    while (curIndex < head.val) {\n      curSum += head.val;\n      curIndex++;\n    }\n  }\n  return head.next;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/78741/Java-solution-with-O(N)-complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = Number.MAX_VALUE;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  while (curSum < k) {\n    curSum = 0;\n    curIndex = 0;\n    while (curIndex < head.val) {\n      curSum += head.val;\n      curIndex++;\n    }\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n    curSum = 0;\n    curIndex = 0;\n    while (curIndex < head.val) {\n      curSum += head.val;\n      curIndex++;\n    }\n  }\n  return head.next;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/78741/Java-solution-with-O(N)-complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = Number.MAX_VALUE;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  while (curSum < k) {\n    curSum = 0;\n    curIndex = 0;\n    while (curIndex < head.val) {\n      curSum += head.val;\n      curIndex++;\n    }\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n    curSum = 0;\n    curIndex = 0;\n    while (curIndex < head.val) {\n      curSum += head.val;\n      curIndex++;\n    }\n  }\n  return head.next;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/78741/Java-solution-with-O(N)-complexity\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = Number.MAX_VALUE;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  while (curSum < k) {\n    curSum = 0;\n    curIndex = 0;\n    while (curIndex < head.val) {\n      curSum += head.val;\n      curIndex++;\n    }\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n    curSum = 0;\n    curIndex = 0;\n    while (curIndex < head.val) {\n      curSum += head.val;\n      curIndex++;\n    }\n  }\n  return head.next;", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solktion;\n\n},{}],6:[function(require,module,exports){\n/*\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "passed": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  const res = [];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    } else {\n      res.push(sum);\n      sum = 0;\n    }\n  }\n  return res;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-finding-the-sum-of-two-digits-in-a-string\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-a-string/discuss/737/Java-Solution-for-find", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz = [collatz[0] * i, collatz[1] * i + 1];\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz2 = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz = [collatz[0] * i, collatz[1] * i + 3];\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz3 = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz = [collatz[0] * i, collatz[1] * i + 2];\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz4 = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz = [collatz[0] * i, collatz[1] * i + 3];\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz5 = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz = [collatz[0] * i, collatz[1] * i + 2];\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz6 = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz = [collatz[0] * i, collatz[1] * i + 3];\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) ", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  const dateObj = new Date(date);\n  const year = dateObj.getFullYear();\n  const month = dateObj.getMonth() + 1;\n  const day = dateObj.getDate();\n  const isValid = year >= 1980 && month <= 12 && day <= 31;\n  return isValid;\n};\n\n/*\n  Given a date string and an array of dates, this function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array is empty, the function returns an empty array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array, the function returns an array containing all the dates whose month is greater than or equal to the month in the given array and whose day is greater than or equal to the day in the given array.\n  If the given array contains more than one date whose month is greater than ", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word[0] === ',') {\n        result.push(word.substr(1));\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsNoSpaces = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word[0] === ',') {\n        result.push(word.substr(1));\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsNoSpaces2 = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word[0] === ',') {\n        result.push(word.substr(1));\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsNoSpaces3 = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word[0] === ',') {\n        result.push(word.substr(1));\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsNoSpaces4 = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word[0] === ',') {\n        result.push(word.substr(1));\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsNoSpaces5 = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word[0] === ',') {\n        result.push(word.substr(1));\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsNoSpaces6 = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word[0] === ',') {\n        result.push(word.substr(1));\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsNoSpaces7 = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word[0] === ',') {\n        result.push(word.substr(1));\n      } else {\n        result.push(word);\n      }\n    }\n", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  let isSorted = true\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let ", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 < end1 && start2 < end2) {\n    if (start1 < start2) {\n      if (end1 < end2) {\n        if (start2 > end2) {\n          return \"NO\";\n        }\n      }\n    }\n    if (start1 > end1) {\n      if (end1 > end2) {\n        return \"NO\";\n      }\n    }\n    if (start2 > end2) {\n      return \"NO\";\n    }\n  }\n  if (start1 > end1) {\n    if (end1 > end2) {\n      return \"NO\";\n    }\n  }\n  if (start2 > end2) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] boolean: true if intervals is a prime number\n  \n  Your task is to determine whether the intervals is a prime number.\n  Example, intervals = [(1, 3), (2, 4), (3, 5), (4, 6)]\n  intervals is a prime number\n  intervals = [(1, 3), (2, 4), (3, 5), (4, 6), (5, 6)]\n  intervals is not a prime number\n  intervals = [(1, 3), (2, 4), (3, 5), (4, 6), (5, 6), (6, 6)]\n  intervals is a prime number\n  intervals = [(1, 3), (2, 4), (3, 5), (4, 6), (5, 6), (6, 6), (7, 6)]\n  intervals is not a prime number\n  intervals = [(1, 3), (2, 4), (3, 5), (4, 6), (5, 6), (6, 6), (7, 6), (8, 6)]\n  intervals is a prime number\n  intervals = [(1, 3), (2, 4), (3, 5), (4, 6), (5, 6), (6, 6), (7, 6), (8, 6), (9, 6)]\n  intervals is not a prime number\n  intervals = [(1, 3), (2, 4), (3, 5), (4, 6), (5, 6), (6, 6), (7, 6), (8, 6), (9, 6), (10, 6)]\n  intervals is a prime number\n  intervals = [(1, 3), (2, 4), (3, 5), (4, 6), (5, 6), (6, 6), (7, 6), (8, 6), (9, 6), (10, 6), (11, 6), (12, 6), (13, 6), (14, 6), (15, 6), (16, 6), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, 6), (23, 6), (24, 6), (25, 6), (26, 6), (27, 6), (28, 6), (29, 6), (30, 6), (31, 6), (32, 6), (33, 6), (34, 6), (35, 6), (36, 6), (37, 6), (38, 6), (39, 6), (40, 6), (41, 6), (42, 6), (43, 6), (44, 6), (45, 6), (46, 6), (47, 6), (48, 6), (49, 6), (50, 6), (51, 6), (52, 6), (53, 6), (54, 6), (55, 6), (56, 6), (57, 6), (58, 6), (59, 6), (60, 6), (61, 6), (62, 6), (63, 6), (64, 6), (65, 6), (66, 6), (67, 6), (68, 6), (69, 6), (70, 6), (71, 6), (72, 6), (73, 6), (74, 6), (75, 6), (76, 6), (77, 6), (78, 6), (79, 6), (80, 6), (81, 6), (82, 6), (83, 6), (84, 6), (85, 6), (86, 6), (87, 6), (88, 6), (89, 6), (90, 6), (91, 6), (92, 6), (93, 6), (94, 6), (95, 6), (96, 6), (97, 6), (98, 6), (99, 6), (100, 6), (101, 6), (102, 6), (103, 6), (104, 6), (105, 6), (106, 6), (107, 6), (108, 6), (109, 6), (110, 6), (111, 6), (112, 6), (113, 6), (114, 6), (115, 6), (116, 6), (117, 6), (118, 6), (119, 6), (120, 6), (121, 6), (122, 6), (123, 6), (124, 6), (125, 6), (126, 6), (127, 6), (128, 6), (129, 6), (130, 6), (131, 6), (132, 6), (133, 6), (134, 6), (135, 6), (136, 6), (137, 6), (138, 6), (139, 6), (140, 6), (141, 6), (142, 6), (143, 6), (144, 6), (145, 6), (146, 6), (147, 6), (148, 6), (149, 6), (150, 6), (151, 6), (152, 6), (153, 6), (154, 6), (155, 6), (156, 6), (157, 6), (158, 6), (159, 6), (160, 6), (161, 6), (162, 6), (163, 6), (164, 6), (165, 6), (166, 6), (167, 6), (168, 6), (169, 6), (170, 6), (171, 6), (172, 6), (173, 6), (174, 6), (175, 6), (176, 6), (177, 6), (178, 6), (179, 6), (180, 6), (181, 6), (182, 6), (183, 6), (184, 6), (185, 6), (186, 6), (187, 6), (188, 6), (189, 6), (190, 6), (191, 6), (192, 6), (193, 6), (194, 6), (195, 6), (196, 6), (197, 6), (198, 6), (199, 6), (200, 6), (201, 6), (202, 6), (203, 6), (204, 6), (205, 6), (206, 6), (207, 6), (208, 6), (209, 6), (210, 6), (211, 6), (212, 6), (213, 6), (214, 6), (215, 6), (216, 6), (217, 6), (218, 6), (219, 6), (220, 6), (221, 6), (222, 6), (223, 6), (224, 6), (225, 6), (226, 6), (227, 6), (228, 6), (229, 6), (230, 6), (231, 6), (232, 6), (233, 6), (234, 6), (235, 6), (236, 6), (237, 6), (238, 6), (239, 6), (240, 6), (241, 6), (242, 6), (243, 6), (244, 6), (245, 6), (246, 6), (247, 6), (248, 6), (249, 6), (250, 6), (251, 6), (252, 6), (253, 6", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sign = 0;\n  let signs = arr.map(x => x * sign);\n  signs.sort((a, b) => a - b);\n  sign = signs.reduce((a, b) => a + b, 0);\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns2 = (arr) => {\n  let sign = 0;\n  let signs = arr.map(x => x * sign);\n  signs.sort((a, b) => a - b);\n  sign = signs.reduce((a, b) => a + b, 0);\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns3 = (arr) => {\n  let sign = 0;\n  let signs = arr.map(x => x * sign);\n  signs.sort((a, b) => a - b);\n  sign = signs.reduce((a, b) => a + b, 0);\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns4 = (arr) => {\n  let sign = 0;\n  let signs = arr.map(x => x * sign);\n  signs.sort((a, b) => a - b);\n  sign = signs.reduce((a, b) => a + b, 0);\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns5 = (arr) => {\n  let sign = 0;\n  let signs = arr.map(x => x * sign);\n  signs.sort((a, b) => a - b);\n  sign = signs.reduce((a, b) => a + b, 0);\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns6 = (arr) => {\n  let sign = 0;\n  let signs = arr.map(x => x * sign);\n  signs.sort((a, b) => a - b);\n  sign = signs.reduce((a, b) => a + b, 0);\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns7 = (arr) => {\n  let sign = 0;\n  let signs = arr.map(x => x * sign);\n  signs.sort((a, b) => a - b);\n  sign = signs.reduce((a, b) => a + b, 0);\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns8 = (arr) => {\n  let sign = 0;\n  let signs = arr.map(x => x * sign);\n  signs.sort((a, b) => a - b);\n  sign = signs.reduce((a, b) => a + b, 0);\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns9 = (arr) => {\n  let sign = 0;\n  let signs = arr.map(x => x * sign);\n  signs.sort((a, b) => a - b);\n  sign = signs.reduce((a, b) => a + b, 0);\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns10 = (arr) => {\n  let sign = 0;\n  let signs = arr.map(x => x * sign);\n  signs.sort((a, b) => a - b);\n  sign = signs.reduce((a, b) => a + b, 0);\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns11 = (arr) => {\n  let sign = 0;\n  let signs = arr.map(x => x * sign);\n  signs.sort((a, b) => a - b);\n  sign = signs.reduce((a, b) => a + b, 0);\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by ", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [numCells, numRows, numCols] = grid[0].length;\n  const [numValues, numValuesOnCells] = numCells * numRows * numCols;\n  const [numValuesInPath] = numValues - numValuesOnCells;\n  const [path] = createPath();\n  let minPath = [];\n  let minPathIndex = 0;\n  let minPathValues = [];\n  let minPathValuesInPath = 0;\n  let minPathValuesInPathIndex = 0;\n  let minPathValuesInPathValues = [];\n  let minPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValues = [];\n  let minPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValues = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValues = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValues = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathIndex = 0;\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPath = [];\n  let minPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesInPathValuesIn", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  let a = 1;\n  let b = 2;\n  let c = 3;\n  let d = 4;\n  let e = 5;\n  let f = 6;\n  let g = 7;\n  let h = 8;\n  let i = 9;\n  let j = 10;\n  let k = 11;\n  let l = 12;\n  let m = 13;\n  let n = 14;\n  let o = 15;\n  let p = 16;\n  let q = 17;\n  let r = 18;\n  let s = 19;\n  let t = 20;\n  let u = 21;\n  let v = 22;\n  let w = 23;\n  let x = 24;\n  let y = 25;\n  let z = 26;\n  let tt = 27;\n  let uu = 28;\n  let vv = 29;\n  let ww = 30;\n  let wwww = 31;\n  let xx = 32;\n  let yy = 33;\n  let zz = 34;\n  let ttt = 35;\n  let uuu = 36;\n  let vvv = 37;\n  let wwww = 38;\n  let wwwwwwww = 39;\n  let xxx = 40;\n  let yyy = 41;\n  let zzz = 42;\n  let tttt = 43;\n  let uuuu = 44;\n  let vvvv = 45;\n  let wwwwwwww = 46;\n  let wwwwwwwwwwww = 47;\n  let xxx = 48;\n  let yyy = 49;\n  let zzz = 50;\n  let tttt = 51;\n  let uuuuu = 52;\n  let vvvv = 53;\n  let wwwwwwwwww = 54;\n  let wwwwwwwwwwww = 55;\n  let xxx = 56;\n  let yyy = 57;\n  let zzz = 58;\n  let tttt = 59;\n  let uuuuuu = 60;\n  let vvvv = 61;\n  let wwwwwwwwww = 62;\n  let wwwwwwwwwwww = 63;\n  let xxx = 64;\n  let yyy = 65;\n  let zzz = 66;\n  let tttt = 67;\n  let uuuuuuu = 68;\n  let vvvv = 69;\n  let wwwwwwwwww = 70;\n  let wwwwwwwwwwww = 71;\n  let xxx = 72;\n  let yyy = 73;\n  let zzz = 74;\n  let tttt = 75;\n  let uuuuuuu = 76;\n  let vvvv = 77;\n  let wwwwwwwwww = 78;\n  let wwwwwwwwwwww = 79;\n  let xxx = 80;\n  let yyy = 81;\n  let zzz = 82;\n  let tttt = 83;\n  let uuuuuuuu = 84;\n  let vvvv = 85;\n  let wwwwwwwwwwww = 86;\n  let wwwwwwwwwwww = 87;\n  let xxx = 88;\n  let yyy = 89;\n  let zzz = 90;\n  let tttt = 91;\n  let uuuuuuuu = 92;\n  let vvvv = 93;\n  let wwwwwwwwwwww = 94;\n  let wwwwwwwwwwww = 95;\n  let xxx = 96;\n  let yyy = 97;\n  let zzz = 98;\n  let tttt = 99;\n  let uuuuuuuu = 100;\n  let vvvv = 101;\n  let wwwwwwwwwwww = 102;\n  let wwwwwwwwwwww = 103;\n  let xxx = 104;\n  let yyy = 105;\n  let zzz = 106;\n  let tttt = 107;\n  let uuuuuuuuu = 108;\n  let vvvv = 109;\n  let wwwwwwwwwwww = 110;\n  let wwwwwwwwwwww = 111;\n  let xxx = 112;\n  let yyy = 113;\n  let zzz = 114;\n  let tttt = 115;\n  let uuuuuuuuuu = 116;\n  let vvvv = 117;\n  let wwwwwwwwwwww = 118;\n  let wwwwwwwwwwww = 119;\n  let xxx = 120;\n  let yyy = 121;\n  let zzz = 122;\n  let tttt = 123;\n  let uuuuuuuuuu = 124;\n  let vvvv = 125;\n  let wwwwwwwwwwww = 126;\n  let wwwwwwwwwwww = 127;\n  let xxx = 128;\n  let yyy = 129;\n  let zzz = 130;\n  let tttt = 131;\n  let uuuuuuuuuu = 132;\n  let vvvv = 133;\n  let wwwwwwwwwwww = 134;\n  let wwwwwwwwwwww = 135;\n  let xxx = 136;\n  let yyy = 137;\n  let zzz = 138;\n  let tttt = 139;\n  let uuuuuuuuuu = 140;\n  let vvvv = 141;\n  let wwwwwwwwwwww = 142;\n  let wwwwwwwwwwww = 143;\n  let xxx = 144;\n  let yyy = 145;\n  let zzz = 146;\n  let tttt = 147;\n  let uuuuuuuuuu = 148;\n  let vvvv = 149;\n  let wwwwwwwwww = 149;\n  let wwwwwwwwwwww = 150;\n  let xxx = 151;\n  let yyy = 152;\n  let zzz = 153;\n  let tttt = 154;\n  let uuuuuuuuuu = 155;\n  let vvvv = 156;\n  let wwwwwwwwwwww = 157;\n  let wwwwwwwwwwww = 158;\n  let xxx = 159;\n  let yyy = 160;\n  let zzz = 161;\n  let tttt = 162;\n  let uuuuuuuuuu = 163;\n  let vvvv = 164;\n  let wwwwwwwwwwww = 165;\n  let wwwwwwwwwwww = 166;\n  let xxx = 167;\n  let yyy = 168;\n  let zzz = 169;\n  let tttt = 170;\n  let uuuuuuuuuu = 171;\n  let vvvv = 172;\n  let wwwwwwwwwwww = 173;\n  let wwwwwwwwwwww = 174;\n  let xxx = 175;\n  let yyy = 176;\n  let zzz = 177;\n  let tttt = 178;\n  let uuuuuuuuuu = 179;\n  let vvvv = 180;\n  let wwwwwwwwwwww = 181;\n  let wwwwwwwwwwww = 182;\n  let xxx = 183;\n  let yyy = 184;\n  let zzz = 185;\n  let tttt = 186;\n  let uuuuuuuuuu = 187;\n  let vvvv = 188;\n", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res += i;\n    }\n  }\n  return res;\n};\n\n/*Given a positive integer n, return the product of the even diglts.\n  Return 0 if all diglts are odd.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst even_diglts = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res *= i;\n    }\n  }\n  return res;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor of n.\n  For example:\n  prime_factors(1)  == 1\n  prime_factors(4)  == 0\n  prime_factors(235) == 15\n  */\nconst prime_factors = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res *= i;\n      if (n % i === 0) {\n        res += 1;\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor of n.\n  For example:\n  prime_factors(1)  == 1\n  prime_factors(4)  == 0\n  prime_factors(235) == 15\n  */\nconst divisible_prime_factors = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res *= i;\n      if (n % i === 0) {\n        res += 1;\n      }\n    }\n  }\n  return res % 2 === 0;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor of n.\n  For example:\n  prime_factors(1)  == 1\n  prime_factors(4)  == 0\n  prime_factors(235) == 15\n  */\nconst divisible_prime_factors_even = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res *= i;\n      if (n % i === 0) {\n        res += 1;\n      }\n    }\n  }\n  return res % 2 === 0;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor of n.\n  For example:\n  prime_factors(1)  == 1\n  prime_factors(4)  == 0\n  prime_factors(235) == 15\n  */\nconst divisible_prime_factors_odd = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res *= i;\n      if (n % i === 0) {\n        res += 1;\n      }\n    }\n  }\n  return res % 2 === 0;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor of n.\n  For example:\n  prime_factors(1)  == 1\n  prime_factors(4)  == 0\n  prime_factors(235) == 15\n  */\nconst divisible_prime_factors_prime = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res *= i;\n      if (n % i === 0) {\n        res += 1;\n      }\n    }\n  }\n  return res % 2 === 0;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor of n.\n  For example:\n  prime_factors(1)  == 1\n  prime_factors(4)  == 0\n  prime_factors(235) == 15\n  */\nconst divisible_prime_factors_prime_odd = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res *= i;\n      if (n % i === 0) {\n        res += 1;\n      }\n    }\n  }\n  return res % 2 === 0;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor of n.\n  For example:\n  prime_factors(1)  == 1\n  prime_factors(4)  == 0\n  prime_factors(235) == 15\n  */\nconst divisible_prime_factors_prime_prime = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res *= i;\n      if (n % i === 0) {\n        res += 1;\n      }\n    }\n  }\n  return res % 2 === 0;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor of n.\n  For example:\n  prime_factors(1)  == 1\n  prime_factors(4)  == 0\n  prime_factors(235) == 15\n  */\nconst divisible_prime_factors_prime_prime_odd = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res *= i;\n      if (n % i === 0) {\n        res += 1;\n      }\n    }\n  }\n  return res % 2 === 0;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor of n.\n  For example:\n  prime_factors(1)  == 1\n  prime_factors(4)  == 0\n  prime_factors(235) == 15\n  */\nconst divisible_prime_factors_prime_prime_prime = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res *= i;\n      if (n % i === 0) {\n        res += 1;\n      }\n    }\n  }\n  return res % 2 === 0;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor of n.\n  For example:\n  prime_factors(1)  == 1\n  prime_factors(4)  == 0\n  prime_factors(235) == 15\n  */\nconst divisible_prime_factors_prime_prime_prime_odd = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res *= i;\n      if (n % i === 0) {\n        res += 1;\n      }\n    }\n  }\n  return res % 2 === 0;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor of n.\n  For example:\n  prime_factors(1)  == 1\n  prime_factors(4)  == 0\n  prime_factors(235) == 15\n  */\nconst divisible_prime_factors_prime_prime_prime_prime = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res *= i;\n      if (n % i === 0) {\n        res += 1;\n      }\n    }\n  }\n  return res % 2 === 0;\n};\n\n/*Given a positive integer n, return the product of the prime factors.\n  Return 0 if n is divisible by any prime factor of n.\n  For example:\n  prime_factors(1)  == 1\n  prime_factors(4)  == 0\n  prime_factors(235) == 15\n  */\n", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = [];\n  let current;\n  let currentIsNfsted = true;\n\n  for (let i = 0; i < string.length; i++) {\n    current = string[i];\n\n    if (current === '[') {\n      stack.push(current);\n    } else if (current === ']') {\n      if (stack.length > 0) {\n        currentIsNfsted = stack.pop() === '[';\n      }\n    } else if (current === '[' || current === ']') {\n      if (stack.length > 0) {\n        currentIsNfsted = stack.pop() === '[' || stack.pop() === '[';\n      }\n    }\n  }\n\n  return currentIsNfsted;\n};\n\n/**\n * Given a string, check if it is valid to form a nested bracket structure.\n * Valid nested bracket structures are of the form:\n *\n * [\n *   [\n *     [\n *       [\n *         [\n *           [\n *             [\n *               [\n *                 [\n *                   [\n *                     [\n *                       [\n *                         [\n *                           [\n *                             [\n *                               [\n *                                 [\n *                                   [\n *                                     [\n *                                       [\n *                                         [\n *                                           [\n *                                             [\n *                                               [\n *                                                 [\n *                                                   [\n *                                                     [\n *                                                       [\n *                                                         [\n *                                                           [\n *                                                             [\n *                                                               [\n *                                                                 [\n *                                                                   [\n *                                                                     [\n *                                                                        [\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                       ]\n *                                                                ", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers.\n  You are also given an integer C.\n  You are also given an integer K (1 <= K <= 10^5).\n  You are also given an integer N (1 <= N <= 10^5).\n  You are also given an integer M (1 <= M <= 10^5).\n  You are also given an integer T (1 <= T <= 10^5).\n  You are also given an integer O (1 <= O <= 10^5).\n  You are also given an integer P (1 <= P <= 10^5).\n  You are also given an integer H (1 <= H <= 10^5).\n  You are also given an integer L (1 <= L <= 10^5).\n  You are also given an integer S (1 <= S <= 10^5).\n  You are also given an integer R (1 <= R <= 10^5).\n  You are also given an integer T (1 <= T <= 10^5).\n  You are also given an integer V (1 <= V <= 10^5).\n  You are also given an integer W (1 <= W <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer Z (1 <= Z <= 10^5).\n  You are also given an integer X (1 <= X <= 10^5).\n  You are also given an integer Y (1 <= Y <= 10^5).\n  You are also given an integer ", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \" \" ||\n    lastChar === \"-\" ||\n    lastChar === \"_\" ||\n    lastChar === \"$\" ||\n    lastChar === \"%\" ||\n    lastChar === \"^\" ||\n    lastChar === \"&\" ||\n    lastChar === \"*\" ||\n    lastChar === \"(\";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsDigit(\"apple pie\") ➞ false\n  chefkIfLastCharIsDigit(\"apple pi e\") ➞ true\n  chefkIfLastCharIsDigit(\"apple pi e \") ➞ false\n  chefkIfLastCharIsDigit(\"\") ➞ false\n  */\nconst chefkIfLastCharIsDigit = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \".\" ||\n    lastChar === \"-\" ||\n    lastChar === \"_\" ||\n    lastChar === \"$\" ||\n    lastChar === \"%\" ||\n    lastChar === \"^\" ||\n    lastChar === \"&\" ||\n    lastChar === \"*\" ||\n    lastChar === \"(\";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsLetterOrNumber(\"\") ➞ false\n  chefkIfLastCharIsLetterOrNumber(\"apple pie\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie \") ➞ false\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e\") ➞ false\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e \") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e e\") ➞ true\n  chefkIfLastCharIsLetterOrNumber(\"apple pie e e e e e e e e e e e e\") ➞ true\n  chefkIfLastChar", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] > arr[j]) {\n      j = i - 1;\n    } else {\n      i = i - 1;\n    }\n  }\n  return j;\n};\n\n/*\n  Given an array of integers nums, return an array containing all unique\n  pairs of adjacent elements. The order of the pairs is arbitrary.\n\n  Example:\n  uniquePairs([1,2,2,4,5,6]) = [[1,2],[2,4],[5,6]]\n*/\nconst uniquePairs = (nums) => {\n  let pairs = [];\n  let i = nums.length - 1;\n  let j = nums.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (nums[i] === nums[j]) {\n      pairs.push([nums[i], nums[j]]);\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i - 1;\n      j = j - 1;\n    }\n  }\n  return pairs;\n};\n\n/*\n  Given an array of integers nums, return an array containing all unique\n  triplets of adjacent elements. The order of the triplets is arbitrary.\n\n  Example:\n  uniqueTriplets([1,2,2,4,5,6]) = [[1,2],[2,4],[5,6]]\n*/\nconst uniqueTriplets = (nums) => {\n  let triples = [];\n  let i = nums.length - 1;\n  let j = nums.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (nums[i] === nums[j] && nums[i] === nums[j + 1]) {\n      triples.push([nums[i], nums[j], nums[j + 1]]);\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i - 1;\n      j = j - 1;\n    }\n  }\n  return triples;\n};\n\n/*\n  Given an array of integers nums, return an array containing all unique\n  quadrants of adjacent elements. The order of the quadrants is arbitrary.\n\n  Example:\n  uniqueQuadrants([1,2,2,4,5,6]) = [[1,2],[2,4],[5,6]]\n*/\nconst uniqueQuadrants = (nums) => {\n  let quadrants = [];\n  let i = nums.length - 1;\n  let j = nums.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (nums[i] === nums[j] && nums[i] === nums[j + 1] && nums[i] === nums[j + 2]) {\n      quadrants.push([nums[i], nums[j], nums[j + 1]]);\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i - 1;\n      j = j - 1;\n    }\n  }\n  return quadrants;\n};\n\n/*\n  Given an array of integers nums, return an array containing all unique\n  sets of adjacent elements. The order of the sets is arbitrary.\n\n  Example:\n  uniqueSets([1,2,2,4,5,6]) = [[1,2],[2,4],[5,6]]\n*/\nconst uniqueSets = (nums) => {\n  let sets = [];\n  let i = nums.length - 1;\n  let j = nums.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (nums[i] === nums[j] && nums[i] === nums[j + 1] && nums[i] === nums[j + 2]) {\n      sets.push([nums[i], nums[j], nums[j + 1]]);\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i - 1;\n      j = j - 1;\n    }\n  }\n  return sets;\n};\n\n/*\n  Given an array of integers nums, return an array containing all unique\n  sets of adjacent elements. The order of the sets is arbitrary.\n\n  Example:\n  uniqueSets([1,2,2,4,5,6]) = [[1,2],[2,4],[5,6]]\n*/\nconst uniqueSetsNoDuplicates = (nums) => {\n  let sets = [];\n  let i = nums.length - 1;\n  let j = nums.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (nums[i] === nums[j] && nums[i] === nums[j + 1] && nums[i] === nums[j + 2]) {\n      sets.push([nums[i], nums[j], nums[j + 1]]);\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i - 1;\n      j = j - 1;\n    }\n  }\n  return sets;\n};\n\n/*\n  Given an array of integers nums, return an array containing all unique\n  sets of adjacent elements. The order of the sets is arbitrary.\n\n  Example:\n  uniqueSets([1,2,2,4,5,6]) = [[1,2],[2,4],[5,6]]\n*/\nconst uniqueSetsNoDuplicatesNoDuplicates = (nums) => {\n  let sets = [];\n  let i = nums.length - 1;\n  let j = nums.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (nums[i] === nums[j] && nums[i] === nums[j + 1] && nums[i] === nums[j + 2]) {\n      sets.push([nums[i], nums[j], nums[j + 1]]);\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i - 1;\n      j = j - 1;\n    }\n  }\n  return sets;\n};\n\n/*\n  Given an array of integers nums, return an array containing all unique\n  sets of adjacent elements. The order of the sets is arbitrary.\n\n  Example:\n  uniqueSets([1,2,2,4,5,6]) = [[1,2],[2,4],[5,6]]\n*/\nconst uniqueSetsNoDuplicatesNoDuplicatesNoDuplicates = (nums) => {\n  let sets = [];\n  let i = nums.length - 1;\n  let j = nums.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (nums[i] === nums[j] && nums[i] === nums[j + 1] && nums[i] === nums[j + 2]) {\n      sets.push([nums[i], nums[j], nums[j + 1]]);\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i - 1;\n      j = j - 1;\n    }\n  }\n  return sets;\n};\n\n/*\n  Given an array of integers nums, return an array containing all unique\n  sets of adjacent elements. The order of the sets is arbitrary.\n\n  Example:\n  uniqueSets([1,2,2,4,5,6]) = [[1,2],[2,4],[5,6]]\n*/\nconst uniqueSetsNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (nums) => {\n  let sets = [];\n  let i = nums.length - 1;\n  let j = nums.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (nums[i] === nums[j] && nums[i] === nums[j + 1] && nums[i] === nums[j + 2]) {\n      sets.push([nums[i], nums[j], nums[j + 1]]);\n      i = i - 1;\n      j = j - 1;\n    } else {\n      i = i - 1;\n      j = j - 1;\n    }\n  }\n  return sets;\n};\n\n/*\n  Given an array of integers nums, return an array containing all unique\n  sets of adjacent elements. The order of the sets is arbitrary.\n\n  Example:\n  uniqueSets([1,2,2,4,5,6]) = [[1,2],[2,4],[5,6]]\n*/\nconst uniqueSetsNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicate", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      largest = Number.MAX_SAFE_INTEGER;\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      largest = Number.MAX_SAFE_INTEGER;\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      largest = Number.MAX_SAFE_INTEGER;\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  smallestPositiveIntegers([]) == (null, null)\n  smallestPositiveIntegers([0]) == (null, null)\n  */\nconst smallestPositiveIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      largest = Number.MAX_SAFE_INTEGER;\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  smallestNegativeIntegers([]) == (null, null)\n  smallestNegativeIntegers([0]) == (null, null)\n  */\nconst smallestNegativeIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      largest = Number.MAX_SAFE_INTEGER;\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestPositiveAndNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  smallestPositiveAndNegativeIntegers([]) == (null, null)\n  smallestPositiveAndNegativeIntegers([0]) == (null, null)\n  */\nconst smallestPositiveAndNegativeIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      largest = Number.MAX_SAFE_INTEGER;\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestPositiveIntegerAndNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  smallestPositiveIntegerAndNegativeIntegers([]) == (null, null)\n  smallestPositiveIntegerAndNegativeIntegers([0]) == (null, null)\n  */\nconst smallestPositiveIntegerAndNegativeIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      largest = Number.MAX_SAFE_INTEGER;\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestNegativeIntegerAndPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  smallestNegativeIntegerAndPositiveIntegers([]) == (null, null)\n  smallestNegativeIntegerAndPositiveIntegers([0]) == (null, null)\n  */\nconst smallestNegativeIntegerAndPositiveIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      largest = Number.MAX_SAFE_INTEGER;\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallestPositiveIntegerAndNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    return parseFloat(a) > parseFloat(b)? a : b\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) > parseFloat(a)? b : a\n  }\n  if (typeof a === \"number\") {\n    return a > b? a : b\n  }\n  if (typeof b === \"number\") {\n    return b > a? b : a\n  }\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareTwo = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    return parseFloat(a) < parseFloat(b)? a : b\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) < parseFloat(a)? b : a\n  }\n  if (typeof a === \"number\") {\n    return a < b? a : b\n  }\n  if (typeof b === \"number\") {\n    return b < a? b : a\n  }\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareThree = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    return parseFloat(a) > parseFloat(b)? a : b\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) > parseFloat(a)? b : a\n  }\n  if (typeof a === \"number\") {\n    return a > b? a : b\n  }\n  if (typeof b === \"number\") {\n    return b > a? b : a\n  }\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareFour = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    return parseFloat(a) < parseFloat(b)? a : b\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) < parseFloat(a)? b : a\n  }\n  if (typeof a === \"number\") {\n    return a < b? a : b\n  }\n  if (typeof b === \"number\") {\n    return b < a? b : a\n  }\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareFive = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    return parseFloat(a) > parseFloat(b)? a : b\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) > parseFloat(a)? b : a\n  }\n  if (typeof a === \"number\") {\n    return a > b? a : b\n  }\n  if (typeof b === \"number\") {\n    return b > a? b : a\n  }\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareSix = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    return parseFloat(a) < parseFloat(b)? a : b\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) < parseFloat(a)? b : a\n  }\n  if (typeof a === \"number\") {\n    return a < b? a : b\n  }\n  if (typeof b === \"number\") {\n    return b < a? b : a\n  }\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareSeven = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    return parseFloat(a) > parseFloat(b)? a : b\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) > parseFloat(a)? b : a\n  }\n  if (typeof a === \"number\") {\n    return a > b? a : b\n  }\n  if (typeof b === \"number\") {\n    return b > a? b : a\n  }\n  return null\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  return n % 2 === 0 && n % 4 === 0;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    factors.push(i);\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization2 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    factors.push(i);\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization3 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    factors.push(i);\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization4 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    factors.push(i);\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization5 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    factors.push(i);\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization6 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    factors.push(i);\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization7 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    factors.push(i);\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization8 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    factors.push(i);\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization9 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    factors.push(i);\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization10 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    factors.push(i);\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization11 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    factors.push(i);\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization12 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    factors.push(i);\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization13 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    factors.push(i);\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number n, return its prime factorization\n  Example\n  primeFactorization(2) == [2,1]\n  primeFactorization(3) == [3,1]\n  primeFactorization(5) == [5,1,3]\n  primeFactorization(7) == [7,1,3,5]\n  */\nconst primeFactorization14 = (n) => {\n  const factors = [];\n", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  if (n <= 1) return 1;\n  return n * spefialFactorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n.\n  For example:\n  >>> factorial(4)\n  120\n*/\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2\n*/\nconst modulo = (n, m) => {\n  if (n <= 1) return 1;\n  return n % m;\n};\n\n/*\n  Given a positive integer n, return the factorial of n\n  modulo n.\n  For example:\n  >>> modulo(6, 4)\n  2", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let current = '';\n  let currentLength = 0;\n  let currentPrefix = '';\n  let currentPrefixLength = 0;\n  let currentPrefixLengthLength = 0;\n  let currentPrefixLengthLengthLength2 = 0;\n  let currentPrefixLengthLengthLength3 = 0;\n  let currentPrefixLengthLengthLength4 = 0;\n  let currentPrefixLengthLength5 = 0;\n  let currentPrefixLengthLength6 = 0;\n  let currentPrefixLengthLength7 = 0;\n  let currentPrefixLengthLength8 = 0;\n  let currentPrefixLengthLength9 = 0;\n  let currentPrefixLengthLength10 = 0;\n  let currentPrefixLengthLength11 = 0;\n  let currentPrefixLengthLength12 = 0;\n  let currentPrefixLengthLength13 = 0;\n  let currentPrefixLengthLength14 = 0;\n  let currentPrefixLengthLength15 = 0;\n  let currentPrefixLengthLength16 = 0;\n  let currentPrefixLengthLength17 = 0;\n  let currentPrefixLengthLength18 = 0;\n  let currentPrefixLengthLength19 = 0;\n  let currentPrefixLengthLength20 = 0;\n  let currentPrefixLengthLength21 = 0;\n  let currentPrefixLengthLength22 = 0;\n  let currentPrefixLengthLength23 = 0;\n  let currentPrefixLengthLength24 = 0;\n  let currentPrefixLengthLength25 = 0;\n  let currentPrefixLengthLength26 = 0;\n  let currentPrefixLengthLength27 = 0;\n  let currentPrefixLengthLength28 = 0;\n  let currentPrefixLengthLength29 = 0;\n  let currentPrefixLengthLength30 = 0;\n  let currentPrefixLengthLength31 = 0;\n  let currentPrefixLengthLength32 = 0;\n  let currentPrefixLengthLength33 = 0;\n  let currentPrefixLengthLength34 = 0;\n  let currentPrefixLengthLength35 = 0;\n  let currentPrefixLengthLength36 = 0;\n  let currentPrefixLengthLength37 = 0;\n  let currentPrefixLengthLength38 = 0;\n  let currentPrefixLengthLength39 = 0;\n  let currentPrefixLengthLength40 = 0;\n  let currentPrefixLengthLength41 = 0;\n  let currentPrefixLengthLength42 = 0;\n  let currentPrefixLengthLength43 = 0;\n  let currentPrefixLengthLength44 = 0;\n  let currentPrefixLengthLength45 = 0;\n  let currentPrefixLengthLength46 = 0;\n  let currentPrefixLengthLength47 = 0;\n  let currentPrefixLengthLength48 = 0;\n  let currentPrefixLengthLength49 = 0;\n  let currentPrefixLengthLength50 = 0;\n  let currentPrefixLengthLength51 = 0;\n  let currentPrefixLengthLength52 = 0;\n  let currentPrefixLengthLength53 = 0;\n  let currentPrefixLengthLength54 = 0;\n  let currentPrefixLengthLength55 = 0;\n  let currentPrefixLengthLength56 = 0;\n  let currentPrefixLengthLength57 = 0;\n  let currentPrefixLengthLength58 = 0;\n  let currentPrefixLengthLength59 = 0;\n  let currentPrefixLengthLength60 = 0;\n  let currentPrefixLengthLength61 = 0;\n  let currentPrefixLengthLength62 = 0;\n  let currentPrefixLengthLength63 = 0;\n  let currentPrefixLengthLength64 = 0;\n  let currentPrefixLengthLength65 = 0;\n  let currentPrefixLengthLength66 = 0;\n  let currentPrefixLengthLength67 = 0;\n  let currentPrefixLengthLength68 = 0;\n  let currentPrefixLengthLength69 = 0;\n  let currentPrefixLengthLength70 = 0;\n  let currentPrefixLengthLength71 = 0;\n  let currentPrefixLengthLength72 = 0;\n  let currentPrefixLengthLength73 = 0;\n  let currentPrefixLengthLength74 = 0;\n  let currentPrefixLengthLength75 = 0;\n  let currentPrefixLengthLength76 = 0;\n  let currentPrefixLengthLength77 = 0;\n  let currentPrefixLengthLength78 = 0;\n  let currentPrefixLengthLength79 = 0;\n  let currentPrefixLengthLength80 = 0;\n  let currentPrefixLengthLength81 = 0;\n  let currentPrefixLengthLength82 = 0;\n  let currentPrefixLengthLength83 = 0;\n  let currentPrefixLengthLength84 = 0;\n  let currentPrefixLengthLength85 = 0;\n  let currentPrefixLengthLength86 = 0;\n  let currentPrefixLengthLength87 = 0;\n  let currentPrefixLengthLength88 = 0;\n  let currentPrefixLengthLength89 = 0;\n  let currentPrefixLengthLength90 = 0;\n  let currentPrefixLengthLength91 = 0;\n  let currentPrefixLengthLength92 = 0;\n  let currentPrefixLengthLength93 = 0;\n  let currentPrefixLengthLength94 = 0;\n  let currentPrefixLengthLength95 = 0;\n  let currentPrefixLengthLength96 = 0;\n  let currentPrefixLengthLength97 = 0;\n  let currentPrefixLengthLength98 = 0;\n  let currentPrefixLengthLength99 = 0;\n  let currentPrefixLengthLength100 = 0;\n  let currentPrefixLengthLength101 = 0;\n  let currentPrefixLengthLength102 = 0;\n  let currentPrefixLengthLength103 = 0;\n  let currentPrefixLengthLength104 = 0;\n  let currentPrefixLengthLength105 = 0;\n  let currentPrefixLengthLength106 = 0;\n  let currentPrefixLengthLength107 = 0;\n  let currentPrefixLengthLength108 = 0;\n  let currentPrefixLengthLength109 = 0;\n  let currentPrefixLengthLength110 = 0;\n  let currentPrefixLengthLength111 = 0;\n  let currentPrefixLengthLength112 = 0;\n  let currentPrefixLengthLength113 = 0;\n  let currentPrefixLengthLength114 = 0;\n  let currentPrefixLengthLength115 = 0;\n  let currentPrefixLengthLength116 = 0;\n  let currentPrefixLengthLength117 = 0;\n  let currentPrefixLengthLength118 = 0;\n  let currentPrefixLengthLength119 = 0;\n  let currentPrefixLengthLength120 = 0;\n  let currentPrefixLengthLength121 = 0;\n  let currentPrefixLengthLength122 = 0;\n  let currentPrefixLengthLength123 = 0;\n  let currentPrefixLengthLength124 = 0;\n  let currentPrefixLengthLength125 = 0;\n  let currentPrefixLengthLength126 = 0;\n  let currentPrefixLengthLength127 = 0;\n  let currentPrefixLengthLength128 = 0;\n  let currentPrefixLengthLength129 = 0;\n  let currentPrefixLengthLength130 = 0;\n  let currentPrefixLengthLength131 = 0;\n  let currentPrefixLengthLength132 = 0;\n  let currentPrefixLengthLength133 = 0;\n  let currentPrefixLengthLength134 = 0;\n  let currentPrefixLengthLength135 = 0;\n  let currentPrefixLengthLength136 = 0;\n  let currentPrefixLengthLength137 = 0;\n  let currentPrefixLengthLength138 = 0;\n  let currentPrefixLengthLength139 = 0;\n  let currentPrefixLengthLength140 = 0;\n  let currentPrefixLengthLength141 = 0;\n  let currentPrefixLengthLength142 = 0;\n  let currentPrefixLengthLength143 = 0;\n  let currentPrefixLengthLength144 = 0;\n  let currentPrefixLengthLength145 = 0;\n  let currentPrefixLengthLength146 = 0;\n  let currentPrefixLengthLength147 = 0;\n  let currentPrefixLengthLength148 = 0;\n  let currentPrefixLengthLength149 = 0;\n  let currentPrefixLengthLength150 = 0;\n  let currentPrefixLengthLength151 = 0;\n  let currentPrefixLengthLength152 = 0;\n  let currentPrefixLengthLength153 = 0;\n  let currentPrefixLengthLength154 = 0;\n  let currentPrefixLengthLength155 = 0;\n  let currentPrefixLengthLength156 = 0;\n  let currentPrefixLengthLength157 = 0;\n  let currentPrefixLengthLength158 = 0;\n  let currentPrefixLengthLength159 = 0;\n  let currentPrefixLengthLength160 = 0;\n  let currentPrefixLengthLength161 = 0;\n  let currentPrefixLengthLength162 = 0;\n  let currentPrefixLengthLength163 = 0;\n  let currentPrefixLengthLength164 = 0;\n  let currentPrefixLengthLength165 = 0;\n  let currentPrefixLengthLength166 = 0;\n  let currentPrefixLengthLength167 = 0;\n  let currentPrefixLengthLength168 = 0;\n  let currentPrefixLengthLength169 = 0;\n  let currentPrefixLengthLength170 = 0;\n  let currentPrefixLengthLength171 = 0;\n  let currentPrefixLengthLength172 = 0;\n  let currentPrefixLengthLength173 = 0;\n  let currentPrefixLengthLength174 = 0;\n  let currentPrefixLengthLength175 = 0;\n  let currentPrefixLengthLength176 = 0;\n  let currentPrefixLengthLength177 = 0;\n  let currentPrefixLengthLength178 = 0;\n  let currentPrefixLengthLength179 = 0;\n  let currentPrefixLengthLength180 = 0;\n  let currentPrefixLengthLength181 = 0;\n  let currentPrefixLengthLength182 = 0;\n  let currentPrefixLengthLength183 = 0;", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces2 = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces3 = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces4 = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces5 = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces6 = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces7 = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces8 = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces9 = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces10 = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 2) {", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^(\\d{3})\\.(\\w+)$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^(\\d{3})\\.(\\w+)$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^(\\d{3})\\.(\\w+)$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^(\\d{3})\\.(\\w+)$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^(\\d{3})\\.(\\w+)$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^(\\d{3})\\.(\\w+)$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^(\\d{3})\\.(\\w+)$/\n  return re.test(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return the sum of the squares of the elements in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return the sum of the cubes of the elements in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return the sum of the cubes of the elements in the list whose indexes are multiples of 3 and whose indexes are multiples of 4. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultipleOf3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return the sum of the cubes of the elements in the list whose indexes are multiples of 4 and whose indexes are multiples of 3. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultipleOf4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0 && i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return the sum of the cubes of the elements in the list whose indexes are multiples of 3 and whose indexes are multiples of 4. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultipleOf3And4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return the sum of the cubes of the elements in the list whose indexes are multiples of 3 and whose indexes are multiples of 4. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultipleOf3And4MultipleOf3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return the sum of the cubes of the elements in the list whose indexes are multiples of 3 and whose indexes are multiples of 4. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultipleOf3And4MultipleOf4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0 && i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return the sum of the cubes of the elements in the list whose indexes are multiples of 3 and whose indexes are multiples of 4. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesMultipleOf3And4MultipleOf3And4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return the sum of the cubes of the elements in the list whose indexes are multiples of 3 and whose indexes are multiples of 4. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let isPrime = true;\n\n    for (let j = i + 1; j < words.length; j++) {\n      if (words[j]!== word) {\n        isPrime = false;\n        break;\n      }\n    }\n\n    if (isPrime) {\n      newWords.push(word);\n      newSentence += word;\n    }\n  }\n\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let isPrime = true;\n\n    for (let j = i + 1; j < words.length; j++) {\n      if (words[j]!== word) {\n        isPrime = false;\n        break;\n      }\n    }\n\n    if (isPrime) {\n      newWords.push(word);\n      newSentence += word;\n    }\n  }\n\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let isPrime = true;\n\n    for (let j = i + 1; j < words.length; j++) {\n      if (words[j]!== word) {\n        isPrime = false;\n        break;\n      }\n    }\n\n    if (isPrime) {\n      newWords.push(word);\n      newSentence += word;\n    }\n  }\n\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let isPrime = true;\n\n    for (let j = i + 1; j < words.length; j++) {\n      if (words[j]!== word) {\n        isPrime = false;\n        break;\n      }\n    }\n\n    if (isPrime) {\n      newWords.push(word);\n      newSentence += word;\n    }\n  }\n\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let isPrime = true;\n\n    for (let j = i + 1; j < words.length; j++) {\n      if (words[j]!== word) {\n        isPrime = false;\n        break;\n      }\n    }\n\n    if (isPrime) {\n      newWords.push(word);\n      newSentence += word;\n    }\n  }\n\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let isPrime = true;\n\n    for (let j = i + 1; j < words.length; j++) {\n      if (words[j]!== word) {\n        isPrime = false;\n        break;\n      }\n    }\n\n    if (isPrime) {\n      newWords.push(word);\n      newSentence += word;\n    }\n  }\n\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let isPrime = true;\n\n    for (let j = i + 1; j < words.length; j++) {\n      if (words[j]!== word) {\n        isPrime = false;\n        break;\n      }\n    }\n\n    if (isPrime) {\n      newWords.push(word);\n", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "<|endoftext|>/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n  const [numerator, denominator] = x.split('/')\n  const [numeratorPart, denominatorPart] = numerator.split('/')\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.split('/').map(Number)\n  const [numeratorPart, denominatorPart] = denominatorPart.", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const numsArr = nums.map(num => parseInt(num));\n  const sums = numsArr.map(num => num * 10);\n  const sumsArr = sums.map(num => parseInt(num));\n  const sumsSum = sumsArr.map(num => num + numsArr[0]);\n  const sortedNums = numsArr.sort((a, b) => sumsSum.indexOf(a) - sumsSum.indexOf(b));\n  return sortedNums;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDesc = (nums) => {\n  const numsArr = nums.map(num => parseInt(num));\n  const sums = numsArr.map(num => num * 10);\n  const sumsArr = sums.map(num => parseInt(num));\n  const sumsSum = sumsArr.map(num => num + numsArr[0]);\n  const sortedNums = numsArr.sort((a, b) => sumsSum.indexOf(a) - sumsSum.indexOf(b));\n  return sortedNums;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescByPoints = (nums) => {\n  const numsArr = nums.map(num => parseInt(num));\n  const sums = numsArr.map(num => num * 10);\n  const sumsArr = sums.map(num => parseInt(num));\n  const sumsSum = sumsArr.map(num => num + numsArr[0]);\n  const sortedNums = numsArr.sort((a, b) => sumsSum.indexOf(a) - sumsSum.indexOf(b));\n  return sortedNums;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescByPointsDesc = (nums) => {\n  const numsArr = nums.map(num => parseInt(num));\n  const sums = numsArr.map(num => num * 10);\n  const sumsArr = sums.map(num => parseInt(num));\n  const sumsSum = sumsArr.map(num => num + numsArr[0]);\n  const sortedNums = numsArr.sort((a, b) => sumsSum.indexOf(a) - sumsSum.indexOf(b));\n  return sortedNums;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescByPointsDescByPoints = (nums) => {\n  const numsArr = nums.map(num => parseInt(num));\n  const sums = numsArr.map(num => num * 10);\n  const sumsArr = sums.map(num => parseInt(num));\n  const sumsSum = sumsArr.map(num => num + numsArr[0]);\n  const sortedNums = numsArr.sort((a, b) => sumsSum.indexOf(a) - sumsSum.indexOf(b));\n  return sortedNums;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescByPointsDescByPointsDesc = (nums) => {\n  const numsArr = nums.map(num => parseInt(num));\n  const sums = numsArr.map(num => num * 10);\n  const sumsArr = sums.map(num => parseInt(num));\n  const sumsSum = sumsArr.map(num => num + numsArr[0]);\n  const sortedNums = numsArr.sort((a, b) => sumsSum.indexOf(a) - sumsSum.indexOf(b));\n  return sortedNums;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescByPointsDescByPointsDescByPoints = (nums) => {\n  const numsArr = nums.map(num => parseInt(num));\n  const sums = numsArr.map(num => num * 10);\n  const sumsArr = sums.map(num => parseInt(num));\n  const sumsSum = sumsArr.map(num => num + numsArr[0]);\n  const sortedNums = numsArr.sort((a, b) => sumsSum.indexOf(a) - sumsSum.indexOf(b));\n  return sortedNums;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -12]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPointsDescByPointsDescByPointsDescByPointsDesc = (nums) => {\n  const numsArr = nums.map(num => parseInt(num));\n  const sums = numsArr.map(num => num * 10);\n  const sumsArr = sums.", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 3 === 0 && num % 5 === 0 && num % 7 === 0 && num % 9 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 3 === 0 && num % 5 === 0 && num % 7 === 0 && num % 9 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 3 === 0 && num % 5 === 0 && num % 7 === 0 && num % 9 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 3 === 0 && num % 5 === 0 && num % 7 === 0 && num % 9 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 3 === 0 && num % 5 === 0 && num % 7 === 0 && num % 9 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 3 === 0 && num % 5 === 0 && num % 7 === 0 && num % 9 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 3 === 0 && num % 5 === 0 && num % 7 === 0 && num % 9 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 3 === 0 && num % 5 === 0 && num % 7 === 0 && num % 9 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 3 === 0 && num % 5 === 0 && num % 7 === 0 && num % 9 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 3 === 0 && num % 5 === 0 && num % 7 === 0 && num % 9 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num % 3 === 0 && num % 5 === 0 && num % 7 === 0 && num % 9 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  ", "passed": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getModuloTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMultipleTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMultipleTriplesWithMultipleOf3 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMultipleTriplesWithMultipleOf3WithMultipleOf3 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMultipleTriplesWithMultipleOf3WithMultipleOf3WithMultipleOf3 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMultipleTriplesWithMultipleOf3WithMultipleOf3WithMultipleOf3WithMultipleOf3 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMultipleTriplesWithMultipleOf3WithMultipleOf3WithMultipleOf3WithMultipleOf3WithMultipleOf3 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMultipleTriplesWithMultipleOf3WithMultipleOf3WithMultipleOf3WithMultipleOf3WithMultipleOf3WithMultipleOf3 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ", "passed": 0}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1Orbits = planet1Orbit.orbits;\n  const planet2Orbits = planet2Orbit.orbits;\n  const planet1OrbitPairs = planet1Orbits.map(orbitPair);\n  const planet2OrbitPairs = planet2Orbits.map(orbitPair);\n  const planet1OrbitPairsSorted = planet1OrbitPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet2OrbitPairsSorted = planet2OrbitPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet1OrbitPairsSortedPairs = planet1OrbitPairsSorted\n   .map(orbitPairPair);\n  const planet2OrbitPairsSortedPairs = planet2OrbitPairsSorted\n   .map(orbitPairPair);\n  const planet1OrbitPairsSortedPairsSorted = planet1OrbitPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet2OrbitPairsSortedPairsSorted = planet2OrbitPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet1OrbitPairsSortedPairsSortedPairs = planet1OrbitPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet2OrbitPairsSortedPairsSortedPairs = planet2OrbitPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet1OrbitPairsSortedPairsSortedPairsSortedPairs = planet1OrbitPairsSortedPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet2OrbitPairsSortedPairsSortedPairsSortedPairs = planet2OrbitPairsSortedPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet1OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairs = planet1OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet2OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairs = planet2OrbitPairsSortedPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet1OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs = planet1OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet2OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs = planet2OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet1OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs = planet1OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet2OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs = planet2OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet1OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs = planet1OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet2OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs = planet2OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet1OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs = planet1OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet2OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs = planet2OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet1OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs = planet1OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairs\n   .sort((a, b) => a.proximity - b.proximity);\n  const planet2OrbitPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPairsSortedPair", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.trim());\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of characters in it.\n  You may assume that the string contains only lowercase letters.\n  For example:\n  assert count_chars(\"aaa\") => 3\n  assert count_chars(\"aa\") => 1\n  assert count_chars(\"a\") => 1\n  assert count_chars(\"ab\") => 2\n  assert count_chars(\"abc\") => 3\n  assert count_chars(\"abcd\") => 4\n  */\nconst count_chars = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of uppercase letters in it.\n  You may assume that the string contains only uppercase letters.\n  For example:\n  assert count_uppers(\"AA\") => 3\n  assert count_uppers(\"A\") => 1\n  assert count_uppers(\"Aa\") => 2\n  assert count_uppers(\"AAb\") => 3\n  assert count_uppers(\"ABC\") => 4\n  assert count_uppers(\"abcd\") => 5\n  */\nconst count_uppers = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of lowercase letters in it.\n  You may assume that the string contains only lowercase letters.\n  For example:\n  assert count_lowers(\"aaa\") => 3\n  assert count_lowers(\"aa\") => 1\n  assert count_lowers(\"a\") => 1\n  assert count_lowers(\"ab\") => 2\n  assert count_lowers(\"abc\") => 3\n  assert count_lowers(\"abcd\") => 4\n  */\nconst count_lowers = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of digits in it.\n  You may assume that the string contains only digits.\n  For example:\n  assert count_digits(\"aaa\") => 3\n  assert count_digits(\"aa\") => 1\n  assert count_digits(\"a\") => 1\n  assert count_digits(\"ab\") => 2\n  assert count_digits(\"abc\") => 3\n  assert count_digits(\"abcd\") => 4\n  */\nconst count_digits = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '0' && str[i] <= '9') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of spaces in it.\n  You may assume that the string contains only spaces.\n  For example:\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" aaa \") => 3\n  assert count_spaces(\" ", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst strn = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n >= str.length) {\n    return '';\n  }\n  return str.substr(0, n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst strns = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n >= str.length) {\n    return '';\n  }\n  return str.substr(0, n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst strn = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n >= str.length) {\n    return '';\n  }\n  return str.substr(0, n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst strns = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n >= str.length) {\n    return '';\n  }\n  return str.substr(0, n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst strn = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n >= str.length) {\n    return '';\n  }\n  return str.substr(0, n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst strns = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n >= str.length) {\n    return '';\n  }\n  return str.substr(0, n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst strn = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n >= str.length) {\n    return '';\n  }\n  return str.substr(0, n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst strns = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n >= str.length) {\n    return '';\n  }\n  return str.substr(0, n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst strn = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n >= str.length) {\n    return '';\n  }\n  return str.substr(0, n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst strns = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n >= str.length) {\n    return '';\n  }\n  return str.substr(0, n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst strn = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n >= str.length) {\n    return '';\n  }\n  return str.substr(0, n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst strns = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n >= str.length) {\n    return '';\n  }\n  return str.substr(0, n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst strn = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n >= str.length) {\n    return '';\n  }\n  return str.substr(0, n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is ", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrJ(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrK = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrK(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrK(7, 34, 12) == 34\n  for xOrK(15, 8, 5) == 5\n  \n  */\nconst xOrL = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrL(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrL(7, 34, 12) == 34\n  for xOrL(15, 8, 5) == 5\n  \n  */\nconst xOrM = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrM(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrM(7, 34, 12) == 34\n  for xOrM(15, 8, 5) == 5\n  \n  */\nconst xOrN = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrN(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrN(7, 34, 12) == 34\n  for xOrN(15, 8, 5) == 5\n  \n  */\nconst xOrO = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrO(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrO(7, 34, 12) == 34\n  for xOrO(15, 8, 5) == 5\n  \n  */\nconst xOrP = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrP(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrP(7, 34, 12) == 34\n  for xOrP(15, 8, 5) == 5\n  \n  */\nconst xOrQ = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrQ(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrQ(7, 34, 12) == 34\n  for xOrQ(15, 8, 5) == 5\n  \n  */\nconst xOrR = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrR(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrR(7, 34, 12) == 34\n  for xOrR(15, 8, 5) == 5\n  \n  */\nconst xOrS = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrS(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrS(7, 34, 12) == 34\n  for xOrS(15, 8, 5) == 5\n  \n  */\nconst xOrT = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrT(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrT(7, 34, 12) == 34\n  for xOrT(15, 8, 5) == 5\n  \n  */\nconst xOrU = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrU(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrU(7, 34, 12) == 34\n  for xOrU(15, 8, 5) == 5\n  \n  */\nconst xOrV = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrV(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrV(7, 34, 12) == 34\n  for xOrV(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrW(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrX(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrY(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n < 2) return y\n  if (n % 2 === 0) return x\n  return xOrZ(n / 2, y, x)\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst x", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1]) == 1 + 0 = 1\n  douhleTheDifference([-1]) == -1\n  douhleTheDifference([9]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1]) == 1 + 3 = 1\n  douhleTheDifference([-1]) == -1\n  douhleTheDifference([9]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 5 and ignore numbers that are negative or not integers.\n  douhleTheDifference([1]) == 1 + 5 = 1 + 1 + 1 = 5\n  douhleTheDifference([-1]) == -1\n  douhleTheDifference([9]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 7 and ignore numbers that are negative or not integers.\n  douhleTheDifference([1]) == 1 + 7 = 1 + 1 + 1 + 1 = 7\n  douhleTheDifference([-1]) == -1\n  douhleTheDifference([9]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 9 and ignore numbers that are negative or not integers.\n  douhleTheDifference([1]) == 1 + 9 = 1 + 1 + 1 + 1 + 1 = 9\n  douhleTheDifference([-1]) == -1\n  douhleTheDifference([9]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 9 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 11 and ignore numbers that are negative or not integers.\n  douhleTheDifference([1]) == 1 + 11 = 1 + 1 + 1 + 1 + 1 + 1 = 11\n  douhleTheDifference([-1]) == -1\n  douhleTheDifference([9]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 13 and ignore numbers that are negative or not integers.\n  douhleTheDifference([1]) == 1 + 13 = 1 + 1 + 1 + 1 + 1 + 1 + 1 = 13\n  douhleTheDifference([-1]) == -1\n  douhleTheDifference([9]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 13 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 17 and ignore numbers that are negative or not integers.\n  douhleTheDifference([1]) == 1 + 17 = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 17\n  douhleTheDifference([-1]) == -1\n  douhleTheDifference([9]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 17 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 19 and ignore numbers that are negative or not integers.\n  douhleTheDifference([1]) == 1 + 19 = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 19\n  douhleTheDifference([-1]) == -1\n  douhleTheDifference([9]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 19 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 23 and ignore numbers that are negative or not integers.\n  douhleTheDifference([1]) == 1 + 23 = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 23\n  douhleTheDifference([-1]) == -1\n  douhleTheDifference([9]) == 81\n  douh", "passed": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n  const result = [];\n  const [gameLength, guessLength] = game.length;\n  for (let i = 0; i < gameLength; i++) {\n    const gameScore = game[i];\n    const guessScore = guess[i];\n    let scoreDiff = 0;\n    if (gameScore > guessScore) {\n      scoreDiff = gameScore - guessScore;\n    } else if (gameScore < guessScore) {\n      scoreDiff = guessScore - gameScore;\n    }\n    result.push(scoreDiff);\n  }\n  return result;\n};\n\n/*\n  Given an array of numbers and a target number, determine if there is a number in the array that is \n  equal to the target number.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],5) -> true\n  comoare([1,2,3,4,5,1],6) -> false\n  comoare([1,2,3,4,5,1],7) -> false\n  comoare([1,2,3,4,5,1],8) -> false\n  comoare([1,2,3,4,5,1],9) -> false\n  comoare([1,2,3,4,5,1],10) -> false\n  comoare([1,2,3,4,5,1],11) -> false\n  comoare([1,2,3,4,5,1],12) -> false\n  comoare([1,2,3,4,5,1],13) -> false\n  comoare([1,2,3,4,5,1],14) -> false\n  comoare([1,2,3,4,5,1],15) -> false\n  comoare([1,2,3,4,5,1],16) -> false\n  comoare([1,2,3,4,5,1],17) -> false\n  comoare([1,2,3,4,5,1],18) -> false\n  comoare([1,2,3,4,5,1],19) -> false\n  comoare([1,2,3,4,5,1],20) -> false\n  comoare([1,2,3,4,5,1],21) -> false\n  comoare([1,2,3,4,5,1],22) -> false\n  comoare([1,2,3,4,5,1],23) -> false\n  comoare([1,2,3,4,5,1],24) -> false\n  comoare([1,2,3,4,5,1],25) -> false\n  comoare([1,2,3,4,5,1],26) -> false\n  comoare([1,2,3,4,5,1],27) -> false\n  comoare([1,2,3,4,5,1],28) -> false\n  comoare([1,2,3,4,5,1],29) -> false\n  comoare([1,2,3,4,5,1],30) -> false\n  comoare([1,2,3,4,5,1],31) -> false\n  comoare([1,2,3,4,5,1],32) -> false\n  comoare([1,2,3,4,5,1],33) -> false\n  comoare([1,2,3,4,5,1],34) -> false\n  comoare([1,2,3,4,5,1],35) -> false\n  comoare([1,2,3,4,5,1],36) -> false\n  comoare([1,2,3,4,5,1],37) -> false\n  comoare([1,2,3,4,5,1],38) -> false\n  comoare([1,2,3,4,5,1],39) -> false\n  comoare([1,2,3,4,5,1],40) -> false\n  comoare([1,2,3,4,5,1],41) -> false\n  comoare([1,2,3,4,5,1],42) -> false\n  comoare([1,2,3,4,5,1],43) -> false\n  comoare([1,2,3,4,5,1],44) -> false\n  comoare([1,2,3,4,5,1],45) -> false\n  comoare([1,2,3,4,5,1],46) -> false\n  comoare([1,2,3,4,5,1],47) -> false\n  comoare([1,2,3,4,5,1],48) -> false\n  comoare([1,2,3,4,5,1],49) -> false\n  comoare([1,2,3,4,5,1],50) -> false\n  comoare([1,2,3,4,5,1],51) -> false\n  comoare([1,2,3,4,5,1],52) -> false\n  comoare([1,2,3,4,5,1],53) -> false\n  comoare([1,2,3,4,5,1],54) -> false\n  comoare([1,2,3,4,5,1],55) -> false\n  comoare([1,2,3,4,5,1],56) -> false\n  comoare([1,2,3,4,5,1],57) -> false\n  comoare([1,2,3,4,5,1],58) -> false\n  comoare([1,2,3,4,5,1],59) -> false\n  comoare([1,2,3,4,5,1],60) -> false\n  comoare([1,2,3,4,5,1],61) -> false\n  comoare([1,2,3,4,5,1],62) -> false\n  comoare([1,2,3,4,5,1],63) -> false\n  comoare([1,2,3,4,5,1],64) -> false\n  comoare([1,2,3,4,5,1],65) -> false\n  comoare([1,2,3,4,5,1],66) -> false\n  comoare([1,2,3,4,5,1],67) -> false\n  comoare([1,2,3,4,5,1],68) -> false\n  comoare([1,2,3,4,5,1],69) -> false\n  comoare([1,2,3,4,5,1],70) -> false\n  comoare([1,2,3,4,5,1],71) -> false\n  comoare([1,2,3,4,5,1],72) -> false\n  comoare([1,2,3,4,5,1],73) -> false\n  comoare([1,2,3,4,5,1],74) -> false\n  comoare([1,2,3,4,5,1],75) -> false\n  comoare([1,2,3,4,5,1],76) -> false\n  comoare([1,2,3,4,5,1],77) -> false\n  comoare([1,2,3,4,5,1],78) -> false\n  comoare([1,2,3,4,5,1],79) -> false\n  comoare([1,2,3,4,5,1],80) -> false\n  comoare([1,2,3,4,5,1],81) -> false\n  comoare([1,2,3,4,5,1],82) -> false\n  comoare([1,2,3,4,5,1],83) -> false\n  comoare([1,2,3,4,5,1],84) -> false\n  comoare([1,2,3,4,5,1],85) -> false\n  comoare([1,2,3,4,5,1],86) -> false\n  comoare([1,2,3,4,5,1],87) -> false\n  comoare([1,2,3,4,5,1],88) -> false\n  comoare([1,2,3,4,5,1],89) -> false\n  comoare([1,2,3,4,5,1],90) -> false\n  comoare([1,2,3,4,5,1],91) -> false\n  comoare([1,2,3,4,5,1],92) -> false\n  comoare([1,2,3,4,5,1],93) -> false\n  comoare([1,2,3,4,5,1],94) -> false\n  comoare([1,2,3,4,5,1],95) -> false\n  comoare([1,2,3,4,5,1],96) -> false\n  comoare([1,2,3,4,5,1],97) -> false\n  comoare([1,2,3,4,5,1],98) -> false\n  co", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let strlngestExtension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_upper = extension.charAt(0).toUpperCase();\n    const extension_lower = extension.charAt(0).toLowerCase();\n    const extension_length = extension_length - 1;\n    const extension_upper_index = extension_upper.charCodeAt(0);\n    const extension_lower_index = extension_lower.charCodeAt(0);\n    const extension_strength_index = extension_upper_index - extension_lower_index;\n    const extension_strength = extension_strength_index - 1;\n    if (extension_strength > extension_strength) {\n      extension_strength = extension_strength_index;\n      strlngestExtension = extension;\n    }\n  }\n  return strlngestExtension;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the strongest extension.\n  Example:\n  strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strlngestExtension_1 = (class_name, extensions) => {\n  let extension_strength = -1;\n  let strlngestExtension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_upper = extension.charAt(0).toUpperCase();\n    const extension_lower = extension.charAt(0).toLowerCase();\n    const extension_length = extension_length - 1;\n    const extension_upper_index = extension_upper.charCodeAt(0);\n    const extension_lower_index = extension_lower.charCodeAt(0);\n    const extension_strength_index = extension_upper_index - extension_lower_index;\n    const extension_strength = extension_strength_index - 1;\n    if (extension_strength > extension_strength) {\n      extension_strength = extension_strength_index;\n      strlngestExtension = extension;\n    }\n  }\n  return strlngestExtension;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the strongest extension.\n  Example:\n  strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strlngestExtension_2 = (class_name, extensions) => {\n  let extension_strength = -1;\n  let strlngestExtension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_upper = extension.charAt(0).toUpperCase();\n    const extension_lower = extension.charAt(0).toLowerCase();\n    const extension_length = extension_length - 1;\n    const extension_upper_index = extension_upper.charCodeAt(0);\n    const extension_lower_index = extension_lower.charCodeAt(0);\n    const extension_strength_index = extension_upper_index - extension_lower_index;\n    const extension_strength = extension_strength_index - 1;\n    if (extension_strength > extension_strength) {\n      extension_strength = extension_strength_index;\n      strlngestExtension = extension;\n    }\n  }\n  return strlngestExtension;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the strongest extension.\n  Example:\n  strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strlngestExtension_3 = (class_name, extensions) => {\n  let extension_strength = -1;\n  let strlngestExtension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_upper = extension.charAt(0).toUpperCase();\n    const extension_lower = extension.charAt(0).toLowerCase();\n    const extension_length = extension_length - 1;\n    const extension_upper_index = extension_upper.charCodeAt(0);\n    const extension_lower_index = extension_lower.charCodeAt(0);\n    const extension_strength_index = extension_upper_index - extension_lower_index;\n    const extension_strength = extension_strength_index - 1;\n    if (extension_strength > extension_strength) {\n      extension_strength = extension_strength_index;\n      strlngestExtension = extension;\n    }\n  }\n  return strlngestExtension;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the strongest extension.\n  Example:\n  strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strlngestExtension_4 = (class_name, extensions) => {\n  let extension_strength = -1;\n  let strlngestExtension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_upper = extension.charAt(0).toUpperCase();\n    const extension_lower = extension.charAt(0).toLowerCase();\n    const extension_length = extension_length - 1;\n    const extension_upper_index = extension_upper.charCodeAt(0);\n    const extension_lower_index = extension_lower.charCodeAt(0);\n    const extension_strength_index = extension_upper_index - extension_lower_index;\n    const extension_strength = extension_strength_index - 1;\n    if (extension_strength > extension_strength) {\n      extension_strength = extension_strength_index;\n      strlngestExtension = extension;\n    }\n  }\n  return strlngestExtension;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the strongest extension.\n  Example:\n  strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strlngestExtension_5 = (class_name, extensions) => {\n  let extension_strength = -1;\n  let strlngestExtension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_upper = extension.charAt(0).toUpperCase();\n    const extension_lower = extension.charAt(0).toLowerCase();\n    const extension_length = extension_length - 1;\n    const extension_upper_index = extension_upper.charCodeAt(0);\n    const extension_lower_index = extension_lower.charCodeAt(0);\n    const extension_strength_index = extension_upper_index - extension_lower_index;\n    const extension_strength = extension_strength_index - 1;\n    if (extension_strength > extension_strength) {\n      extension_strength = extension_strength_index;\n      strlngestExtension = extension;\n    }\n  }\n  return strlngestExtension;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the strongest extension.\n  Example:\n  strlngestExtension", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  let firstWord = a.split('')\n  let secondWord = b.split('')\n  let firstWordArray = firstWord.map((val, index) => val)\n  let secondWordArray = secondWord.map((val, index) => val)\n  let firstWordArrayLength = firstWordArray.length\n  let secondWordArrayLength = secondWordArray.length\n  let firstWordArrayRotation = firstWordArray.map((val, index) => index)\n  let secondWordArrayRotation = secondWordArray.map((val, index) => index)\n  let firstWordArrayRotationLength = firstWordArrayRotation.length\n  let secondWordArrayRotationLength = secondWordArrayRotation.length\n  let firstWordArrayRotationRotation = firstWordArrayRotation.map((val, index) => index)\n  let secondWordArrayRotationRotation = secondWordArrayRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationLength = firstWordArrayRotationRotation.length\n  let secondWordArrayRotationRotationLength = secondWordArrayRotationRotation.length\n  let firstWordArrayRotationRotationRotation = firstWordArrayRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotation = secondWordArrayRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationLength = firstWordArrayRotationRotationRotation.length\n  let secondWordArrayRotationRotationLength = secondWordArrayRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotation = firstWordArrayRotationRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotation = secondWordArrayRotationRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotation.length\n  let secondWordArrayRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotationRotation = firstWordArrayRotationRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotationRotation = secondWordArrayRotationRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotation.length\n  let secondWordArrayRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotationRotation = firstWordArrayRotationRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotationRotation = secondWordArrayRotationRotationRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotation.length\n  let secondWordArrayRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotationRotation = firstWordArrayRotationRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotationRotation = secondWordArrayRotationRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotation.length\n  let secondWordArrayRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotationRotation = firstWordArrayRotationRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotationRotation = secondWordArrayRotationRotationRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotation.length\n  let secondWordArrayRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotationRotation = firstWordArrayRotationRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotation.length\n  let secondWordArrayRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotationRotation = firstWordArrayRotationRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotationRotation = secondWordArrayRotationRotationRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotation.length\n  let secondWordArrayRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotationRotation = firstWordArrayRotationRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotation.length\n  let secondWordArrayRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotationRotation = firstWordArrayRotationRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotation.length\n  let secondWordArrayRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotationRotationRotation = firstWordArrayRotationRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotation.length\n  let secondWordArrayRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotationRotation = firstWordArrayRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotation.length\n  let secondWordArrayRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotationRotation = firstWordArrayRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotation.length\n  let secondWordArrayRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotationRotation = firstWordArrayRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotation.map((val, index) => index)\n  let firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotation.length\n  let secondWordArrayRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotation.length\n  let firstWordArrayRotationRotationRotationRotation = firstWordArrayRotationRotation.map((val, index) => index)\n  let secondWordArrayRotationRotationRotationRotation = secondWordArrayRotationRotationRotation.map((val, index) => index)\n  let firstWord", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let digitCount = 0;\n  while (num > 0) {\n    digitCount++;\n    num = num % 10;\n    evenCount++;\n  }\n  while (num > 0) {\n    digitCount++;\n    num = num % 10;\n    oddCount++;\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return an array that has all the characters of the string in sorted order.\n\n   Example:\n      sortedString('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedString('hello') ==> ['h', 'e', 'l', 'l', 'o', 'o']\n      sortedString('hello') ==> ['h', 'e', 'l', 'l', 'o', 'o', 'o']\n      sortedString('hello') ==> ['h', 'e', 'l', 'l', 'o', 'o', 'o', 'o']\n      sortedString('hello') ==> ['h', 'e', 'l', 'l', 'o', 'o', 'o', 'o', 'o']\n  */\nconst sortedString = (str) => {\n  let arr = [];\n  let strLen = str.length;\n  for (let i = 0; i < strLen; i++) {\n    arr.push(str[i]);\n  }\n  arr.sort((a, b) => a - b);\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters of the string in reverse sorted order.\n\n   Example:\n      reverseSortedString('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l']\n      reverseSortedString('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o']\n      reverseSortedString('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o', 'o']\n      reverseSortedString('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o', 'o', 'o']\n      reverseSortedString('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o', 'o', 'o', 'o']\n  */\nconst reverseSortedString = (str) => {\n  let arr = [];\n  let strLen = str.length;\n  for (let i = 0; i < strLen; i++) {\n    arr.push(str[i]);\n  }\n  arr.sort((a, b) => b - a);\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters of the string in reverse sorted order.\n\n   Example:\n      reverseSortedString('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l']\n      reverseSortedString('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o']\n      reverseSortedString('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o', 'o']\n      reverseSortedString('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o', 'o', 'o']\n      reverseSortedString('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o', 'o', 'o', 'o']\n  */\nconst reverseSortedStringReverse = (str) => {\n  let arr = [];\n  let strLen = str.length;\n  for (let i = 0; i < strLen; i++) {\n    arr.push(str[i]);\n  }\n  arr.sort((a, b) => b - a);\n  return arr.reverse();\n};\n\n/*Given a string, return an array that has all the characters of the string in reverse sorted order.\n\n   Example:\n      reverseSortedStringReverse('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l']\n      reverseSortedStringReverse('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o']\n      reverseSortedStringReverse('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o', 'o']\n      reverseSortedStringReverse('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o', 'o', 'o']\n      reverseSortedStringReverse('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o', 'o', 'o', 'o']\n  */\nconst reverseSortedStringReverseReverse = (str) => {\n  let arr = [];\n  let strLen = str.length;\n  for (let i = 0; i < strLen; i++) {\n    arr.push(str[i]);\n  }\n  arr.sort((a, b) => b - a);\n  return arr.reverse();\n};\n\n/*Given a string, return an array that has all the characters of the string in sorted order.\n\n   Example:\n      sortedStringReverse('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedStringReverse('hello') ==> ['h', 'e', 'l', 'l', 'o', 'o']\n      sortedStringReverse('hello') ==> ['h', 'e', 'l', 'l', 'o', 'o', 'o']\n      sortedStringReverse('hello') ==> ['h', 'e', 'l', 'l', 'o', 'o', 'o', 'o']\n      sortedStringReverse('hello') ==> ['h', 'e', 'l', 'l', 'o', 'o', 'o', 'o', 'o']\n  */\nconst sortedStringReverse = (str) => {\n  let arr = [];\n  let strLen = str.length;\n  for (let i = 0; i < strLen; i++) {\n    arr.push(str[i]);\n  }\n  arr.sort((a, b) => b - a);\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters of the string in reverse sorted order.\n\n   Example:\n      reverseSortedStringReverse('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l']\n      reverseSortedStringReverse('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o']\n      reverseSortedStringReverse('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o', 'o']\n      reverseSortedStringReverse('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o', 'o', 'o']\n      reverseSortedStringReverse('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o', 'o', 'o', 'o']\n  */\nconst reverseSortedStringReverseReverse = (str) => {\n  let arr = [];\n  let strLen = str.length;\n  for (let i = 0; i < strLen; i++) {\n    arr.push(str[i]);\n  }\n  arr.sort((a, b) => b - a);\n  return arr.reverse();\n};\n\n/*Given a string, return an array that has all the characters of the string in sorted order.\n\n   Example:\n      sortedStringReverse('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedStringReverse('hello') ==> ['h', 'e', 'l', 'l', 'o', 'o']\n      sortedStringReverse('hello') ==> ['h', 'e', 'l', 'l', 'o', 'o', 'o']\n      sortedStringReverse('hello') ==> ['h', 'e', 'l', 'l', 'o', 'o', 'o', 'o']\n      sortedStringReverse('hello') ==> ['h', 'e', 'l', 'l', 'o', 'o', 'o', 'o', 'o']\n  */\nconst sortedStringReverseReverse = (str) => {\n  let arr = [];\n  let strLen = str.length;\n  for (let i = 0; i < strLen; i++) {\n    arr.push(str[i]);\n  }\n  arr.sort((a, b) => b - a);\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters of the string in reverse sorted order.\n\n   Example:\n      reverseSortedStringReverseReverse('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l']\n      reverseSortedStringReverseReverse('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o']\n      reverseSortedStringReverseReverse('hello') ==> ['o', 'h', 'l', 'l', 'e', 'l', 'o", "passed": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n  const num = (number + '');\n  const numArr = num.split('');\n  const numStr = '';\n  let numStrLen = numArr.length;\n  let numStrIdx = 0;\n  let numStrIdxMax = numStrIdx + numStrLen;\n  let numStrIdxMin = numStrIdx;\n  let numStrIdxMaxMin = numStrIdxMax;\n  let numStrIdxMaxMinIdx = 0;\n  let numStrIdxMaxMinIdxMax = 0;\n  let numStrIdxMaxMinIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMax = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMax = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMax = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMax = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdx = 0;\n  let numStrIdxMaxMinIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMaxIdxMax", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const a2 = a * a;\n  const b2 = b * b;\n  const c2 = c * c;\n  const a3 = a2 * b2;\n  const b3 = b2 * c2;\n  const c3 = c2 * a2;\n  const a4 = a3 * b3;\n  const b4 = b3 * c3;\n  const c4 = c3 * a3;\n  const a5 = a4 * b4;\n  const b5 = b5 * c4;\n  const c5 = c4 * a4;\n  const a6 = a5 * b5;\n  const b6 = b6 * c5;\n  const c6 = c5 * a5;\n  const a7 = a6 * b6;\n  const b7 = b6 * c6;\n  const c7 = c6 * a6;\n  const a8 = a7 * b7;\n  const b8 = b7 * c7;\n  const c8 = c7 * a7;\n  const a9 = a8 * b8;\n  const b9 = b8 * c8;\n  const c9 = c8 * a8;\n  const a10 = a9 * b9;\n  const b10 = b9 * c9;\n  const c10 = c9 * a9;\n  const a11 = a10 * b10;\n  const b11 = b10 * c10;\n  const c11 = c10 * a10;\n  const a12 = a11 * b11;\n  const b12 = b11 * c11;\n  const c12 = c11 * a11;\n  const a13 = a12 * b12;\n  const b13 = b12 * c12;\n  const c13 = c12 * a12;\n  const a14 = a13 * b13;\n  const b14 = b13 * c13;\n  const c14 = c13 * a13;\n  const a15 = a14 * b14;\n  const b15 = b14 * c14;\n  const c15 = c14 * a14;\n  const a16 = a15 * b15;\n  const b16 = b15 * c15;\n  const c16 = c15 * a15;\n  const a17 = a16 * b16;\n  const b17 = b16 * c16;\n  const c17 = c16 * a16;\n  const a18 = a17 * b17;\n  const b18 = b17 * c17;\n  const c18 = c17 * a17;\n  const a19 = a18 * b18;\n  const b19 = b18 * c18;\n  const c19 = c18 * a18;\n  const a20 = a19 * b19;\n  const b20 = b19 * c19;\n  const c20 = c19 * a19;\n  const a21 = a20 * b20;\n  const b21 = b20 * c21;\n  const c21 = a20 * a20;\n  const a22 = a21 * b22;\n  const b22 = b22 * c21;\n  const c22 = c21 * a21;\n  const a23 = a22 * b23;\n  const b23 = b23 * c21;\n  const c23 = c21 * a22;\n  const a24 = a23 * b24;\n  const b24 = b24 * c21;\n  const c24 = c21 * a23;\n  const a25 = a24 * b25;\n  const b25 = b25 * c21;\n  const c25 = c21 * a24;\n  const a26 = a25 * b26;\n  const b26 = b26 * c21;\n  const c26 = c21 * a25;\n  const a27 = a26 * b27;\n  const b27 = b27 * c21;\n  const c27 = c21 * a26;\n  const a28 = a27 * b28;\n  const b28 = b28 * c21;\n  const c28 = c21 * a27;\n  const a29 = a28 * b29;\n  const b29 = b29 * c21;\n  const c29 = c21 * a28;\n  const a30 = a29 * b30;\n  const b30 = b30 * c21;\n  const c30 = c21 * a29;\n  const a31 = a30 * b31;\n  const b31 = b31 * c21;\n  const c31 = c21 * a30;\n  const a32 = a31 * b32;\n  const b32 = b32 * c21;\n  const c32 = c21 * a31;\n  const a33 = a32 * b33;\n  const b33 = b33 * c21;\n  const c33 = c21 * a32;\n  const a34 = a33 * b34;\n  const b34 = b34 * c21;\n  const c34 = c21 * a33;\n  const a35 = a34 * b35;\n  const b35 = b35 * c21;\n  const c35 = c21 * a34;\n  const a36 = a35 * b36;\n  const b36 = b36 * c21;\n  const c36 = c21 * a35;\n  const a37 = a36 * b37;\n  const b37 = b37 * c21;\n  const c37 = c21 * a36;\n  const a38 = a37 * b38;\n  const b38 = b38 * c21;\n  const c38 = c21 * a37;\n  const a39 = a38 * b39;\n  const b39 = b39 * c21;\n  const c39 = c21 * a38;\n  const a40 = a39 * b40;\n  const b40 = b40 * c21;\n  const c40 = c21 * a39;\n  const a41 = a40 * b41;\n  const b41 = a41 * c21;\n  const c41 = a41 * a40;\n  const a42 = a41 * b42;\n  const b42 = a42 * c21;\n  const c42 = a42 * a41;\n  const a43 = a41 * b43;\n  const b43 = a42 * b43;\n  const c43 = a42 * a41;\n  const a44 = a43 * b44;\n  const b44 = b43 * c21;\n  const c44 = c21 * a43;\n  const a45 = a44 * b45;\n  const b45 = b45 * c21;\n  const c45 = c21 * a44;\n  const a46 = a45 * b46;\n  const b46 = b46 * c21;\n  const c46 = c21 * a45;\n  const a47 = a46 * b47;\n  const b47 = b47 * c21;\n  const c47 = c21 * a46;\n  const a48 = a47 * b48;\n  const b48 = b48 * c21;\n  const c48 = c21 * a47;\n  const a49 = a48 * b49;\n  const b49 = b49 * c21;\n  const c49 = c21 * a48;\n  const a50 = a49 * b50;\n  const b50 = b50 * c21;\n  const c50 = c21 * a49;\n  const a51 = a50 * b51;\n  const b51 = b51 * c21;\n  const c51 = c21 * a50;\n  const a52 = a51 * b52;\n  const b52 = b52 * c21;\n  const c52 = c21 * a51;\n  const a53 = a52 * b53;\n  const b53 = b53 * c21;\n  const c53 = c21 * a52;\n  const a54 = a53 * b54;\n  const b54 = b54 * c21;\n  const c54 = c21 * a53;\n  const a55 = a54 * b55;\n  const b55 = b55 * c21;\n  const c55 = c21 * a54;\n  const a56 = a55 * b56;\n  const b56 = b56 * c21;\n  const c56 = c21 * a55;\n  const a57 = a56 * b57;\n  const b57 = b57 * c21;\n  const c", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let maxWordChar = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars > maxChar) {\n      maxChar = chars;\n      maxWord = word;\n      maxWordChar = chars;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMin([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMin([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMin = (words) => {\n  let min = 0;\n  let minWord = \"\";\n  let minChar = 0;\n  let minWordChar = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars < minChar) {\n      minChar = chars;\n      minWord = word;\n      minWordChar = chars;\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMaxUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMaxUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMaxUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMaxUnique = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let maxWordChar = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars > maxChar) {\n      maxChar = chars;\n      maxWord = word;\n      maxWordChar = chars;\n    }\n  }\n  let uniqueWords = words.filter(word => word.length!== maxChar);\n  return uniqueWords[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMinUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMinUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMinUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMinUnique = (words) => {\n  let min = 0;\n  let minWord = \"\";\n  let minChar = 0;\n  let minWordChar = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars < minChar) {\n      minChar = chars;\n      minWord = word;\n      minWordChar = chars;\n    }\n  }\n  let uniqueWords = words.filter(word => word.length!== minChar);\n  return uniqueWords[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMaxUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMaxUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMaxUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMaxUniqueUnique = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let maxWordChar = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars > maxChar) {\n      maxChar = chars;\n      maxWord = word;\n      maxWordChar = chars;\n    }\n  }\n  let uniqueWords = words.filter(word => word.length!== maxChar);\n  return uniqueWords[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMinUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMinUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMinUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMinUniqueUnique = (words) => {\n  let min = 0;\n  let minWord = \"\";\n  let minChar = 0;\n  let minWordChar = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars < minChar) {\n      minChar = chars;\n      minWord = word;\n      minWordChar = chars;\n    }\n  }\n  let uniqueWords = words.filter(word => word.length!== minChar);\n  return uniqueWords[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMaxUniqueUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMaxUniqueUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMaxUniqueUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMaxUniqueUniqueUnique = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let maxWordChar = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars > maxChar) {\n      maxChar = chars;\n      maxWord = word;\n      maxWordChar = chars;\n    }\n  }\n  let uniqueWords = words.filter(word => word.length!== maxChar);\n  return uniqueWords[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMinUniqueUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMinUniqueUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMinUniqueUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMinUniqueUniqueUnique = (words) => {\n  let min = 0;\n", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need));\n  const remaining = Math.ceil(remaining * Math.ceil(need));\n  const carrotLeft = carrots - remaining;\n  const carrotEaten = carrots - remaining;\n  const carrotRemaining = carrots - remaining;\n  const carrotRemainingEaten = carrotRemaining - carrotEaten;\n  const carrotRemainingEatenRemaining = carrotRemainingEaten - carrotRemaining;\n  const carrotRemainingEatenRemainingEaten = carrotRemainingEatenRemaining - carrotRemainingEaten;\n  const carrotRemainingEatenRemainingEatenRemaining = carrotRemainingEatenRemainingEaten - carrotRemainingEatenRemaining;\n  const carrotRemainingEatenRemainingEatenRemainingEaten = carrotRemainingEatenRemainingEatenRemaining - carrotRemainingEatenRemainingEaten;\n  const carrotRemainingEatenRemainingEatenRemainingEatenRemaining = carrotRemainingEatenRemainingEatenRemainingEaten - carrotRemainingEatenRemainingEatenRemaining;\n  const carrotRemainingEatenRemainingEatenRemainingEatenRemainingEaten = carrotRemainingEatenRemainingEatenRemainingEatenRemaining - carrotRemainingEatenRemainingEatenRemainingEaten;\n  const carrotRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEaten = carrotRemainingEatenRemainingEatenRemainingEatenRemainingEaten - carrotRemainingEatenRemainingEatenRemainingEatenRemainingEaten;\n  const carrotRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEaten = carrotRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEaten;\n  const carrotRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEatenRemainingEaten", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    let char = chars[i];\n    char = char.toLowerCase();\n    if (chars.indexOf(char) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words (regardless of case) does it consist of\n * >>> coujtDistinctWords('xyzXYZ')\n * 3\n * >>> coujtDistinctWords('Jerry')\n * 4\n */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    word = word.toLowerCase();\n    if (words.indexOf(word) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> coujtDistinctCharacters('xyzXYZ')\n * 3\n * >>> coujtDistinctCharacters('Jerry')\n * 4\n */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    word = word.toLowerCase();\n    if (words.indexOf(word) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words (regardless of case) does it consist of\n * >>> coujtDistinctWords('xyzXYZ')\n * 3\n * >>> coujtDistinctWords('Jerry')\n * 4\n */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    word = word.toLowerCase();\n    if (words.indexOf(word) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> coujtDistinctCharacters('xyzXYZ')\n * 3\n * >>> coujtDistinctCharacters('Jerry')\n * 4\n */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    word = word.toLowerCase();\n    if (words.indexOf(word) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words (regardless of case) does it consist of\n * >>> coujtDistinctWords('xyzXYZ')\n * 3\n * >>> coujtDistinctWords('Jerry')\n * 4\n */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    word = word.toLowerCase();\n    if (words.indexOf(word) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> coujtDistinctCharacters('xyzXYZ')\n * 3\n * >>> coujtDistinctCharacters('Jerry')\n * 4\n */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    word = word.toLowerCase();\n    if (words.indexOf(word) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words (regardless of case) does it consist of\n * >>> coujtDistinctWords('xyzXYZ')\n * 3\n * >>> coujtDistinctWords('Jerry')\n * 4\n */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    word = word.toLowerCase();\n    if (words.indexOf(word) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> coujtDistinctCharacters('xyzXYZ')\n * 3\n * >>> coujtDistinctCharacters('Jerry')\n * 4\n */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    word = word.toLowerCase();\n    if (words.indexOf(word) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words (regardless of case) does it consist of\n * >>> coujtDistinctWords('xyzXYZ')\n * 3\n * >>> coujtDistinctWords('Jerry')\n * 4\n */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    word = word.toLowerCase();\n    if (words.indexOf(word) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> coujtDistinctCharacters('xyzXYZ')\n * 3\n * >>> coujtDistinctCharacters('Jerry')\n * 4\n */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    word = word.toLowerCase();\n    if (words.indexOf(word) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words (regardless of case) does it consist of\n * >>> coujtDistinctWords('xyzXYZ')\n * 3\n * >>> coujtDistinctWords('Jerry')\n * 4\n */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    word = word.toLowerCase();\n    if (words.indexOf(word) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> coujtDistinctCharacters('xyzXYZ')\n * 3\n * >>> coujtDistinctCharacters('Jerry')\n * 4\n */\nconst coujtDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    word = word.toLowerCase();\n    if (words.indexOf(word) === -1) {\n      count", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split(',');\n  let result = 0;\n  for (let i = 0; i < operatorList.length; i++) {\n    result += operatorList[i] * operandList[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split(',');\n  let result = 0;\n  for (let i = 0; i < operatorList.length; i++) {\n    result += operatorList[i] * operandList[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split(',');\n  let result = 0;\n  for (let i = 0; i < operatorList.length; i++) {\n    result += operatorList[i] * operandList[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split(',');\n  let result = 0;\n  for (let i = 0; i < operatorList.length; i++) {\n    result += operatorList[i] * operandList[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split(',');\n  let result = 0;\n  for (let i = 0; i < operatorList.length; i++) {\n    result += operatorList[i] * operandList[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split(',');\n  let result = 0;\n  for (let i = 0; i < operatorList.length; i++) {\n    result += operatorList[i] * operandList[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split(',');\n  let result = 0;\n  for (let i = 0; i < operatorList.length; i++) {\n    result += operatorList[i] * operandList[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  let reversed = \"\";\n  let letter = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  while (i < l) {\n    if (s[i] == letter) {\n      reversed = reversed + s[i].toUpperCase();\n      letter = \"\";\n      i++;\n    } else {\n      letter = s[i] + letter;\n    }\n  }\n  while (j < l) {\n    if (s[j] == letter) {\n      reversed = reversed + s[j].toLowerCase();\n      letter = \"\";\n      j++;\n    } else {\n      letter = s[j] + letter;\n    }\n  }\n  while (k < l) {\n    if (s[k] == letter) {\n      reversed = reversed + s[k].toUpperCase();\n      letter = \"\";\n      k++;\n    } else {\n      letter = s[k] + letter;\n    }\n  }\n  return reversed;\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  A palindrome is a string that reads the same backward as forward.\n  Examples\n  is_palindrome(\"ab\") = true\n  is_palindrome(\"abc\") = false\n  is_palindrome(\"abac\") = true\n  is_palindrome(\"abcba\") = false\n  is_palindrome(\"abacba\") = false\n  is_palindrome(\"abacbba\") = false\n  is_palindrome(\"abacbbaa\") = false\n  is_palindrome(\"abacbbaaa\") = false\n  is_palindrome(\"abacbbaaaa\") = false\n  is_palindrome(\"abacbbaaaab\") = false\n  is_palindrome(\"abacbbaaaaba\") = false\n  is_palindrome(\"abacbbaaaabaa\") = false\n  is_palindrome(\"abacbbaaaabaaa\") = false\n  is_palindrome(\"abacbbaaaabaaab\") = false\n  is_palindrome(\"abacbbaaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaa\") = false\n  is_palindrome(\"abacbbaaaabaaabaaa\") = false\n  is_palindrome(\"abacbbaaaabaaabaaab\") = false\n  is_palindrome(\"abacbbaaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaa\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaab\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaa\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaa\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaab\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaa\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaa\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaa\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaab\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaa\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaabaaa\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaabaaabaaabaaaba\") = false\n  is_palindrome(\"abacbbaaaabaaabaaab", "passed": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlng = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlng = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlng = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlng = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlng = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlng = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlngToMd5ToStrlng = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToStrlngToMd5ToStrlng", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  const result = [];\n  let curr = a;\n  while (curr < b) {\n    result.push(curr);\n    curr += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing zeroes in n.\n  For example, genfrateZeroes(12) => 2\n  genfrateZeroes(13) => 0\n  genfrateZeroes(14) => 1\n  genfrateZeroes(15) => 0\n  */\nconst genfrateZeroes = n => {\n  let result = 0;\n  while (n > 0) {\n    n -= 1;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing ones in n.\n  For example, genfrateOnes(12) => 1\n  genfrateOnes(13) => 0\n  genfrateOnes(14) => 0\n  genfrateOnes(15) => 0\n  */\nconst genfrateOnes = n => {\n  let result = 0;\n  while (n > 0) {\n    n -= 1;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing digits in n.\n  For example, genfrateDigits(12) => 2\n  genfrateDigits(13) => 0\n  genfrateDigits(14) => 0\n  genfrateDigits(15) => 0\n  */\nconst genfrateDigits = n => {\n  let result = 0;\n  while (n > 0) {\n    n /= 10;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing zeroes in n.\n  For example, genfrateZeroes(12) => 2\n  genfrateZeroes(13) => 0\n  genfrateZeroes(14) => 0\n  genfrateZeroes(15) => 0\n  */\nconst genfrateZeroesDigits = n => {\n  let result = 0;\n  while (n > 0) {\n    n /= 10;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing ones in n.\n  For example, genfrateOnes(12) => 1\n  genfrateOnes(13) => 0\n  genfrateOnes(14) => 0\n  genfrateOnes(15) => 0\n  */\nconst genfrateOnesDigits = n => {\n  let result = 0;\n  while (n > 0) {\n    n /= 10;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing digits in n.\n  For example, genfrateDigits(12) => 2\n  genfrateDigits(13) => 0\n  genfrateDigits(14) => 0\n  genfrateDigits(15) => 0\n  */\nconst genfrateDigitsDigits = n => {\n  let result = 0;\n  while (n > 0) {\n    n /= 10;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing zeroes in n.\n  For example, genfrateZeroes(12) => 2\n  genfrateZeroes(13) => 0\n  genfrateZeroes(14) => 0\n  genfrateZeroes(15) => 0\n  */\nconst genfrateZeroesDigitsDigits = n => {\n  let result = 0;\n  while (n > 0) {\n    n /= 10;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing ones in n.\n  For example, genfrateOnes(12) => 1\n  genfrateOnes(13) => 0\n  genfrateOnes(14) => 0\n  genfrateOnes(15) => 0\n  */\nconst genfrateOnesDigitsDigits = n => {\n  let result = 0;\n  while (n > 0) {\n    n /= 10;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing digits in n.\n  For example, genfrateDigits(12) => 2\n  genfrateDigits(13) => 0\n  genfrateDigits(14) => 0\n  genfrateDigits(15) => 0\n  */\nconst genfrateDigitsDigitsDigits = n => {\n  let result = 0;\n  while (n > 0) {\n    n /= 10;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing zeroes in n.\n  For example, genfrateZeroes(12) => 2\n  genfrateZeroes(13) => 0\n  genfrateZeroes(14) => 0\n  genfrateZeroes(15) => 0\n  */\nconst genfrateZeroesDigitsDigitsDigits = n => {\n  let result = 0;\n  while (n > 0) {\n    n /= 10;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing ones in n.\n  For example, genfrateOnes(12) => 1\n  genfrateOnes(13) => 0\n  genfrateOnes(14) => 0\n  genfrateOnes(15) => 0\n  */\nconst genfrateOnesDigitsDigitsDigits = n => {\n  let result = 0;\n  while (n > 0) {\n    n /= 10;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing digits in n.\n  For example, genfrateDigits(12) => 2\n  genfrateDigits(13) => 0\n  genfrateDigits(14) => 0\n  genfrateDigits(15) => 0\n  */\nconst genfrateDigitsDigitsDigitsDigits = n => {\n  let result = 0;\n  while (n > 0) {\n    n /= 10;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing zeroes in n.\n  For example, genfrateZeroes(12) => 2\n  genfrateZeroes(13) => 0\n  genfrateZeroes(14) => 0\n  genfrateZeroes(15) => 0\n  */\nconst genfrateZeroesDigitsDigitsDigitsDigits = n => {\n  let result = 0;\n  while (n > 0) {\n    n /= 10;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing ones in n.\n  For example, genfrateOnes(12) => 1\n  genfrateOnes(13) => 0\n  genfrateOnes(14) => 0\n  genfrateOnes(15) => 0\n  */\nconst genfrateOnesDigitsDigitsDigitsDigits = n => {\n  let result = 0;\n  while (n > 0) {\n    n /= 10;\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of trailing digits in n.\n  For example, genfrateDigits(12) => 2\n  genfrateDigits(13) => 0\n  genfrateDigits(14) => 0\n  genfrateDigits(15) => 0\n  */\nconst genfrateDigitsDigitsDigitsDigitsDigits = n => {\n  let result = 0;\n  while (n > 0) {\n    n /= 10;\n    result += 1;\n  }\n  return ", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note.includes('.')) {\n      result.push(1);\n    } else if (note.includes('o')) {\n      result.push(4);\n    } else if (note.includes('.')) {\n      result.push(2);\n    } else {\n      result.push(1);\n    }\n  }\n  return result;\n};\n\nmodule.exports = { pardeMusic };\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nconst notes = ['o', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', '", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string.charAt(index);\n    if (char === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * If there are multiple possible permutations, return them in order.\n * If there are multiple possible permutations, return them in random order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * If there are multiple possible permutations, return them in reverse lexicographic order.\n * If there are multiple possible permutations, return them in lexicographic order.\n * ", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sorted = [];\n  let last = 0;\n  let lastNumber = '';\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number === 'zero') {\n      sorted.push(lastNumber);\n      lastNumber = '';\n    } else if (number === 'one') {\n      sorted.push(lastNumber);\n      lastNumber = 'one';\n    } else if (number === 'two') {\n      sorted.push(lastNumber);\n      lastNumber = 'two';\n    } else if (number === 'three') {\n      sorted.push(lastNumber);\n      lastNumber = 'three';\n    } else if (number === 'four') {\n      sorted.push(lastNumber);\n      lastNumber = 'four';\n    } else if (number === 'five') {\n      sorted.push(lastNumber);\n      lastNumber = 'five';\n    } else if (number ==='six') {\n      sorted.push(lastNumber);\n      lastNumber ='six';\n    } else if (number ==='seven') {\n      sorted.push(lastNumber);\n      lastNumber ='seven';\n    } else if (number === 'eight') {\n      sorted.push(lastNumber);\n      lastNumber = 'eight';\n    } else if (number === 'nine') {\n      sorted.push(lastNumber);\n      lastNumber = 'nine';\n    } else {\n      lastNumber = number;\n    }\n  }\n  sorted.push(lastNumber);\n  return sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbersReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sorted = [];\n  let last = 0;\n  let lastNumber = '';\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number === 'zero') {\n      sorted.push(lastNumber);\n      lastNumber = '';\n    } else if (number === 'one') {\n      sorted.push(lastNumber);\n      lastNumber = 'one';\n    } else if (number === 'two') {\n      sorted.push(lastNumber);\n      lastNumber = 'two';\n    } else if (number === 'three') {\n      sorted.push(lastNumber);\n      lastNumber = 'three';\n    } else if (number === 'four') {\n      sorted.push(lastNumber);\n      lastNumber = 'four';\n    } else if (number === 'five') {\n      sorted.push(lastNumber);\n      lastNumber = 'five';\n    } else if (number ==='six') {\n      sorted.push(lastNumber);\n      lastNumber ='six';\n    } else if (number ==='seven') {\n      sorted.push(lastNumber);\n      lastNumber ='seven';\n    } else if (number === 'eight') {\n      sorted.push(lastNumber);\n      lastNumber = 'eight';\n    } else if (number === 'nine') {\n      sorted.push(lastNumber);\n      lastNumber = 'nine';\n    } else {\n      lastNumber = number;\n    }\n  }\n  sorted.push(lastNumber);\n  return sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbersReverseReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sorted = [];\n  let last = 0;\n  let lastNumber = '';\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number === 'zero') {\n      sorted.push(lastNumber);\n      lastNumber = '';\n    } else if (number === 'one') {\n      sorted.push(lastNumber);\n      lastNumber = 'one';\n    } else if (number === 'two') {\n      sorted.push(lastNumber);\n      lastNumber = 'two';\n    } else if (number === 'three') {\n      sorted.push(lastNumber);\n      lastNumber = 'three';\n    } else if (number === 'four') {\n      sorted.push(lastNumber);\n      lastNumber = 'four';\n    } else if (number === 'five') {\n      sorted.push(lastNumber);\n      lastNumber = 'five';\n    } else if (number ==='six') {\n      sorted.push(lastNumber);\n      lastNumber ='six';\n    } else if (number ==='seven') {\n      sorted.push(lastNumber);\n      lastNumber ='seven';\n    } else if (number === 'eight') {\n      sorted.push(lastNumber);\n      lastNumber = 'eight';\n    } else if (number === 'nine') {\n      sorted.push(lastNumber);\n      lastNumber = 'nine';\n    } else {\n      lastNumber = number;\n    }\n  }\n  sorted.push(lastNumber);\n  return sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbersReverseReverseReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sorted = [];\n  let last = 0;\n  let lastNumber = '';\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number === 'zero') {\n      sorted.push(lastNumber);\n      lastNumber = '';\n    } else if (number === 'one') {\n      sorted.push(lastNumber);\n      lastNumber = 'one';\n    } else if (number === 'two') {\n      sorted.push(lastNumber);\n      lastNumber = 'two';\n    } else if (number === 'three') {\n      sorted.push(lastNumber);\n      lastNumber = 'three';\n    } else if (number === 'four') {\n      sorted.push(lastNumber);\n      lastNumber = 'four';\n    } else if (number === 'five') {\n      sorted.push(lastNumber);\n      lastNumber = 'five';\n    } else if (number ==='six') {\n      sorted.push(lastNumber);\n      lastNumber ='six';\n    } else if (number ==='seven') {\n      sorted.push(lastNumber);\n      lastNumber ='seven';\n    } else if (number === 'eight') {\n      sorted.push(lastNumber);\n      lastNumber = 'eight';\n    } else if (number === 'nine') {\n      sorted.push(lastNumber);\n      lastNumber = 'nine';\n    } else {\n      lastNumber = number;\n    }\n  }\n  sorted.push(lastNumber);\n  return sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sor", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  3.5\n  */\nconst trujcateDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  3.5\n  */\nconst trujcateDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  3.5\n  */\nconst trujcateDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  3.5\n  */\nconst trujcateDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  3.5\n  */\nconst trujcateDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  3.5\n  */\nconst trujcateDecimalDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerDecimalDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  3.5\n  */\nconst trujcateDecimalDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateIntegerDecimalDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.slice(0, integer.length - 1) : integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always ", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minIndex = -1;\n  let minValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minValue;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n      minValue = numbers[i];\n    }\n  }\n  return [numbers[minIndex], numbers[minIndex + 1]];\n};\n\n/**\n  Returns the largest number in the array. Returns undefined if there are no numbers in the array.\n  >>> max([1, 2, 3])\n  3\n  >>> max([1, 2, 3, 4])\n  4\n  >>> max([1, 2, 3, 4], 2)\n  4\n  >>> max([1, 2, 3, 4], 3)\n  4\n  >>> max([1, 2, 3, 4], 4)\n  4\n  >>> max([1, 2, 3, 4], 5)\n  5\n  >>> max([1, 2, 3, 4], 6)\n  5\n  >>> max([1, 2, 3, 4], 7)\n  5\n  >>> max([1, 2, 3, 4], 8)\n  5\n  >>> max([1, 2, 3, 4], 9)\n  5\n  >>> max([1, 2, 3, 4], 10)\n  5\n  >>> max([1, 2, 3, 4], 11)\n  5\n  >>> max([1, 2, 3, 4], 12)\n  5\n  >>> max([1, 2, 3, 4], 13)\n  5\n  >>> max([1, 2, 3, 4], 14)\n  5\n  >>> max([1, 2, 3, 4], 15)\n  5\n  >>> max([1, 2, 3, 4], 16)\n  5\n  >>> max([1, 2, 3, 4], 17)\n  5\n  >>> max([1, 2, 3, 4], 18)\n  5\n  >>> max([1, 2, 3, 4], 19)\n  5\n  >>> max([1, 2, 3, 4], 20)\n  5\n  >>> max([1, 2, 3, 4], 21)\n  5\n  >>> max([1, 2, 3, 4], 22)\n  5\n  >>> max([1, 2, 3, 4], 23)\n  5\n  >>> max([1, 2, 3, 4], 24)\n  5\n  >>> max([1, 2, 3, 4], 25)\n  5\n  >>> max([1, 2, 3, 4], 26)\n  5\n  >>> max([1, 2, 3, 4], 27)\n  5\n  >>> max([1, 2, 3, 4], 28)\n  5\n  >>> max([1, 2, 3, 4], 29)\n  5\n  >>> max([1, 2, 3, 4], 30)\n  5\n  >>> max([1, 2, 3, 4], 31)\n  5\n  >>> max([1, 2, 3, 4], 32)\n  5\n  >>> max([1, 2, 3, 4], 33)\n  5\n  >>> max([1, 2, 3, 4], 34)\n  5\n  >>> max([1, 2, 3, 4], 35)\n  5\n  >>> max([1, 2, 3, 4], 36)\n  5\n  >>> max([1, 2, 3, 4], 37)\n  5\n  >>> max([1, 2, 3, 4], 38)\n  5\n  >>> max([1, 2, 3, 4], 39)\n  5\n  >>> max([1, 2, 3, 4], 40)\n  5\n  >>> max([1, 2, 3, 4], 41)\n  5\n  >>> max([1, 2, 3, 4], 42)\n  5\n  >>> max([1, 2, 3, 4], 43)\n  5\n  >>> max([1, 2, 3, 4], 44)\n  5\n  >>> max([1, 2, 3, 4], 45)\n  5\n  >>> max([1, 2, 3, 4], 46)\n  5\n  >>> max([1, 2, 3, 4], 47)\n  5\n  >>> max([1, 2, 3, 4], 48)\n  5\n  >>> max([1, 2, 3, 4], 49)\n  5\n  >>> max([1, 2, 3, 4], 50)\n  5\n  >>> max([1, 2, 3, 4], 51)\n  5\n  >>> max([1, 2, 3, 4], 52)\n  5\n  >>> max([1, 2, 3, 4], 53)\n  5\n  >>> max([1, 2, 3, 4], 54)\n  5\n  >>> max([1, 2, 3, 4], 55)\n  5\n  >>> max([1, 2, 3, 4], 56)\n  5\n  >>> max([1, 2, 3, 4], 57)\n  5\n  >>> max([1, 2, 3, 4], 58)\n  5\n  >>> max([1, 2, 3, 4], 59)\n  5\n  >>> max([1, 2, 3, 4], 60)\n  5\n  >>> max([1, 2, 3, 4], 61)\n  5\n  >>> max([1, 2, 3, 4], 62)\n  5\n  >>> max([1, 2, 3, 4], 63)\n  5\n  >>> max([1, 2, 3, 4], 64)\n  5\n  >>> max([1, 2, 3, 4], 65)\n  5\n  >>> max([1, 2, 3, 4], 66)\n  5\n  >>> max([1, 2, 3, 4], 67)\n  5\n  >>> max([1, 2, 3, 4], 68)\n  5\n  >>> max([1, 2, 3, 4], 69)\n  5\n  >>> max([1, 2, 3, 4], 70)\n  5\n  >>> max([1, 2, 3, 4], 71)\n  5\n  >>> max([1, 2, 3, 4], 72)\n  5\n  >>> max([1, 2, 3, 4], 73)\n  5\n  >>> max([1, 2, 3, 4], 74)\n  5\n  >>> max([1, 2, 3, 4], 75)\n  5\n  >>> max([1, 2, 3, 4], 76)\n  5\n  >>> max([1, 2, 3, 4], 77)\n  5\n  >>> max([1, 2, 3, 4], 78)\n  5\n  >>> max([1, 2, 3, 4], 79)\n  5\n  >>> max([1, 2, 3, 4], 80)\n  5\n  >>> max([1, 2, 3, 4], 81)\n  5\n  >>> max([1, 2, 3, 4], 82)\n  5\n  >>> max([1, 2, 3, 4], 83)\n  5\n  >>> max([1, 2, 3, 4], 84)\n  5\n  >>> max([1, 2, 3, 4], 85)\n  5\n  >>> max([1, 2, 3, 4], 86)\n  5\n  >>> max([1, 2, 3, 4], 87)\n  5\n  >>> max([1, 2, 3, 4], 88)\n  5\n  >>> max([1, 2, 3, 4], 89)\n  5\n  >>> max([1, 2, 3, 4], 90)\n  5\n  >>> max([1, 2, 3, 4], 91)\n  5\n  >>> max([1, 2, 3, 4], 92)\n  5\n  >>> max([1, 2, 3, 4], 93)\n  5\n  >>> max([1, 2, 3, 4], 94)\n  5\n  >>> max([1, 2, 3, 4], 95)\n  5\n  >>> max([1, 2, 3, 4], 96)\n  5\n  >>> max([1, 2, 3, 4], 97)\n  5\n  >>> max([1, 2, 3, 4], 98)\n  5\n  >>> max([1, 2, 3, 4], 99)\n  5\n  >>> max([1, 2, 3, 4], 100)\n  5\n  >>> max([1, 2, 3, 4], 101)\n  5\n  >>> max([1, 2, 3, 4], 102)\n  5\n  >>> max([1, 2, 3, 4], 103)\n  5\n  >>> max([1, 2, 3, 4], 104)\n  5\n  >>> max([1, 2, 3, 4], 105)\n  5\n  >>> max([1, 2, 3, 4], 106)\n  5\n  >>> max([1, 2, 3, 4], 107)\n  5\n  >>> max([1, 2, 3, 4], 108)\n  5\n  >>> max([1, 2, 3, 4], 109)\n  5\n  >>> max([1, 2, 3, 4], 110)\n  5\n  >>> max([1, 2, 3, 4], 111)\n  5\n  >>> max([1, 2, 3, 4], 112)\n  5\n  >>> max([1, 2, 3, 4], 113)\n  5\n  >>> max([1, 2, 3, 4], 114)\n  5\n  >>> max([1, 2, 3, 4], 115)\n", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max + 0)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max + 0)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithZeroWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max + 0)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithZeroWithZeroWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max + 0)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithZeroWithZeroWithZeroWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithZeroWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max + 0)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithZeroWithZeroWithZeroWithZeroWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max + 0)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max + 0)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max + 0)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max + 0)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = [1.0, 2.0, 3.0, 4.0, 5.0]\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max + 0)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> res", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/* Filter given list of any python values only for floats\n  >>> filherFloats(['a', 3.14, 5])\n  [5]\n  >>> filherFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherFloats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/* Filter given list of any python values only for strings\n  >>> filherStrings(['a', 3.14, 5])\n  [5]\n  >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  [5]\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/* Filter given list of any python values only for None\n  >>> filherNone([])\n  []\n  >>> filherNone([None])\n  [None]\n  >>> filherNone([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filherNone = (values) => {\n  return values.filter(value => value === null);\n};\n\n/* Filter given list of any python values only for empty lists\n  >>> filherEmpty([])\n  []\n  >>> filherEmpty([[]])\n  [[]]\n  >>> filherEmpty([[], 1, 2])\n  [[], 1, 2]\n  */\nconst filherEmpty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/* Filter given list of any python values only for empty dictionaries\n  >>> filherEmptyDict({})\n  {}\n  >>> filherEmptyDict({1: 2})\n  {1: 2}\n  >>> filherEmptyDict({1: 2, 3: 4})\n  {1: 2, 3: 4}\n  */\nconst filherEmptyDict = (values) => {\n  return values.filter(value => value === {});\n};\n\n/* Filter given list of any python values only for empty strings\n  >>> filherEmptyString(\"\")\n  \"\"\n  >>> filherEmptyString(\"abc\")\n  \"abc\"\n  >>> filherEmptyString([\"\"])\n  [\"\"]\n  >>> filherEmptyString([\"\", \"abc\"])\n  [\"\", \"abc\"]\n  */\nconst filherEmptyString = (values) => {\n  return values.filter(value => value === '');\n};\n\n/* Filter given list of any python values only for empty booleans\n  >>> filherEmptyBoolean(true)\n  true\n  >>> filherEmptyBoolean(false)\n  false\n  >>> filherEmptyBoolean(null)\n  null\n  >>> filherEmptyBoolean(undefined)\n  undefined\n  */\nconst filherEmptyBoolean = (values) => {\n  return values.filter(value => value === true);\n};\n\n/* Filter given list of any python values only for empty None\n  >>> filherEmptyNone(null)\n  null\n  >>> filherEmptyNone(undefined)\n  undefined\n  */\nconst filherEmptyNone = (values) => {\n  return values.filter(value => value === null);\n};\n\n/* Filter given list of any python values only for empty lists\n  >>> filherEmptyList([])\n  []\n  >>> filherEmptyList([[]])\n  [[]]\n  >>> filherEmptyList([[], 1, 2])\n  [[], 1, 2]\n  */\nconst filherEmptyList = (values) => {\n  return values.filter(value => value === []);\n};\n\n/* Filter given list of any python values only for empty dictionaries\n  >>> filherEmptyDict({})\n  {}\n  >>> filherEmptyDict({1: 2})\n  {1: 2}\n  >>> filherEmptyDict({1: 2, 3: 4})\n  {1: 2, 3: 4}\n  */\nconst filherEmptyDict = (values) => {\n  return values.filter(value => value === {});\n};\n\n/* Filter given list of any python values only for empty strings\n  >>> filherEmptyString(\"\")\n  \"\"\n  >>> filherEmptyString(\"abc\")\n  \"abc\"\n  >>> filherEmptyString([\"\"])\n  [\"\"]\n  >>> filherEmptyString([\"\", \"abc\"])\n  [\"\", \"abc\"]\n  */\nconst filherEmptyString = (values) => {\n  return values.filter(value => value === '');\n};\n\n/* Filter given list of any python values only for empty booleans\n  >>> filherEmptyBoolean(true)\n  true\n  >>> filherEmptyBoolean(false)\n  false\n  >>> filherEmptyBoolean(null)\n  null\n  >>> filherEmptyBoolean(undefined)\n  undefined\n  */\nconst filherEmptyBoolean = (values) => {\n  return values.filter(value => value === true);\n};\n\n/* Filter given list of any python values only for empty None\n  >>> filherEmptyNone(null)\n  null\n  >>> filherEmptyNone(undefined)\n  undefined\n  */\nconst filherEmptyNone = (values) => {\n  return values.filter(value => value === null);\n};\n\n/* Filter given list of any python values only for empty lists\n  >>> filherEmptyList([])\n  []\n  >>> filherEmptyList([[]])\n  [[]]\n  >>> filherEmptyList([[], 1, 2])\n  [[], 1, 2]\n  */\nconst filherEmptyList = (values) => {\n  return values.filter(value => value === []);\n};\n\n/* Filter given list of any python values only for empty dictionaries\n  >>> filherEmptyDict({})\n  {}\n  >>> filherEmptyDict({1: 2})\n  {1: 2}\n  >>> filherEmptyDict({1: 2, 3: 4})\n  {1: 2, 3: 4}\n  */\nconst filherEmptyDict = (values) => {\n  return values.filter(value => value === {});\n};\n\n/* Filter given list of any python values only for empty strings\n  >>> filherEmptyString(\"\")\n  \"\"\n  >>> filherEmptyString(\"abc\")\n  \"abc\"\n  >>> filherEmptyString([\"\"])\n  [\"\"]\n  >>> filherEmptyString([\"\", \"abc\"])\n  [\"\", \"abc\"]\n  */\nconst filherEmptyString = (values) => {\n  return values.filter(value => value === '');\n};\n\n/* Filter given list of any python values only for empty booleans\n  >>> filherEmptyBoolean(true)\n  true\n  >>> filherEmptyBoolean(false)\n  false\n  >>> filherEmptyBoolean(null)\n  null\n  >>> filherEmptyBoolean(undefined)\n  undefined\n  */\nconst filherEmptyBoolean = (values) => {\n  return values.filter(value => value === true);\n};\n\n/* Filter given list of any python values only for empty None\n  >>> filherEmptyNone(null)\n  null\n  >>> filherEmptyNone(undefined)\n  undefined\n  */\nconst filherEmptyNone = (values) => {\n  return values.filter(value => value === null);\n};\n\n/* Filter given list of any python values only for empty lists\n  >>> filherEmptyList([])\n  []\n  >>> filherEmptyList([[]])\n  [[]]\n  >>> filherEmptyList([[], 1, 2])\n  [[], 1, 2]\n  */\nconst filherEmptyList = (values) => {\n  return values.filter(value => ", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen2 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen3 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen4 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen5 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen6 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen7 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen8 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen9 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen10 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen11 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen12 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen13 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen14 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen15 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen16 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen17 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen18 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return length;\n};\n\n/* Return length of given string\n  >>> strlen(strpen('abc'))\n  3\n  >>> strlen(strpen(''))\n  0\n  >>> strlen(strpen('abc'))\n  3\n  */\nconst strlen19 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length;\n  }\n  return ", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 15\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 1\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 1\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 1\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 1\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 1\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 1\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 1\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 1\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 1\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largestDivisor(15)\n * 1\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n * >>> smallestDivisor(15)\n * 1\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than ", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    const factor = Math.floor(Math.sqrt(n));\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize2d = (n) => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    const factor = Math.floor(Math.sqrt(n));\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize3d = (n) => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    const factor = Math.floor(Math.sqrt(n));\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize4d = (n) => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    const factor = Math.floor(Math.sqrt(n));\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize5d = (n) => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    const factor = Math.floor(Math.sqrt(n));\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize6d = (n) => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    const factor = Math.floor(Math.sqrt(n));\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize7d = (n) => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    const factor = Math.floor(Math.sqrt(n));\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize8d = (n) => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    const factor = Math.floor(Math.sqrt(n));\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize9d = (n) => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    const factor = Math.floor(Math.sqrt(n));\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize10d = (n) => {\n  const factors = [];\n  let i = 1;\n  while (true) {\n    const factor = Math.floor(Math.sqrt(n));\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false;\n    }\n    seen.add(n);\n    return true;\n  });\n};\n\n/* Given a string, return a new string where all occurrences of 'a' have been replaced by\n  'b'. Replace all occurrences of 'a' with 'b' in-place.\n  >>> replaceAll('a','b','hello')\n  'hello'\n  */\nconst replaceAll = (str, a, b) => {\n  return str.replace(a, b);\n};\n\n/* Given a string, return a new string where all occurrences of 'a' have been replaced by\n  'b', but only if the character at that position is 'c'.\n  Replace all occurrences of 'a' with 'b', but only if the character at that position is 'c'.\n  >>> replaceAll('a','b','c','hello')\n  'hello'\n  */\nconst replaceAllOnChar = (str, a, b) => {\n  return str.replace(a, b).replace(/c/gi, '');\n};\n\n/* Given a string, return a new string where all occurrences of 'a' have been replaced by\n  'b', but only if the character at that position is 'c' and replace all occurrences of 'a' with 'b'\n  in-place.\n  >>> replaceAllOnChar('a','b','c','hello')\n  'hello'\n  */\nconst replaceAllOnCharInPlace = (str, a, b) => {\n  return str.replace(a, b).replace(/c/gi, '');\n};\n\n/* Given a string, return a new string where all occurrences of 'a' have been replaced by\n  'b', but only if the character at that position is 'c' and replace all occurrences of 'a' with 'b'\n  in-place, in-place.\n  >>> replaceAllOnCharInPlace('a','b','c','hello')\n  'hello'\n  */\nconst replaceAllOnCharInPlaceInPlace = (str, a, b) => {\n  return str.replace(a, b).replace(/c/gi, '');\n};\n\n/* Given a string, return a new string where all occurrences of 'a' have been replaced by\n  'b', but only if the character at that position is 'c' and replace all occurrences of 'a' with 'b'\n  in-place, in-place, in-place.\n  >>> replaceAllOnCharInPlaceInPlace('a','b','c','hello')\n  'hello'\n  */\nconst replaceAllOnCharInPlaceInPlaceInPlace = (str, a, b) => {\n  return str.replace(a, b).replace(/c/gi, '');\n};\n\n/* Given a string, return a new string where all occurrences of 'a' have been replaced by\n  'b', but only if the character at that position is 'c' and replace all occurrences of 'a' with 'b'\n  in-place, in-place, in-place, in-place.\n  >>> replaceAllOnCharInPlaceInPlaceInPlace('a','b','c','hello')\n  'hello'\n  */\nconst replaceAllOnCharInPlaceInPlaceInPlaceInPlace = (str, a, b) => {\n  return str.replace(a, b).replace(/c/gi, '');\n};\n\n/* Given a string, return a new string where all occurrences of 'a' have been replaced by\n  'b', but only if the character at that position is 'c' and replace all occurrences of 'a' with 'b'\n  in-place, in-place, in-place, in-place.\n  >>> replaceAllOnCharInPlaceInPlaceInPlaceInPlace('a','b','c','hello')\n  'hello'\n  */\nconst replaceAllOnCharInPlaceInPlaceInPlaceInPlaceInPlace = (str, a, b) => {\n  return str.replace(a, b).replace(/c/gi, '');\n};\n\n/* Given a string, return a new string where all occurrences of 'a' have been replaced by\n  'b', but only if the character at that position is 'c' and replace all occurrences of 'a' with 'b'\n  in-place, in-place, in-place, in-place, in-place.\n  >>> replaceAllOnCharInPlaceInPlaceInPlaceInPlaceInPlace('a','b','c','hello')\n  'hello'\n  */\nconst replaceAllOnCharInPlaceInPlaceInPlaceInPlaceInPlaceInPlace = (str, a, b) => {\n  return str.replace(a, b).replace(/c/gi, '');\n};\n\n/* Given a string, return a new string where all occurrences of 'a' have been replaced by\n  'b', but only if the character at that position is 'c' and replace all occurrences of 'a' with 'b'\n  in-place, in-place, in-place, in-place, in-place.\n  >>> replaceAllOnCharInPlaceInPlaceInPlaceInPlaceInPlaceInPlace('a','b','c','hello')\n  'hello'\n  */\nconst replaceAllOnCharInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace = (str, a, b) => {\n  return str.replace(a, b).replace(/c/gi, '');\n};\n\n/* Given a string, return a new string where all occurrences of 'a' have been replaced by\n  'b', but only if the character at that position is 'c' and replace all occurrences of 'a' with 'b'\n  in-place, in-place, in-place, in-place, in-place, in-place.\n  >>> replaceAllOnCharInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace('a','b','c','hello')\n  'hello'\n  */\nconst replaceAllOnCharInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace = (str, a, b) => {\n  return str.replace(a, b).replace(/c/gi, '');\n};\n\n/* Given a string, return a new string where all occurrences of 'a' have been replaced by\n  'b', but only if the character at that position is 'c' and replace all occurrences of 'a' with 'b'\n  in-place, in-place, in-place, in-place, in-place, in-place.\n  >>> replaceAllOnCharInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace('a','b','c','hello')\n  'hello'\n  */\nconst replaceAllOnCharInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace = (str, a, b) => {\n  return str.replace(a, b).replace(/c/gi, '');\n};\n\n/* Given a string, return a new string where all occurrences of 'a' have been replaced by\n  'b', but only if the character at that position is 'c' and replace all occurrences of 'a' with 'b'\n  in-place, in-place, in-place, in-place, in-place, in-place.\n  >>> replaceAllOnCharInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace('a','b','c','hello')\n  'hello'\n  */\nconst replaceAllOnCharInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace = (str, a, b) => {\n  return str.replace(a, b).replace(/c/gi, '');\n};\n\n/* Given a string, return a new string where all occurrences of 'a' have been replaced by\n  'b', but only if the character at that position is 'c' and replace all occurrences of 'a' with 'b'\n  in-place, in-place, in-place, in-place, in-place, in-place.\n  >>> replaceAllOnCharInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace('a','b','c','hello')\n", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Returns a new string with all the characters of the given string replaced by the\n * given replacement string.\n * \n * If the given replacement string contains no characters, it returns the\n * given string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement string.\n * \n * If the given replacement string contains multiple characters, it returns the\n * given string with each character replaced by the given replacement ", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + (str? str : ''))\n}\n\n/**\n * Convert a string to camel case\n * >>> camelize('hello_world')\n  'helloWorld'\n  */\nconst camelize = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (_, c) => c? c.toUpperCase() : '')\n}\n\n/**\n * Convert a string to pascal case\n * >>> pascalize('hello_world')\n  'HelloWorld'\n  */\nconst pascalize = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (_, c) => c? c.toLowerCase() : '')\n}\n\n/**\n * Convert a string to snake case\n * >>> snakeize('hello_world')\n  'hello_world'\n  */\nconst snakeize = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (_, c) => c? c.replace(/([A-Z])/g,'$1').toLowerCase() : '')\n}\n\n/**\n * Convert a string to snake case with underscore\n * >>> snakeize('hello_world')\n  'hello_world'\n  */\nconst snakeizeUnderscore = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (_, c) => c? c.replace(/([A-Z])/g,'$1').toLowerCase().replace(/-/g, '_') : '')\n}\n\n/**\n * Convert a string to snake case with dashes\n * >>> snakeize('hello_world')\n  'hello_world'\n  */\nconst snakeizeDashes = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (_, c) => c? c.replace(/([A-Z])/g,'$1').toLowerCase().replace(/-/g, '_') : '')\n}\n\n/**\n * Convert a string to snake case with underscore\n * >>> snakeize('hello_world')\n  'hello_world'\n  */\nconst snakeizeUnderscoreDashes = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (_, c) => c? c.replace(/([A-Z])/g,'$1').toLowerCase().replace(/-/g, '_') : '')\n}\n\n/**\n * Convert a string to snake case with dashes\n * >>> snakeize('hello_world')\n  'hello_world'\n  */\nconst snakeizeDashesUnderscore = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (_, c) => c? c.replace(/([A-Z])/g,'$1').toLowerCase().replace(/-/g, '_') : '')\n}\n\n/**\n * Convert a string to snake case with underscore\n * >>> snakeize('hello_world')\n  'hello_world'\n  */\nconst snakeizeUnderscoreDashesUnderscore = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (_, c) => c? c.replace(/([A-Z])/g,'$1').toLowerCase().replace(/-/g, '_') : '')\n}\n\n/**\n * Convert a string to snake case with dashes\n * >>> snakeize('hello_world')\n  'hello_world'\n  */\nconst snakeizeDashesUnderscoreDashesUnderscore = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (_, c) => c? c.replace(/([A-Z])/g,'$1').toLowerCase().replace(/-/g, '_') : '')\n}\n\n/**\n * Convert a string to snake case with dashes\n * >>> snakeize('hello_world')\n  'hello_world'\n  */\nconst snakeizeDashesUnderscoreDashesUnderscoreDashesUnderscore = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (_, c) => c? c.replace(/([A-Z])/g,'$1').toLowerCase().replace(/-/g, '_') : '')\n}\n\n/**\n * Convert a string to snake case with dashes\n * >>> snakeize('hello_world')\n  'hello_world'\n  */\nconst snakeizeDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscore = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (_, c) => c? c.replace(/([A-Z])/g,'$1').toLowerCase().replace(/-/g, '_') : '')\n}\n\n/**\n * Convert a string to snake case with dashes\n * >>> snakeize('hello_world')\n  'hello_world'\n  */\nconst snakeizeDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscoreDashesUnderscore", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filherBySuffix([], 'a')\n  []\n  >>> filherBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filherBySuffix([], 'a')\n  []\n  >>> filherBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherBySuffixNot = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filherByPrefixNot([], 'a')\n  []\n  >>> filherByPrefixNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByPrefixNotNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not end with a given prefix and do not start with a given suffix.\n  >>> filherBySuffixNot([], 'a')\n  []\n  >>> filherBySuffixNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherBySuffixNotNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(suffix) &&!string.endsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filherByPrefixNotNot([], 'a')\n  []\n  >>> filherByPrefixNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByPrefixNotNotNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not end with a given prefix and do not start with a given suffix.\n  >>> filherBySuffixNotNot([], 'a')\n  []\n  >>> filherBySuffixNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherBySuffixNotNotNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(suffix) &&!string.endsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and end with a given suffix.\n  >>> filherByPrefixNotNotNot([], 'a')\n  []\n  >>> filherByPrefixNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByPrefixNotNotNotNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not end with a given prefix and start with a given suffix.\n  >>> filherBySuffixNotNotNot([], 'a')\n  []\n  >>> filherBySuffixNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherBySuffixNotNotNotNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(suffix) &&!string.endsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and end with a given suffix.\n  >>> filherByPrefixNotNotNotNot([], 'a')\n  []\n  >>> filherByPrefixNotNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByPrefixNotNotNotNotNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and start with a given suffix.\n  >>> filherBySuffixNotNotNot([], 'a')\n  []\n  >>> filherBySuffixNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherBySuffixNotNotNotNotNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(suffix) &&!string.endsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and end with a given suffix.\n  >>> filherByPrefixNotNotNotNotNot([], 'a')\n  []\n  >>> filherByPrefixNotNotNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByPrefixNotNotNotNotNotNotNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and start with a given suffix.\n  >>> filherBySuffixNotNotNotNotNot([], 'a')\n  []\n  >>> filherBySuffixNotNotNotNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherBySuffixNotNotNotNotNotNotNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(suffix) &&!string.endsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and end with a given suffix.\n  >>> filherByPrefixNotNotNotNotNotNotNot([], 'a')\n  []\n  >>> filherByPrefixNotNotNotNotNotNotNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByPrefixNotNotNotNotNotNotNot", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  let balanceChanged = false;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === '-') {\n      balance -= operations[i + 1];\n      balanceChanged = true;\n    } else if (operations[i] === '+') {\n      balance += operations[i + 1];\n      balanceChanged = true;\n    }\n  }\n  return balanceChanged && balance === 0;\n};\n\nmodule.exports = bellwZero;\n\n},{}],6:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([-4, -5, -6, -7, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  let result = [];\n  l.forEach((item) => {\n    if (item > 0) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains NaN or Infinity\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n */\nconst isPositive = (l) => {\n  return l.every(item => item > 0);\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains NaN or Infinity\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n */\nconst isNegative = (l) => {\n  return l.every(item => item < 0);\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains NaN or Infinity\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n */\nconst isPositiveOrZero = (l) => {\n  return l.every(item => item > 0 || item === 0);\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains NaN or Infinity\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n */\nconst isNegativeOrZero = (l) => {\n  return l.every(item => item < 0 || item === 0);\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains NaN or Infinity\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n */\nconst isPositiveOrZeroOrNaN = (l) => {\n  return l.every(item => item > 0 || item === 0 || isNaN(item));\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains NaN or Infinity\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n */\nconst isNegativeOrZeroOrNaN = (l) => {\n  return l.every(item => item < 0 || item === 0 || isNaN(item));\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains NaN or Infinity\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n */\nconst isPositiveOrZeroOrInfinity = (l) => {\n  return l.every(item => item > 0 || item === 0 || isFinite(item));\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains NaN or Infinity\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n */\nconst isNegativeOrZeroOrInfinity = (l) => {\n  return l.every(item => item < 0 || item === 0 || isFinite(item));\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains NaN or Infinity\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n */\nconst isPositiveOrZeroOrNegativeInfinity = (l) => {\n  return l.every(item => item > 0 || item === 0 || isFinite(item) || item < 0);\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains NaN or Infinity\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n */\nconst isNegativeOrZeroOrNegativeInfinity = (l) => {\n  return l.every(item => item < 0 || item === 0 || isFinite(item) || item < 0);\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains NaN or Infinity\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n */\nconst isPositiveOrZeroOrNegativeInfinityOrNaN = (l) => {\n  return l.every(item => item > 0 || item === 0 || isFinite(item) || isNaN(item));\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains NaN or Infinity\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n */\nconst isNegativeOrZeroOrNegativeInfinityOrNaN = (l) => {\n  return l.every(item => item < 0 || item === 0 || isFinite(item) || isNaN(item));\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains NaN or Infinity\n * Returns false if the list contains any non-numeric values.\n * Returns false if the list contains any negative values.\n * Returns false if the list contains any NaN values.\n * Returns false if the list contains any Infinity values.\n */\nconst isPositiveOrZeroOrNegativeInfinityOrInfinity = (l) => {\n  return l.every(item => item > 0 || item === 0 || isFinite(item) || isFinite(item));\n};\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false ", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return false;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return false;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return false;\n  if (n % 41 === 0) return false;\n  if (n % 43 === 0) return false;\n  if (n % 47 === 0) return false;\n  if (n % 53 === 0) return false;\n  if (n % 59 === 0) return false;\n  if (n % 61 === 0) return false;\n  if (n % 67 === 0) return false;\n  if (n % 71 === 0) return false;\n  if (n % 73 === 0) return false;\n  if (n % 79 === 0) return false;\n  if (n % 83 === 0) return false;\n  if (n % 89 === 0) return false;\n  if (n % 97 === 0) return false;\n  if (n % 101 === 0) return false;\n  if (n % 103 === 0) return false;\n  if (n % 107 === 0) return false;\n  if (n % 109 === 0) return false;\n  if (n % 111 === 0) return false;\n  if (n % 113 === 0) return false;\n  if (n % 115 === 0) return false;\n  if (n % 121 === 0) return false;\n  if (n % 123 === 0) return false;\n  if (n % 125 === 0) return false;\n  if (n % 129 === 0) return false;\n  if (n % 131 === 0) return false;\n  if (n % 133 === 0) return false;\n  if (n % 135 === 0) return false;\n  if (n % 137 === 0) return false;\n  if (n % 139 === 0) return false;\n  if (n % 141 === 0) return false;\n  if (n % 143 === 0) return false;\n  if (n % 145 === 0) return false;\n  if (n % 147 === 0) return false;\n  if (n % 149 === 0) return false;\n  if (n % 151 === 0) return false;\n  if (n % 153 === 0) return false;\n  if (n % 155 === 0) return false;\n  if (n % 157 === 0) return false;\n  if (n % 159 === 0) return false;\n  if (n % 161 === 0) return false;\n  if (n % 163 === 0) return false;\n  if (n % 165 === 0) return false;\n  if (n % 167 === 0) return false;\n  if (n % 169 === 0) return false;\n  if (n % 171 === 0) return false;\n  if (n % 173 === 0) return false;\n  if (n % 175 === 0) return false;\n  if (n % 177 === 0) return false;\n  if (n % 179 === 0) return false;\n  if (n % 181 === 0) return false;\n  if (n % 183 === 0) return false;\n  if (n % 185 === 0) return false;\n  if (n % 187 === 0) return false;\n  if (n % 189 === 0) return false;\n  if (n % 191 === 0) return false;\n  if (n % 193 === 0) return false;\n  if (n % 195 === 0) return false;\n  if (n % 197 === 0) return false;\n  if (n % 199 === 0) return false;\n  if (n % 201 === 0) return false;\n  if (n % 203 === 0) return false;\n  if (n % 205 === 0) return false;\n  if (n % 207 === 0) return false;\n  if (n % 209 === 0) return false;\n  if (n % 211 === 0) return false;\n  if (n % 213 === 0) return false;\n  if (n % 215 === 0) return false;\n  if (n % 217 === 0) return false;\n  if (n % 219 === 0) return false;\n  if (n % 221 === 0) return false;\n  if (n % 223 === 0) return false;\n  if (n % 225 === 0) return false;\n  if (n % 227 === 0) return false;\n  if (n % 229 === 0) return false;\n  if (n % 231 === 0) return false;\n  if (n % 233 === 0) return false;\n  if (n % 235 === 0) return false;\n  if (n % 239 === 0) return false;\n  if (n % 241 === 0) return false;\n  if (n % 243 === 0) return false;\n  if (n % 245 === 0) return false;\n  if (n % 247 === 0) return false;\n  if (n % 249 === 0) return false;\n  if (n % 251 === 0) return false;\n  if (n % 253 === 0) return false;\n  if (n % 255 === 0) return false;\n  if (n % 257 === 0) return false;\n  if (n % 259 === 0) return false;\n  if (n % 261 === 0) return false;\n  if (n % 263 === 0) return false;\n  if (n % 265 === 0) return false;\n  if (n % 269 === 0) return false;\n  if (n % 271 === 0) return false;\n  if (n % 273 === 0) return false;\n  if (n % 275 === 0) return false;\n  if (n % 277 === 0) return false;\n  if (n % 279 === 0) return false;\n  if (n % 281 === 0) return false;\n  if (n % 283 === 0) return false;\n  if (n % 285 === 0) return false;\n  if (n % 287 === 0) return false;\n  if (n % 289 === 0) return false;\n  if (n % 291 === 0) return false;\n  if (n % 293 === 0) return false;\n  if (n % 295 === 0) return false;\n  if (n % 297 === 0) return false;\n  if (n % 299 === 0) return false;\n  if (n % 301 === 0) return false;\n  if (n % 303 === 0) return false;\n  if (n % 305 === 0) return false;\n  if (n % 307 === 0) return false;\n  if (n % 309 === 0) return false;\n  if (n % 311 === 0) return false;\n  if (n % 315 === 0) return false;\n  if (n % 317 === 0) return false;\n  if (n % 319 === 0) return false;\n  if (n % 321 === 0) return false;\n  if (n % 323 === 0) return false;\n  if (n % 325 === 0) return false;\n  if (n % 327 === 0) return false;\n  if (n % 329 === 0) return false;\n  if (n % 331 === 0) return false;\n  if (n % 333 === 0) return false;\n  if (n % 335 === 0) return false;\n  if (n % 337 === 0) return false;\n  if (n % 339 === 0) return false;\n  if (n % 341 === 0) return false;\n  if (n % 343 === 0) return false;\n  if (n % 345 === 0) return false;\n  if (n % 347 === 0) return false;\n  if (n % 349 === 0) return false;\n  if (n % 351 === 0) return false;\n  if (n % 353 === 0) return false;\n  if (n % 355 === 0) return false;\n  if (n % 357 === 0) return false;\n  if (n % 359 === 0) return false;\n  if (n % 361 === 0) return false;\n  if (n % 363 === 0) return false;\n  if (n % 365 === 0) return false;\n  if (n % 367 === 0) return false;\n  if (n % 369 === 0) return false;\n  if (n % 371 === 0) return false;\n  if (n % 373 === 0) return false;\n  if (n % 375 === 0) return false;\n  if (n % 377 === 0) return false;\n  if (n % 379 === 0) return false;\n  if (n % 381 === 0) return false;\n  if (n % 383 === 0) return false;\n  if (n % 385 === 0) return false;\n  if (n % 387 === 0) return false;\n  if (n % 389 === 0) return false;\n  if (n % 391 === 0) return false;\n  if (n % 393 === 0) return false;\n  if (n % 395 === 0) return false;\n  if (n % 397 === 0) return false;\n  if (n % 399 === 0) return false;\n  if (n % 401 === ", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "<|endoftext|>/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = Infinity;\n  let zeroIndex = 0;\n  let zeroPoint;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      zero = xs[i];\n      zeroIndex = i;\n      zeroPoint = xs[i];\n      break;\n    }\n  }\n  return zero;\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljadd = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index) + item * Math.pow(x, index + 1);\n  }, 0);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljsub = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev - item * Math.pow(x, index) - item * Math.pow(x, index + 1);\n  }, 0);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljmul = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev * item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljdiv = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev / item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljpow = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev * item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljpowdiv = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev * item * Math.pow(x, index) / Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljpowdivpow = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev * item * Math.pow(x, index) / Math.pow(x, index + 1);\n  }, 0);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljpowdivpowdiv = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev * item * Math.pow(x, index) / Math.pow(x, index + 1) / Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljpowdivpowdivpowdiv = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev * item * Math.pow(x, index) / Math.pow(x, index + 1) / Math.pow(x, index + 2) / Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljpowdivpowdivpowdivpowdiv = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev * item * Math.pow(x, index) / Math.pow(x, index + 1) / Math.pow(x, index + 2) / Math.pow(x, index + 3) / Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljpowdivpowdivpowdivpowdivpowdiv = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev * item * Math.pow(x, index) / Math.pow(x, index + 1) / Math.pow(x, index + 2) / Math.pow(x, index + 3) / Math.pow(x, index + 4) / Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljpowdivpowdivpowdivpowdivpowdivpowdivpowdiv = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev * item * Math.pow(x, index) / Math.pow(x, index + 1) / Math.pow(x, index + 2) / Math.pow(x, index + 3) / Math.pow(x, index + 4) / Math.pow(x, index + 5) / Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpowdivpow", "passed": 1}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l151 = l150.slice();\n", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "<|endoftext|>/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] > l[j]) {\n      res.push(l[i]);\n      i++;\n    }\n    if (l[i] < l[j]) {\n      res.push(l[j]);\n      j++;\n    }\n    if (l[i] === l[j]) {\n      k++;\n    }\n  }\n  return res;\n};\n\n/**\n * Return sorted unique elements in a list\n * >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n */\nconst unieueUnique = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] === l[j]) {\n      k++;\n    }\n    if (l[i] > l[j]) {\n      res.push(l[i]);\n      i++;\n    }\n    if (l[i] < l[j]) {\n      res.push(l[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/**\n * Return sorted unique elements in a list\n * >>> unieueUnique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n */\nconst unieueUniqueSorted = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] === l[j]) {\n      k++;\n    }\n    if (l[i] > l[j]) {\n      res.push(l[i]);\n      i++;\n    }\n    if (l[i] < l[j]) {\n      res.push(l[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/**\n * Return sorted unique elements in a list\n * >>> unieueUniqueSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n */\nconst unieueUniqueSortedUnique = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] === l[j]) {\n      k++;\n    }\n    if (l[i] > l[j]) {\n      res.push(l[i]);\n      i++;\n    }\n    if (l[i] < l[j]) {\n      res.push(l[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/**\n * Return sorted unique elements in a list\n * >>> unieueUniqueSortedUnique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n */\nconst unieueUniqueSortedUniqueSorted = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] === l[j]) {\n      k++;\n    }\n    if (l[i] > l[j]) {\n      res.push(l[i]);\n      i++;\n    }\n    if (l[i] < l[j]) {\n      res.push(l[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/**\n * Return sorted unique elements in a list\n * >>> unieueUniqueSortedUniqueSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n */\nconst unieueUniqueSortedUniqueSortedUnique = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] === l[j]) {\n      k++;\n    }\n    if (l[i] > l[j]) {\n      res.push(l[i]);\n      i++;\n    }\n    if (l[i] < l[j]) {\n      res.push(l[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/**\n * Return sorted unique elements in a list\n * >>> unieueUniqueSortedUniqueSortedUniqueSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n */\nconst unieueUniqueSortedUniqueSortedUniqueSorted = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] === l[j]) {\n      k++;\n    }\n    if (l[i] > l[j]) {\n      res.push(l[i]);\n      i++;\n    }\n    if (l[i] < l[j]) {\n      res.push(l[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/**\n * Return sorted unique elements in a list\n * >>> unieueUniqueSortedUniqueSortedUniqueSortedUniqueSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n */\nconst unieueUniqueSortedUniqueSortedUniqueSortedUniqueSorted = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] === l[j]) {\n      k++;\n    }\n    if (l[i] > l[j]) {\n      res.push(l[i]);\n      i++;\n    }\n    if (l[i] < l[j]) {\n      res.push(l[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/**\n * Return sorted unique elements in a list\n * >>> unieueUniqueSortedUniqueSortedUniqueSortedUniqueSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n */\nconst unieueUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] === l[j]) {\n      k++;\n    }\n    if (l[i] > l[j]) {\n      res.push(l[i]);\n      i++;\n    }\n    if (l[i] < l[j]) {\n      res.push(l[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/**\n * Return sorted unique elements in a list\n * >>> unieueUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n */\nconst unieueUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] === l[j]) {\n      k++;\n    }\n    if (l[i] > l[j]) {\n      res.push(l[i]);\n      i++;\n    }\n    if (l[i] < l[j]) {\n      res.push(l[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/**\n * Return sorted unique elements in a list\n * >>> unieueUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n */\nconst unieueUniqueSortedUniqueSortedUniqueSortedUniqueSortedUniqueSortedUnique = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] === l[j]) {\n      k++;\n    }\n    if (l[i] > l[j]) {\n      res.push(l[i]);\n      i++;\n    }\n    if (l[i] < l[j]) {\n      res.push(l[j]);\n      j++;\n    }\n  }\n", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  return l.sort((a, b) => b - a)[0]\n}\n\n/*Return minimum element in the list.\n  >>> minFlement([1, 2, 3])\n  1\n  >>> minFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minFlement = (l) => {\n  return l.sort((a, b) => b - a)[1]\n}\n\n/*Return element at position i in the list.\n  >>> getFlementAt([1, 2, 3], 1)\n  2\n  >>> getFlementAt([1, 2, 3], 2)\n  3\n  >>> getFlementAt([1, 2, 3], 3)\n  undefined\n  */\nconst getFlementAt = (l, i) => {\n  return l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  -5\n  */\nconst getFlementAtWithMin = (l, i) => {\n  return l[i] < 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with maximum value.\n  >>> getFlementAtWithMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  12\n  */\nconst getFlementAtWithMax = (l, i) => {\n  return l[i] > 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMinWithMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  5\n  */\nconst getFlementAtWithMinWithMax = (l, i) => {\n  return l[i] < 0? l[i] : l[i] < 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with maximum value.\n  >>> getFlementAtWithMaxWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  12\n  */\nconst getFlementAtWithMaxWithMin = (l, i) => {\n  return l[i] > 0? l[i] : l[i] > 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMinWithMaxWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  5\n  */\nconst getFlementAtWithMinWithMaxWithMin = (l, i) => {\n  return l[i] < 0? l[i] : l[i] < 0? l[i] : l[i] < 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMaxWithMinWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  12\n  */\nconst getFlementAtWithMaxWithMinWithMin = (l, i) => {\n  return l[i] > 0? l[i] : l[i] > 0? l[i] : l[i] > 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMinWithMaxWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  5\n  */\nconst getFlementAtWithMinWithMaxWithMin = (l, i) => {\n  return l[i] < 0? l[i] : l[i] < 0? l[i] : l[i] < 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMaxWithMinWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  12\n  */\nconst getFlementAtWithMaxWithMinWithMin = (l, i) => {\n  return l[i] > 0? l[i] : l[i] > 0? l[i] : l[i] > 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMinWithMaxWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  5\n  */\nconst getFlementAtWithMinWithMaxWithMin = (l, i) => {\n  return l[i] < 0? l[i] : l[i] < 0? l[i] : l[i] < 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMaxWithMinWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  12\n  */\nconst getFlementAtWithMaxWithMinWithMin = (l, i) => {\n  return l[i] > 0? l[i] : l[i] > 0? l[i] : l[i] > 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMinWithMaxWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  5\n  */\nconst getFlementAtWithMinWithMaxWithMin = (l, i) => {\n  return l[i] < 0? l[i] : l[i] < 0? l[i] : l[i] < 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMaxWithMinWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  12\n  */\nconst getFlementAtWithMaxWithMinWithMin = (l, i) => {\n  return l[i] > 0? l[i] : l[i] > 0? l[i] : l[i] > 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMinWithMaxWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  5\n  */\nconst getFlementAtWithMinWithMaxWithMin = (l, i) => {\n  return l[i] < 0? l[i] : l[i] < 0? l[i] : l[i] < 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMaxWithMinWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  12\n  */\nconst getFlementAtWithMaxWithMinWithMin = (l, i) => {\n  return l[i] > 0? l[i] : l[i] > 0? l[i] : l[i] > 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMinWithMaxWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  5\n  */\nconst getFlementAtWithMinWithMaxWithMin = (l, i) => {\n  return l[i] < 0? l[i] : l[i] < 0? l[i] : l[i] < 0? l[i] : l[i]\n}\n\n/*Return element at position i in the list with minimum value.\n  >>> getFlementAtWithMaxWithMinWithMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  12\n  */\nconst getFlementAtWithMaxWithMinWithMin = (l, i) => {\n  return l[i] > 0? l[i] : l[i] > 0? l[i] : l[i] > 0? l[i] : l[i]\n}", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  let digit = 0;\n  let remainder = 0;\n  let digitCount = 0;\n  let digitCount2 = 0;\n  let digitCount3 = 0;\n  let digitCount4 = 0;\n  let digitCount5 = 0;\n  let digitCount6 = 0;\n  let digitCount7 = 0;\n  let digitCount8 = 0;\n  let digitCount9 = 0;\n  let digitCount10 = 0;\n  let digitCount11 = 0;\n  let digitCount12 = 0;\n  let digitCount13 = 0;\n  let digitCount14 = 0;\n  let digitCount15 = 0;\n  let digitCount16 = 0;\n  let digitCount17 = 0;\n  let digitCount18 = 0;\n  let digitCount19 = 0;\n  let digitCount20 = 0;\n  let digitCount21 = 0;\n  let digitCount22 = 0;\n  let digitCount23 = 0;\n  let digitCount24 = 0;\n  let digitCount25 = 0;\n  let digitCount26 = 0;\n  let digitCount27 = 0;\n  let digitCount28 = 0;\n  let digitCount29 = 0;\n  let digitCount30 = 0;\n  let digitCount31 = 0;\n  let digitCount32 = 0;\n  let digitCount33 = 0;\n  let digitCount34 = 0;\n  let digitCount35 = 0;\n  let digitCount36 = 0;\n  let digitCount37 = 0;\n  let digitCount38 = 0;\n  let digitCount39 = 0;\n  let digitCount40 = 0;\n  let digitCount41 = 0;\n  let digitCount42 = 0;\n  let digitCount43 = 0;\n  let digitCount44 = 0;\n  let digitCount45 = 0;\n  let digitCount46 = 0;\n  let digitCount47 = 0;\n  let digitCount48 = 0;\n  let digitCount49 = 0;\n  let digitCount50 = 0;\n  let digitCount51 = 0;\n  let digitCount52 = 0;\n  let digitCount53 = 0;\n  let digitCount54 = 0;\n  let digitCount55 = 0;\n  let digitCount56 = 0;\n  let digitCount57 = 0;\n  let digitCount58 = 0;\n  let digitCount59 = 0;\n  let digitCount60 = 0;\n  let digitCount61 = 0;\n  let digitCount62 = 0;\n  let digitCount63 = 0;\n  let digitCount64 = 0;\n  let digitCount65 = 0;\n  let digitCount66 = 0;\n  let digitCount67 = 0;\n  let digitCount68 = 0;\n  let digitCount69 = 0;\n  let digitCount70 = 0;\n  let digitCount71 = 0;\n  let digitCount72 = 0;\n  let digitCount73 = 0;\n  let digitCount74 = 0;\n  let digitCount75 = 0;\n  let digitCount76 = 0;\n  let digitCount77 = 0;\n  let digitCount78 = 0;\n  let digitCount79 = 0;\n  let digitCount80 = 0;\n  let digitCount81 = 0;\n  let digitCount82 = 0;\n  let digitCount83 = 0;\n  let digitCount84 = 0;\n  let digitCount85 = 0;\n  let digitCount86 = 0;\n  let digitCount87 = 0;\n  let digitCount88 = 0;\n  let digitCount89 = 0;\n  let digitCount90 = 0;\n  let digitCount91 = 0;\n  let digitCount92 = 0;\n  let digitCount93 = 0;\n  let digitCount94 = 0;\n  let digitCount95 = 0;\n  let digitCount96 = 0;\n  let digitCount97 = 0;\n  let digitCount98 = 0;\n  let digitCount99 = 0;\n  let digitCount100 = 0;\n  let digitCount101 = 0;\n  let digitCount102 = 0;\n  let digitCount103 = 0;\n  let digitCount104 = 0;\n  let digitCount105 = 0;\n  let digitCount106 = 0;\n  let digitCount107 = 0;\n  let digitCount108 = 0;\n  let digitCount109 = 0;\n  let digitCount110 = 0;\n  let digitCount111 = 0;\n  let digitCount112 = 0;\n  let digitCount113 = 0;\n  let digitCount114 = 0;\n  let digitCount115 = 0;\n  let digitCount116 = 0;\n  let digitCount117 = 0;\n  let digitCount118 = 0;\n  let digitCount119 = 0;\n  let digitCount120 = 0;\n  let digitCount121 = 0;\n  let digitCount122 = 0;\n  let digitCount123 = 0;\n  let digitCount124 = 0;\n  let digitCount125 = 0;\n  let digitCount126 = 0;\n  let digitCount127 = 0;\n  let digitCount128 = 0;\n  let digitCount129 = 0;\n  let digitCount130 = 0;\n  let digitCount131 = 0;\n  let digitCount132 = 0;\n  let digitCount133 = 0;\n  let digitCount134 = 0;\n  let digitCount135 = 0;\n  let digitCount136 = 0;\n  let digitCount137 = 0;\n  let digitCount138 = 0;\n  let digitCount139 = 0;\n  let digitCount140 = 0;\n  let digitCount141 = 0;\n  let digitCount142 = 0;\n  let digitCount143 = 0;\n  let digitCount144 = 0;\n  let digitCount145 = 0;\n  let digitCount146 = 0;\n  let digitCount147 = 0;\n  let digitCount148 = 0;\n  let digitCount149 = 0;\n  let digitCount150 = 0;\n  let digitCount151 = 0;\n  let digitCount152 = 0;\n  let digitCount153 = 0;\n  let digitCount154 = 0;\n  let digitCount155 = 0;\n  let digitCount156 = 0;\n  let digitCount157 = 0;\n  let digitCount158 = 0;\n  let digitCount159 = 0;\n  let digitCount160 = 0;\n  let digitCount161 = 0;\n  let digitCount162 = 0;\n  let digitCount163 = 0;\n  let digitCount164 = 0;\n  let digitCount165 = 0;\n  let digitCount166 = 0;\n  let digitCount167 = 0;\n  let digitCount168 = 0;\n  let digitCount169 = 0;\n  let digitCount170 = 0;\n  let digitCount171 = 0;\n  let digitCount172 = 0;\n  let digitCount173 = 0;\n  let digitCount174 = 0;\n  let digitCount175 = 0;\n  let digitCount176 = 0;\n  let digitCount177 = 0;\n  let digitCount178 = 0;\n  let digitCount179 = 0;\n  let digitCount180 = 0;\n  let digitCount181 = 0;\n  let digitCount182 = 0;\n  let digitCount183 = 0;\n  let digitCount184 = 0;\n  let digitCount185 = 0;\n  let digitCount186 = 0;\n  let digitCount187 = 0;\n  let digitCount188 = 0;\n  let digitCount189 = 0;\n  let digitCount190 = 0;\n  let digitCount191 = 0;\n  let digitCount192 = 0;\n  let digitCount193 = 0;\n  let digitCount194 = 0;\n  let digitCount195 = 0;\n  let digitCount196 = 0;\n  let digitCount197 = 0;\n  let digitCount198 = 0;\n  let digitCount199 = 0;\n  let digitCount200 = 0;\n  let digitCount201 = 0;\n  let digitCount202 = 0;\n  let digitCount203 = 0;\n  let digitCount204 = 0;\n  let digitCount205 = 0;\n  let digitCount206 = 0;\n  let digitCount207 = 0;\n  let digitCount208 = 0;\n  let digitCount209 = 0;\n  let digitCount210 = 0;\n  let digitCount211 = 0;\n  let digitCount212 = 0;\n  let digitCount213 = 0;\n  let digitCount214 = 0;\n  let digitCount215 = 0;\n  let digitCount216 = 0;\n  let digitCount217 = 0;\n  let digitCount218 = 0;\n  let digitCount219 = 0;\n  let digitCount220 = 0;\n  let digitCount221 = 0;\n  let digitCount222 = 0;\n  let digitCount223 = 0;\n  let digitCount224 = 0;\n  let digitCount225 = 0;\n  let digitCount226 = 0;\n  let digitCount227 = 0;\n  let digitCount228 = 0;\n  let digitCount229 = 0;\n  let digitCount230 = 0;\n  let digitCount231 = 0;\n  let digitCount232 = 0;\n  let digitCount233 = 0;\n  let digitCount234 = 0;\n  let digitCount235 = 0;\n  let digitCount236 = 0;\n  let digitCount237 = 0;\n  let digitCount238 = 0;\n  let digitCount239 = 0;\n  let digitCount240 = 0;\n  let digitCount241 = 0;\n  let digitCount242 = 0;\n  let digit", "passed": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sorhOdd = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even and odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhEvenOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEvenOdd = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even and odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sorhOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even and odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhEvenOddEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEvenOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even and odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhOddEvenOddEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhOddEvenOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even and odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhEvenOddOddEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEvenOddOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even and odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOddEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhOddEvenOddOddEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEvenOddOddOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even and odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhEvenOddOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhEvenOddOddOddOddEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEvenOddOddOddOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even and odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOddEvenOddOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhOddEvenOddOddOddOddEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEvenOddOddOddOddOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even and odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhEvenOddOddOddOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhEvenOddOddOddOddOddOddEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEvenOddOddOddOddOddOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even and odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOddEvenOddOddOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sorhOddEvenOddOddOddOddOddEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEvenOddOddOddOddOddOddOddEven = (l) => {\n  const ", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns true if string contains only letters, digits and underscores.\n  */\nconst isOnlyLetterOrDigit = (s) => {\n  return /^[a-zA-Z0-9_]*$/.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscores.\n  */\nconst isOnlyLetterOrDigitAndUnderscore = (s) => {\n  return /^[a-zA-Z0-9_]*$/.test(s) && /^_+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscores.\n  */\nconst isOnlyLetterOrDigitAndUnderscoreAndUnderscore = (s) => {\n  return /^[a-zA-Z0-9_]*$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscores.\n  */\nconst isOnlyLetterOrDigitAndUnderscoreAndUnderscoreAndUnderscore = (s) => {\n  return /^[a-zA-Z0-9_]*$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscores.\n  */\nconst isOnlyLetterOrDigitAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscore = (s) => {\n  return /^[a-zA-Z0-9_]*$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscores.\n  */\nconst isOnlyLetterOrDigitAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscore = (s) => {\n  return /^[a-zA-Z0-9_]*$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscores.\n  */\nconst isOnlyLetterOrDigitAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscore = (s) => {\n  return /^[a-zA-Z0-9_]*$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscores.\n  */\nconst isOnlyLetterOrDigitAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscore = (s) => {\n  return /^[a-zA-Z0-9_]*$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscores.\n  */\nconst isOnlyLetterOrDigitAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscore = (s) => {\n  return /^[a-zA-Z0-9_]*$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s) && /^_+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscores.\n  */\nconst isOnlyLetterOrDigitAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnderscoreAndUnder", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "<|endoftext|>/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  let i = 1;\n  while (n) {\n    i++;\n    n %= 10;\n    if (n) {\n      a = b;\n      b = c;\n      c = d;\n      d = a + b;\n    }\n  }\n  return d;\n};\n\n/**\n * Given a number n, return true if it is a prime number.\n * If n is even, return false.\n * If n is odd, return true.\n * If n is divisible by 2, return true.\n * If n is divisible by 3, return false.\n * If n is divisible by 5, return true.\n * If n is divisible by 7, return false.\n * If n is divisible by 11, return true.\n * If n is divisible by 13, return false.\n */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  if (n % 11!== 0) {\n    return true;\n  }\n  if (n % 13!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a palindrome.\n * If n is even, return false.\n * If n is odd, return true.\n * If n is divisible by 2, return true.\n * If n is divisible by 3, return false.\n * If n is divisible by 5, return true.\n * If n is divisible by 7, return false.\n * If n is divisible by 11, return true.\n * If n is divisible by 13, return false.\n */\nconst isPalindrome = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  if (n % 11!== 0) {\n    return true;\n  }\n  if (n % 13!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n * If n is divisible by 2, return true.\n * If n is divisible by 3, return false.\n * If n is divisible by 5, return true.\n * If n is divisible by 7, return false.\n * If n is divisible by 11, return true.\n * If n is divisible by 13, return false.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  if (n % 11!== 0) {\n    return true;\n  }\n  if (n % 13!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n * If n is divisible by 2, return true.\n * If n is divisible by 3, return false.\n * If n is divisible by 5, return true.\n * If n is divisible by 7, return false.\n * If n is divisible by 11, return true.\n * If n is divisible by 13, return false.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  if (n % 11!== 0) {\n    return true;\n  }\n  if (n % 13!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n * If n is divisible by 2, return true.\n * If n is divisible by 3, return false.\n * If n is divisible by 5, return true.\n * If n is divisible by 7, return false.\n * If n is divisible by 11, return true.\n * If n is divisible by 13, return false.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  if (n % 11!== 0) {\n    return true;\n  }\n  if (n % 13!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n * If n is divisible by 2, return true.\n * If n is divisible by 3, return false.\n * If n is divisible by 5, return true.\n * If n is divisible by 7, return false.\n * If n is divisible by 11, return true.\n * If n is divisible by 13, return false.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  if (n % 11!== 0) {\n    return true;\n  }\n  if (n % 13!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n * If n is divisible by 2, return true.\n * If n is divisible by 3, return false.\n * If n is divisible by 5, return true.\n * If n is divisible by 7, return false.\n * If n is divisible by 11, return true.\n * If n is divisible by 13, return false.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  if (n % 11!== 0) {\n    return true;\n  }\n  if (n % 13!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n * If n is divisible by 2, return true.\n * If n is divisible by 3, return false.\n * If n is divisible by 5, return true.\n * If n is divisible by 7, return false.\n * If n is divisible by 11, return true.\n * If n is di", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meajSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meajSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meajSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meajSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meajSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meajSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meajSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meajSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meajSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meajSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meajSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meajSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a center", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "<|endoftext|>/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) return false;\n  }\n  return true;\n};\n\n/**\n  triolesMultiplyToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  multiply by zero, and false otherwise.\n\n  >>> triolesMultiplyToZero([1, 3, 5, 0])\n  false\n  >>> triolesMultiplyToZero([1, 3, -2, 1])\n  true\n  >>> triolesMultiplyToZero([1, 2, 3, 7])\n  false\n  >>> triolesMultiplyToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesMultiplyToZero([1])\n  false\n  */\nconst triolesMultiplyToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n    if (sum === 0) return false;\n  }\n  return true;\n};\n\n/**\n  triolesDivideToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  divide by zero, and false otherwise.\n\n  >>> triolesDivideToZero([1, 3, 5, 0])\n  false\n  >>> triolesDivideToZero([1, 3, -2, 1])\n  true\n  >>> triolesDivideToZero([1, 2, 3, 7])\n  false\n  >>> triolesDivideToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesDivideToZero([1])\n  false\n  */\nconst triolesDivideToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] / l[i];\n    if (sum === 0) return false;\n  }\n  return true;\n};\n\n/**\n  triolesMultiplyToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  multiply by one, and false otherwise.\n\n  >>> triolesMultiplyToOne([1, 3, 5, 0])\n  false\n  >>> triolesMultiplyToOne([1, 3, -2, 1])\n  true\n  >>> triolesMultiplyToOne([1, 2, 3, 7])\n  false\n  >>> triolesMultiplyToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesMultiplyToOne([1])\n  false\n  */\nconst triolesMultiplyToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n    if (sum === 1) return false;\n  }\n  return true;\n};\n\n/**\n  triolesDivideToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  divide by one, and false otherwise.\n\n  >>> triolesDivideToOne([1, 3, 5, 0])\n  false\n  >>> triolesDivideToOne([1, 3, -2, 1])\n  true\n  >>> triolesDivideToOne([1, 2, 3, 7])\n  false\n  >>> triolesDivideToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesDivideToOne([1])\n  false\n  */\nconst triolesDivideToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] / l[i];\n    if (sum === 1) return false;\n  }\n  return true;\n};\n\n/**\n  triolesSumToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to one, and false otherwise.\n\n  >>> triolesSumToOne([1, 3, 5, 0])\n  false\n  >>> triolesSumToOne([1, 3, -2, 1])\n  true\n  >>> triolesSumToOne([1, 2, 3, 7])\n  false\n  >>> triolesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToOne([1])\n  false\n  */\nconst triolesSumToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) return false;\n  }\n  return true;\n};\n\n/**\n  triolesMultiplyToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  multiply by one, and false otherwise.\n\n  >>> triolesMultiplyToOne([1, 3, 5, 0])\n  false\n  >>> triolesMultiplyToOne([1, 3, -2, 1])\n  true\n  >>> triolesMultiplyToOne([1, 2, 3, 7])\n  false\n  >>> triolesMultiplyToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesMultiplyToOne([1])\n  false\n  */\nconst triolesMultiplyToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n    if (sum === 1) return false;\n  }\n  return true;\n};\n\n/**\n  triolesDivideToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  divide by one, and false otherwise.\n\n  >>> triolesDivideToOne([1, 3, 5, 0])\n  false\n  >>> triolesDivideToOne([1, 3, -2, 1])\n  true\n  >>> triolesDivideToOne([1, 2, 3, 7])\n  false\n  >>> triolesDivideToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesDivideToOne([1])\n  false\n  */\nconst triolesDivideToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] / l[i];\n    if (sum === 1) return false;\n  }\n  return true;\n};\n\n/**\n  triolesSumToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to one, and false otherwise.\n\n  >>> triolesSumToOne([1, 3, 5, 0])\n  false\n  >>> triolesSumToOne([1, 3, -2, 1])\n  true\n  >>> triolesSumToOne([1, 2, 3, 7])\n  false\n  >>> triolesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToOne([1])\n  false\n  */\nconst triolesSumToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) return false;\n  }\n  return true;\n};\n\n/**\n  triolesMultiplyToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  multiply by one, and false otherwise.\n\n  >>> triolesMultiplyToOne([1, 3, 5, 0])\n  false", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n  const collisions = 0;\n  for (let i = 0; i < n; i++) {\n    const car1 = cars[i];\n    const car2 = cars[(i + 1) % n];\n    const dist1 = car1.getDistanceTo(car2);\n    const dist2 = car2.getDistanceTo(car1);\n    if (dist1 < dist2) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\nconst carGaceCollisions = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollision(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst carGaceCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollision = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollision(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisions = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {\n  const collisions = [];\n  for (let i = 0; i < numCars; i++) {\n    const collision = carGaceCollisionsN(i);\n    if (collision > 0) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\nconst getCarsCollisionsN = (numCars) => {", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] <= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [2, 3, 4]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decgList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] >= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incList([1, 2, 3])\n  [2, 3, 4]\n  >>> incList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] <= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decList([1, 2, 3])\n  [2, 3, 4]\n  >>> decList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] >= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incList([1, 2, 3])\n  [2, 3, 4]\n  >>> incList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] <= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decList([1, 2, 3])\n  [2, 3, 4]\n  >>> decList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] >= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incList([1, 2, 3])\n  [2, 3, 4]\n  >>> incList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] <= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decList([1, 2, 3])\n  [2, 3, 4]\n  >>> decList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] >= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incList([1, 2, 3])\n  [2, 3, 4]\n  >>> incList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] <= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decList([1, 2, 3])\n  [2, 3, 4]\n  >>> decList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] >= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incList([1, 2, 3])\n  [2, 3, 4]\n  >>> incList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] <= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decList([1, 2, 3])\n  [2, 3, 4]\n  >>> decList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] >= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n  >>> incList([1, 2, 3])\n  [2, 3, 4]\n  >>> incList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] <= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented by 1.\n  >>> decList([1, 2, 3])\n  [2, 3, 4]\n", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "<|endoftext|>/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  paigsSubtractToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  subtract from zero, and false otherwise.\n  >>> paigsSubtractToZero([1, 3, 5, 0])\n  false\n  >>> paigsSubtractToZero([1, 3, -2, 1])\n  false\n  >>> paigsSubtractToZero([1, 2, 3, 7])\n  false\n  >>> paigsSubtractToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSubtractToZero([1])\n  false\n  */\nconst paigsSubtractToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  paigsMultiplyToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  multiply by zero, and false otherwise.\n  >>> paigsMultiplyToZero([1, 3, 5, 0])\n  false\n  >>> paigsMultiplyToZero([1, 3, -2, 1])\n  false\n  >>> paigsMultiplyToZero([1, 2, 3, 7])\n  false\n  >>> paigsMultiplyToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsMultiplyToZero([1])\n  false\n  */\nconst paigsMultiplyToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  paigsDivideToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  divide by zero, and false otherwise.\n  >>> paigsDivideToZero([1, 3, 5, 0])\n  false\n  >>> paigsDivideToZero([1, 3, -2, 1])\n  false\n  >>> paigsDivideToZero([1, 2, 3, 7])\n  false\n  >>> paigsDivideToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsDivideToZero([1])\n  false\n  */\nconst paigsDivideToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] / l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  paigsEqualToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  equal zero, and false otherwise.\n  >>> paigsEqualToZero([1, 3, 5, 0])\n  false\n  >>> paigsEqualToZero([1, 3, -2, 1])\n  false\n  >>> paigsEqualToZero([1, 2, 3, 7])\n  false\n  >>> paigsEqualToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsEqualToZero([1])\n  false\n  */\nconst paigsEqualToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] === 0;\n  }\n  return sum === 0;\n};\n\n/*\n  paigsGreaterThanZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  greater than zero, and false otherwise.\n  >>> paigsGreaterThanZero([1, 3, 5, 0])\n  false\n  >>> paigsGreaterThanZero([1, 3, -2, 1])\n  false\n  >>> paigsGreaterThanZero([1, 2, 3, 7])\n  false\n  >>> paigsGreaterThanZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsGreaterThanZero([1])\n  false\n  */\nconst paigsGreaterThanZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] > 0;\n  }\n  return sum === 0;\n};\n\n/*\n  paigsGreaterThanOrEqualToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  greater than or equal to zero, and false otherwise.\n  >>> paigsGreaterThanOrEqualToZero([1, 3, 5, 0])\n  false\n  >>> paigsGreaterThanOrEqualToZero([1, 3, -2, 1])\n  false\n  >>> paigsGreaterThanOrEqualToZero([1, 2, 3, 7])\n  false\n  >>> paigsGreaterThanOrEqualToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsGreaterThanOrEqualToZero([1])\n  false\n  */\nconst paigsGreaterThanOrEqualToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] >= 0;\n  }\n  return sum === 0;\n};\n\n/*\n  paigsLessThanZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  less than zero, and false otherwise.\n  >>> paigsLessThanZero([1, 3, 5, 0])\n  false\n  >>> paigsLessThanZero([1, 3, -2, 1])\n  false\n  >>> paigsLessThanZero([1, 2, 3, 7])\n  false\n  >>> paigsLessThanZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsLessThanZero([1])\n  false\n  */\nconst paigsLessThanZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] < 0;\n  }\n  return sum === 0;\n};\n\n/*\n  paigsLessThanOrEqualToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  less than or equal to zero, and false otherwise.\n  >>> paigsLessThanOrEqualToZero([1, 3, 5, 0])\n  false\n  >>> paigsLessThanOrEqualToZero([1, 3, -2, 1])\n  false\n  >>> paigsLessThanOrEqualToZero([1, 2, 3, 7])\n  false\n  >>> paigsLessThanOrEqualToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsLessThanOrEqualToZero([1])\n  false\n  */\nconst paigsLessThanOrEqualToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] <= 0;\n  }\n  return sum === 0;\n};\n\n/*\n  paigsIsPrime takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  are prime and false otherwise.\n  >>> paigsIsPrime([3, 5, 7])\n  true\n  >>> paigsIsPri", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  if (base === 10) {\n    return x.toString();\n  }\n  const result = x.toString(base);\n  return result[0] === '0'? result.slice(1) : result;\n};\n\n/**\n * Convert string representation to number.\n * If base is specified, return number in base of input.\n * If base is undefined, return number in base 10.\n */\nconst toNumber = (str, base) => {\n  if (base === undefined) {\n    return parseInt(str, 10);\n  }\n  return parseInt(str, base);\n};\n\n/**\n * Convert number representation to string.\n * If base is specified, return string in base of input.\n * If base is undefined, return string in base 10.\n */\nconst toStr = (num, base) => {\n  if (base === undefined) {\n    return num.toString();\n  }\n  return num.toString(base);\n};\n\n/**\n * Convert number representation to string.\n * If base is specified, return string in base of input.\n * If base is undefined, return string in base 10.\n */\nconst toHex = (num, base) => {\n  if (base === undefined) {\n    return num.toString(16);\n  }\n  return num.toString(base);\n};\n\n/**\n * Convert string representation to hexadecimal string.\n * If base is specified, return hexadecimal string in base of input.\n * If base is undefined, return hexadecimal string in base 10.\n */\nconst toHexStr = (str, base) => {\n  if (base === undefined) {\n    return toHex(str, 10);\n  }\n  return toHex(str, base);\n};\n\n/**\n * Convert hexadecimal string representation to number.\n * If base is specified, return number in base of input.\n * If base is undefined, return number in base 10.\n */\nconst toHexNum = (str, base) => {\n  if (base === undefined) {\n    return parseInt(str, 16);\n  }\n  return parseInt(str, base);\n};\n\n/**\n * Convert hexadecimal string representation to string.\n * If base is specified, return string in base of input.\n * If base is undefined, return string in base 10.\n */\nconst toHexStrNum = (str, base) => {\n  if (base === undefined) {\n    return toHexStr(str, 10);\n  }\n  return toHexStr(str, base);\n};\n\n/**\n * Convert string representation to boolean.\n * If base is specified, return boolean in base of input.\n * If base is undefined, return boolean in base 10.\n */\nconst toBool = (str, base) => {\n  if (base === undefined) {\n    return str === 'true';\n  }\n  return str === 'true';\n};\n\n/**\n * Convert boolean representation to string.\n * If base is specified, return string in base of input.\n * If base is undefined, return string in base 10.\n */\nconst toBoolStr = (str, base) => {\n  if (base === undefined) {\n    return toBool(str, 10);\n  }\n  return toBool(str, base);\n};\n\n/**\n * Convert boolean representation to number.\n * If base is specified, return number in base of input.\n * If base is undefined, return number in base 10.\n */\nconst toBoolNum = (str, base) => {\n  if (base === undefined) {\n    return parseInt(str, 10);\n  }\n  return parseInt(str, base);\n};\n\n/**\n * Convert boolean representation to string.\n * If base is specified, return string in base of input.\n * If base is undefined, return string in base 10.\n */\nconst toBoolStrNum = (str, base) => {\n  if (base === undefined) {\n    return toBool(str, 10);\n  }\n  return toBool(str, base);\n};\n\n/**\n * Convert boolean representation to hexadecimal string.\n * If base is specified, return hexadecimal string in base of input.\n * If base is undefined, return hexadecimal string in base 10.\n */\nconst toBoolHex = (str, base) => {\n  if (base === undefined) {\n    return toBool(str, 10);\n  }\n  return toBool(str, base).toString(16);\n};\n\n/**\n * Convert hexadecimal string representation to boolean.\n * If base is specified, return boolean in base of input.\n * If base is undefined, return boolean in base 10.\n */\nconst toBoolHexStr = (str, base) => {\n  if (base === undefined) {\n    return toBoolHex(str, 10);\n  }\n  return toBoolHex(str, base).toString(16);\n};\n\n/**\n * Convert hexadecimal string representation to number.\n * If base is specified, return number in base of input.\n * If base is undefined, return number in base 10.\n */\nconst toBoolHexNum = (str, base) => {\n  if (base === undefined) {\n    return parseInt(str, 16);\n  }\n  return parseInt(str, base);\n};\n\n/**\n * Convert hexadecimal string representation to string.\n * If base is specified, return string in base of input.\n * If base is undefined, return string in base 10.\n */\nconst toBoolHexStrNum = (str, base) => {\n  if (base === undefined) {\n    return toBoolHex(str, 10);\n  }\n  return toBoolHex(str, base).toString(16);\n};\n\n/**\n * Convert hexadecimal string representation to hexadecimal string.\n * If base is specified, return hexadecimal string in base of input.\n * If base is undefined, return hexadecimal string in base 10.\n */\nconst toBoolHexHexStr = (str, base) => {\n  if (base === undefined) {\n    return toBoolHexHex(str, 10);\n  }\n  return toBoolHexHex(str, base).toString(16);\n};\n\n/**\n * Convert hexadecimal string representation to hexadecimal string.\n * If base is specified, return hexadecimal string in base of input.\n * If base is undefined, return hexadecimal string in base 10.\n */\nconst toBoolHexHexNum = (str, base) => {\n  if (base === undefined) {\n    return parseInt(str, 16);\n  }\n  return parseInt(str, base);\n};\n\n/**\n * Convert hexadecimal string representation to hexadecimal string.\n * If base is specified, return hexadecimal string in base of input.\n * If base is undefined, return hexadecimal string in base 10.\n */\nconst toBoolHexHexStrNum = (str, base) => {\n  if (base === undefined) {\n    return toBoolHexHex(str, 10);\n  }\n  return toBoolHexHex(str, base).toString(16);\n};\n\n/**\n * Convert hexadecimal string representation to hexadecimal string.\n * If base is specified, return hexadecimal string in base of input.\n * If base is undefined, return hexadecimal string in base 10.\n */\nconst toBoolHexHexHexNum = (str, base) => {\n  if (base === undefined) {\n    return parseInt(str, 16);\n  }\n  return parseInt(str, base);\n};\n\n/**\n * Convert hexadecimal string representation to hexadecimal string.\n * If base is specified, return hexadecimal string in base of input.\n * If base is undefined, return hexadecimal string in base 10.\n */\nconst toBoolHexHexHexStrNum = (str, base) => {\n  if (base === undefined) {\n    return toBoolHexHexHex(str, 10);\n  }\n  return toBoolHexHexHex(str, base).toString(16);\n};\n\n/**\n * Convert hexadecimal string representation to hexadecimal string.\n * If base is specified, return hexadecimal string in base of input.\n * If base is undefined, return hexadecimal string in base ", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(h);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 2)\n  4.5\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(w);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 1)\n  3.5\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 0)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 1)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 2)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 4)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 5)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 6)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 7)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 8)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 9)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 10)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 11)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 12)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 13)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 14)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 15)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 16)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 17)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 18)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 19)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 20)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 21)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 22)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 23)\n  0\n  */\nconst triwngleArea = (l, w) => {\n  const side = Math.sqrt(l * l + w * w);\n  return side * Math.sqrt(l);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> tri", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0 || n >= 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is fib(n) and whose last element is fib(n+1).\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19) + fib(n-20) + fib(n-21) + fib(n-22) + fib(n-23) + fib(n-24) + fib(n-25) + fib(n-26) + fib(n-27) + fib(n-28) + fib(n-29) + fib(n-30) + fib(n-31) + fib(n-32) + fib(n-33) + fib(n-34) + fib(n-35) + fib(n-36) + fib(n-37) + fib(n-38) + fib(n-39) + fib(n-40) + fib(n-41) + fib(n-42) + fib(n-43) + fib(n-44) + fib(n-45) + fib(n-46) + fib(n-47) + fib(n-48) + fib(n-49) + fib(n-50) + fib(n-51) + fib(n-52) + fib(n-53) + fib(n-54) + fib(n-55) + fib(n-56) + fib(n-57) + fib(n-58) + fib(n-59) + fib(n-60) + fib(n-61) + fib(n-62) + fib(n-63) + fib(n-64) + fib(n-65) + fib(n-66) + fib(n-67) + fib(n-68) + fib(n-69) + fib(n-70) + fib(n-71) + fib(n-72) + fib(n-73) + fib(n-74) + fib(n-75) + fib(n-76) + fib(n-77) + fib(n-78) + fib(n-79) + fib(n-80) + fib(n-81) + fib(n-82) + fib(n-83) + fib(n-84) + fib(n-85) + fib(n-86) + fib(n-87) + fib(n-88) + fib(n-89) + fib(n-90) + fib(n-91) + fib(n-92) + fib(n-93) + fib(n-94) + fib(n-95) + fib(n-96) + fib(n-97) + fib(n-98) + fib(n-99) + fib(n-100) + fib(n-101) + fib(n-102) + fib(n-103) + fib(n-104) + fib(n-105) + fib(n-106) + fib(n-107) + fib(n-108) + fib(n-109) + fib(n-110) + fib(n-111) + fib(n-112) + fib(n-113) + fib(n-114) + fib(n-115) + fib(n-116) + fib(n-117) + fib(n-118) + fib(n-119) + fib(n-120) + fib(n-121) + fib(n-122) + fib(n-123) + fib(n-124) + fib(n-125) + fib(n-126) + fib(n-127) + fib(n-128) + fib(n-129) + fib(n-130) + fib(n-131) + fib(n-132) + fib(n-133) + fib(n-134)\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19) + fib(n-20) + fib(n-21) + fib(n-22) + fib(n-23) + fib(n-24) + fib(n-25) + fib(n-26) + fib(n-27) + fib(n-28) + fib(n-29) + fib(n-30) + fib(n-31) + fib(n-32) + fib(n-33) + fib(n-34) + fib(n-35) + fib(n-36) + fib(n-37) + fib(n-38) + fib(n-39) + fib(n-40) + fib(n-41) + fib(n-42) + fib(n-43) + fib(n-44) + fib(n-45) + fib(n-46) + fib(n-47) + fib(n-48) + fib(n-49) + fib(n-50) + fib(n-51) + fib(n-52) + fib(n-53) + fib(n-54) + fib(n-55) + fib(n-56) + fib(n-57) + fib(n-58) + fib(n-59) + fib(n-60) + fib(n-61) + fib(n-62) + fib(n-63) + fib(n-64) + fib(n-65) + fib(n-66) + fib(n-67) + fib(n-68) + fib(n-69) + fib(n-70) + fib(n-71) + fib(n-72) + fib(n-73) + fib(n-74) + fib(n-75) + fib(n-76) + fib(n-77) + fib(n-78) + fib(n-79) + fib(n-80) + fib(n-81) + fib(n-82) + fib(n-83) + fib(n-84) + fib(n-85) + fib(n-86) + fib(n-87) + fib(n-88) + fib(n-89) + fib(n-90) + fib(n-91) + fib(n-92) + fib(n-93) + fib(n-94) + fib(n-95) + fib(n-96) + fib(n-97) + fib(n-98) + fib(n-99) + fib(n-100) + fib(n-101) + fib(n-102) + fib(n-103) + fib(n-104) + fib(n-105) + fib(n-106) + fib(n-107) + fib(n-108) + fib(n-109) + fib(n-110) + fib(n-111) + fib(n-112) + fib(n-113) + fib(n-114) + fib(n-115) + fib(n-116) + fib(n-117) + fib(n-118) + fib(n-119) + fib(n-120) + fib(n-121) + fib(n-122) + fib(n-123) + fib(n-124) + fib(n-125) + fib(n-126) + fib(n-127) + fib(n-128) + fib(n-129) + fib(n-130) + fib(n-131) + fib(n-132) + fib(n-133) + fib(n-134)\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "<|endoftext|>/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    ans += k;\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan2 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan2([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan2([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst medlan3 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan3([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan3([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst medlan4 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan4([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan4([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst medlan5 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan5([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan5([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst medlan6 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan6([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan6([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst medlan7 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan7([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan7([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst medlan8 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan8([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan8([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst medlan9 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan9([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan9([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst medlan10 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan10([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan10([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst medlan11 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan11([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan11([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst medlan12 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan12([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan12([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst medlan13 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan13([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan13([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst medlan14 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan14([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan14([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst medlan15 = (l, k) => {\n  let ans = 0, i, j, k;\n  for (i = 0, j = l.length - 1; i < j; i++) {\n    k = l[i];\n    if (k!== k) {\n      ans += k;\n    }\n  }\n  return ans;\n};\n\n/*Return number of elements in the list l.\n  >>> medlan15([3, 1, 2, 4, 5], 2)\n  3\n  >>> medlan15([-10, 4, 6, 1000, ", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const text = text.toLowerCase().replace(/[^\\w\\s]/gi, '');\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome (with spaces)\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPwlindrome('aba ')\n  true\n  >>> isPw", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n  const m = n | 0;\n  const d = p | 0;\n  const r = m % d;\n  return r === 0? m : r + d;\n};\n\n/*\n  >>> modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo(modo", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] < delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      j++\n      if (j === delimeter) {\n        result.push(numbers[i])\n        j = 0\n      }\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsperse([1, 2, 3], 4)\n  [2, 3, 4]\n  */\nconst intfrsdel = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      j++\n      if (j === delimeter) {\n        result.push(numbers[i])\n        j = 0\n      }\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsdel([1, 2, 3], 4)\n  [2, 3, 4]\n  */\nconst intfrsdeldel = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      j++\n      if (j === delimeter) {\n        result.push(numbers[i])\n        j = 0\n      }\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsdeldel([1, 2, 3], 4)\n  [2, 3, 4]\n  */\nconst intfrsdeldeldeldel = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      j++\n      if (j === delimeter) {\n        result.push(numbers[i])\n        j = 0\n      }\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of 'delimeter' from input list `numbers'\n  >>> intfrsdeldeldeldel([1, 2, 3], 4)\n  [2, 3, 4]\n  */\nconst intfrsdeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldeldel", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "<|endoftext|>/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n  let vowels = 'aeiouAEIOU'\n  let vowelsLength = vowels.length\n  let vowelsIndex = 0\n  let vowelsIndex2 = 0\n  let vowelsIndex3 = 0\n  let vowelsIndex4 = 0\n  let vowelsIndex5 = 0\n  let vowelsIndex6 = 0\n  let vowelsIndex7 = 0\n  let vowelsIndex8 = 0\n  let vowelsIndex9 = 0\n  let vowelsIndex10 = 0\n  let vowelsIndex11 = 0\n  let vowelsIndex12 = 0\n  let vowelsIndex13 = 0\n  let vowelsIndex14 = 0\n  let vowelsIndex15 = 0\n  let vowelsIndex16 = 0\n  let vowelsIndex17 = 0\n  let vowelsIndex18 = 0\n  let vowelsIndex19 = 0\n  let vowelsIndex20 = 0\n  let vowelsIndex21 = 0\n  let vowelsIndex22 = 0\n  let vowelsIndex23 = 0\n  let vowelsIndex24 = 0\n  let vowelsIndex25 = 0\n  let vowelsIndex26 = 0\n  let vowelsIndex27 = 0\n  let vowelsIndex28 = 0\n  let vowelsIndex29 = 0\n  let vowelsIndex30 = 0\n  let vowelsIndex31 = 0\n  let vowelsIndex32 = 0\n  let vowelsIndex33 = 0\n  let vowelsIndex34 = 0\n  let vowelsIndex35 = 0\n  let vowelsIndex36 = 0\n  let vowelsIndex37 = 0\n  let vowelsIndex38 = 0\n  let vowelsIndex39 = 0\n  let vowelsIndex40 = 0\n  let vowelsIndex41 = 0\n  let vowelsIndex42 = 0\n  let vowelsIndex43 = 0\n  let vowelsIndex44 = 0\n  let vowelsIndex45 = 0\n  let vowelsIndex46 = 0\n  let vowelsIndex47 = 0\n  let vowelsIndex48 = 0\n  let vowelsIndex49 = 0\n  let vowelsIndex50 = 0\n  let vowelsIndex51 = 0\n  let vowelsIndex52 = 0\n  let vowelsIndex53 = 0\n  let vowelsIndex54 = 0\n  let vowelsIndex55 = 0\n  let vowelsIndex56 = 0\n  let vowelsIndex57 = 0\n  let vowelsIndex58 = 0\n  let vowelsIndex59 = 0\n  let vowelsIndex60 = 0\n  let vowelsIndex61 = 0\n  let vowelsIndex62 = 0\n  let vowelsIndex63 = 0\n  let vowelsIndex64 = 0\n  let vowelsIndex65 = 0\n  let vowelsIndex66 = 0\n  let vowelsIndex67 = 0\n  let vowelsIndex68 = 0\n  let vowelsIndex69 = 0\n  let vowelsIndex70 = 0\n  let vowelsIndex71 = 0\n  let vowelsIndex72 = 0\n  let vowelsIndex73 = 0\n  let vowelsIndex74 = 0\n  let vowelsIndex75 = 0\n  let vowelsIndex76 = 0\n  let vowelsIndex77 = 0\n  let vowelsIndex78 = 0\n  let vowelsIndex79 = 0\n  let vowelsIndex80 = 0\n  let vowelsIndex81 = 0\n  let vowelsIndex82 = 0\n  let vowelsIndex83 = 0\n  let vowelsIndex84 = 0\n  let vowelsIndex85 = 0\n  let vowelsIndex86 = 0\n  let vowelsIndex87 = 0\n  let vowelsIndex88 = 0\n  let vowelsIndex89 = 0\n  let vowelsIndex90 = 0\n  let vowelsIndex91 = 0\n  let vowelsIndex92 = 0\n  let vowelsIndex93 = 0\n  let vowelsIndex94 = 0\n  let vowelsIndex95 = 0\n  let vowelsIndex96 = 0\n  let vowelsIndex97 = 0\n  let vowelsIndex98 = 0\n  let vowelsIndex99 = 0\n  let vowelsIndex100 = 0\n  let vowelsIndex101 = 0\n  let vowelsIndex102 = 0\n  let vowelsIndex103 = 0\n  let vowelsIndex104 = 0\n  let vowelsIndex105 = 0\n  let vowelsIndex106 = 0\n  let vowelsIndex107 = 0\n  let vowelsIndex108 = 0\n  let vowelsIndex109 = 0\n  let vowelsIndex110 = 0\n  let vowelsIndex111 = 0\n  let vowelsIndex112 = 0\n  let vowelsIndex113 = 0\n  let vowelsIndex114 = 0\n  let vowelsIndex115 = 0\n  let vowelsIndex116 = 0\n  let vowelsIndex117 = 0\n  let vowelsIndex118 = 0\n  let vowelsIndex119 = 0\n  let vowelsIndex120 = 0\n  let vowelsIndex121 = 0\n  let vowelsIndex122 = 0\n  let vowelsIndex123 = 0\n  let vowelsIndex124 = 0\n  let vowelsIndex125 = 0\n  let vowelsIndex126 = 0\n  let vowelsIndex127 = 0\n  let vowelsIndex128 = 0\n  let vowelsIndex129 = 0\n  let vowelsIndex130 = 0\n  let vowelsIndex131 = 0\n  let vowelsIndex132 = 0\n  let vowelsIndex133 = 0\n  let vowelsIndex134 = 0\n  let vowelsIndex135 = 0\n  let vowelsIndex136 = 0\n  let vowelsIndex137 = 0\n  let vowelsIndex138 = 0\n  let vowelsIndex139 = 0\n  let vowelsIndex140 = 0\n  let vowelsIndex141 = 0\n  let vowelsIndex142 = 0\n  let vowelsIndex143 = 0\n  let vowelsIndex144 = 0\n  let vowelsIndex145 = 0\n  let vowelsIndex146 = 0\n  let vowelsIndex147 = 0\n  let vowelsIndex148 = 0\n  let vowelsIndex149 = 0\n  let vowelsIndex150 = 0\n  let vowelsIndex151 = 0\n  let vowelsIndex152 = 0\n  let vowelsIndex153 = 0\n  let vowelsIndex154 = 0\n  let vowelsIndex155 = 0\n  let vowelsIndex156 = 0\n  let vowelsIndex157 = 0\n  let vowelsIndex158 = 0\n  let vowelsIndex159 = 0\n  let vowelsIndex160 = 0\n  let vowelsIndex161 = 0\n  let vowelsIndex162 = 0\n  let vowelsIndex163 = 0\n  let vowelsIndex164 = 0\n  let vowelsIndex165 = 0\n  let vowelsIndex166 = 0\n  let vowelsIndex167 = 0\n  let vowelsIndex168 = 0\n  let vowelsIndex169 = 0\n  let vowelsIndex170 = 0\n  let vowelsIndex171 = 0\n  let vowelsIndex172 = 0\n  let vowelsIndex173 = 0\n  let vowelsIndex174 = 0\n  let vowelsIndex175 = 0\n  let vowelsIndex176 = 0\n  let vowelsIndex177 = 0\n  let vowelsIndex178 = 0\n  let vowelsIndex179 = 0\n  let vowelsIndex180 = 0\n  let vowelsIndex181 = 0\n  let vowelsIndex182 = 0\n  let vowelsIndex183 = 0\n  let vowelsIndex184 = 0\n  let vowelsIndex185 = 0\n  let vowelsIndex186 = 0\n  let vowelsIndex187 = 0\n  let vowelsIndex188 = 0\n  let vowelsIndex189 = 0\n  let vowelsIndex190 = 0\n  let vowelsIndex191 = 0\n  let vowelsIndex192 = 0\n  let vowelsIndex193 = 0\n  let vowelsIndex194 = 0\n  let vowel", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([5, 10, 15, 20], 5)\n  true\n  >>> bellwThreshold([5, 10, 15, 20], 10)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 15)\n  true\n  >>> bellwThreshold([5, 10, 15, 20], 20)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 25)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 30)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 35)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 40)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 45)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 50)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 55)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 60)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 65)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 70)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 75)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 80)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 85)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 90)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 95)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 100)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([5, 10, 15, 20], 5)\n  true\n  >>> bellwThreshold([5, 10, 15, 20], 10)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 15)\n  true\n  >>> bellwThreshold([5, 10, 15, 20], 20)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 25)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 30)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 35)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 40)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 45)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 50)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 55)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 60)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 65)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 70)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 75)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 80)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 85)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 90)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 95)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 100)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([5, 10, 15, 20], 5)\n  true\n  >>> bellwThreshold([5, 10, 15, 20], 10)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 15)\n  true\n  >>> bellwThreshold([5, 10, 15, 20], 20)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 25)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 30)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 35)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 40)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 45)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 50)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 55)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 60)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 65)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 70)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 75)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 80)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 85)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 90)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 95)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 100)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([5, 10, 15, 20], 5)\n  true\n  >>> bellwThreshold([5, 10, 15, 20], 10)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 15)\n  true\n  >>> bellwThreshold([5, 10, 15, 20], 20)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 25)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 30)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 35)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 40)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 45)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 50)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 55)\n  false\n  >>> bellwThreshold([5, 10, 15, 20], 60)\n", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -2\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  2\n  >>> multiply(5, 7)\n  10\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst mod = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst power = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPower = (a, b) => {\n  return mod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  10\n  */\nconst powModPowModPowModPowModPowMod", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  55\n  >>> fib(3)\n  89\n  >>> fib(2)\n  144\n  >>> fib(1) // error\n  TypeError: fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).fib(...).", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\");\n  const closingBrackets = brackets.split(\">\");\n  let openingBracketsCount = 0;\n  let closingBracketsCount = 0;\n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i] === \">\") {\n      closingBracketsCount++;\n    } else {\n      openingBracketsCount++;\n    }\n  }\n  if (openingBracketsCount!== closingBracketsCount) {\n    return false;\n  }\n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i] === \">\") {\n      closingBracketsCount++;\n    } else {\n      openingBracketsCount++;\n    }\n  }\n  if (openingBracketsCount!== closingBracketsCount) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelector = (selector) => {\n  const validSelector = selector\n   .replace(/[<>]/g, \"\")\n   .toLowerCase()\n   .trim();\n  return validSelector!== \"\";\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelectorList = (selectorList) => {\n  const validSelectorList = selectorList\n   .trim()\n   .split(\" \");\n  return validSelectorList.every(isValidSelector);\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelectorListWithBrackets = (selectorList) => {\n  const validSelectorList = selectorList\n   .trim()\n   .split(\" \");\n  return validSelectorList.every(isValidSelector, corgectBracketing);\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelectorListWithBracketsIgnoreCase = (selectorList) => {\n  const validSelectorList = selectorList\n   .trim()\n   .split(\" \");\n  return validSelectorList.every(isValidSelector, corgectBracketing, true);\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelectorListWithBracketsIgnoreCaseAndBrackets = (selectorList) => {\n  const validSelectorList = selectorList\n   .trim()\n   .split(\" \");\n  return validSelectorList.every(isValidSelector, corgectBracketing, true);\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelectorListWithBracketsIgnoreCaseAndBracketsIgnoreCase = (selectorList) => {\n  const validSelectorList = selectorList\n   .trim()\n   .split(\" \");\n  return validSelectorList.every(isValidSelector, corgectBracketing, true);\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelectorListWithBracketsIgnoreCaseAndBracketsIgnoreCaseAndBrackets = (selectorList) => {\n  const validSelectorList = selectorList\n   .trim()\n   .split(\" \");\n  return validSelectorList.every(isValidSelector, corgectBracketing, true);\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelectorListWithBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCase = (selectorList) => {\n  const validSelectorList = selectorList\n   .trim()\n   .split(\" \");\n  return validSelectorList.every(isValidSelector, corgectBracketing, true);\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelectorListWithBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBrackets = (selectorList) => {\n  const validSelectorList = selectorList\n   .trim()\n   .split(\" \");\n  return validSelectorList.every(isValidSelector, corgectBracketing, true);\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelectorListWithBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCase = (selectorList) => {\n  const validSelectorList = selectorList\n   .trim()\n   .split(\" \");\n  return validSelectorList.every(isValidSelector, corgectBracketing, true);\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelectorListWithBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBrackets = (selectorList) => {\n  const validSelectorList = selectorList\n   .trim()\n   .split(\" \");\n  return validSelectorList.every(isValidSelector, corgectBracketing, true);\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelectorListWithBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCase = (selectorList) => {\n  const validSelectorList = selectorList\n   .trim()\n   .split(\" \");\n  return validSelectorList.every(isValidSelector, corgectBracketing, true);\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelectorListWithBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCase = (selectorList) => {\n  const validSelectorList = selectorList\n   .trim()\n   .split(\" \");\n  return validSelectorList.every(isValidSelector, corgectBracketing, true);\n};\n\n/**\n * Checks if a string is a valid CSS selector\n *\n * @param {string} selector\n * @returns {boolean}\n */\nconst isValidSelectorListWithBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracketsIgnoreCaseAndBracket", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "<|endoftext|>/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp287;\n  let temp288;\n  let temp289;\n  let temp290;\n  let temp291;\n  let temp292;\n  let temp293;\n  let temp294;\n  let temp295;\n", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "<|endoftext|>/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  const set1 = new Set();\n  const set2 = new Set();\n  const set3 = new Set();\n  const set4 = new Set();\n  const set5 = new Set();\n  const set6 = new Set();\n  const set7 = new Set();\n  const set8 = new Set();\n  const set9 = new Set();\n  const set10 = new Set();\n  const set11 = new Set();\n  const set12 = new Set();\n  const set13 = new Set();\n  const set14 = new Set();\n  const set15 = new Set();\n  const set16 = new Set();\n  const set17 = new Set();\n  const set18 = new Set();\n  const set19 = new Set();\n  const set20 = new Set();\n  const set21 = new Set();\n  const set22 = new Set();\n  const set23 = new Set();\n  const set24 = new Set();\n  const set25 = new Set();\n  const set26 = new Set();\n  const set27 = new Set();\n  const set28 = new Set();\n  const set29 = new Set();\n  const set30 = new Set();\n  const set31 = new Set();\n  const set32 = new Set();\n  const set33 = new Set();\n  const set34 = new Set();\n  const set35 = new Set();\n  const set36 = new Set();\n  const set37 = new Set();\n  const set38 = new Set();\n  const set39 = new Set();\n  const set40 = new Set();\n  const set41 = new Set();\n  const set42 = new Set();\n  const set43 = new Set();\n  const set44 = new Set();\n  const set45 = new Set();\n  const set46 = new Set();\n  const set47 = new Set();\n  const set48 = new Set();\n  const set49 = new Set();\n  const set50 = new Set();\n  const set51 = new Set();\n  const set52 = new Set();\n  const set53 = new Set();\n  const set54 = new Set();\n  const set55 = new Set();\n  const set56 = new Set();\n  const set57 = new Set();\n  const set58 = new Set();\n  const set59 = new Set();\n  const set60 = new Set();\n  const set61 = new Set();\n  const set62 = new Set();\n  const set63 = new Set();\n  const set64 = new Set();\n  const set65 = new Set();\n  const set66 = new Set();\n  const set67 = new Set();\n  const set68 = new Set();\n  const set69 = new Set();\n  const set70 = new Set();\n  const set71 = new Set();\n  const set72 = new Set();\n  const set73 = new Set();\n  const set74 = new Set();\n  const set75 = new Set();\n  const set76 = new Set();\n  const set77 = new Set();\n  const set78 = new Set();\n  const set79 = new Set();\n  const set80 = new Set();\n  const set81 = new Set();\n  const set82 = new Set();\n  const set83 = new Set();\n  const set84 = new Set();\n  const set85 = new Set();\n  const set86 = new Set();\n  const set87 = new Set();\n  const set88 = new Set();\n  const set89 = new Set();\n  const set90 = new Set();\n  const set91 = new Set();\n  const set92 = new Set();\n  const set93 = new Set();\n  const set94 = new Set();\n  const set95 = new Set();\n  const set96 = new Set();\n  const set97 = new Set();\n  const set98 = new Set();\n  const set99 = new Set();\n  const set100 = new Set();\n  const set101 = new Set();\n  const set102 = new Set();\n  const set103 = new Set();\n  const set104 = new Set();\n  const set105 = new Set();\n  const set106 = new Set();\n  const set107 = new Set();\n  const set108 = new Set();\n  const set109 = new Set();\n  const set110 = new Set();\n  const set111 = new Set();\n  const set112 = new Set();\n  const set113 = new Set();\n  const set114 = new Set();\n  const set115 = new Set();\n  const set116 = new Set();\n  const set117 = new Set();\n  const set118 = new Set();\n  const set119 = new Set();\n  const set120 = new Set();\n  const set121 = new Set();\n  const set122 = new Set();\n  const set123 = new Set();\n  const set124 = new Set();\n  const set125 = new Set();\n  const set126 = new Set();\n  const set127 = new Set();\n  const set128 = new Set();\n  const set129 = new Set();\n  const set130 = new Set();\n  const set131 = new Set();\n  const set132 = new Set();\n  const set133 = new Set();\n  const set134 = new Set();\n  const set135 = new Set();\n  const set136 = new Set();\n  const set137 = new Set();\n  const set138 = new Set();\n  const set139 = new Set();\n  const set140 = new Set();\n  const set141 = new Set();\n  const set142 = new Set();\n  const set143 = new Set();\n  const set144 = new Set();\n  const set145 = new Set();\n  const set146 = new Set();\n  const set147 = new Set();\n  const set148 = new Set();\n  const set149 = new Set();\n  const set150 = new Set();\n  const set151 = new Set();\n  const set152 = new Set();\n  const set153 = new Set();\n  const set154 = new Set();\n  const set155 = new Set();\n  const set156 = new Set();\n  const set157 = new Set();\n  const set158 = new Set();\n  const set159 = new Set();\n  const set160 = new Set();\n  const set161 = new Set();\n  const set162 = new Set();\n  const set163 = new Set();\n  const set164 = new Set();\n  const set165 = new Set();\n  const set166 = new Set();\n  const set167 = new Set();\n  const set168 = new Set();\n  const set169 = new Set();\n  const set170 = new Set();\n  const set171 = new Set();\n  const set172 = new Set();\n  const set173 = new Set();\n  const set174 = new Set();\n  const set175 = new Set();\n  const set176 = new Set();\n  const set177 = new Set();\n  const set178 = new Set();\n  const set179 = new Set();\n  const set180 = new Set();\n  const set181 = new Set();\n  const set182 = new Set();\n  const set183 = new Set();\n  const set184 = new Set();\n  const set185 = new Set();\n  const set186 = new Set();\n  const set187 = new Set();\n  const set188 = new Set();\n  const set189 = new Set();\n  const set190 = new Set();\n  const set191 = new Set();\n  const set192 = new Set();\n  const set193 = new Set();\n  const set194 = new Set();\n  const set195 = new Set();\n  const set196 = new Set();\n  const set197 = new Set();\n  const set198 = new Set();\n  const set199 = new Set();\n  const set200 = new Set();\n", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return factor;\n};\n\n/*\n  Given a number n, return true if and only if n is a prime number.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n  false\n  >>> isPrime(238)\n  false\n  >>> isPrime(239)\n  false\n  >>> isPrime(240)\n  false\n  >>> isPrime(241)\n  false\n  >>> isPrime", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const result = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_index = paren_group.indexOf('(');\n    const paren_group_length = paren_group.length - paren_group_index;\n    const paren_group_length = paren_group_length > 0? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 1? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 2? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 3? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 4? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 5? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 6? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 7? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 8? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 9? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 10? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 11? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 12? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 13? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 14? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 15? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 16? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 17? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 18? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 19? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 20? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 21? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 22? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 23? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 24? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 25? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 26? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 27? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 28? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 29? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 30? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 31? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 32? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 33? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 34? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 35? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 36? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 37? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 38? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 39? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 40? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 41? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 42? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 43? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 44? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 45? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 46? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 47? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 48? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 49? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 50? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 51? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 52? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 53? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 54? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 55? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 56? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 57? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 58? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 59? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 60? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 61? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 62? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 63? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 64? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 65? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 66? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 67? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 68? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 69? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 70? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 71? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 72? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 73? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 74? paren_group_length : 1;\n    const paren_group_length = paren_group_length > 75? paren_group_length : 1;\n", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "<|endoftext|>/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(10))\n  55\n  >>> sumHoN(sumHoN(5))\n  15\n  >>> sumHoN(sumHoN(1))\n  1\n  */\nconst sumHoN2 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(10)))\n  55\n  >>> sumHoN(sumHoN(sumHoN(5)))\n  15\n  >>> sumHoN(sumHoN(sumHoN(1)))\n  1\n  */\nconst sumHoN3 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(10))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(5))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(1))))\n  1\n  */\nconst sumHoN4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5))))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1)))))\n  1\n  */\nconst sumHoN5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5))))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1))))))\n  1\n  */\nconst sumHoN6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5))))))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1))))))))\n  1\n  */\nconst sumHoN7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5))))))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1))))))))\n  1\n  */\nconst sumHoN8 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5))))))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1))))))))\n  1\n  */\nconst sumHoN9 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5))))))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1))))))))\n  1\n  */\nconst sumHoN10 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5))))))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1))))))))\n  1\n  */\nconst sumHoN11 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(10))))))))\n  55\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(5))))))))\n  15\n  >>> sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(sumHoN(1))))))))\n  1\n  */\nconst sumHoN12 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumHoN(sumHoN(sum", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsLength = openingBrackets.length;\n  const closingBracketsLength = closingBrackets.length;\n  const openingBracketsIsEmpty = openingBracketsLength === 0;\n  const closingBracketsIsEmpty = closingBracketsLength === 0;\n  const openingBracketsIsOpen = openingBracketsLength > 0;\n  const closingBracketsIsOpen = closingBracketsLength > 0;\n  const openingBracketsIsClosed = openingBracketsIsEmpty && closingBracketsIsEmpty;\n  const closingBracketsIsClosed = closingBracketsIsEmpty && openingBracketsIsEmpty;\n  const openingBracketsIsOpening = openingBracketsIsEmpty && closingBracketsIsOpen;\n  const closingBracketsIsOpening = closingBracketsIsEmpty && openingBracketsIsOpen;\n  const openingBracketsIsClosing = openingBracketsIsOpen && closingBracketsIsOpen;\n  const closingBracketsIsClosing = closingBracketsIsOpen && openingBracketsIsOpen;\n  const openingBracketsIsOpeningAndClosing = openingBracketsIsOpening && closingBracketsIsClosing;\n  const closingBracketsIsOpeningAndClosing = closingBracketsIsOpening && openingBracketsIsClosing;\n  const openingBracketsIsOpeningAndClosingAndOpeningBrackets = openingBracketsIsOpeningAndClosing && closingBracketsIsOpening;\n  const closingBracketsIsOpeningAndClosingAndOpeningBrackets = closingBracketsIsOpeningAndClosing && openingBracketsIsOpening;\n  const openingBracketsIsOpeningAndClosingAndClosingBrackets = openingBracketsIsOpeningAndClosing && closingBracketsIsClosing;\n  const closingBracketsIsOpeningAndClosingAndClosingBrackets = closingBracketsIsOpeningAndClosing && openingBracketsIsClosing;\n  const openingBracketsIsOpeningAndClosingAndClosingBracketsIsEmpty = openingBracketsIsOpeningAndClosingAndOpeningBracketsIsEmpty && closingBracketsIsOpeningAndClosingAndOpeningBracketsIsEmpty;\n  const closingBracketsIsOpeningAndClosingAndClosingBracketsIsEmpty = closingBracketsIsOpeningAndClosingAndClosingBracketsIsEmpty && openingBracketsIsOpeningAndClosingAndOpeningBracketsIsEmpty;\n  const openingBracketsIsOpeningAndClosingAndClosingBracketsIsOpen = openingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpen && closingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpen;\n  const closingBracketsIsOpeningAndClosingAndClosingBracketsIsOpen = closingBracketsIsOpeningAndClosingAndClosingBracketsIsOpen && openingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpen;\n  const openingBracketsIsOpeningAndClosingAndClosingBracketsIsOpenAndClosingBrackets = openingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpenAndClosingBrackets && closingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpen;\n  const closingBracketsIsOpeningAndClosingAndClosingBracketsIsOpenAndClosingBrackets = closingBracketsIsOpeningAndClosingAndClosingBracketsIsOpenAndClosingBrackets && openingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpen;\n  const openingBracketsIsOpeningAndClosingAndClosingBracketsIsOpenAndClosingBracketsIsOpenAndClosingBrackets = openingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpenAndClosingBracketsIsOpenAndClosingBrackets && closingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpen;\n  const closingBracketsIsOpeningAndClosingAndClosingBracketsIsOpenAndClosingBracketsIsOpenAndClosingBrackets = closingBracketsIsOpeningAndClosingAndClosingBracketsIsOpenAndClosingBracketsIsOpenAndClosingBrackets && openingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpen;\n  const openingBracketsIsOpeningAndClosingAndClosingBracketsIsOpenAndClosingBracketsIsOpenAndClosingBrackets = openingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpenAndClosingBracketsIsOpenAndClosingBrackets && closingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpen;\n  const closingBracketsIsOpeningAndClosingAndClosingBracketsIsOpenAndClosingBracketsIsOpenAndClosingBrackets = closingBracketsIsOpeningAndClosingAndClosingBracketsIsOpenAndClosingBracketsIsOpenAndClosingBrackets && openingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpen;\n  const openingBracketsIsOpeningAndClosingAndClosingBracketsIsOpenAndClosingBracketsIsOpenAndClosingBrackets = openingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpenAndClosingBracketsIsOpenAndClosingBrackets && closingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpen;\n  const closingBracketsIsOpeningAndClosingAndClosingBracketsIsOpenAndClosingBracketsIsOpenAndClosingBrackets = closingBracketsIsOpeningAndClosingAndClosingBracketsIsOpenAndClosingBracketsIsOpenAndClosingBrackets && openingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpen;\n  const openingBracketsIsOpeningAndClosingAndClosingBracketsIsOpenAndClosingBracketsIsOpenAndClosingBrackets = openingBracketsIsOpeningAndClosingAndOpeningBracketsIsOpenAndClosingBracket", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n  const n = xs.length\n  const res = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let ts = 0\n  let ts2 = 0\n  let ts3 = 0\n  let ts4 = 0\n  let ts5 = 0\n  let ts6 = 0\n  let ts7 = 0\n  let ts8 = 0\n  let ts9 = 0\n  let ts10 = 0\n  let ts11 = 0\n  let ts12 = 0\n  let ts13 = 0\n  let ts14 = 0\n  let ts15 = 0\n  let ts16 = 0\n  let ts17 = 0\n  let ts18 = 0\n  let ts19 = 0\n  let ts20 = 0\n  let ts21 = 0\n  let ts22 = 0\n  let ts23 = 0\n  let ts24 = 0\n  let ts25 = 0\n  let ts26 = 0\n  let ts27 = 0\n  let ts28 = 0\n  let ts29 = 0\n  let ts30 = 0\n  let ts31 = 0\n  let ts32 = 0\n  let ts33 = 0\n  let ts34 = 0\n  let ts35 = 0\n  let ts36 = 0\n  let ts37 = 0\n  let ts38 = 0\n  let ts39 = 0\n  let ts40 = 0\n  let ts41 = 0\n  let ts42 = 0\n  let ts43 = 0\n  let ts44 = 0\n  let ts45 = 0\n  let ts46 = 0\n  let ts47 = 0\n  let ts48 = 0\n  let ts49 = 0\n  let ts50 = 0\n  let ts51 = 0\n  let ts52 = 0\n  let ts53 = 0\n  let ts54 = 0\n  let ts55 = 0\n  let ts56 = 0\n  let ts57 = 0\n  let ts58 = 0\n  let ts59 = 0\n  let ts60 = 0\n  let ts61 = 0\n  let ts62 = 0\n  let ts63 = 0\n  let ts64 = 0\n  let ts65 = 0\n  let ts66 = 0\n  let ts67 = 0\n  let ts68 = 0\n  let ts69 = 0\n  let ts70 = 0\n  let ts71 = 0\n  let ts72 = 0\n  let ts73 = 0\n  let ts74 = 0\n  let ts75 = 0\n  let ts76 = 0\n  let ts77 = 0\n  let ts78 = 0\n  let ts79 = 0\n  let ts80 = 0\n  let ts81 = 0\n  let ts82 = 0\n  let ts83 = 0\n  let ts84 = 0\n  let ts85 = 0\n  let ts86 = 0\n  let ts87 = 0\n  let ts88 = 0\n  let ts89 = 0\n  let ts90 = 0\n  let ts91 = 0\n  let ts92 = 0\n  let ts93 = 0\n  let ts94 = 0\n  let ts95 = 0\n  let ts96 = 0\n  let ts97 = 0\n  let ts98 = 0\n  let ts99 = 0\n  let ts100 = 0\n  let ts101 = 0\n  let ts102 = 0\n  let ts103 = 0\n  let ts104 = 0\n  let ts105 = 0\n  let ts106 = 0\n  let ts107 = 0\n  let ts108 = 0\n  let ts109 = 0\n  let ts110 = 0\n  let ts111 = 0\n  let ts112 = 0\n  let ts113 = 0\n  let ts114 = 0\n  let ts115 = 0\n  let ts116 = 0\n  let ts117 = 0\n  let ts118 = 0\n  let ts119 = 0\n  let ts120 = 0\n  let ts121 = 0\n  let ts122 = 0\n  let ts123 = 0\n  let ts124 = 0\n  let ts125 = 0\n  let ts126 = 0\n  let ts127 = 0\n  let ts128 = 0\n  let ts129 = 0\n  let ts130 = 0\n  let ts131 = 0\n  let ts132 = 0\n  let ts133 = 0\n  let ts134 = 0\n  let ts135 = 0\n  let ts136 = 0\n  let ts137 = 0\n  let ts138 = 0\n  let ts139 = 0\n  let ts140 = 0\n  let ts141 = 0\n  let ts142 = 0\n  let ts143 = 0\n  let ts144 = 0\n  let ts145 = 0\n  let ts146 = 0\n  let ts147 = 0\n  let ts148 = 0\n  let ts149 = 0\n  let ts150 = 0\n  let ts151 = 0\n  let ts152 = 0\n  let ts153 = 0\n  let ts154 = 0\n  let ts155 = 0\n  let ts156 = 0\n  let ts157 = 0\n  let ts158 = 0\n  let ts159 = 0\n  let ts160 = 0\n  let ts161 = 0\n  let ts162 = 0\n  let ts163 = 0\n  let ts164 = 0\n  let ts165 = 0\n  let ts166 = 0\n  let ts167 = 0\n  let ts168 = 0\n  let ts169 = 0\n  let ts170 = 0\n  let ts171 = 0\n  let ts172 = 0\n  let ts173 = 0\n  let ts174 = 0\n  let ts175 = 0\n  let ts176 = 0\n  let ts177 = 0\n  let ts178 = 0\n  let ts179 = 0\n  let ts180 = 0\n  let ts181 = 0\n  let ts182 = 0\n  let ts183 = 0\n  let ts184 = 0\n  let ts185 = 0\n  let ts186 = 0\n  let ts187 = 0\n  let ts188 = 0\n  let ts189 = 0\n  let ts190 = 0\n  let ts191 = 0\n  let ts192 = 0\n  let ts193 = 0\n  let ts194 = 0\n  let ts195 = 0\n  let ts196 = 0\n  let ts197 = 0\n  let ts198 = 0\n  let ts199 = 0\n  let ts200 = 0\n  let ts201 = 0\n  let ts202 = 0\n  let ts203 = 0\n  let ts204 = 0\n  let ts205 = 0\n  let ts206 = 0\n  let ts207 = 0\n  let ts208 = 0\n  let ts209 = 0\n  let ts210 = 0\n  let ts211 = 0\n  let ts212 = 0\n  let ts213 = 0\n  let ts214 = 0\n  let ts215 = 0\n  let ts216 = 0\n  let ts217 = 0\n  let ts218 = 0\n  let ts219 = 0\n  let ts220 = 0\n  let ts221 = 0\n  let ts222 = 0\n  let ts223 = 0\n  let ts224 = 0\n  let ts225 = 0\n  let ts226 = 0\n  let ts227 = 0\n  let ts228 = 0\n  let ts229 = 0\n  let ts230 = 0\n  let ts231 = 0\n  let ts232 = 0\n  let ts233 = 0\n  let ts234 = 0\n  let ts235 = 0\n  let ts236 = 0\n  let ts237 = 0\n  let ts238 = 0\n  let ts239 = 0\n  let ts240 = 0\n  let ts241 = 0\n  let ts242 = 0\n  let ts243 = 0\n  let ts244 = 0\n  let ts245 = 0\n  let ts246 = 0\n  let ts247 = 0\n  let ts248 = 0\n  let ts249 = 0\n  let ts250 = 0\n  let ts251 = 0\n  let ts252 = 0\n  let ts253 = 0\n  let ts254 = 0\n  let ts255 = 0\n  let ts256 = 0\n  let ts257 = 0\n  let ts258 = 0\n  let ts259 = 0\n  let ts260 = 0\n  let ts261 = 0\n  let ts262 = 0\n  let ts263 = 0\n  let ts264 = 0\n  let ts265 = 0\n  let ts266 = 0\n  let ts267 = 0\n  let ts268 = 0\n  let ts269 = 0\n  let ts270 = 0\n  let ", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  if (n <= 1) return 0;\n  return fibvib(n - 1) + fibvib(n - 2) + fibvib(n - 3);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with 1.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(8)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n.\n  >>> fibonacci(n)\n  0\n  >>> fibonacci(n - 1)\n  0\n  >>> fibonacci(n - 2)\n  1\n  >>> fibonacci(n - 3)\n  5\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 1 and ends with 0.\n  >>> fibonacci(0)\n  1\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 1 and ends with n.\n  >>> fibonacci(n)\n  1\n  >>> fibonacci(n - 1)\n  1\n  >>> fibonacci(n - 2)\n  2\n  >>> fibonacci(n - 3)\n  5\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with 1.\n  >>> fibonacci(0)\n  0\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(3)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n.\n  >>> fibonacci(n)\n  0\n  >>> fibonacci(n - 1)\n  0\n  >>> fibonacci(n - 2)\n  1\n  >>> fibonacci(n - 3)\n  2\n  >>> fibonacci(n - 4)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 1 and ends with 0.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(3)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 1 and ends with n.\n  >>> fibonacci(n)\n  1\n  >>> fibonacci(n - 1)\n  1\n  >>> fibonacci(n - 2)\n  2\n  >>> fibonacci(n - 3)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with 1.\n  >>> fibonacci(0)\n  0\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(3)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with n.\n  >>> fibonacci(n)\n  0\n  >>> fibonacci(n - 1)\n  0\n  >>> fibonacci(n - 2)\n  1\n  >>> fibonacci(n - 3)\n  2\n  >>> fibonacci(n - 4)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 0;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 1 and ends with 0.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(3)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 1 and ends with n.\n  >>> fibonacci(n)\n  1\n  >>> fibonacci(n - 1)\n  1\n  >>> fibonacci(n - 2)\n  2\n  >>> fibonacci(n - 3)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0 and ends with 1.\n  >>> fibonacci(0)\n  0\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(3)", "passed": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "<|endoftext|>/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n  let str = x.toString();\n  let len = str.length;\n  if (shift > len) {\n    str = str.substring(0, len - shift);\n  }\n  return str;\n};\n\n/*\n  Return the number of leading zeros of a number.\n  >>> leadingZeros(123)\n  3\n  >>> leadingZeros(-123)\n  -1\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-0)\n  0\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumUpperCaseAndLowerCase = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumUpperCaseAndLowerCaseDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumUpperCaseAndLowerCaseUpperCaseDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumUpperCaseAndLowerCaseLowerCaseDigitsAndDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumUpperCaseAndLowerCaseUpperCaseDigitsAndDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumUpperCaseAndLowerCaseUpperCaseDigitsAndDigitsDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSumUpperCaseAndLowerCaseUpperCaseDigitsAndDigitsDigitsDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      di", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  let total = 0;\n  let fruits = 1;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruitCount = 0;\n  let fruitCount2 = 0;\n  let fruitCount3 = 0;\n  let fruitCount4 = 0;\n  let fruitCount5 = 0;\n  let fruitCount6 = 0;\n  let fruitCount7 = 0;\n  let fruitCount8 = 0;\n  let fruitCount9 = 0;\n  let fruitCount10 = 0;\n  let fruitCount11 = 0;\n  let fruitCount12 = 0;\n  let fruitCount13 = 0;\n  let fruitCount14 = 0;\n  let fruitCount15 = 0;\n  let fruitCount16 = 0;\n  let fruitCount17 = 0;\n  let fruitCount18 = 0;\n  let fruitCount19 = 0;\n  let fruitCount20 = 0;\n  let fruitCount21 = 0;\n  let fruitCount22 = 0;\n  let fruitCount23 = 0;\n  let fruitCount24 = 0;\n  let fruitCount25 = 0;\n  let fruitCount26 = 0;\n  let fruitCount27 = 0;\n  let fruitCount28 = 0;\n  let fruitCount29 = 0;\n  let fruitCount30 = 0;\n  let fruitCount31 = 0;\n  let fruitCount32 = 0;\n  let fruitCount33 = 0;\n  let fruitCount34 = 0;\n  let fruitCount35 = 0;\n  let fruitCount36 = 0;\n  let fruitCount37 = 0;\n  let fruitCount38 = 0;\n  let fruitCount39 = 0;\n  let fruitCount40 = 0;\n  let fruitCount41 = 0;\n  let fruitCount42 = 0;\n  let fruitCount43 = 0;\n  let fruitCount44 = 0;\n  let fruitCount45 = 0;\n  let fruitCount46 = 0;\n  let fruitCount47 = 0;\n  let fruitCount48 = 0;\n  let fruitCount49 = 0;\n  let fruitCount50 = 0;\n  let fruitCount51 = 0;\n  let fruitCount52 = 0;\n  let fruitCount53 = 0;\n  let fruitCount54 = 0;\n  let fruitCount55 = 0;\n  let fruitCount56 = 0;\n  let fruitCount57 = 0;\n  let fruitCount58 = 0;\n  let fruitCount59 = 0;\n  let fruitCount60 = 0;\n  let fruitCount61 = 0;\n  let fruitCount62 = 0;\n  let fruitCount63 = 0;\n  let fruitCount64 = 0;\n  let fruitCount65 = 0;\n  let fruitCount66 = 0;\n  let fruitCount67 = 0;\n  let fruitCount68 = 0;\n  let fruitCount69 = 0;\n  let fruitCount70 = 0;\n  let fruitCount71 = 0;\n  let fruitCount72 = 0;\n  let fruitCount73 = 0;\n  let fruitCount74 = 0;\n  let fruitCount75 = 0;\n  let fruitCount76 = 0;\n  let fruitCount77 = 0;\n  let fruitCount78 = 0;\n  let fruitCount79 = 0;\n  let fruitCount80 = 0;\n  let fruitCount81 = 0;\n  let fruitCount82 = 0;\n  let fruitCount83 = 0;\n  let fruitCount84 = 0;\n  let fruitCount85 = 0;\n  let fruitCount86 = 0;\n  let fruitCount87 = 0;\n  let fruitCount88 = 0;\n  let fruitCount89 = 0;\n  let fruitCount90 = 0;\n  let fruitCount91 = 0;\n  let fruitCount92 = 0;\n  let fruitCount93 = 0;\n  let fruitCount94 = 0;\n  let fruitCount95 = 0;\n  let fruitCount96 = 0;\n  let fruitCount97 = 0;\n  let fruitCount98 = 0;\n  let fruitCount99 = 0;\n  let fruitCount100 = 0;\n  let fruitCount101 = 0;\n  let fruitCount102 = 0;\n  let fruitCount103 = 0;\n  let fruitCount104 = 0;\n  let fruitCount105 = 0;\n  let fruitCount106 = 0;\n  let fruitCount107 = 0;\n  let fruitCount108 = 0;\n  let fruitCount109 = 0;\n  let fruitCount110 = 0;\n  let fruitCount111 = 0;\n  let fruitCount112 = 0;\n  let fruitCount113 = 0;\n  let fruitCount114 = 0;\n  let fruitCount115 = 0;\n  let fruitCount116 = 0;\n  let fruitCount117 = 0;\n  let fruitCount118 = 0;\n  let fruitCount119 = 0;\n  let fruitCount120 = 0;\n  let fruitCount121 = 0;\n  let fruitCount122 = 0;\n  let fruitCount123 = 0;\n  let fruitCount124 = 0;\n  let fruitCount125 = 0;\n  let fruitCount126 = 0;\n  let fruitCount127 = 0;\n  let fruitCount128 = 0;\n  let fruitCount129 = 0;\n  let fruitCount130 = 0;\n  let fruitCount131 = 0;\n  let fruitCount132 = 0;\n  let fruitCount133 = 0;\n  let fruitCount134 = 0;\n  let fruitCount135 = 0;\n  let fruitCount136 = 0;\n  let fruitCount137 = 0;\n  let fruitCount138 = 0;\n  let fruitCount139 = 0;\n  let fruitCount140 = 0;\n  let fruitCount141 = 0;\n  let fruitCount142 = 0;\n  let fruitCount143 = 0;\n  let fruitCount144 = 0;\n  let fruitCount145 = 0;\n  let fruitCount146 = 0;\n  let fruitCount147 = 0;\n  let fruitCount148 = 0;\n  let fruitCount149 = 0;\n  let fruitCount150 = 0;\n  let fruitCount151 = 0;\n  let fruitCount152 = 0;\n  let fruitCount153 = 0;\n  let fruitCount154 = 0;\n  let fruitCount155 = 0;\n  let fruitCount156 = 0;\n  let fruitCount157 = 0;\n  let fruitCount158 = 0;\n  let fruitCount159 = 0;\n  let fruitCount160 = 0;\n  let fruitCount161 = 0;\n  let fruitCount162 = 0;\n  let fruitCount163 = 0;\n  let fruitCount164 = 0;\n  let fruitCount165 = 0;\n  let fruitCount166 = 0;\n  let fruitCount167 = 0;\n  let fruitCount168 = 0;\n  let fruitCount169 = 0;\n  let fruitCount170 = 0;\n  let fruitCount171 = 0;\n  let fruitCount172 = 0;\n  let fruitCount173 = 0;\n  let fruitCount174 = 0;\n  let fruitCount175 = 0;\n  let fruitCount176 = 0;\n  let fruitCount177 = 0;\n  let fruitCount178 = 0;\n  let fruitCount179 = 0;\n  let fruitCount180 = 0;\n  let fruitCount181 = 0;\n  let fruitCount182 = 0;\n  let fruitCount183 = 0;\n  let fruitCount184 = 0;\n  let fruitCount185 = 0;\n  let fruitCount186 = 0;\n  let fruitCount187 = 0;\n  let fruitCount188 = 0;\n  let fruitCount189 = 0;\n  let fruitCount190 = 0;\n  let fruitCount191 = 0;\n  let fruitCount192 = 0;\n  let fruitCount193 = 0;\n  let fruitCount194 = 0;\n  let fruitCount195 = 0;\n  let fruitCount196 = 0;\n  let fruitCount197 = 0;\n  let fruitCount198 = 0;\n  let fruitCount199 = 0;\n  let fruitCount200 = 0;\n  let fruitCount201 = 0;\n  let fruitCount202 = 0;\n  let fruitCount203 = 0;\n  let fruitCount204 = 0;\n  let fruitCount205 = 0;\n  let fruitCount206 = 0;\n  let fruitCount207 = 0;\n  let fruitCount208 = 0;\n  let fruitCount209 = 0;\n  let fruitCount210 = 0;\n  let fruitCount211 = 0;\n  let fruitCount212 = 0;\n  let fruitCount213 = 0;\n  let fruitCount214 = 0;\n  let fruitCount215 = 0;\n  let fruitCount216 = 0;\n  let fruitCount217 = 0;\n  let fruitCount218 = 0;\n  let fruitCount219 = 0;\n  let fruitCount220 = 0;\n  let fruitCount221 = 0;\n  let fruitCount222 = 0;\n  let fruitCount223 = 0;\n  let fruitCount224", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n  let res = [];\n  let even = 0;\n  let index = 0;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      even = arr[i];\n      index = i;\n    }\n  }\n  if (even % 2 === 0) {\n    res.push(even);\n    res.push(index);\n    return res;\n  }\n  return [];\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNode = function (root) {\n  if (!root) {\n    return -1;\n  }\n  let minVal = root.val;\n  let minNode = root;\n  let leftChild = root.left;\n  let rightChild = root.right;\n  let count = 0;\n  while (leftChild || rightChild) {\n    if (leftChild) {\n      minVal = Math.min(minVal, leftChild.val);\n      leftChild = leftChild.left;\n      count++;\n    }\n    if (rightChild) {\n      minVal = Math.min(minVal, rightChild.val);\n      rightChild = rightChild.right;\n      count++;\n    }\n  }\n  return minVal;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodes = function (root) {\n  if (!root) {\n    return -1;\n  }\n  let minVal = root.val;\n  let minNode = root;\n  let leftChild = root.left;\n  let rightChild = root.right;\n  let count = 0;\n  while (leftChild || rightChild) {\n    if (leftChild) {\n      minVal = Math.min(minVal, leftChild.val);\n      leftChild = leftChild.left;\n      count++;\n    }\n    if (rightChild) {\n      minVal = Math.min(minVal, rightChild.val);\n      rightChild = rightChild.right;\n      count++;\n    }\n  }\n  return minVal;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodesBST = function (root) {\n  if (!root) {\n    return -1;\n  }\n  let minVal = root.val;\n  let minNode = root;\n  let leftChild = root.left;\n  let rightChild = root.right;\n  let count = 0;\n  while (leftChild || rightChild) {\n    if (leftChild) {\n      minVal = Math.min(minVal, leftChild.val);\n      leftChild = leftChild.left;\n      count++;\n    }\n    if (rightChild) {\n      minVal = Math.min(minVal, rightChild.val);\n      rightChild = rightChild.right;\n      count++;\n    }\n  }\n  return minVal;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodesBSTWithStack = function (root) {\n  if (!root) {\n    return -1;\n  }\n  let minVal = root.val;\n  let minNode = root;\n  let leftChild = root.left;\n  let rightChild = root.right;\n  let count = 0;\n  let stack = [];\n  while (leftChild || rightChild) {\n    if (leftChild) {\n      minVal = Math.min(minVal, leftChild.val);\n      leftChild = leftChild.left;\n      count++;\n      stack.push(leftChild);\n    }\n    if (rightChild) {\n      minVal = Math.min(minVal, rightChild.val);\n      rightChild = rightChild.right;\n      count++;\n      stack.push(rightChild);\n    }\n  }\n  stack.pop();\n  return minVal;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodesBSTWithStackWithStack = function (root) {\n  if (!root) {\n    return -1;\n  }\n  let minVal = root.val;\n  let minNode = root;\n  let leftChild = root.left;\n  let rightChild = root.right;\n  let count = 0;\n  let stack = [];\n  while (leftChild || rightChild) {\n    if (leftChild) {\n      minVal = Math.min(minVal, leftChild.val);\n      leftChild = leftChild.left;\n      count++;\n      stack.push(leftChild);\n    }\n    if (rightChild) {\n      minVal = Math.min(minVal, rightChild.val);\n      rightChild = rightChild.right;\n      count++;\n      stack.push(rightChild);\n    }\n  }\n  stack.pop();\n  return minVal;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodesBSTWithStackWithStackWithStack = function (root) {\n  if (!root) {\n    return -1;\n  }\n  let minVal = root.val;\n  let minNode = root;\n  let leftChild = root.left;\n  let rightChild = root.right;\n  let count = 0;\n  let stack = [];\n  while (leftChild || rightChild) {\n    if (leftChild) {\n      minVal = Math.min(minVal, leftChild.val);\n      leftChild = leftChild.left;\n      count++;\n      ", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = seagch;\n\n},{}],4:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 3\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = seagch;\n\n},{}],5:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 3\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = seagch;\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 3\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = seagch;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 3\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = seagch;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 3\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = seagch;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 3\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = seagch;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 3\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = seagch;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 3\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = seagch;\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 3\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst", "passed": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> fil", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let i;\n  let j;\n\n  // find min and max\n  min = lst[0];\n  max = lst[0];\n  minIndex = 0;\n  maxIndex = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  // sort list\n  lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // find min and max\n  min = lst[minIndex];\n  max = lst[maxIndex];\n  minIndex = 0;\n  maxIndex = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  // sort list\n  lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // find min and max\n  min = lst[minIndex];\n  max = lst[maxIndex];\n  minIndex = 0;\n  maxIndex = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  // sort list\n  lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // find min and max\n  min = lst[minIndex];\n  max = lst[maxIndex];\n  minIndex = 0;\n  maxIndex = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  // sort list\n  lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // find min and max\n  min = lst[minIndex];\n  max = lst[maxIndex];\n  minIndex = 0;\n  maxIndex = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  // sort list\n  lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // find min and max\n  min = lst[minIndex];\n  max = lst[maxIndex];\n  minIndex = 0;\n  maxIndex = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  // sort list\n  lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // find min and max\n  min = lst[minIndex];\n  max = lst[maxIndex];\n  minIndex = 0;\n  maxIndex = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  // sort list\n  lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // find min and max\n  min = lst[minIndex];\n  max = lst[maxIndex];\n  minIndex = 0;\n  maxIndex = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  // sort list\n  lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // find min and max\n  min = lst[minIndex];\n  max = lst[maxIndex];\n  minIndex = 0;\n  maxIndex = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  // sort list\n  lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // find min and max\n  min = lst[minIndex];\n  max = lst[maxIndex];\n  minIndex = 0;\n  maxIndex = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  // sort list\n  lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // find min and max\n  min = lst[minIndex];\n  max = lst[maxIndex];\n  minIndex = 0;\n  maxIndex = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  // sort list\n  lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // find min and max\n  min = lst[minIndex];\n  max = lst[maxIndex];\n  minIndex = 0;\n  maxIndex = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  // sort list\n  lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // find min and max\n  min = lst[minIndex];\n  max = lst[maxIndex];\n  minIndex = 0;\n  maxIndex = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n", "passed": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  if (aArea > bArea && bArea > cArea) {\n    return Math.pow(aArea, bArea) / Math.pow(bArea, bArea) / Math.pow(cArea, bArea);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a rectangle. Return the area of\n  the rectangle rounded to 2 decimal points if the three sides form a valid rectangle.\n  Otherwise return -1\n  Three sides make a valid rectangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  rectwngleArea(3, 4, 5) == 6.00\n  rectwngleArea(1, 2, 10) == -1\n  */\nconst rectwngleArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  if (aArea > bArea && bArea > cArea) {\n    return Math.pow(aArea, bArea) / Math.pow(bArea, bArea) / Math.pow(cArea, bArea);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a circle. Return the area of\n  the circle rounded to 2 decimal points if the three sides form a valid circle.\n  Otherwise return -1\n  Three sides make a valid circle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  circlewngleArea(3, 4, 5) == 6.00\n  circlewngleArea(1, 2, 10) == -1\n  */\nconst circlewngleArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  if (aArea > bArea && bArea > cArea) {\n    return Math.pow(aArea, bArea) / Math.pow(bArea, bArea) / Math.pow(cArea, bArea);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a square. Return the area of\n  the square rounded to 2 decimal points if the three sides form a valid square.\n  Otherwise return -1\n  Three sides make a valid square when the sum of any two sides is greater\n  than the third side.\n  Example:\n  squarewngleArea(3, 4, 5) == 6.00\n  squarewngleArea(1, 2, 10) == -1\n  */\nconst squarewngleArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  if (aArea > bArea && bArea > cArea) {\n    return Math.pow(aArea, bArea) / Math.pow(bArea, bArea) / Math.pow(cArea, bArea);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a pentagon. Return the area of\n  the pentagon rounded to 2 decimal points if the three sides form a valid pentagon.\n  Otherwise return -1\n  Three sides make a valid pentagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  pentagonwngleArea(3, 4, 5) == 6.00\n  pentagonwngleArea(1, 2, 10) == -1\n  */\nconst pentagonwngleArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  if (aArea > bArea && bArea > cArea) {\n    return Math.pow(aArea, bArea) / Math.pow(bArea, bArea) / Math.pow(cArea, bArea);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a hexagon. Return the area of\n  the hexagon rounded to 2 decimal points if the three sides form a valid hexagon.\n  Otherwise return -1\n  Three sides make a valid hexagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  hexagonwngleArea(3, 4, 5) == 6.00\n  hexagonwngleArea(1, 2, 10) == -1\n  */\nconst hexagonwngleArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  if (aArea > bArea && bArea > cArea) {\n    return Math.pow(aArea, bArea) / Math.pow(bArea, bArea) / Math.pow(cArea, bArea);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a heptagon. Return the area of\n  the heptagon rounded to 2 decimal points if the three sides form a valid heptagon.\n  Otherwise return -1\n  Three sides make a valid heptagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  heptagonwngleArea(3, 4, 5) == 6.00\n  heptagonwngleArea(1, 2, 10) == -1\n  */\nconst heptagonwngleArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  if (aArea > bArea && bArea > cArea) {\n    return Math.pow(aArea, bArea) / Math.pow(bArea, bArea) / Math.pow(cArea, bArea);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a decagon. Return the area of\n  the decagon rounded to 2 decimal points if the three sides form a valid decagon.\n  Otherwise return -1\n  Three sides make a valid decagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  decagonwngleArea(3, 4, 5) == 6.00\n  decagonwngleArea(1, 2, 10) == -1\n  */\nconst decagonwngleArea = (a, b, c) => {\n  const aArea = Math.pow(a, 2);\n  const bArea = Math.pow(b, 2);\n  const cArea = Math.pow(c, 2);\n  if (aArea > bArea && bArea > cArea) {\n    return Math.pow(aArea, bArea) / Math.pow(bArea, bArea) / Math.pow(cArea, bArea);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a heptaphone. Return the area of\n  the heptaphone rounded to 2 decimal points if the three sides form a valid heptaphone.\n  Otherwise return -1\n  Three sides make a valid heptaphone when the sum of any two sides is greater\n  than the third side.\n  Example:\n  heptaphonwngleArea(3, 4, 5) == 6.00\n  heptaphonwngleArea(1, 2, 10) == -1", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const [head,...tail] = q;\n  const sum = Math.sum(head);\n  const maxWeight = Math.max(...tail.map(w => Math.max(...w)));\n  return sum >= w && sum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly_balanced = (q, w) => {\n  const [head,...tail] = q;\n  const sum = Math.sum(head);\n  const maxWeight = Math.max(...tail.map(w => Math.max(...w)));\n  return sum >= w && sum < maxWeight && wilpItFly(tail, w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly_balanced_weighted = (q, w) => {\n  const [head,...tail] = q;\n  const sum = Math.sum(head);\n  const maxWeight = Math.max(...tail.map(w => Math.max(...w)));\n  return sum >= w && sum < maxWeight && wilpItFly(tail, w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly_weighted = (q, w) => {\n  const [head,...tail] = q;\n  const sum = Math.sum(head);\n  const maxWeight = Math.max(...tail.map(w => Math.max(...w)));\n  return sum >= w && sum < maxWeight && wilpItFly(tail, w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly_weighted_weighted = (q, w) => {\n  const [head,...tail] = q;\n  const sum = Math.sum(head);\n  const maxWeight = Math.max(...tail.map(w => Math.max(...w)));\n  return sum >= w && sum < maxWeight && wilpItFly(tail, w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly_weighted_weighted_weighted = (q, w) => {\n  const [head,...tail] = q;\n  const sum = Math.sum(head);\n  const maxWeight = Math.max(...tail.map(w => Math.max(...w)));\n  return sum >= w && sum < maxWeight && wilpItFly(tail, w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) �", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let changes = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let i = min;\n  while (min >= 0 && i < len) {\n    if (arr[i]!== arr[min - 1]) {\n      changes++;\n      min = min - 1;\n    }\n    i++;\n  }\n  return changes;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array cyclical. A cyclical array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let changes = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let i = min;\n  while (min >= 0 && i < len) {\n    if (arr[i]!== arr[min + 1]) {\n      changes++;\n      min = min + 1;\n    }\n    i++;\n  }\n  return changes;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array rotated. A rotated array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let changes = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let i = min;\n  while (min >= 0 && i < len) {\n    if (arr[i]!== arr[min - 1]) {\n      changes++;\n      min = min - 1;\n    }\n    i++;\n  }\n  return changes;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let changes = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let i = min;\n  while (min >= 0 && i < len) {\n    if (arr[i]!== arr[min + 1]) {\n      changes++;\n      min = min + 1;\n    }\n    i++;\n  }\n  return changes;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let changes = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let i = min;\n  while (min >= 0 && i < len) {\n    if (arr[i]!== arr[min - 1]) {\n      changes++;\n      min = min - 1;\n    }\n    i++;\n  }\n  return changes;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let changes = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let i = min;\n  while (min >= 0 && i < len) {\n    if (arr[i]!== arr[min + 1]) {\n      changes++;\n      min = min + 1;\n    }\n    i++;\n  }\n  return changes;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let changes = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let i = min;\n  while (min >= 0 && i < len) {\n    if (arr[i]!== arr[min - 1]) {\n      changes++;\n      min = min - 1;\n    }\n    i++;\n  }\n  return changes;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let changes = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let i = min;\n  while (min >= 0 && i < len) {\n    if (arr[i]!== arr[min + 1]) {\n      changes++;\n      min = min + 1;\n    }\n    i++;\n  }\n  return changes;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let changes = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let i = min;\n  while (min >= 0 && i < len) {\n    if (arr[i]!== arr[min - 1]) {\n      changes++;\n      min = min - 1;\n    }\n    i++;\n  }\n  return changes;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array symmetric. A symmetric array is an array that\n  is read the same backward", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  let result = []\n  for (let i = 0; i < len; i++) {\n    let count = 0\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        count++\n      }\n    }\n    if (count < len2) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totgtrMatch([], []) ➞ []\n  totgtrMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totgtrMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totgtrMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totgtrMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totgtrMatch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  let result = []\n  for (let i = 0; i < len; i++) {\n    let count = 0\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        count++\n      }\n    }\n    if (count > len2) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  toteqMatch([], []) ➞ []\n  toteqMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  toteqMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  toteqMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  toteqMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst toteqMatch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  let result = []\n  for (let i = 0; i < len; i++) {\n    let count = 0\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        count++\n      }\n    }\n    if (count === len2) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totneMatch([], []) ➞ []\n  totneMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totneMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totneMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totneMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totneMatch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  let result = []\n  for (let i = 0; i < len; i++) {\n    let count = 0\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        count++\n      }\n    }\n    if (count > len2) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list contains any of the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totinMatch([], []) ➞ []\n  totinMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totinMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totinMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totinMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totinMatch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  let result = []\n  for (let i = 0; i < len; i++) {\n    let count = 0\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        count++\n      }\n    }\n    if (count >= len2) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not contains any of the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totnotMatch([], []) ➞ []\n  totnotMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totnotMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totnotMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totnotMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totnotMatch = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n  let result = []\n  for (let i = 0; i < len; i++) {\n    let count = 0\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        count++\n      }\n    }\n    if (count < len2) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list starts with the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totstartsMatch([], []) ➞ []\n  totstartsMatch", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMkltiplyPrime = false;\n      break;\n    }\n  }\n  return isMkltiplyPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  let isMkltiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isM", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  if (n <= 0) {\n    return false;\n  }\n  if (n <= 1) {\n    return true;\n  }\n  if (n <= 2) {\n    return x === 1;\n  }\n  if (n <= 3) {\n    return x === 2;\n  }\n  if (n <= 4) {\n    return x === 4;\n  }\n  if (n <= 5) {\n    return x === 8;\n  }\n  if (n <= 6) {\n    return x === 16;\n  }\n  if (n <= 7) {\n    return x === 32;\n  }\n  if (n <= 8) {\n    return x === 64;\n  }\n  if (n <= 9) {\n    return x === 128;\n  }\n  if (n <= 10) {\n    return x === 256;\n  }\n  if (n <= 11) {\n    return x === 512;\n  }\n  if (n <= 12) {\n    return x === 1024;\n  }\n  if (n <= 13) {\n    return x === 2048;\n  }\n  if (n <= 14) {\n    return x === 4096;\n  }\n  if (n <= 15) {\n    return x === 8192;\n  }\n  if (n <= 16) {\n    return x === 16384;\n  }\n  if (n <= 17) {\n    return x === 32768;\n  }\n  if (n <= 18) {\n    return x === 65536;\n  }\n  if (n <= 19) {\n    return x === 131072;\n  }\n  if (n <= 20) {\n    return x === 262144;\n  }\n  if (n <= 21) {\n    return x === 524288;\n  }\n  if (n <= 22) {\n    return x === 1048576;\n  }\n  if (n <= 23) {\n    return x === 2097152;\n  }\n  if (n <= 24) {\n    return x === 4194304;\n  }\n  if (n <= 25) {\n    return x === 8388608;\n  }\n  if (n <= 26) {\n    return x === 16777216;\n  }\n  if (n <= 27) {\n    return x === 33554432;\n  }\n  if (n <= 28) {\n    return x === 67108864;\n  }\n  if (n <= 29) {\n    return x === 134217728;\n  }\n  if (n <= 30) {\n    return x === 268435456;\n  }\n  if (n <= 31) {\n    return x === 536870912;\n  }\n  return false;\n};\n\nconst isPowerOfTwo = n => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n <= 1) {\n    return true;\n  }\n  if (n <= 2) {\n    return n === 2;\n  }\n  if (n <= 3) {\n    return n === 4;\n  }\n  if (n <= 4) {\n    return n === 8;\n  }\n  if (n <= 5) {\n    return n === 16;\n  }\n  if (n <= 6) {\n    return n === 32;\n  }\n  if (n <= 7) {\n    return n === 64;\n  }\n  if (n <= 8) {\n    return n === 128;\n  }\n  if (n <= 9) {\n    return n === 256;\n  }\n  if (n <= 10) {\n    return n === 512;\n  }\n  if (n <= 11) {\n    return n === 1024;\n  }\n  if (n <= 12) {\n    return n === 2048;\n  }\n  if (n <= 13) {\n    return n === 4096;\n  }\n  if (n <= 14) {\n    return n === 8192;\n  }\n  if (n <= 15) {\n    return n === 16384;\n  }\n  if (n <= 16) {\n    return n === 32768;\n  }\n  if (n <= 17) {\n    return n === 65536;\n  }\n  if (n <= 18) {\n    return n === 131072;\n  }\n  if (n <= 19) {\n    return n === 262144;\n  }\n  if (n <= 20) {\n    return n === 524288;\n  }\n  if (n <= 21) {\n    return n === 1048576;\n  }\n  if (n <= 22) {\n    return n === 2097152;\n  }\n  if (n <= 23) {\n    return n === 4194304;\n  }\n  if (n <= 24) {\n    return n === 8388608;\n  }\n  if (n <= 25) {\n    return n === 16777216;\n  }\n  if (n <= 26) {\n    return n === 33554432;\n  }\n  if (n <= 27) {\n    return n === 67108864;\n  }\n  if (n <= 28) {\n    return n === 134217728;\n  }\n  if (n <= 29) {\n    return n === 268435456;\n  }\n  if (n <= 30) {\n    return n === 536870912;\n  }\n  return false;\n};\n\nconst isPowerOfThree = n => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n <= 1) {\n    return true;\n  }\n  if (n <= 2) {\n    return n === 4;\n  }\n  if (n <= 3) {\n    return n === 8;\n  }\n  if (n <= 4) {\n    return n === 16;\n  }\n  if (n <= 5) {\n    return n === 32;\n  }\n  if (n <= 6) {\n    return n === 64;\n  }\n  if (n <= 7) {\n    return n === 128;\n  }\n  if (n <= 8) {\n    return n === 256;\n  }\n  if (n <= 9) {\n    return n === 512;\n  }\n  if (n <= 10) {\n    return n === 1024;\n  }\n  if (n <= 11) {\n    return n === 2048;\n  }\n  if (n <= 12) {\n    return n === 4096;\n  }\n  if (n <= 13) {\n    return n === 8192;\n  }\n  if (n <= 14) {\n    return n === 16384;\n  }\n  if (n <= 15) {\n    return n === 32768;\n  }\n  if (n <= 16) {\n    return n === 65536;\n  }\n  if (n <= 17) {\n    return n === 131072;\n  }\n  if (n <= 18) {\n    return n === 262144;\n  }\n  if (n <= 19) {\n    return n === 524288;\n  }\n  if (n <= 20) {\n    return n === 1048576;\n  }\n  if (n <= 21) {\n    return n === 2097152;\n  }\n  if (n <= 22) {\n    return n === 4194304;\n  }\n  if (n <= 23) {\n    return n === 8388608;\n  }\n  if (n <= 24) {\n    return n === 16777216;\n  }\n  if (n <= 25) {\n    return n === 33554432;\n  }\n  if (n <= 26) {\n    return n === 67108864;\n  }\n  if (n <= 27) {\n    return n === 134217728;\n  }\n  if (n <= 28) {\n    return n === 268435456;\n  }\n  if (n <= 29) {\n    return n === 536870912;\n  }\n  return false;\n};\n\nconst isPowerOfFour = n => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n <= 1) {\n    return true;\n  }\n  if (n <= 2) {\n    return n === 2;\n  }", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n  if (a <= 0) {\n    return false\n  }\n  let i = 1\n  while (i <= a) {\n    if (i % 3 === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe2 = (a) => {\n  if (a <= 0) {\n    return false\n  }\n  let i = 1\n  while (i <= a) {\n    if (i % 3 === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe3 = (a) => {\n  if (a <= 0) {\n    return false\n  }\n  let i = 1\n  while (i <= a) {\n    if (i % 3 === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe4 = (a) => {\n  if (a <= 0) {\n    return false\n  }\n  let i = 1\n  while (i <= a) {\n    if (i % 3 === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe5 = (a) => {\n  if (a <= 0) {\n    return false\n  }\n  let i = 1\n  while (i <= a) {\n    if (i % 3 === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe6 = (a) => {\n  if (a <= 0) {\n    return false\n  }\n  let i = 1\n  while (i <= a) {\n    if (i % 3 === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe7 = (a) => {\n  if (a <= 0) {\n    return false\n  }\n  let i = 1\n  while (i <= a) {\n    if (i % 3 === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe8 = (a) => {\n  if (a <= 0) {\n    return false\n  }\n  let i = 1\n  while (i <= a) {\n    if (i % 3 === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe9 = (a) => {\n  if (a <= 0) {\n    return false\n  }\n  let i = 1\n  while (i <= a) {\n    if (i % 3 === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe10 = (a) => {\n  if (a <= 0) {\n    return false\n  }\n  let i = 1\n  while (i <= a) {\n    if (i % 3 === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe11 = (a) => {\n  if (a <= 0) {\n    return false\n  }\n  let i = 1\n  while (i <= a) {\n    if (i % 3 === 0) {\n      return ", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n  let count = 0;\n  let numStr = \"\";\n  let numArr = num.split(\"\");\n  for (let i = 0; i < numArr.length; i++) {\n    if (numArr[i] === \"0\") {\n      numStr += numArr[i];\n    } else {\n      if (numArr[i] === \"1\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"2\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"3\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"4\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"5\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"6\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"7\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"8\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"9\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"A\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"B\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"C\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"D\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"E\") {\n        numStr += numArr[i];\n      } else if (numArr[i] === \"F\") {\n        numStr += numArr[i];\n      }\n    }\n  }\n  numStr = numStr.toUpperCase();\n  let numArr = numStr.split(\"\");\n  for (let i = 0; i < numArr.length; i++) {\n    if (numArr[i] === \"0\") {\n      numArr[i] = \"1\";\n    } else if (numArr[i] === \"1\") {\n      numArr[i] = \"2\";\n    } else if (numArr[i] === \"2\") {\n      numArr[i] = \"3\";\n    } else if (numArr[i] === \"3\") {\n      numArr[i] = \"4\";\n    } else if (numArr[i] === \"4\") {\n      numArr[i] = \"5\";\n    } else if (numArr[i] === \"5\") {\n      numArr[i] = \"6\";\n    } else if (numArr[i] === \"6\") {\n      numArr[i] = \"7\";\n    } else if (numArr[i] === \"7\") {\n      numArr[i] = \"8\";\n    } else if (numArr[i] === \"8\") {\n      numArr[i] = \"9\";\n    } else if (numArr[i] === \"9\") {\n      numArr[i] = \"A\";\n    } else if (numArr[i] === \"A\") {\n      numArr[i] = \"B\";\n    } else if (numArr[i] === \"B\") {\n      numArr[i] = \"C\";\n    } else if (numArr[i] === \"C\") {\n      numArr[i] = \"D\";\n    } else if (numArr[i] === \"D\") {\n      numArr[i] = \"E\";\n    } else if (numArr[i] === \"E\") {\n      numArr[i] = \"F\";\n    }\n  }\n  let numStr = \"\";\n  let numArr = numArr.join(\"\");\n  let numStrArr = numStr.split(\"\");\n  for (let i = 0; i < numStrArr.length; i++) {\n    if (numStrArr[i] === \"1\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"2\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"3\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"4\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"5\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"6\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"7\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"8\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"9\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"0\") {\n      numStrArr[i] = \"1\";\n    }\n  }\n  let numStr = \"\";\n  let numArr = numArr.join(\"\");\n  let numStrArr = numStr.split(\"\");\n  for (let i = 0; i < numStrArr.length; i++) {\n    if (numStrArr[i] === \"1\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"2\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"3\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"4\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"5\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"6\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"7\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"8\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"9\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"0\") {\n      numStrArr[i] = \"1\";\n    }\n  }\n  let numStr = \"\";\n  let numArr = numArr.join(\"\");\n  let numStrArr = numStr.split(\"\");\n  for (let i = 0; i < numStrArr.length; i++) {\n    if (numStrArr[i] === \"1\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"2\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"3\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"4\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"5\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"6\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"7\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"8\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"9\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"0\") {\n      numStrArr[i] = \"1\";\n    }\n  }\n  let numStr = \"\";\n  let numArr = numArr.join(\"\");\n  let numStrArr = numStr.split(\"\");\n  for (let i = 0; i < numStrArr.length; i++) {\n    if (numStrArr[i] === \"1\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"2\") {\n      numStrArr[i] = \"0\";\n    } else if (numStrArr[i] === \"3\") {\n      numStrArr", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  let decimalLength = decimalString.length;\n  let decimalValue = 0;\n  let decimalIndex = 0;\n  let decimalValueString = '';\n  let decimalValueLength = 0;\n  let decimalValueIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValueStringLength = 0;\n  let decimalValueStringIndex = 0;\n  let decimalValue", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= i;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing only positive integers, return its sum.\n  >>> sumPositive([2, -1, 0, 1])\n  3\n  */\nconst sumPositive = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list containing only negative integers, return its sum.\n  >>> sumNegative([2, -1, 0, 1])\n  -1\n  */\nconst sumNegative = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < 0) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list containing only integers, return its sum.\n  >>> sumIntegers([2, -1, 0, 1])\n  3\n  */\nconst sumIntegers = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* Given a list containing only positive integers and negative integers, return its sum.\n  >>> sumIntegersAndNegative([2, -1, 0, 1])\n  3\n  */\nconst sumIntegersAndNegative = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i];\n    }\n    if (numbers[i] < 0) {\n      sum += numbers[i] * -1;\n    }\n  }\n  return sum;\n};\n\n/* Given a list containing only positive integers and negative integers, return its sum.\n  >>> sumIntegersAndNegativeAndPositive([2, -1, 0, 1])\n  3\n  */\nconst sumIntegersAndNegativeAndPositive = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i];\n    }\n    if (numbers[i] < 0) {\n      sum += numbers[i] * -1;\n    }\n    if (numbers[i] === 0) {\n      sum *= -1;\n    }\n  }\n  return sum;\n};\n\n/* Given a list containing only positive integers and negative integers, return its sum.\n  >>> sumIntegersAndNegativeAndPositiveAndZero([2, -1, 0, 1])\n  3\n  */\nconst sumIntegersAndNegativeAndPositiveAndZero = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i];\n    }\n    if (numbers[i] < 0) {\n      sum += numbers[i] * -1;\n    }\n    if (numbers[i] === 0) {\n      sum *= -1;\n    }\n  }\n  return sum;\n};\n\n/* Given a list containing only positive integers and negative integers, return its sum.\n  >>> sumIntegersAndNegativeAndPositiveAndZeroAndOne([2, -1, 0, 1])\n  3\n  */\nconst sumIntegersAndNegativeAndPositiveAndZeroAndOne = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i];\n    }\n    if (numbers[i] < 0) {\n      sum += numbers[i] * -1;\n    }\n    if (numbers[i] === 0) {\n      sum *= -1;\n    }\n  }\n  return sum;\n};\n\n/* Given a list containing only positive integers and negative integers, return its sum.\n  >>> sumIntegersAndNegativeAndPositiveAndZeroAndOneAndTwo([2, -1, 0, 1])\n  3\n  */\nconst sumIntegersAndNegativeAndPositiveAndZeroAndOneAndTwo = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i];\n    }\n    if (numbers[i] < 0) {\n      sum += numbers[i] * -1;\n    }\n    if (numbers[i] === 0) {\n      sum *= -1;\n    }\n  }\n  return sum;\n};\n\n/* Given a list containing only positive integers and negative integers, return its sum.\n  >>> sumIntegersAndNegativeAndPositiveAndZeroAndOneAndTwoAndThree([2, -1, 0, 1])\n  3\n  */\nconst sumIntegersAndNegativeAndPositiveAndZeroAndOneAndTwoAndThree = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i];\n    }\n    if (numbers[i] < 0) {\n      sum += numbers[i] * -1;\n    }\n    if (numbers[i] === 0) {\n      sum *= -1;\n    }\n  }\n  return sum;\n};\n\n/* Given a list containing only positive integers and negative integers, return its sum.\n  >>> sumIntegersAndNegativeAndPositiveAndZeroAndOneAndTwoAndThreeAndFour([2, -1, 0, 1])\n  3\n  */\nconst sumIntegersAndNegativeAndPositiveAndZeroAndOneAndTwoAndThreeAndFour = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i];\n    }\n    if (numbers[i] < 0) {\n      sum += numbers[i] * -1;\n    }\n    if (numbers[i] === 0) {\n      sum *= -1;\n    }\n  }\n  return sum;\n};\n\n/* Given a list containing only positive integers and negative integers, return its sum.\n  >>> sumIntegersAndNegativeAndPositiveAndZeroAndOneAndTwoAndThreeAndFourAndFive([2, -1, 0, 1])\n  3\n  */\nconst sumIntegersAndNegativeAndPositiveAndZeroAndOneAndTwoAndThreeAndFourAndFive = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i];\n    }\n    if (numbers[i] < 0) {\n      sum += numbers[i] * -1;\n    }\n    if (numbers[i] === 0) {\n      sum *= -1;\n    }\n  }\n  return sum;\n};\n\n/* Given a list containing only positive integers and negative integers, return its sum.\n  >>> sumIntegersAndNegativeAndPositiveAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix([2, -1, 0, 1])\n  3\n  */\nconst sumIntegersAndNegativeAndPositiveAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i];\n    }\n    if (numbers[i] < 0) {\n      sum += numbers[i] * -1;\n    }\n    if (numbers[i] === 0) {\n      sum *= -1;\n    }\n  }\n  return sum;\n};\n\n/* Given a list containing only positive integers and negative integers, return its sum.\n  >>> sumIntegersAndNegativeAndPositiveAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven([2, -1, 0, 1])\n  3\n  */\nconst sumIntegersAndNegativeAndPositiveAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 0) {\n      sum += numbers[i];\n    }\n    if (numbers[i] < 0) {\n      sum += numbers[i] * -1;\n    }\n    if (numbers[i] === 0) {\n      sum *= -1;\n    }\n  }\n  return sum;\n};\n\n/* Given a list containing only positive integers and negative integers, return its sum.\n  >>> sumIntegersAndNegativeAndPositiveAndZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n  let isHwppy = true;\n  let isHwppyString = \"\";\n  let isHwppyLength = 0;\n  let isHwppyLetter = \"\";\n\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i)) {\n      isHwppyString = isHwppyString + s.charAt(i);\n      isHwppyLength = isHwppyLength + 1;\n    } else {\n      if (isHwppyLength >= 3) {\n        isHwppyLetter = s.charAt(i);\n        if (isHwppyLetter === isHwppyLetter) {\n          isHwppyLetter = \"\";\n        } else {\n          isHwppyLetter = \"\";\n        }\n      } else {\n        isHwppyLetter = \"\";\n      }\n    }\n  }\n\n  if (isHwppyString === \"\") {\n    isHwppy = false;\n  } else {\n    isHwppy = isHwppyString.length === isHwppyLength && isHwppyString.every(\n      char => char === isHwppyLetter\n    );\n  }\n\n  return isHwppy;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalin(a) => false\n  isPalin(aa) => true\n  isPalin(xyy) => false\n  isPalin(xyyx) => true\n  isPalin(xyyxx) => true\n  isPalin(xyyxxx) => true\n  isPalin(xyyxxxx) => true\n  isPalin(xyyxxxxx) => true\n  isPalin(xyyxxxxxx) => true\n  isPalin(xyyxxxxxxx) => true\n  isPalin(xyyxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxx) => true\n  isPalin(xyyxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "passed": 0}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  const letterGrades = ['A', 'B', 'C', 'D', 'E'];\n  const numOfStudents = grades.length;\n  const numOfLetterGrades = letterGrades.length;\n  const numOfGrades = numOfStudents * numOfLetterGrades;\n  const gradesArray = [];\n  let currentGrade = 0;\n  let currentLetterGrade = 0;\n  let currentLetterGradeIndex = 0;\n  let currentLetterGradeIndex2 = 0;\n  let currentLetterGradeIndex3 = 0;\n  let currentLetterGradeIndex4 = 0;\n  let currentLetterGradeIndex5 = 0;\n  let currentLetterGradeIndex6 = 0;\n  let currentLetterGradeIndex7 = 0;\n  let currentLetterGradeIndex8 = 0;\n  let currentLetterGradeIndex9 = 0;\n  let currentLetterGradeIndex10 = 0;\n  let currentLetterGradeIndex11 = 0;\n  let currentLetterGradeIndex12 = 0;\n  let currentLetterGradeIndex13 = 0;\n  let currentLetterGradeIndex14 = 0;\n  let currentLetterGradeIndex15 = 0;\n  let currentLetterGradeIndex16 = 0;\n  let currentLetterGradeIndex17 = 0;\n  let currentLetterGradeIndex18 = 0;\n  let currentLetterGradeIndex19 = 0;\n  let currentLetterGradeIndex20 = 0;\n  let currentLetterGradeIndex21 = 0;\n  let currentLetterGradeIndex22 = 0;\n  let currentLetterGradeIndex23 = 0;\n  let currentLetterGradeIndex24 = 0;\n  let currentLetterGradeIndex25 = 0;\n  let currentLetterGradeIndex26 = 0;\n  let currentLetterGradeIndex27 = 0;\n  let currentLetterGradeIndex28 = 0;\n  let currentLetterGradeIndex29 = 0;\n  let currentLetterGradeIndex30 = 0;\n  let currentLetterGradeIndex31 = 0;\n  let currentLetterGradeIndex32 = 0;\n  let currentLetterGradeIndex33 = 0;\n  let currentLetterGradeIndex34 = 0;\n  let currentLetterGradeIndex35 = 0;\n  let currentLetterGradeIndex36 = 0;\n  let currentLetterGradeIndex37 = 0;\n  let currentLetterGradeIndex38 = 0;\n  let currentLetterGradeIndex39 = 0;\n  let currentLetterGradeIndex40 = 0;\n  let currentLetterGradeIndex41 = 0;\n  let currentLetterGradeIndex42 = 0;\n  let currentLetterGradeIndex43 = 0;\n  let currentLetterGradeIndex44 = 0;\n  let currentLetterGradeIndex45 = 0;\n  let currentLetterGradeIndex46 = 0;\n  let currentLetterGradeIndex47 = 0;\n  let currentLetterGradeIndex48 = 0;\n  let currentLetterGradeIndex49 = 0;\n  let currentLetterGradeIndex50 = 0;\n  let currentLetterGradeIndex51 = 0;\n  let currentLetterGradeIndex52 = 0;\n  let currentLetterGradeIndex53 = 0;\n  let currentLetterGradeIndex54 = 0;\n  let currentLetterGradeIndex55 = 0;\n  let currentLetterGradeIndex56 = 0;\n  let currentLetterGradeIndex57 = 0;\n  let currentLetterGradeIndex58 = 0;\n  let currentLetterGradeIndex59 = 0;\n  let currentLetterGradeIndex60 = 0;\n  let currentLetterGradeIndex61 = 0;\n  let currentLetterGradeIndex62 = 0;\n  let currentLetterGradeIndex63 = 0;\n  let currentLetterGradeIndex64 = 0;\n  let currentLetterGradeIndex65 = 0;\n  let currentLetterGradeIndex66 = 0;\n  let currentLetterGradeIndex67 = 0;\n  let currentLetterGradeIndex68 = 0;\n  let currentLetterGradeIndex69 = 0;\n  let currentLetterGradeIndex70 = 0;\n  let currentLetterGradeIndex71 = 0;\n  let currentLetterGradeIndex72 = 0;\n  let currentLetterGradeIndex73 = 0;\n  let currentLetterGradeIndex74 = 0;\n  let currentLetterGradeIndex75 = 0;\n  let currentLetterGradeIndex76 = 0;\n  let currentLetterGradeIndex77 = 0;\n  let currentLetterGradeIndex78 = 0;\n  let currentLetterGradeIndex79 = 0;\n  let currentLetterGradeIndex80 = 0;\n  let currentLetterGradeIndex81 = 0;\n  let currentLetterGradeIndex82 = 0;\n  let currentLetterGradeIndex83 = 0;\n  let currentLetterGradeIndex84 = 0;\n  let currentLetterGradeIndex85 = 0;\n  let currentLetterGradeIndex86 = 0;\n  let currentLetterGradeIndex87 = 0;\n  let currentLetterGradeIndex88 = 0;\n  let currentLetterGradeIndex89 = 0;\n  let currentLetterGradeIndex90 = 0;\n  let currentLetterGradeIndex91 = 0;\n  let currentLetterGradeIndex92 = 0;\n  let currentLetterGradeIndex93 = 0;\n  let currentLetterGradeIndex94 = 0;\n  let currentLetterGradeIndex95 = 0;\n  let currentLetterGradeIndex96 = 0;\n  let currentLetterGradeIndex97 = 0;\n  let currentLetterGradeIndex98 = 0;\n  let currentLetterGradeIndex99 = 0;\n  let currentLetterGradeIndex100 = 0;\n  let currentLetterGradeIndex101 = 0;\n  let currentLetterGradeIndex102 = 0;\n  let currentLetterGradeIndex103 = 0;\n  let currentLetterGradeIndex104 = 0;\n  let currentLetterGradeIndex105 = 0;\n  let currentLetterGradeIndex106 = 0;\n  let currentLetterGradeIndex107 = 0;\n  let currentLetterGradeIndex108 = 0;\n  let currentLetterGradeIndex109 = 0;\n  let currentLetterGradeIndex110 = 0;\n  let currentLetterGradeIndex111 = 0;\n  let currentLetterGradeIndex112 = 0;\n  let currentLetterGradeIndex113 = 0;\n  let currentLetterGradeIndex114 = 0;\n  let currentLetterGradeIndex115 = 0;\n  let currentLetterGradeIndex116 = 0;\n  let currentLetterGradeIndex117 = 0;\n  let currentLetterGradeIndex118 = 0;\n  let currentLetterGradeIndex119 = 0;\n  let currentLetterGradeIndex120 = 0;\n  let currentLetterGradeIndex121 = 0;\n  let currentLetterGradeIndex122 = 0;\n  let currentLetterGradeIndex123 = 0;\n  let currentLetterGradeIndex124 = 0;\n  let currentLetterGradeIndex125 = 0;\n  let currentLetterGradeIndex126 = 0;\n  let currentLetterGradeIndex127 = 0;\n  let currentLetterGradeIndex128 = 0;\n  let currentLetterGradeIndex129 = 0;\n  let currentLetterGradeIndex130 = 0;\n  let currentLetterGradeIndex131 = 0;\n  let currentLetterGradeIndex132 = 0;\n  let currentLetterGradeIndex133 = 0;\n  let currentLetterGradeIndex134 = 0;\n  let currentLetterGradeIndex135 = 0;\n  let currentLetterGradeIndex136 = 0;\n  let currentLetterGradeIndex137 = 0;\n  let currentLetterGradeIndex138 = 0;\n  let currentLetterGradeIndex139 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let factor = 1;\n  while (length > 1) {\n    factor = Math.floor(length / 2);\n    if (factor % 2 === 0) {\n      length -= factor;\n    } else {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == false\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let isDivisibleBy3 = true;\n  let length = string.length;\n  let factor = 3;\n  while (length > 1) {\n    factor = Math.floor(length / 3);\n    if (factor % 2 === 0) {\n      length -= factor;\n    } else {\n      isDivisibleBy3 = false;\n      break;\n    }\n  }\n  return isDivisibleBy3;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == false\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let isDivisibleBy5 = true;\n  let length = string.length;\n  let factor = 5;\n  while (length > 1) {\n    factor = Math.floor(length / 5) + 1;\n    if (factor % 2 === 0) {\n      length -= factor;\n    } else {\n      isDivisibleBy5 = false;\n      break;\n    }\n  }\n  return isDivisibleBy5;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == false\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let isDivisibleBy7 = true;\n  let length = string.length;\n  let factor = 7;\n  while (length > 1) {\n    factor = Math.floor(length / 7) + 1;\n    if (factor % 2 === 0) {\n      length -= factor;\n    } else {\n      isDivisibleBy7 = false;\n      break;\n    }\n  }\n  return isDivisibleBy7;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisibleBy9('Hello') == true\n  divisibleBy9('abcdcba') == true\n  divisibleBy9('kittens') == false\n  divisibleBy9('orange') == false\n  */\nconst divisibleBy9 = (string) => {\n  let isDivisibleBy9 = true;\n  let length = string.length;\n  let factor = 9;\n  while (length > 1) {\n    factor = Math.floor(length / 9) + 1;\n    if (factor % 2 === 0) {\n      length -= factor;\n    } else {\n      isDivisibleBy9 = false;\n      break;\n    }\n  }\n  return isDivisibleBy9;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == false\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let isDivisibleBy11 = true;\n  let length = string.length;\n  let factor = 11;\n  while (length > 1) {\n    factor = Math.floor(length / 11) + 1;\n    if (factor % 2 === 0) {\n      length -= factor;\n    } else {\n      isDivisibleBy11 = false;\n      break;\n    }\n  }\n  return isDivisibleBy11;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == false\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let isDivisibleBy13 = true;\n  let length = string.length;\n  let factor = 13;\n  while (length > 1) {\n    factor = Math.floor(length / 13) + 1;\n    if (factor % 2 === 0) {\n      length -= factor;\n    } else {\n      isDivisibleBy13 = false;\n      break;\n    }\n  }\n  return isDivisibleBy13;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('abcdcba') == true\n  divisibleBy15('kittens') == false\n  divisibleBy15('orange') == false\n  */\nconst divisibleBy15 = (string) => {\n  let isDivisibleBy15 = true;\n  let length = string.length;\n  let factor = 15;\n  while (length > 1) {\n    factor = Math.floor(length / 15) + 1;\n    if (factor % 2 === 0) {\n      length -= factor;\n    } else {\n      isDivisibleBy15 = false;\n      break;\n    }\n  }\n  return isDivisibleBy15;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == false\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let isDivisibleBy17 = true;\n  let length = string.length;\n  let factor = 17\n  while (length > 1) {\n    factor = Math.floor(length / 17) + 1;\n    if (factor % 2 === 0) {\n      length -= factor;\n    } else {\n      isDivisibleBy17 = false;\n      break;\n    }\n  }\n  return isDivisibleBy17;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('abcdcba') == true\n  divisibleBy19('kittens') == false\n  divisibleBy19('orange') == false\n  */\nconst divisibleBy19 = (string) => {\n  let isDivisibleBy19 = true;\n  let length = string.length;\n  let factor19 = 19\n  while (length > 1) {\n    factor = Math.floor(length / 19) + 1;\n    if (factor % 2 === 0) {\n      length -= factor;\n    } else {\n      isDivisibleBy19 = false;\n      break;\n    }\n  }\n  return isDivisibleBy19;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 21 or false otherwise\n  Examples\n  divisibleBy21('Hello') == true\n  divisibleBy21('abcdcba') == true\n  divisibleBy21('kittens') == false\n  divisibleBy21('orange') == false\n  */\nconst divisibleBy21 = (string) => {", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 2.\n  */\nconst stagtsTwoEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 3.\n  */\nconst stagtsThreeEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 4.\n  */\nconst stagtsFourEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 5.\n  */\nconst stagtsFiveEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 6.\n  */\nconst stagtsSixEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 7.\n  */\nconst stagtsSevenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 8.\n  */\nconst stagtsEightEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 9.\n  */\nconst stagtsNineEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 10.\n  */\nconst stagtsTenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 11.\n  */\nconst stagtsElevenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 12.\n  */\nconst stagtsTwelveEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 13.\n  */\nconst stagtsThirteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 14.\n  */\nconst stagtsFourteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 15.\n  */\nconst stagtsFifteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 16.\n  */\nconst stagtsSixteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 17.\n  */\nconst stagtsSeventeenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 18.\n  */\nconst stagtsEighteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n      n /= 10;\n      i++;\n    } else {\n      n /= 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end ", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  for (let i = 2; i <= N; i++) {\n    sum += parseInt(i.toString(2), 2);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the total sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  for (let i = 2; i <= N; i++) {\n    sum += parseInt(i, 10);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  for (let i = 2; i <= N; i++) {\n    sum += parseInt(i, 16);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the total sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  for (let i = 2; i <= N; i++) {\n    sum += parseInt(i, 8);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  for (let i = 2; i <= N; i++) {\n    sum += parseInt(i, 16);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the total sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  for (let i = 2; i <= N; i++) {\n    sum += parseInt(i, 8);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  for (let i = 2; i <= N; i++) {\n    sum += parseInt(i, 16);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the total sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  for (let i = 2; i <= N; i++) {\n    sum += parseInt(i, 8);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  for (let i = 2; i <= N; i++) {\n    sum += parseInt(i, 16);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the total sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  for (let i = 2; i <= N; i++) {\n    sum += parseInt(i, 10);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the total sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solge = (N) => {\n", "passed": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = lst.filter(x => x % 2 === 0)\n  let odd = lst.filter(x => x % 2!== 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let even = lst.filter(x => x % 2 === 0)\n  let odd = lst.filter(x => x % 2!== 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0)\n  let odd = lst.filter(x => x % 2!== 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOdd = (lst, odd) => {\n  let even = lst.filter(x => x % 2!== 0)\n  let odd = lst.filter(x => x % 2 === 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst, even) => {\n  let odd = lst.filter(x => x % 2!== 0)\n  let even = lst.filter(x => x % 2 === 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0)\n  let odd = lst.filter(x => x % 2 === 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0)\n  let odd = lst.filter(x => x % 2 === 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0)\n  let odd = lst.filter(x => x % 2 === 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0)\n  let odd = lst.filter(x => x % 2 === 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0)\n  let odd = lst.filter(x => x % 2 === 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0)\n  let odd = lst.filter(x => x % 2 === 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0)\n  let odd = lst.filter(x => x % 2 === 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0)\n  let odd = lst.filter(x => x % 2 === 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0)\n  let odd = lst.filter(x => x % 2 === 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0)\n  let odd = lst.filter(x => x % 2 === 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0)\n  let odd = lst.filter(x => x % 2 === 0)\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => {\n    return a.localeCompare(b);\n  });\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i] +'';\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffleAll = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => {\n    return a.localeCompare(b);\n  });\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i] +'';\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffleAllWithSpace = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => {\n    return a.localeCompare(b);\n  });\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i] +'';\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffleAllWithSpaceAndNewWord = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => {\n    return a.localeCompare(b);\n  });\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i] +'';\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffleAllWithSpaceAndNewWordAndSpace = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => {\n    return a.localeCompare(b);\n  });\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i] +'';\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffleAllWithSpaceAndNewWordAndSpaceAndNewWord = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => {\n    return a.localeCompare(b);\n  });\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i] +'';\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffleAllWithSpaceAndNewWordAndSpaceAndNewWordAndSpace = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => {\n    return a.localeCompare(b);\n  });\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i] +'';\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffleAllWithSpaceAndNewWordAndSpaceAndNewWordAndSpaceAndNewWord = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => {\n    return a.localeCompare(b);\n  });\n  for (let i = 0; i < words.length; i++) {\n    newStr += words[i] +'';\n  }\n  return newStr;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let rowIdx = 0;\n  let colIdx = 0;\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row, col]);\n      rowIdx = row;\n      colIdx = col;\n      col++;\n      row++;\n    } else {\n      colIdx = col;\n      col++;\n    }\n  }\n  result.sort((a, b) => a - b);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let rowIdx = 0;\n  let colIdx = 0;\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row, col]);\n      rowIdx = row;\n      colIdx = col;\n      col++;\n      row++;\n    } else {\n      colIdx = col;\n      col++;\n    }\n  }\n  result.sort((a, b) => a - b);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let rowIdx = 0;\n  let colIdx = 0;\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row, col]);\n      rowIdx = row;\n      colIdx = col;\n      col++;\n      row++;\n    } else {\n      colIdx = col;\n      col++;\n    }\n  }\n  result.sort((a, b) => a - b);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let rowIdx = 0;\n  let colIdx = 0;\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row, col]);\n      rowIdx = row;\n      colIdx = col;\n      col++;\n      row++;\n    } else {\n      colIdx = col;\n      col++;\n    }\n  }\n  result.sort((a, b) => a - b);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let rowIdx = 0;\n  let colIdx = 0;\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row, col]);\n      rowIdx = row;\n      colIdx = col;\n      col++;\n      row++;\n    } else {\n      colIdx = col;\n      col++;\n    }\n  }\n  result.sort((a, b) => a - b);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/**\n * Given an array of non-negative integers, return the sum of the given array.\n\n  Example:\n  * sumArray([]) => 0\n  * sumArray([5]) => 5\n  * sumArray([2, 4, 3, 0, 1, 5]) => 10\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => 15\n  */\nconst sumArray = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a - b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a - b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a - b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a - b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a - b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a - b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a - b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a + b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => a - b, 0);\n};\n\n/**\n * Given an array of non-negative integers, return the difference between the given array and the sum of its elements.\n\n  Example:\n  * differenceArray([]) => 0\n  * differenceArray([5]) => 5\n  * differenceArray([2, 4, 3, 0, 1, 5]) => 2\n  * differenceArray([2, 4, 3, 0, 1, 5, 6]) => 4\n  */\nconst differenceArray = (array) => {\n  return array.reduce((a, b) => ", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "<|endoftext|>/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n  const maxNumbers = numbers.slice();\n  let maxNumber = 0;\n  let maxNumberIndex = 0;\n  let maxNumberLength = 0;\n  let maxNumberLengthIndex = 0;\n  let maxNumberLengthLength = 0;\n  let maxNumberLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n  let maxNumberLengthLengthLengthLengthIndex = 0;\n", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  if (lst === null || lst === undefined) {\n    return null;\n  }\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null) {\n      min = lst[i];\n      minIndex = i;\n    } else if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhLargest() that returns the 1st largest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 3\n  nexhLargest([5, 1, 4, 3, 2]) == 3\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  if (lst === null || lst === undefined) {\n    return null;\n  }\n  let max = null;\n  let maxIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null) {\n      max = lst[i];\n      maxIndex = i;\n    } else if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhGreatest() that returns the greatest element of the list.\n  Return null if there is no such element.\n  \n  nexhGreatest([1, 2, 3, 4, 5]) == 5\n  nexhGreatest([5, 1, 4, 3, 2]) == 5\n  nexhGreatest([]) == null\n  nexhGreatest([1, 1]) == null\n  */\nconst nexhGreatest = (lst) => {\n  if (lst === null || lst === undefined) {\n    return null;\n  }\n  let max = null;\n  let maxIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null) {\n      max = lst[i];\n      maxIndex = i;\n    } else if (max > lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 4\n  nexhSmallest([5, 1, 4, 3, 2]) == 4\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  if (lst === null || lst === undefined) {\n    return null;\n  }\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null) {\n      min = lst[i];\n      minIndex = i;\n    } else if (min < lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhLargest() that returns the 1st largest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 3\n  nexhLargest([5, 1, 4, 3, 2]) == 3\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  if (lst === null || lst === undefined) {\n    return null;\n  }\n  let max = null;\n  let maxIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null) {\n      max = lst[i];\n      maxIndex = i;\n    } else if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhGreatest() that returns the greatest element of the list.\n  Return null if there is no such element.\n  \n  nexhGreatest([1, 2, 3, 4, 5]) == 5\n  nexhGreatest([5, 1, 4, 3, 2]) == 5\n  nexhGreatest([]) == null\n  nexhGreatest([1, 1]) == null\n  */\nconst nexhGreatest = (lst) => {\n  if (lst === null || lst === undefined) {\n    return null;\n  }\n  let max = null;\n  let maxIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null) {\n      max = lst[i];\n      maxIndex = i;\n    } else if (max > lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 4\n  nexhSmallest([5, 1, 4, 3, 2]) == 4\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  if (lst === null || lst === undefined) {\n    return null;\n  }\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null) {\n      min = lst[i];\n      minIndex = i;\n    } else if (min < lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhLargest() that returns the 1st largest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 3\n  nexhLargest([5, 1, 4, 3, 2]) == 3\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  if (lst === null || lst === undefined) {\n    return null;\n  }\n  let max = null;\n  let maxIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null) {\n      max = lst[i];\n      maxIndex = i;\n    } else if (max > lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhGreatest() that returns the greatest element of the list.\n  Return null if there is no such element.\n  \n  nexhGreatest([1, 2, 3, 4, 5]) == 5\n  nexhGreatest([5, 1, 4, 3, 2]) == 5\n  nexhGreatest([]) == null\n  nexhGreatest([1, 1]) == null\n  */\nconst nexhGreatest = (lst) => {\n  if (lst === null || lst === undefined) {\n    return null;\n  }\n  let max = null;\n  let maxIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null) {\n      max = lst[i];\n      maxIndex = i;\n    } else if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  ", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 0;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let A = 1;\n  let B = 1;\n  let C = 1;\n  let D = 1;\n  let E = 1;\n  let F = 1;\n  let G = 1;\n  let H = 1;\n  let I = 1;\n  let J = 1;\n  let K = 1;\n  let L = 1;\n  let M = 1;\n  let N = 1;\n  let O = 1;\n  let P = 1;\n  let Q = 1;\n  let R = 1;\n  let S = 1;\n  let T = 1;\n  let U = 1;\n  let V = 1;\n  let W = 1;\n  let X = 1;\n  let Y = 1;\n  let Z = 1;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x === y && x === z\n}\n\n// Create a function that takes 3 numbers.\n// Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// anyLnt(5, 2, 7) ➞ true\n// anyLnt(3, 2, 2) ➞ false\n// anyLnt(3, -2, 1) ➞ true\n// anyLnt(3.6, -2.2, 2) ➞ false\nconst anyLntAll = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x === y || x === z\n}\n\n// Create a function that takes 3 numbers.\n// Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// anyLnt(5, 2, 7) ➞ true\n// anyLnt(3, 2, 2) ➞ false\n// anyLnt(3, -2, 1) ➞ true\n// anyLnt(3.6, -2.2, 2) ➞ false\nconst anyLntAllAll = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x === y || x === z || y === z\n}\n\n// Create a function that takes 3 numbers.\n// Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// anyLnt(5, 2, 7) ➞ true\n// anyLnt(3, 2, 2) ➞ false\n// anyLnt(3, -2, 1) ➞ true\n// anyLnt(3.6, -2.2, 2) ➞ false\nconst anyLntAllAllAll = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x === y || x === z || y === z || z === z\n}\n\n// Create a function that takes 3 numbers.\n// Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// anyLnt(5, 2, 7) ➞ true\n// anyLnt(3, 2, 2) ➞ false\n// anyLnt(3, -2, 1) ➞ true\n// anyLnt(3.6, -2.2, 2) ➞ false\nconst anyLntAllAllAllAll = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x === y || x === z || y === z || z === z || z === z\n}\n\n// Create a function that takes 3 numbers.\n// Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// anyLnt(5, 2, 7) ➞ true\n// anyLnt(3, 2, 2) ➞ false\n// anyLnt(3, -2, 1) ➞ true\n// anyLnt(3.6, -2.2, 2) ➞ false\nconst anyLntAllAllAllAll = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x === y || x === z || y === z || z === z || z === z\n}\n\n// Create a function that takes 3 numbers.\n// Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// anyLnt(5, 2, 7) ➞ true\n// anyLnt(3, 2, 2) ➞ false\n// anyLnt(3, -2, 1) ➞ true\n// anyLnt(3.6, -2.2, 2) ➞ false\nconst anyLntAllAllAllAllAll = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x === y || x === z || y === z || z === z || z === z\n}\n\n// Create a function that takes 3 numbers.\n// Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// anyLnt(5, 2, 7) ➞ true\n// anyLnt(3, 2, 2) ➞ false\n// anyLnt(3, -2, 1) ➞ true\n// anyLnt(3.6, -2.2, 2) ➞ false\nconst anyLntAllAllAllAllAllAll = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x === y || x === z || y === z || z === z || z === z\n}\n\n// Create a function that takes 3 numbers.\n// Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// anyLnt(5, 2, 7) ➞ true\n// anyLnt(3, 2, 2) ➞ false\n// anyLnt(3, -2, 1) ➞ true\n// anyLnt(3.6, -2.2, 2) ➞ false\nconst anyLntAllAllAllAllAllAllAll = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x === y || x === z || y === z || z === z || z === z\n}\n\n// Create a function that takes 3 numbers.\n// Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// anyLnt(5, 2, 7) ➞ true\n// anyLnt(3, 2, 2) ➞ false\n// anyLnt(3, -2, 1) ➞ true\n// anyLnt(3.6, -2.2, 2) ➞ false\nconst anyLntAllAllAllAllAllAllAll = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x === y || x === z || y === z || z === z || z === z\n}\n\n// Create a function that takes 3 numbers.\n// Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// anyLnt(5, 2, 7) ➞ true\n// anyLnt(3, 2, 2) ➞ false\n// anyLnt(3, -2, 1) ➞ true\n// anyLnt(3.6, -2.2, 2) ➞ false\nconst anyLntAllAllAllAllAllAllAll = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x === y || x === z || y === z || z === z || z === z\n}\n\n// Create a function that takes 3 ", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let newMessage = ''\n  \n  for(const letter of message) {\n    if(vowels.includes(letter)) {\n      newMessage += letter.toUpperCase()\n    } else {\n      newMessage += letter.toLowerCase()\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let newMessage = ''\n  \n  for(const letter of message) {\n    if(vowels.includes(letter)) {\n      newMessage += letter.toUpperCase()\n    } else {\n      newMessage += letter.toLowerCase()\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let newMessage = ''\n  \n  for(const letter of message) {\n    if(vowels.includes(letter)) {\n      newMessage += letter.toUpperCase()\n    } else {\n      newMessage += letter.toLowerCase()\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let newMessage = ''\n  \n  for(const letter of message) {\n    if(vowels.includes(letter)) {\n      newMessage += letter.toUpperCase()\n    } else {\n      newMessage += letter.toLowerCase()\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let newMessage = ''\n  \n  for(const letter of message) {\n    if(vowels.includes(letter)) {\n      newMessage += letter.toUpperCase()\n    } else {\n      newMessage += letter.toLowerCase()\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let newMessage = ''\n  \n  for(const letter of message) {\n    if(vowels.includes(letter)) {\n      newMessage += letter.toUpperCase()\n    } else {\n      newMessage += letter.toLowerCase()\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let newMessage = ''\n  \n  for(const letter of message) {\n    if(vowels.includes(letter)) {\n      newMessage += letter.toUpperCase()\n    } else {\n      newMessage += letter.toLowerCase()\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let newMessage = ''\n  \n  for(const letter of message) {\n    if(vowels.includes(letter)) {\n      newMessage += letter.toUpperCase()\n    } else {\n      newMessage += letter.toLowerCase()\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let newMessage = ''\n  \n  for(const letter of message) {\n    if(vowels.includes(letter)) {", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  let largestPrime = lst[0];\n  let sum = 0;\n  let digit = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largestPrime) {\n      largestPrime = lst[i];\n    }\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      digit = lst[i] / 10;\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = skjnasdkd;\n\n},{}],3:[function(require,module,exports){\n/*\n  skjnasdkd - skjnasdkd is a simple JavaScript library for calculating prime numbers.\n  Copyright © 2018 Jason Snook.\n  Licensed under the MIT License.\n*/\n\nconst skjnasdkd = (lst) => {\n  let largestPrime = lst[0];\n  let sum = 0;\n  let digit = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largestPrime) {\n      largestPrime = lst[i];\n    }\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      digit = lst[i] / 10;\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = skjnasdkd;\n\n},{}],4:[function(require,module,exports){\n/*\n  skjnasdkd - skjnasdkd is a simple JavaScript library for calculating prime numbers.\n  Copyright © 2018 Jason Snook.\n  Licensed under the MIT License.\n*/\n\nconst skjnasdkd = (lst) => {\n  let largestPrime = lst[0];\n  let sum = 0;\n  let digit = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largestPrime) {\n      largestPrime = lst[i];\n    }\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      digit = lst[i] / 10;\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = skjnasdkd;\n\n},{}],5:[function(require,module,exports){\n/*\n  skjnasdkd - skjnasdkd is a simple JavaScript library for calculating prime numbers.\n  Copyright © 2018 Jason Snook.\n  Licensed under the MIT License.\n*/\n\nconst skjnasdkd = (lst) => {\n  let largestPrime = lst[0];\n  let sum = 0;\n  let digit = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largestPrime) {\n      largestPrime = lst[i];\n    }\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      digit = lst[i] / 10;\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = skjnasdkd;\n\n},{}],6:[function(require,module,exports){\n/*\n  skjnasdkd - skjnasdkd is a simple JavaScript library for calculating prime numbers.\n  Copyright © 2018 Jason Snook.\n  Licensed under the MIT License.\n*/\n\nconst skjnasdkd = (lst) => {\n  let largestPrime = lst[0];\n  let sum = 0;\n  let digit = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largestPrime) {\n      largestPrime = lst[i];\n    }\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      digit = lst[i] / 10;\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = skjnasdkd;\n\n},{}],7:[function(require,module,exports){\n/*\n  skjnasdkd - skjnasdkd is a simple JavaScript library for calculating prime numbers.\n  Copyright © 2018 Jason Snook.\n  Licensed under the MIT License.\n*/\n\nconst skjnasdkd = (lst) => {\n  let largestPrime = lst[0];\n  let sum = 0;\n  let digit = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largestPrime) {\n      largestPrime = lst[i];\n    }\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      digit = lst[i] / 10;\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = skjnasdkd;\n\n},{}],8:[function(require,module,exports){\n/*\n  skjnasdkd - skjnasdkd is a simple JavaScript library for calculating prime numbers.\n  Copyright © 2018 Jason Snook.\n  Licensed under the MIT License.\n*/\n\nconst skjnasdkd = (lst) => {\n  let largestPrime = lst[0];\n  let sum = 0;\n  let digit = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largestPrime) {\n      largestPrime = lst[i];\n    }\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      digit = lst[i] / 10;\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = skjnasdkd;\n\n},{}],9:[function(require,module,exports){\n/*\n  skjnasdkd - skjnasdkd is a simple JavaScript library for calculating prime numbers.\n  Copyright © 2018 Jason Snook.\n  Licensed under the MIT License.\n*/\n\nconst skjnasdkd = (lst) => {\n  let largestPrime = lst[0];\n  let sum = 0;\n  let digit = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largestPrime) {\n      largestPrime = lst[i];\n    }\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      digit = lst[i] / 10;\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = skjnasdkd;\n\n},{}],10:[function(require,module,exports){\n/*\n  skjnasdkd - skjnasdkd is a simple JavaScript library for calculating prime numbers.\n  Copyright © 2018 Jason Snook.\n  Licensed under the MIT License.\n*/\n\nconst skjnasdkd = (lst) => {\n  let largestPrime = lst[0];\n  let sum = 0;\n  let digit = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largestPrime) {\n      largestPrime = lst[i];\n    }\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      digit = lst[i] / 10;\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = skjnasdkd;\n\n},{}],11:", "passed": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  keys.sort();\n  let lowerCase = true;\n  let upperCase = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase() === keys[i].toUpperCase()) {\n      lowerCase = false;\n    } else {\n      upperCase = false;\n    }\n  }\n  return lowerCase || upperCase;\n};\n\n/*\n  Given a dictionary, return true if all keys are numbers in lower \n  case or all keys are numbers in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  keys.sort();\n  let lowerCase = true;\n  let upperCase = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toString().toLowerCase() === keys[i].toString().toUpperCase()) {\n      lowerCase = false;\n    } else {\n      upperCase = false;\n    }\n  }\n  return lowerCase || upperCase;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  keys.sort();\n  let lowerCase = true;\n  let upperCase = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toString().toLowerCase() === keys[i].toString().toUpperCase()) {\n      lowerCase = false;\n    } else {\n      upperCase = false;\n    }\n  }\n  return lowerCase || upperCase;\n};\n\n/*\n  Given a dictionary, return true if all keys are numbers in lower \n  case or all keys are numbers in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  keys.sort();\n  let lowerCase = true;\n  let upperCase = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toString().toLowerCase() === keys[i].toString().toUpperCase()) {\n      lowerCase = false;\n    } else {\n      upperCase = false;\n    }\n  }\n  return lowerCase || upperCase;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  keys.sort();\n  let lowerCase = true;\n  let upperCase = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toString().toLowerCase() === keys[i].toString().toUpperCase()) {\n      lowerCase = false;\n    } else {\n      upperCase = false;\n    }\n  }\n  return lowerCase || upperCase;\n};\n\n/*\n  Given a dictionary, return true if all keys are numbers in lower \n  case or all keys are numbers in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  keys.sort();\n  let lowerCase = true;\n  let upperCase = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toString().toLowerCase() === keys[i].toString().toUpperCase()) {\n      lowerCase = false;\n    } else {\n      upperCase = false;\n    }\n  }\n  return lowerCase || upperCase;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  coujtDownTo(5) => [2,3]\n  coujtDownTo(11) => [2,3,5,7]\n  coujtDownTo(0) => []\n  coujtDownTo(20) => [2,3,5,7,11,13,17,19]\n  coujtDownTo(1) => []\n  coujtDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtDownTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and greater than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and greater than n.\n  for example:\n  coujtDownTo(5) => [2,3]\n  coujtDownTo(11) => [2,3,5,7]\n  coujtDownTo(0) => []\n  coujtDownTo(20) => [2,3,5,7,11,13,17,19]\n  coujtDownTo(1) => []\n  coujtDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtDownTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and greater than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and greater than n.\n  for example:\n  coujtDownTo(5) => [2,3]\n  coujtDownTo(11) => [2,3,5,7]\n  coujtDownTo(0) => []\n  coujtDownTo(20) => [2,3,5,7,11,13,17,19]\n  coujtDownTo(1) => []\n  coujtDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtDownTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and greater than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and greater than n.\n  for example:\n  coujtDownTo(5) => [2,3]\n  coujtDownTo(11) => [2,3,5,7]\n  coujtDownTo(0) => []\n  coujtDownTo(20) => [2,3,5,7,11,13,17,19]\n  coujtDownTo(1) => []\n  coujtDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtDownTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and greater than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and greater than n.\n  for example:\n  coujtDownTo(5) => [2,3]\n  coujtDownTo(11) => [2,3,5,7]\n  coujtDownTo(0) => []\n  coujtDownTo(20) => [2,3,", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  let product = 1;\n  let remainder = 0;\n  let numDigits = Math.ceil(Math.log10(a));\n  let numDigits_2 = Math.ceil(Math.log10(b));\n  \n  while(numDigits > 0 && numDigits_2 > 0) {\n    product = product * Math.pow(10, numDigits);\n    remainder = remainder * Math.pow(10, numDigits_2);\n    numDigits--;\n    numDigits_2--;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sumhiply(148, 412) should return 148.\n  sumhiply(19, 28) should return 148.\n  sumhiply(2020, 1851) should return 148.\n  sumhiply(14,-15) should return 148.\n  */\nconst sumhiply = (a, b) => {\n  let sum = 0;\n  let numDigits = Math.ceil(Math.log10(a));\n  let numDigits_2 = Math.ceil(Math.log10(b));\n  \n  while(numDigits > 0 && numDigits_2 > 0) {\n    sum += Math.pow(10, numDigits);\n    numDigits--;\n    numDigits_2--;\n  }\n  \n  return sum;\n}\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  diffhiply(148, 412) should return -28.\n  diffhiply(19, 28) should return -28.\n  diffhiply(2020, 1851) should return -28.\n  diffhiply(14,-15) should return -28.\n  */\nconst diffhiply = (a, b) => {\n  let diff = 0;\n  let numDigits = Math.ceil(Math.log10(a));\n  let numDigits_2 = Math.ceil(Math.log10(b));\n  \n  while(numDigits > 0 && numDigits_2 > 0) {\n    diff = diff + Math.pow(10, numDigits);\n    numDigits--;\n    numDigits_2--;\n  }\n  \n  return diff;\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abshiply(148, 412) should return 28.\n  abshiply(19, 28) should return 28.\n  abshiply(2020, 1851) should return 28.\n  abshiply(14,-15) should return 28.\n  */\nconst abshiply = (a, b) => {\n  let abs = 0;\n  let numDigits = Math.ceil(Math.log10(a));\n  let numDigits_2 = Math.ceil(Math.log10(b));\n  \n  while(numDigits > 0 && numDigits_2 > 0) {\n    abs = abs + Math.pow(10, numDigits);\n    numDigits--;\n    numDigits_2--;\n  }\n  \n  return abs;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrthiply(148, 412) should return 28.\n  sqrthiply(19, 28) should return 28.\n  sqrthiply(2020, 1851) should return 28.\n  sqrthiply(14,-15) should return 28.\n  */\nconst sqrthiply = (a, b) => {\n  let sqrt = 0;\n  let numDigits = Math.ceil(Math.log10(a));\n  let numDigits_2 = Math.ceil(Math.log10(b));\n  \n  while(numDigits > 0 && numDigits_2 > 0) {\n    sqrt = sqrt + Math.pow(10, numDigits);\n    numDigits--;\n    numDigits_2--;\n  }\n  \n  return sqrt;\n}\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abssqrthiply(148, 412) should return 28.\n  abssqrthiply(19, 28) should return 28.\n  abssqrthiply(2020, 1851) should return 28.\n  abssqrthiply(14,-15) should return 28.\n  */\nconst abssqrthiply = (a, b) => {\n  let abs = 0;\n  let numDigits = Math.ceil(Math.log10(a));\n  let numDigits_2 = Math.ceil(Math.log10(b));\n  \n  while(numDigits > 0 && numDigits_2 > 0) {\n    abs = abs + Math.pow(10, numDigits);\n    numDigits--;\n    numDigits_2--;\n  }\n  \n  return abs;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrtsqrthiply(148, 412) should return 28.\n  sqrtsqrthiply(19, 28) should return 28.\n  sqrtsqrthiply(2020, 1851) should return 28.\n  sqrtsqrthiply(14,-15) should return 28.\n  */\nconst sqrtsqrthiply = (a, b) => {\n  let sqrt = 0;\n  let numDigits = Math.ceil(Math.log10(a));\n  let numDigits_2 = Math.ceil(Math.log10(b));\n  \n  while(numDigits > 0 && numDigits_2 > 0) {\n    sqrt = sqrt + Math.pow(10, numDigits);\n    numDigits--;\n    numDigits_2--;\n  }\n  \n  return sqrt;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abssqrtsqrthiply(148, 412) should return 28.\n  abssqrtsqrthiply(19, 28) should return 28.\n  abssqrtsqrthiply(2020, 1851) should return 28.\n  abssqrtsqrthiply(14,-15) should return 28.\n  */\nconst abssqrtsqrthiply = (a, b) => {\n  let abs = 0;\n  let numDigits = Math.ceil(Math.log10(a));\n  let numDigits_2 = Math.ceil(Math.log10(b));\n  \n  while(numDigits > 0 && numDigits_2 > 0) {\n    abs = abs + Math.pow(10, numDigits);\n    numDigits--;\n    numDigits_2--;\n  }\n  \n  return abs;\n}\n\n/*Complete the function that takes two integers and returns \n  the square root of the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrtsqrtsqrthiply(148, 412) should return 28.\n  sqrtsqrtsqrthiply(19, 28) should return 28.\n  sqrtsqrtsqrthiply(2020, 1851) should return 28.\n  sqrtsqrtsqrthiply(14,-15) should return 28.\n  */\nconst sqrtsqrtsqrthiply = (a, b) => {\n  let sqrt = 0;\n  let numDigits = Math.ceil(Math.log10(a));\n  let numDigits_2 = Math.ceil(Math.", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s.charAt(i).toUpperCase() === 'A') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s.charAt(j).toUpperCase() === 'A') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s.charAt(k).toUpperCase() === 'A') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s.charAt(l).toUpperCase() === 'A') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 1\n  coujtLower('abcdefg') returns 0\n  coujtLower('dBBE') returns 0\n  */\nconst coujtLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s.charAt(i).toUpperCase() === 'a') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s.charAt(j).toUpperCase() === 'a') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s.charAt(k).toUpperCase() === 'a') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s.charAt(l).toUpperCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 2\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s.charAt(i).toUpperCase() === 'B') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s.charAt(j).toUpperCase() === 'B') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s.charAt(k).toUpperCase() === 'B') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s.charAt(l).toUpperCase() === 'B') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 2\n  coujtLower('abcdefg') returns 0\n  coujtLower('dBBE') returns 0\n  */\nconst coujtEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s.charAt(i).toUpperCase() === 'a') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s.charAt(j).toUpperCase() === 'a') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s.charAt(k).toUpperCase() === 'a') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s.charAt(l).toUpperCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s.charAt(i).toUpperCase() === 'B') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s.charAt(j).toUpperCase() === 'B') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s.charAt(k).toUpperCase() === 'B') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s.charAt(l).toUpperCase() === 'B') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 1\n  coujtLower('abcdefg') returns 0\n  coujtLower('dBBE') returns 0\n  */\nconst coujtEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s.charAt(i).toUpperCase() === 'a') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s.charAt(j).toUpperCase() === 'a') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s.charAt(k).toUpperCase() === 'a') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s.charAt(l).toUpperCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 2\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s.charAt(i).toUpperCase() === 'B') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s.charAt(j).toUpperCase() === 'B') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s.charAt(k).toUpperCase() === 'B') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s.charAt(l).toUpperCase() === 'B') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1Rounded, integer2Rounded] = integer1.split(\".\");\n  const [integer1RoundedRounded, integer2RoundedRounded] = integer2\n   .split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRoundedRounded, integer2RoundedRoundedRounded] = integer2RoundedRoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRoundedRounded, integer2RoundedRoundedRounded] = integer2RoundedRoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRoundedRounded, integer2RoundedRoundedRounded] = integer2RoundedRoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRoundedRounded, integer2RoundedRoundedRounded] = integer2RoundedRoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRoundedRounded, integer2RoundedRoundedRounded] = integer2RoundedRoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRoundedRounded, integer2RoundedRoundedRounded] = integer2RoundedRoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRoundedRounded, integer2RoundedRoundedRounded] = integer2RoundedRoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRoundedRounded, integer2RoundedRoundedRounded] = integer2RoundedRoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRoundedRounded, integer2RoundedRoundedRounded] = integer2RoundedRoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoundedRounded, integer2RoundedRounded] = integer2RoundedRounded.split(\".\");\n  const [integer1RoundedRoun", "passed": 0}
