{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hadClosestElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0];\n  let i;\n  for (i = 1; i < sorted.length; i++) {\n    if (Math.abs(sorted[i] - closest) < threshold) {\n      closest = sorted[i];\n    }\n  }\n  return closest === sorted[0];\n};\n\n/**\n * Returns true if all elements are unique.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If all elements are unique, returns true.\n * If any element occurs more than once in the array, returns false.\n * If ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroup", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = paren_group.substr(1, paren_group.length - 2);\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return a list of those groups as a\n  single string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\npassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPrefix = '';\n  let longestSuffix = '';\n\n  // Find the longest postfix of supplied string that is a palindrome.\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (isPalindrome(string[i])) {\n      longestPalindrome += string[i];\n      longestPrefix = longestPrefix.concat(longestPalindrome);\n      longestSuffix = longestSuffix.concat(string[i]);\n    }\n  }\n\n  // Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  longestPrefix = longestPrefix.concat(longestSuffix);\n  longestSuffix = longestSuffix.concat(longestPrefix);\n\n  // Return the longest palindrome that begins with a supplied string.\n  return longestPrefix;\n}\n\n/* Given a string of n characters, return the string that is the concatenation of all n characters of the original string.\n  >>> concatenateString('abc')\n  'abc'\n  >>> concatenateString('abc', 'def')\n  'abcdef'\n  >>> concatenateString('abc', 'def', 'ghi')\n  'abcdefghi'\n  */\nconst concatenateString = (string,...strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n}\n\n/* Given a string of n characters, return the string that is the concatenation of all n characters of the original string.\n  >>> concatenateString('abc', 'def', 'ghi')\n  'abcdefghi'\n  >>> concatenateString('abc', 'def', 'ghi', 'jkl')\n  'abcdefghijkl'\n  */\nconst concatenateStrings = (string,...strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n}\n\n/* Given a string of n characters, return the string that is the concatenation of all n characters of the original string.\n  >>> concatenateStrings('abc', 'def', 'ghi', 'jkl')\n  'abcdefghijkl'\n  >>> concatenateStrings('abc', 'def', 'ghi', 'jkl','mno')\n  'abcdefghijklmno'\n  */\nconst concatenateStringss = (string,...strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n}\n\n/* Given a string of n characters, return the string that is the concatenation of all n characters of the original string.\n  >>> concatenateStrings('abc', 'def', 'ghi', 'jkl','mno')\n  'abcdefghijklmno'\n  >>> concatenateStrings('abc', 'def', 'ghi', 'jkl','mno', 'pqrs')\n  'abcdefghijklmnopqrs'\n  */\nconst concatenateStringsss = (string,...strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n}\n\n/* Given a string of n characters, return the string that is the concatenation of all n characters of the original string.\n  >>> concatenateStringsss('abc', 'def', 'ghi', 'jkl','mno', 'pqrs')\n  'abcdefghijklmnopqrs'\n  >>> concatenateStringsss('abc', 'def', 'ghi', 'jkl','mno', 'pqrs', 'tuv')\n  'abcdefghijklmnopqrtuv'\n  */\nconst concatenateStringsssss = (string,...strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n}\n\n/* Given a string of n characters, return the string that is the concatenation of all n characters of the original string.\n  >>> concatenateStringsssss('abc', 'def', 'ghi', 'jkl','mno', 'pqrs', 'tuv')\n  'abcdefghijklmnopqrtuv'\n  >>> concatenateStringsssss('abc', 'def', 'ghi', 'jkl','mno', 'pqrs', 'tuv', 'uvw')\n  'abcdefghijklmnopqrtuuvw'\n  */\nconst concatenateStringsssssss = (string,...strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n}\n\n/* Given a string of n characters, return the string that is the concatenation of all n characters of the original string.\n  >>> concatenateStringsssssss('abc', 'def', 'ghi', 'jkl','mno', 'pqrs', 'tuv', 'uvw')\n  'abcdefghijklmnopqrtuuvw'\n  >>> concatenateStringsssssss('abc', 'def', 'ghi', 'jkl','mno', 'pqrs', 'tuv', 'uvw', 'wxx')\n  'abcdefghijklmnopqrtuuvwx'\n  */\nconst concatenateStringsssssssss = (string,...strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n}\n\n/* Given a string of n characters, return the string that is the concatenation of all n characters of the original string.\n  >>> concatenateStringsssssssss('abc', 'def', 'ghi', 'jkl','mno', 'pqrs', 'tuv', 'uvw', 'wxx')\n  'abcdefghijklmnopqrtuuvwx'\n  >>> concatenateStringsssssssss('abc', 'def', 'ghi', 'jkl','mno', 'pqrs', 'tuv', 'uvw', 'wxx', 'yyy')\n  'abcdefghijklmnopqrtuuvwxyyy'\n  */\nconst concatenateStringsssssssssss = (string,...strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n}\n\n/* Given a string of n characters, return the string that is the concatenation of all n characters of the original string.\n  >>> concatenateStringsssssssss('abc', 'def', 'ghi', 'jkl','mno', 'pqrs', 'tuv', 'uvw', 'wxx', 'yyy')\n  'abcdefghijklmnopqrtuuvwxyyy'\n  >>> concatenateStringsssssssssssss('abc', 'def', 'ghi', 'jkl','mno', 'pqrs', 'tuv', 'uvw', 'wxx', 'yyy', 'zzz')\n  'abcdefghijklmnopqrtuuvwxyyyzzz'\n  */\nconst concatenateStringsssssssssss = (string,...strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n}\n\n/* Given a string of n characters, return the string that is the concatenation of all n characters of the original string.\n  >>> concatenateStringsssssssssss('abc', 'def', 'ghi', 'jkl','mno', 'pqrs', 'tuv', 'uvw', 'wxx', 'yyy')\n  'abcdefghijklmnopqrtuuvwxyyy'\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "madeAPiles", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const nextLevel = levels[level + 1];\n    nextLevel.push(level);\n    level++;\n  }\n  return levels;\n};\n\nmodule.exports = { madeAPiles };\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const nextLevel = levels[level + 1];\n    nextLevel.push(level);\n    level++;\n  }\n  return levels;\n};\n\nmodule.exports = { madeAPiles };\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const nextLevel = levels[level + 1];\n    nextLevel.push(level);\n    level++;\n  }\n  return levels;\n};\n\nmodule.exports = { madeAPiles };\n\n},{}],11:[function(require,module,exports){\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const nextLevel = levels[level + 1];\n    nextLevel.push(level);\n    level++;\n  }\n  return levels;\n};\n\nmodule.exports = { madeAPiles };\n\n},{}],12:[function(require,module,exports){\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const nextLevel = levels[level + 1];\n    nextLevel.push(level);\n    level++;\n  }\n  return levels;\n};\n\nmodule.exports = { madeAPiles };\n\n},{}],13:[function(require,module,exports){\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const nextLevel = levels[level + 1];\n    nextLevel.push(level);\n    level++;\n  }\n  return levels;\n};\n\nmodule.exports = { madeAPiles };\n\n},{}],14:[function(require,module,exports){\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const nextLevel = levels[level + 1];\n    nextLevel.push(level);\n    level++;\n  }\n  return levels;\n};\n\nmodule.exports = { madeAPiles };\n\n},{}],15:[function(require,module,exports){\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const nextLevel = levels[level + 1];\n    nextLevel.push(level);\n    level++;\n  }\n  return levels;\n};\n\nmodule.exports = { madeAPiles };\n\n},{}],16:[function(require,module,exports){\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const levels = [[]];\n  let level = 0;\n  while (level < n) {\n    const nextLevel = levels[level + 1];\n    nextLevel.push(level);\n    level++;\n  }\n  return levels;\n};\n\nmodule.exports = { madeAPiles };\n\n},{}],17:[function(require,module,exports){\n/*\n  Given a positive integer n, you have to make a pile of n ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the length of the longest word in your string.\n  \n  For example:\n  longestWord(\"Hi, my name is John\") == 5\n  longestWord(\"One, two, three, four, five, six\") == 6\n  */\nconst longestWord = (s) => {\n  const words = wordString(s);\n  return words.length.reduce((a, b) => Math.max(a, b), 0);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the length of the shortest word in your string.\n  \n  For example:\n  shortestWord(\"Hi, my name is John\") == 3\n  shortestWord(\"One, two, three, four, five, six\") == 4\n  */\nconst shortestWord = (s) => {\n  const words = wordString(s);\n  return words.length.reduce((a, b) => Math.min(a, b), 0);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of words in your string that contain only letters.\n  \n  For example:\n  onlyLetters(\"Hi, my name is John\") == 3\n  onlyLetters(\"One, two, three, four, five, six\") == 4\n  */\nconst onlyLetters = (s) => {\n  const words = wordString(s);\n  return words.length.reduce((a, b) => a.filter(c => c.match(/[a-z]/i)).filter(c =>!c.match(/[^a-z]/i)).filter(c =>!c.match(/[^A-Z]/i)).filter(c =>!c.match(/[^0-9]/i)).filter(c =>!c.match(/[^A-Z0-9]/i)).filter(c =>!c.match(/[^0-9A-Z]/i)).filter(c =>!c.match(/[^A-Z0-9A-Z]/i)).filter(c =>!c.match(/[^0-9A-Z0-9A-Z]/i)).filter(c =>!c.match(/[^A-Z0-9A-Z0-9A-Z]/i)).filter(c =>!c.match(/[^A-Z0-9A-Z0-9A-Z]/i)).filter(c =>!c.match(/[^A-Z0-9A-Z0-9A-Z0-9A-Z]/i)).filter(c =>!c.match(/[^A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z]/i)).filter(c =>!c.match(/[^A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z]/i)).filter(c =>!c.match(/[^A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z]/i)).filter(c =>!c.match(/[^A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z]/i)).filter(c =>!c.match(/[^A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z0-9A-Z]/i)).filter(c =>!c.matchpassed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  const num = (x + y) * 2;\n  return Math.floor(num);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundingAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  let sum = 0;\n  let temp = 0;\n  let binary = \"\";\n  let count = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n  let temp281 = 0;\n  let temp28", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigit", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n  let result = []\n  let len = x.length\n  let i = 0\n  while (i < len) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i])\n      i++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst oddDigit = (x) => {\n  let result = []\n  let len = x.length\n  let i = 0\n  while (i < len) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst evenDigit = (x) => {\n  let result = []\n  let len = x.length\n  let i = 0\n  while (i < len) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digit = (x) => {\n  let result = []\n  let len = x.length\n  let i = 0\n  while (i < len) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digitOddOrEven = (x) => {\n  let result = []\n  let len = x.length\n  let i = 0\n  while (i < len) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digitOddOrEvenDigit = (x) => {\n  let result = []\n  let len = x.length\n  let i = 0\n  while (i < len) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digitOddOrEvenDigitOddOrEven = (x) => {\n  let result = []\n  let len = x.length\n  let i = 0\n  while (i < len) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digitOddOrEvenDigitOddOrEvenDigit = (x) => {\n  let result = []\n  let len = x.length\n  let i = 0\n  while (i < len) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digitOddOrEvenDigitOddOrEvenDigitOddOrEven = (x) => {\n  let result = []\n  let len = x.length\n  let i = 0\n  while (i < len) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEven = (x) => {\n  let result = []\n  let len = x.length\n  let i = 0\n  while (i < len) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitOddOrEvenDigitO", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byName = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byLengthAndName = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLength = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLengthAndName = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLengthAndNameAndLength = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLengthAndNameAndLengthAndName = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLengthAndNameAndLengthAndNameAndLength = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLengthAndNameAndLengthAndNameAndLengthAndName = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndName = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLength = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLength = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndName = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndName = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndName = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndName = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map((digit, index) => digit.charAt(0).toUpperCase() + digit.slice(1));\n};\n\nconst byNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAndNameAndLengthAnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * factorial(i));\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(gcd(i, i));\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(lcm(i, i));\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(gcd(i, i));\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(lcm(i, i));\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(lcm(i, i));\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(lcm(i, i));\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(lcm(i, i));\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(lcm(i, i));\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(lcm(i, i));\n  }\n  return result;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 2, 6, 24, 15]\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(lcm(i, i));\n  }\n  return result;\n};\n\n/* Implement the function q that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(5) == [1, 2, 6, 24, 15]\n  */\nconst q = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(lcm(i, i));\n  }\n  return result;\n};\n\n/* Implement the function r that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOdderPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n// Given a positive integer n, return an array containing all possible palindromes of length n.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palindrome.\n// A palindrome is a word made from the same letters in the same order.\n// For example, \"racecar\" is a palin", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num > 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countZeros which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 3\n  */\nconst countZeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num === 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOnes which takes an array of integers and returns\n  the number of elements which has a sum of digits == 1.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countOnes([]) == 0\n  >>> countOnes([-1, 11, -11]) == 1\n  >>> countOnes([1, 1, 2]) == 3\n  */\nconst countOnes = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num === 1? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countTwos which takes an array of integers and returns\n  the number of elements which has a sum of digits == 2.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countTwos([]) == 0\n  >>> countTwos([-1, 11, -11]) == 1\n  >>> countTwos([1, 1, 2]) == 3\n  */\nconst countTwos = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num === 2? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countThrees which takes an array of integers and returns\n  the number of elements which has a sum of digits == 3.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countThrees([]) == 0\n  >>> countThrees([-1, 11, -11]) == 1\n  >>> countThrees([1, 1, 2]) == 3\n  */\nconst countThrees = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num === 3? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countFours which takes an array of integers and returns\n  the number of elements which has a sum of digits == 4.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countFours([]) == 0\n  >>> countFours([-1, 11, -11]) == 1\n  >>> countFours([1, 1, 2]) == 3\n  */\nconst countFours = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num === 4? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countFives which takes an array of integers and returns\n  the number of elements which has a sum of digits == 5.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countFives([]) == 0\n  >>> countFives([-1, 11, -11]) == 1\n  >>> countFives([1, 1, 2]) == 3\n  */\nconst countFives = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num === 5? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countSixs which takes an array of integers and returns\n  the number of elements which has a sum of digits == 6.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countSixs([]) == 0\n  >>> countSixs([-1, 11, -11]) == 1\n  >>> countSixs([1, 1, 2]) == 3\n  */\nconst countSixs = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num === 6? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countSevens which takes an array of integers and returns\n  the number of elements which has a sum of digits == 7.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countSevens([]) == 0\n  >>> countSevens([-1, 11, -11]) == 1\n  >>> countSevens([1, 1, 2]) == 3\n  */\nconst countSevens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num === 7? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEights which takes an array of integers and returns\n  the number of elements which has a sum of digits == 8.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countEights([]) == 0\n  >>> countEights([-1, 11, -11]) == 1\n  >>> countEights([1, 1, 2]) == 3\n  */\nconst countEights = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num === 8? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNines which takes an array of integers and returns\n  the number of elements which has a sum of digits == 9.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNines([]) == 0\n  >>> countNines([-1, 11, -11]) == 1\n  >>> countNines([1, 1, 2]) == 3\n  */\nconst countNines = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num === 9? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countTens which takes an array of integers and returns\n  the number of elements which has a sum of digits == 10.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countTens([]) == 0\n  >>> countTens([-1, 11, -11]) == 1\n  >>> countTens([1, 1, 2]) == 3\n  */\nconst countTens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num === 10? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countElevens which takes an array of integer", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movingOneBalls", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n  let arrLength = arr.length;\n  let arrCopy = arr.slice();\n  let arrCopyLength = arrCopy.length;\n  let arrCopyIndex = 0;\n  let arrCopyIndex2 = 0;\n  let arrCopyIndex3 = 0;\n  let arrCopyIndex4 = 0;\n  let arrCopyIndex5 = 0;\n  let arrCopyIndex6 = 0;\n  let arrCopyIndex7 = 0;\n  let arrCopyIndex8 = 0;\n  let arrCopyIndex9 = 0;\n  let arrCopyIndex10 = 0;\n  let arrCopyIndex11 = 0;\n  let arrCopyIndex12 = 0;\n  let arrCopyIndex13 = 0;\n  let arrCopyIndex14 = 0;\n  let arrCopyIndex15 = 0;\n  let arrCopyIndex16 = 0;\n  let arrCopyIndex17 = 0;\n  let arrCopyIndex18 = 0;\n  let arrCopyIndex19 = 0;\n  let arrCopyIndex20 = 0;\n  let arrCopyIndex21 = 0;\n  let arrCopyIndex22 = 0;\n  let arrCopyIndex23 = 0;\n  let arrCopyIndex24 = 0;\n  let arrCopyIndex25 = 0;\n  let arrCopyIndex26 = 0;\n  let arrCopyIndex27 = 0;\n  let arrCopyIndex28 = 0;\n  let arrCopyIndex29 = 0;\n  let arrCopyIndex30 = 0;\n  let arrCopyIndex31 = 0;\n  let arrCopyIndex32 = 0;\n  let arrCopyIndex33 = 0;\n  let arrCopyIndex34 = 0;\n  let arrCopyIndex35 = 0;\n  let arrCopyIndex36 = 0;\n  let arrCopyIndex37 = 0;\n  let arrCopyIndex38 = 0;\n  let arrCopyIndex39 = 0;\n  let arrCopyIndex40 = 0;\n  let arrCopyIndex41 = 0;\n  let arrCopyIndex42 = 0;\n  let arrCopyIndex43 = 0;\n  let arrCopyIndex44 = 0;\n  let arrCopyIndex45 = 0;\n  let arrCopyIndex46 = 0;\n  let arrCopyIndex47 = 0;\n  let arrCopyIndex48 = 0;\n  let arrCopyIndex49 = 0;\n  let arrCopyIndex50 = 0;\n  let arrCopyIndex51 = 0;\n  let arrCopyIndex52 = 0;\n  let arrCopyIndex53 = 0;\n  let arrCopyIndex54 = 0;\n  let arrCopyIndex55 = 0;\n  let arrCopyIndex56 = 0;\n  let arrCopyIndex57 = 0;\n  let arrCopyIndex58 = 0;\n  let arrCopyIndex59 = 0;\n  let arrCopyIndex60 = 0;\n  let arrCopyIndex61 = 0;\n  let arrCopyIndex62 = 0;\n  let arrCopyIndex63 = 0;\n  let arrCopyIndex64 = 0;\n  let arrCopyIndex65 = 0;\n  let arrCopyIndex66 = 0;\n  let arrCopyIndex67 = 0;\n  let arrCopyIndex68 = 0;\n  let arrCopyIndex69 = 0;\n  let arrCopyIndex70 = 0;\n  let arrCopyIndex71 = 0;\n  let arrCopyIndex72 = 0;\n  let arrCopyIndex73 = 0;\n  let arrCopyIndex74 = 0;\n  let arrCopyIndex75 = 0;\n  let arrCopyIndex76 = 0;\n  let arrCopyIndex77 = 0;\n  let arrCopyIndex78 = 0;\n  let arrCopyIndex79 = 0;\n  let arrCopyIndex80 = 0;\n  let arrCopyIndex81 = 0;\n  let arrCopyIndex82 = 0;\n  let arrCopyIndex83 = 0;\n  let arrCopyIndex84 = 0;\n  let arrCopyIndex85 = 0;\n  let arrCopyIndex86 = 0;\n  let arrCopyIndex87 = 0;\n  let arrCopyIndex88 = 0;\n  let arrCopyIndex89 = 0;\n  let arrCopyIndex90 = 0;\n  let arrCopyIndex91 = 0;\n  let arrCopyIndex92 = 0;\n  let arrCopyIndex93 = 0;\n  let arrCopyIndex94 = 0;\n  let arrCopyIndex95 = 0;\n  let arrCopyIndex96 = 0;\n  let arrCopyIndex97 = 0;\n  let arrCopyIndex98 = 0;\n  let arrCopyIndex99 = 0;\n  let arrCopyIndex100 = 0;\n  let arrCopyIndex101 = 0;\n  let arrCopyIndex102 = 0;\n  let arrCopyIndex103 = 0;\n  let arrCopyIndex104 = 0;\n  let arrCopyIndex105 = 0;\n  let arrCopyIndex106 = 0;\n  let arrCopyIndex107 = 0;\n  let arrCopyIndex108 = 0;\n  let arrCopyIndex109 = 0;\n  let arrCopyIndex110 = 0;\n  let arrCopyIndex111 = 0;\n  let arrCopyIndex112 = 0;\n  let arrCopyIndex113 = 0;\n  let arrCopyIndex114 = 0;\n  let arrCopyIndex115 = 0;\n  let arrCopyIndex116 = 0;\n  let arrCopyIndex117 = 0;\n  let arrCopyIndex118 = 0;\n  let arrCopyIndex119 = 0;\n  let arrCopyIndex120 = 0;\n  let arrCopyIndex121 = 0;\n  let arrCopyIndex122 = 0;\n  let arrCopyIndex123 = 0;\n  let arrCopyIndex124 = 0;\n  let arrCopyIndex125 = 0;\n  let arrCopyIndex126 = 0;\n  let arrCopyIndex127 = 0;\n  let arrCopyIndex128 = 0;\n  let arrCopyIndex129 = 0;\n  let arrCopyIndex130 = 0;\n  let arrCopyIndex131 = 0;\n  let arrCopyIndex132 = 0;\n  let arrCopyIndex133 = 0;\n  let arrCopyIndex134 = 0;\n  let arrCopyIndex135 = 0;\n  let arrCopyIndex136 = 0;\n  let arrCopyIndex137 = 0;\n  let arrCopyIndex138 = 0;\n  let arrCopyIndex139 = 0;\n  let arrCopyIndex140 = 0;\n  let arrCopyIndex141 = 0;\n  let arrCopyIndex142 = 0;\n  let arrCopyIndex143 = 0;\n  let arrCopyIndex144 = 0;\n  let arrCopyIndex145 = 0;\n  let arrCopyIndex146 = 0;\n  let arrCopyIndex147 = 0;\n  let arrCopyIndex148 = 0;\n  let arrCopyIndex149 = 0;\n  let arrCopyIndex150 = 0;\n  let arrCopyIndex151 = 0;\n  let arrCopyIndex152 = 0;\n  let arrCopyIndex153 = 0;\n  let arrCopyIndex154 = 0;\n  let arrCopyIndex155 = 0;\n  let arrCopyIndex156 = 0;\n  let arrCopyIndex157 = 0;\n  let arrCopyIndex158 = 0;\n  let arrCopyIndex159 = 0;\n  let arrCopyIndex160 = 0;\n  let arrCopyIndex161 = 0;\n  let arrCopyIndex162 = 0;\n  let arrCopyIndex163 = 0;\n  let arrCopyIndex164 = 0;\n  let arrCopyIndex165 = 0;\n  let arrCopyIndex166 = 0;\n  let arrCopyIndex167 = 0;\n  let arrCopyIndex168 = 0;\n  let arrCopyIndex169 = 0;\n  let arrCopyIndex170 = 0;\n  let arrCopyIndex171 = 0;\n  let arrCopyIndex172 = 0;\n  let arrCopyIndex173 = 0;\n  let arrCopyIndex174 = 0;\n  let arrCopyIndex175 = 0;\n  let arrCopyIndex176 = 0;\n  let arrCopyIndex177 = 0;\n  let arrCopyIndex178 = 0;\n  let arrCopyIndex179 = 0;\n  let arrCopyIndex180 = 0;\n  let arrCopyIndex181 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  return stringXorX(a, b);\n};\n\nmodule.exports = stringXor;\n\n},{\"./stringXorX\":13}],13:[function(require,module,exports){\n/*\n  StringXorX\n  A binary XOR operation on two strings.\n  \n  Given two strings, a and b, perform binary XOR on them and return result as a string.\n  \n  >>> stringXorX('010', '110')\n  '100'\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchanges", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n  let result = 'NO';\n  if (lst1.length === 0 || lst2.length === 0) {\n    result = 'NO';\n  } else if (lst1.length === 1) {\n    if (lst2.length === 1) {\n      result = lst1[0] % 2 === 0? 'YES' : 'NO';\n    } else {\n      result = lst1[0] % 2 === 0? 'YES' : 'NO';\n    }\n  } else if (lst2.length === 1) {\n    if (lst1.length === 1) {\n      result = lst2[0] % 2 === 0? 'YES' : 'NO';\n    } else {\n      result = lst2[0] % 2 === 0? 'YES' : 'NO';\n    }\n  } else {\n    if (lst1.length === 1) {\n      result = lst1[0] % 2 === 0? 'YES' : 'NO';\n    } else if (lst2.length === 1) {\n      result = lst2[0] % 2 === 0? 'YES' : 'NO';\n    } else {\n      result = lst1[0] % 2 === 0? 'YES' : 'NO';\n      result = lst2[0] % 2 === 0? 'YES' : 'NO';\n    }\n  }\n  return result;\n};\n\n/*\n  Given two sorted arrays, write a function that returns true if they are\n  sorted in ascending order, and false if they are sorted in descending order.\n  For example:\n  sortedArrays([2, 5, 1], [2, 5, 1]) => true\n  sortedArrays([2, 5, 1], [2, 5, 10]) => false\n  It is assumed that the input arrays will be non-empty.\n  */\nconst sortedArrays = (arr1, arr2) => {\n  let result = 'NO';\n  if (arr1.length === 0 || arr2.length === 0) {\n    result = 'NO';\n  } else if (arr1.length === 1) {\n    if (arr2.length === 1) {\n      result = arr1[0] > arr2[0]? 'YES' : 'NO';\n    } else {\n      result = arr1[0] > arr2[0]? 'YES' : 'NO';\n    }\n  } else if (arr2.length === 1) {\n    if (arr1.length === 1) {\n      result = arr2[0] > arr1[0]? 'YES' : 'NO';\n    } else {\n      result = arr2[0] > arr1[0]? 'YES' : 'NO';\n    }\n  } else {\n    if (arr1.length === 1) {\n      result = arr1[0] > arr2[0]? 'YES' : 'NO';\n    } else if (arr2.length === 1) {\n      result = arr2[0] > arr1[0]? 'YES' : 'NO';\n    } else {\n      result = arr1[0] > arr2[0]? 'YES' : 'NO';\n      result = arr2[0] > arr1[0]? 'YES' : 'NO';\n    }\n  }\n  return result;\n};\n\n/*\n  Given two sorted arrays, write a function that returns true if they are\n  sorted in ascending order, and false if they are sorted in descending order.\n  For example:\n  sortedArrays([2, 5, 1], [2, 5, 1]) => true\n  sortedArrays([2, 5, 1], [2, 5, 10]) => false\n  It is assumed that the input arrays will be non-empty.\n  */\nconst sortedArraysDesc = (arr1, arr2) => {\n  let result = 'NO';\n  if (arr1.length === 0 || arr2.length === 0) {\n    result = 'NO';\n  } else if (arr1.length === 1) {\n    if (arr2.length === 1) {\n      result = arr1[0] < arr2[0]? 'YES' : 'NO';\n    } else {\n      result = arr1[0] < arr2[0]? 'YES' : 'NO';\n    }\n  } else if (arr2.length === 1) {\n    if (arr1.length === 1) {\n      result = arr2[0] < arr1[0]? 'YES' : 'NO';\n    } else {\n      result = arr2[0] < arr1[0]? 'YES' : 'NO';\n    }\n  } else {\n    if (arr1.length === 1) {\n      result = arr1[0] < arr2[0]? 'YES' : 'NO';\n    } else if (arr2.length === 1) {\n      result = arr2[0] < arr1[0]? 'YES' : 'NO';\n    } else {\n      result = arr1[0] < arr2[0]? 'YES' : 'NO';\n      result = arr2[0] < arr1[0]? 'YES' : 'NO';\n    }\n  }\n  return result;\n};\n\n/*\n  Given two sorted arrays, write a function that returns true if they are\n  sorted in ascending order, and false if they are sorted in descending order.\n  For example:\n  sortedArrays([2, 5, 1], [2, 5, 1]) => true\n  sortedArrays([2, 5, 1], [2, 5, 10]) => false\n  It is assumed that the input arrays will be non-empty.\n  */\nconst sortedArraysDescAsc = (arr1, arr2) => {\n  let result = 'NO';\n  if (arr1.length === 0 || arr2.length === 0) {\n    result = 'NO';\n  } else if (arr1.length === 1) {\n    if (arr2.length === 1) {\n      result = arr1[0] < arr2[0]? 'YES' : 'NO';\n    } else {\n      result = arr1[0] < arr2[0]? 'YES' : 'NO';\n    }\n  } else if (arr2.length === 1) {\n    if (arr1.length === 1) {\n      result = arr2[0] < arr1[0]? 'YES' : 'NO';\n    } else {\n      result = arr2[0] < arr1[0]? 'YES' : 'NO';\n    }\n  } else {\n    if (arr1.length === 1) {\n      result = arr1[0] < arr2[0]? 'YES' : 'NO';\n    } else if (arr2.length === 1) {\n      result = arr2[0] < arr1[0]? 'YES' : 'NO';\n    } else {\n      result = arr1[0] < arr2[0]? 'YES' : 'NO';\n      result = arr2[0] < arr1[0]? 'YES' : 'NO';\n    }\n  }\n  return result;\n};\n\n/*\n  Given two sorted arrays, write a function that returns true if they are\n  sorted in ascending order, and false if they are sorted in descending order.\n  For example:\n  sortedArrays([2, 5, 1], [2, 5, 1]) => true\n  sortedArrays([2, 5, 1], [2, 5, 10]) => false\n  It is assumed that the input arrays will be non-empty.\n  */\nconst sortedArraysDescAscDesc = (arr1, arr2) => {\n  let result = 'NO';\n  if (arr1.length === 0 || arr2.length === 0) {\n    result = 'NO';\n  } else if (arr1.length === 1) {\n    if (arr2.length === 1) {\n      result = arr1[0] < arr2[0]? 'YES' : 'NO';\n    } else {\n      result = arr1[0] < arr2[0]? 'YES' : 'NO';\n    }\n  } else if (arr2.length === 1) {\n    if (arr1.length === 1) {\n      result = arr2[0] < arr1[0]? 'YES' : 'NO';\n    } else {\n      result = arr2[0] < arr1[0]? 'YES' : 'NO';\n    }\n  } else {\n    if (arr1.length === 1) {\n      result = arr1[0] < arr2[0]? 'YES' : 'NO';\n    } else if (arr2.length === 1) {\n      result = arr2[0] < arr1[0]? 'YES' : 'NO';\n    } else {\n      result = arr1[0] < arr2[0]? 'YES' : 'NO';\n      result = arr2[0] < arr1[0]? 'YES' : 'NO';\n    }\n  }\n  return result;\n};\n\n/*\n  Given two sorted arrays, write a function that returns true if they are\n  sorted in ascending order, and false if they are sorted in descending order.\n  For example:\n  sortedArrays([2, 5, 1], [2, 5, 1]) => true\n  sortedArrays([2, 5, 1], [2, 5, 10]) => false\n  It is assumed that the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histograms", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const histograms = {};\n  let letter;\n  let count;\n  let letterCount;\n  let letterCounts = {};\n  let letterCountCounts = {};\n  let letterCountLetters = {};\n  let letterCountLetterCounts = {};\n  let letterCountLetterLetterCounts = {};\n  let letterCountLetterLetterCountLetters = {};\n  let letterCountLetterLetterCountLetterCounts = {};\n  let letterCountLetterLetterCountLetterCountLetters = {};\n  let letterCountLetterLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterLetterCountLetterCountLetterCountLetters = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCountLetterCounts = {};\n  let letterCountLetterCountLetterCountLetterCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reversesDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n  let result = \"\";\n  let reversedS = s.split(\"\").reverse().join(\"\");\n  let reversedC = c.split(\"\").reverse().join(\"\");\n  result = reversedS + reversedC;\n  if (result === reversedS) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n characters.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 4, the result should be ('abcde',false)\n  For s = \"abcdef\", n = 5, the result should be ('abcdef',false)\n  For s = \"abcdedcba\", n = 6, the result should be ('cdedcba',true)\n  */\nconst reversesDeleteN = (s, n) => {\n  let result = \"\";\n  let reversedS = s.split(\"\").reverse().join(\"\");\n  let reversedC = n.split(\"\").reverse().join(\"\");\n  result = reversedS + reversedC;\n  if (result === reversedS) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n characters.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 4, the result should be ('abcde',false)\n  For s = \"abcdef\", n = 5, the result should be ('abcdef',false)\n  For s = \"abcdedcba\", n = 6, the result should be ('cdedcba',true)\n  */\nconst reversesDeleteNReversed = (s, n) => {\n  let result = \"\";\n  let reversedS = s.split(\"\").reverse().join(\"\");\n  let reversedC = n.split(\"\").reverse().join(\"\");\n  result = reversedS + reversedC;\n  if (result === reversedS) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n characters.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 4, the result should be ('abcde',false)\n  For s = \"abcdef\", n = 5, the result should be ('abcdef',false)\n  For s = \"abcdedcba\", n = 6, the result should be ('cdedcba',true)\n  */\nconst reversesDeleteNReversedReversed = (s, n) => {\n  let result = \"\";\n  let reversedS = s.split(\"\").reverse().join(\"\");\n  let reversedC = n.split(\"\").reverse().join(\"\");\n  result = reversedS + reversedC;\n  if (result === reversedS) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n characters.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 4, the result should be ('abcde',false)\n  For s = \"abcdef\", n = 5, the result should be ('abcdef',false)\n  For s = \"abcdedcba\", n = 6, the result should be ('cdedcba',true)\n  */\nconst reversesDeleteNReversedReversedReversed = (s, n) => {\n  let result = \"\";\n  let reversedS = s.split(\"\").reverse().join(\"\");\n  let reversedC = n.split(\"\").reverse().join(\"\");\n  result = reversedS + reversedC;\n  if (result === reversedS) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n characters.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 4, the result should be ('abcde',false)\n  For s = \"abcdef\", n = 5, the result should be ('abcdef',false)\n  For s = \"abcdedcba\", n = 6, the result should be ('cdedcba',true)\n  */\nconst reversesDeleteNReversedReversedReversedReversed = (s, n) => {\n  let result = \"\";\n  let reversedS = s.split(\"\").reverse().join(\"\");\n  let reversedC = n.split(\"\").reverse().join(\"\");\n  result = reversedS + reversedC;\n  if (result === reversedS) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n characters.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 4, the result should be ('abcde',false)\n  For s = \"abcdef\", n = 5, the result should be ('abcdef',false)\n  For s = \"abcdedcba\", n = 6, the result should be ('cdedcba',true)\n  */\nconst reversesDeleteNReversedReversedReversedReversedReversed = (s, n) => {\n  let result = \"\";\n  let reversedS = s.split(\"\").reverse().join(\"\");\n  let reversedC = n.split(\"\").reverse().join(\"\");\n  result = reversedS + reversedC;\n  if (result === reversedS) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*Task\n  You are given a string s and an integer n, you have to delete all the characters in s that is equal to n characters.\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", n = 4, the result should be ('abcde',false)\n  For s = \"abcdef\", n = 5, the result should be ('abcdef',false)\n  For s = \"abcdedcba\", n = 6, the result should be ('cdedcba',true)\n  */\nconst reversesDeleteNReversedReversedReversedReversedReversedReversed = (s, n) => {\n  let result = \"\";\n  let reversedS = s.split(\"\").reverse().join(\"\");\n  let reversedC = n.split(\"\").reverse().join(\"\");\n  result = reversedS + reversedC;\n  if (result === reversedS) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*Task\n  You are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odderCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n  const oddCounts = lst.map(str => str.match(/\\d/g).length);\n  return oddCounts.reduce((acc, cur) => acc + cur, 0);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  const evenCounts = lst.map(str => str.match(/\\d/g).length);\n  return evenCounts.reduce((acc, cur) => acc + cur, 0);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of pairs of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of pairs of digits in the i'th string of the input.\n\n  >>> pairCount(['1234567'])\n  [\"the number of pairs of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> pairCount(['3',\"11111111\"])\n  [\"the number of pairs of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of pairs of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst pairCount = (lst) => {\n  const pairCounts = lst.map(str => str.match(/\\d/g).length);\n  return pairCounts.reduce((acc, cur) => acc + cur, 0);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of triples in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of triples in the i'th string of the input.\n\n  >>> tripleCount(['1234567'])\n  [\"the number of triples 4n the str4ng 4 of the 4nput.\"]\n  >>> tripleCount(['3',\"11111111\"])\n  [\"the number of triples 1n the str1ng 1 of the 1nput.\",\n   \"the number of triples 8n the str8ng 8 of the 8nput.\"]\n  */\nconst tripleCount = (lst) => {\n  const tripleCounts = lst.map(str => str.match(/\\d/g).length);\n  return tripleCounts.reduce((acc, cur) => acc + cur, 0);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quads in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of quads in the i'th string of the input.\n\n  >>> quadCount(['1234567'])\n  [\"the number of quads 4n the str4ng 4 of the 4nput.\"]\n  >>> quadCount(['3',\"11111111\"])\n  [\"the number of quads 1n the str1ng 1 of the 1nput.\",\n   \"the number of quads 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quadCount = (lst) => {\n  const quadCounts = lst.map(str => str.match(/\\d/g).length);\n  return quadCounts.reduce((acc, cur) => acc + cur, 0);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quins in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of quins in the i'th string of the input.\n\n  >>> quinCount(['1234567'])\n  [\"the number of quins 4n the str4ng 4 of the 4nput.\"]\n  >>> quinCount(['3',\"11111111\"])\n  [\"the number of quins 1n the str1ng 1 of the 1nput.\",\n   \"the number of quins 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quinCount = (lst) => {\n  const quinCounts = lst.map(str => str.match(/\\d/g).length);\n  return quinCounts.reduce((acc, cur) => acc + cur, 0);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of nickels in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of nickels in the i'th string of the input.\n\n  >>> nickelCount(['1234567'])\n  [\"the number of nickels 4n the str4ng 4 of the 4nput.\"]\n  >>> nickelCount(['3',\"11111111\"])\n  [\"the number of nickels 1n the str1ng 1 of the 1nput.\",\n   \"the number of nickels 8n the str8ng 8 of the 8nput.\"]\n  */\nconst nickelCount = (lst) => {\n  const nickelCounts = lst.map(str => str.match(/\\d/g).length);\n  return nickelCounts.reduce((acc, cur) => acc + cur, 0);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of pens in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of pens in the i'th string of the input.\n\n  >>> penCount(['1234567'])\n  [\"the number of pens 4n the str4ng 4 of the 4nput.\"]\n  >>> penCount(['3',\"11111111\"])\n  [\"the number of pens 1n the str1ng 1 of the 1nput.\",\n   \"the number of pens 8n the str8ng 8 of the 8nput.\"]\n  */\nconst penCount = (lst) => {\n  const penCounts = lst.map(str => str.match(/\\d/g).length);\n  return penCounts.reduce((acc, cur) => acc + cur, 0);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of nickels in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of nickels in the i'th string of the input.\n\n  >>> nickelCount(['1234567'])\n  [\"the number of nickels 4n the str4ng 4 of the 4nput.\"]\n  >>> nickelCount(['3',\"11111111\"])\n  [\"the number of nickels 1n the str1ng 1 of the 1nput.\",\n   \"the number of nickels 8n the str8", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubsArraySums", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let sum = 0;\n  let minSubsSum = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    sum += nums[i];\n    if (sum < minSubsSum) {\n      minSubsSum = sum;\n    }\n  }\n  return minSubsSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 4\n  maxSubsArraySums([-1, -2, -3]) == 3\n  */\nconst maxSubsArraySums = (nums) => {\n  let sum = 0;\n  let maxSubsSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    sum += nums[i];\n    if (sum > maxSubsSum) {\n      maxSubsSum = sum;\n    }\n  }\n  return maxSubsSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 4\n  maxSubsArraySums([-1, -2, -3]) == 3\n  */\nconst maxSubsArraySumsReversed = (nums) => {\n  let sum = 0;\n  let maxSubsSum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    sum += nums[i];\n    if (sum > maxSubsSum) {\n      maxSubsSum = sum;\n    }\n  }\n  return maxSubsSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 4\n  maxSubsArraySums([-1, -2, -3]) == 3\n  */\nconst maxSubsArraySumsReversedReversed = (nums) => {\n  let sum = 0;\n  let maxSubsSum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    sum += nums[i];\n    if (sum > maxSubsSum) {\n      maxSubsSum = sum;\n    }\n  }\n  return maxSubsSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 4\n  maxSubsArraySums([-1, -2, -3]) == 3\n  */\nconst maxSubsArraySumsReversedReversedReversed = (nums) => {\n  let sum = 0;\n  let maxSubsSum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    sum += nums[i];\n    if (sum > maxSubsSum) {\n      maxSubsSum = sum;\n    }\n  }\n  return maxSubsSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 4\n  maxSubsArraySums([-1, -2, -3]) == 3\n  */\nconst maxSubsArraySumsReversedReversedReversedReversed = (nums) => {\n  let sum = 0;\n  let maxSubsSum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    sum += nums[i];\n    if (sum > maxSubsSum) {\n      maxSubsSum = sum;\n    }\n  }\n  return maxSubsSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 4\n  maxSubsArraySums([-1, -2, -3]) == 3\n  */\nconst maxSubsArraySumsReversedReversedReversedReversedReversed = (nums) => {\n  let sum = 0;\n  let maxSubsSum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    sum += nums[i];\n    if (sum > maxSubsSum) {\n      maxSubsSum = sum;\n    }\n  }\n  return maxSubsSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 4\n  maxSubsArraySums([-1, -2, -3]) == 3\n  */\nconst maxSubsArraySumsReversedReversedReversedReversedReversedReversed = (nums) => {\n  let sum = 0;\n  let maxSubsSum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    sum += nums[i];\n    if (sum > maxSubsSum) {\n      maxSubsSum = sum;\n    }\n  }\n  return maxSubsSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 4\n  maxSubsArraySums([-1, -2, -3]) == 3\n  */\nconst maxSubsArraySumsReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  let sum = 0;\n  let maxSubsSum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    sum += nums[i];\n    if (sum > maxSubsSum) {\n      maxSubsSum = sum;\n    }\n  }\n  return maxSubsSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 4\n  maxSubsArraySums([-1, -2, -3]) == 3\n  */\nconst maxSubsArraySumsReversedReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  let sum = 0;\n  let maxSubsSum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    sum += nums[i];\n    if (sum > maxSubsSum) {\n      maxSubsSum = sum;\n    }\n  }\n  return maxSubsSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 4\n  maxSubsArraySums([-1, -2, -3]) == 3\n  */\nconst maxSubsArraySumsReversedReversedReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  let sum = 0;\n  let maxSubsSum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    sum += nums[i];\n    if (sum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = new Array(n).fill(0);\n  \n  for(let i = 0; i < n; i++) {\n    for(let j = 0; j < m; j++) {\n      if(grid[i][j] === 1) {\n        result[i] += 1;\n      }\n    }\n  }\n  \n  return result.map((v) => v / capacity);\n};\n\n/**\n * Given a rectangular grid of wells and a capacity of water, \n * return how many units of water you need to fill the grid.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * capacity : 1\n * Output: 6\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * Output: 5\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * Output: 0\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxFillCapacity = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = new Array(n).fill(0);\n  \n  for(let i = 0; i < n; i++) {\n    for(let j = 0; j < m; j++) {\n      if(grid[i][j] === 1) {\n        result[i] += 1;\n      }\n    }\n  }\n  \n  return result.map((v) => v / capacity);\n};\n\n/**\n * Given a rectangular grid of wells and a capacity of water, \n * return how many units of water you need to fill the grid.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * capacity : 1\n * Output: 6\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * Output: 5\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * Output: 0\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxFillCapacityCapacity = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = new Array(n).fill(0);\n  \n  for(let i = 0; i < n; i++) {\n    for(let j = 0; j < m; j++) {\n      if(grid[i][j] === 1) {\n        result[i] += 1;\n      }\n    }\n  }\n  \n  return result.map((v) => v / capacity);\n};\n\n/**\n * Given a rectangular grid of wells and a capacity of water, \n * return how many units of water you need to fill the grid.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * capacity : 1\n * Output: 6\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * Output: 5\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * Output: 0\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxFillCapacityCapacityCapacity = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = new Array(n).fill(0);\n  \n  for(let i = 0; i < n; i++) {\n    for(let j = 0; j < m; j++) {\n      if(grid[i][j] === 1) {\n        result[i] += 1;\n      }\n    }\n  }\n  \n  return result.map((v) => v / capacity);\n};\n\n/**\n * Given a rectangular grid of wells and a capacity of water, \n * return how many units of water you need to fill the grid.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * capacity : 1\n * Output: 6\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * Output: 5\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * Output: 0\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxFillCapacityCapacityCapacity = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = new Array(n).fill(0);\n  \n  for(let i = 0; i < n; i++) {\n    for(let j = 0; j < m; j++) {\n      if(grid[i][j] === 1) {\n        result[i] += 1;\n      }\n    }\n  }\n  \n  return result.map((v) => v / capacity);\n};\n\n/**\n * Given a rectangular grid of wells and a capacity of water, \n * return how many units of water you need to fill the grid.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * capacity : 1\n * Output: 6\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * Output: 5\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * Output: 0\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxFillCapacityCapacityCapacity = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = new Array(n).fill(0);\n  \n  for(let i = 0; i < n; i++) {\n    for(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let ones = arr[i];\n    let onesCount = 0;\n    for (let j = 0; j < ones.length; j++) {\n      if (ones[j] === 1) {\n        onesCount++;\n      }\n    }\n    if (onesCount > 0) {\n      sortedArr.push(ones);\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let ones = arr[i];\n    let onesCount = 0;\n    for (let j = 0; j < ones.length; j++) {\n      if (ones[j] === 1) {\n        onesCount++;\n      }\n    }\n    if (onesCount > 0) {\n      sortedArr.push(ones);\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let ones = arr[i];\n    let onesCount = 0;\n    for (let j = 0; j < ones.length; j++) {\n      if (ones[j] === 1) {\n        onesCount++;\n      }\n    }\n    if (onesCount > 0) {\n      sortedArr.push(ones);\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let ones = arr[i];\n    let onesCount = 0;\n    for (let j = 0; j < ones.length; j++) {\n      if (ones[j] === 1) {\n        onesCount++;\n      }\n    }\n    if (onesCount > 0) {\n      sortedArr.push(ones);\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let ones = arr[i];\n    let onesCount = 0;\n    for (let j = 0; j < ones.length; j++) {\n      if (ones[j] === 1) {\n        onesCount++;\n      }\n    }\n    if (onesCount > 0) {\n      sortedArr.push(ones);\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let ones = arr[i];\n    let onesCount = 0;\n    for (let j = 0; j < ones.length; j++) {\n      if (ones[j] === 1) {\n        onesCount++;\n      }\n    }\n    if (onesCount > 0) {\n      sortedArr.push(ones);\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let ones = arr[i];\n    let onesCount = 0;\n    for (let j = 0; j < ones.length; j++) {\n      if (ones[j] === 1) {\n        onesCount++;\n      }\n    }\n    if (onesCount > 0) {\n      sortedArr.push(ones);\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let ones = arr[i];\n    let onesCount = 0;\n    for (let j = 0; j < ones.length; j++) {\n      if (ones[j] === 1) {\n        onesCount++;\n      }\n    }\n    if (onesCount > 0) {\n      sortedArr.push(ones);\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorts", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWord", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let wordCount = 0;\n  let wordCount2 = 0;\n  let wordCount3 = 0;\n  let wordCount4 = 0;\n  let wordCount5 = 0;\n  let wordCount6 = 0;\n  let wordCount7 = 0;\n  let wordCount8 = 0;\n  let wordCount9 = 0;\n  let wordCount10 = 0;\n  let wordCount11 = 0;\n  let wordCount12 = 0;\n  let wordCount13 = 0;\n  let wordCount14 = 0;\n  let wordCount15 = 0;\n  let wordCount16 = 0;\n  let wordCount17 = 0;\n  let wordCount18 = 0;\n  let wordCount19 = 0;\n  let wordCount20 = 0;\n  let wordCount21 = 0;\n  let wordCount22 = 0;\n  let wordCount23 = 0;\n  let wordCount24 = 0;\n  let wordCount25 = 0;\n  let wordCount26 = 0;\n  let wordCount27 = 0;\n  let wordCount28 = 0;\n  let wordCount29 = 0;\n  let wordCount30 = 0;\n  let wordCount31 = 0;\n  let wordCount32 = 0;\n  let wordCount33 = 0;\n  let wordCount34 = 0;\n  let wordCount35 = 0;\n  let wordCount36 = 0;\n  let wordCount37 = 0;\n  let wordCount38 = 0;\n  let wordCount39 = 0;\n  let wordCount40 = 0;\n  let wordCount41 = 0;\n  let wordCount42 = 0;\n  let wordCount43 = 0;\n  let wordCount44 = 0;\n  let wordCount45 = 0;\n  let wordCount46 = 0;\n  let wordCount47 = 0;\n  let wordCount48 = 0;\n  let wordCount49 = 0;\n  let wordCount50 = 0;\n  let wordCount51 = 0;\n  let wordCount52 = 0;\n  let wordCount53 = 0;\n  let wordCount54 = 0;\n  let wordCount55 = 0;\n  let wordCount56 = 0;\n  let wordCount57 = 0;\n  let wordCount58 = 0;\n  let wordCount59 = 0;\n  let wordCount60 = 0;\n  let wordCount61 = 0;\n  let wordCount62 = 0;\n  let wordCount63 = 0;\n  let wordCount64 = 0;\n  let wordCount65 = 0;\n  let wordCount66 = 0;\n  let wordCount67 = 0;\n  let wordCount68 = 0;\n  let wordCount69 = 0;\n  let wordCount70 = 0;\n  let wordCount71 = 0;\n  let wordCount72 = 0;\n  let wordCount73 = 0;\n  let wordCount74 = 0;\n  let wordCount75 = 0;\n  let wordCount76 = 0;\n  let wordCount77 = 0;\n  let wordCount78 = 0;\n  let wordCount79 = 0;\n  let wordCount80 = 0;\n  let wordCount81 = 0;\n  let wordCount82 = 0;\n  let wordCount83 = 0;\n  let wordCount84 = 0;\n  let wordCount85 = 0;\n  let wordCount86 = 0;\n  let wordCount87 = 0;\n  let wordCount88 = 0;\n  let wordCount89 = 0;\n  let wordCount90 = 0;\n  let wordCount91 = 0;\n  let wordCount92 = 0;\n  let wordCount93 = 0;\n  let wordCount94 = 0;\n  let wordCount95 = 0;\n  let wordCount96 = 0;\n  let wordCount97 = 0;\n  let wordCount98 = 0;\n  let wordCount99 = 0;\n  let wordCount100 = 0;\n  let wordCount101 = 0;\n  let wordCount102 = 0;\n  let wordCount103 = 0;\n  let wordCount104 = 0;\n  let wordCount105 = 0;\n  let wordCount106 = 0;\n  let wordCount107 = 0;\n  let wordCount108 = 0;\n  let wordCount109 = 0;\n  let wordCount110 = 0;\n  let wordCount111 = 0;\n  let wordCount112 = 0;\n  let wordCount113 = 0;\n  let wordCount114 = 0;\n  let wordCount115 = 0;\n  let wordCount116 = 0;\n  let wordCount117 = 0;\n  let wordCount118 = 0;\n  let wordCount119 = 0;\n  let wordCount120 = 0;\n  let wordCount121 = 0;\n  let wordCount122 = 0;\n  let wordCount123 = 0;\n  let wordCount124 = 0;\n  let wordCount125 = 0;\n  let wordCount126 = 0;\n  let wordCount127 = 0;\n  let wordCount128 = 0;\n  let wordCount129 = 0;\n  let wordCount130 = 0;\n  let wordCount131 = 0;\n  let wordCount132 = 0;\n  let wordCount133 = 0;\n  let wordCount134 = 0;\n  let wordCount135 = 0;\n  let wordCount136 = 0;\n  let wordCount137 = 0;\n  let wordCount138 = 0;\n  let wordCount139 = 0;\n  let wordCount140 = 0;\n  let wordCount141 = 0;\n  let wordCount142 = 0;\n  let wordCount143 = 0;\n  let wordCount144 = 0;\n  let wordCount145 = 0;\n  let wordCount146 = 0;\n  let wordCount147 = 0;\n  let wordCount148 = 0;\n  let wordCount149 = 0;\n  let wordCount150 = 0;\n  let wordCount151 = 0;\n  let wordCount152 = 0;\n  let wordCount153 = 0;\n  let wordCount154 = 0;\n  let wordCount155 = 0;\n  let wordCount156 = 0;\n  let wordCount157 = 0;\n  let wordCount158 = 0;\n  let wordCount159 = 0;\n  let wordCount160 = 0;\n  let wordCount161 = 0;\n  let wordCount162 = 0;\n  let wordCount163 = 0;\n  let wordCount164 = 0;\n  let wordCount165 = 0;\n  let wordCount166 = 0;\n  let wordCount167 = 0;\n  let wordCount168 = 0;\n  let wordCount169 = 0;\n  let wordCount170 = 0;\n  let wordCount171 = 0;\n  let wordCount172 = 0;\n  let wordCount173 = 0;\n  let wordCount174 = 0;\n  let wordCount175 = 0;\n  let wordCount176 = 0;\n  let wordCount177 = 0;\n  let wordCount178 = 0;\n  let wordCount179 = 0;\n  let wordCount180 = 0;\n  let wordCount181 = 0;\n  let wordCount182 = 0;\n  let wordCount183 = 0;\n  let wordCount184 = 0;\n  let wordCount185 = 0;\n  let wordCount186 = 0;\n  let wordCount187 = 0;\n  let wordCount188 = 0;\n  let wordCount189 = 0;\n  let wordCount190 = 0;\n  let wordCount191 = 0;\n  let wordCount192 = 0;\n  let wordCount193 = 0;\n  let wordCount194 = 0;\n  let wordCount195 = 0;\n  let wordCount196 = 0;\n  let wordCount197 = 0;\n  let wordCount198 = 0;\n  let wordCount199 = 0;\n  let wordCount200 = 0;\n  let wordCount201 = 0;\n  let wordCount202 = 0;\n  let wordCount203 = 0;\n  let wordCount204 = 0;\n  let wordCount205 = 0;\n  let wordCount206 = 0;\n  let wordCount207 = 0;\n  let wordCount208 = 0;\n  let wordCount209 = 0;\n  let wordCount210 = 0;\n  let wordCount211 = 0;\n  let wordCount212 = 0;\n  let wordCount213 = 0;\n  let wordCount214 = 0;\n  let wordCount215 = 0;\n  let wordCount216 = 0;\n  let wordCount217 = 0;\n  let wordCount218 = 0;\n  let wordCount219 = 0;\n  let wordCount220 = 0;\n  let wordCount221 = 0;\n  let wordCount222 = 0;\n  let wordCount223 = 0;\n  let wordCount224 = 0;\n  let wordCount225 = 0;\n  let wordCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "gottenCloserVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex = 0;\n  let vowelStartIndex = 0;\n  let vowelEndIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No'\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      res += 'Yes'\n    } else if (lst[i] === ')') {\n      res += 'No'\n    }\n  }\n  return res\n}\n\n/* You are given a string S consisting of N characters and a number N. Your job\n  is to find out whether there is a way to make S good.\n  Return 'Yes' if there's a way to make S good, and return 'No' otherwise.\n  Examples:\n  goodString('ab', 3) == 'Yes'\n  goodString('ab', 2) == 'No'\n  goodString('ab', 1) == 'No'\n  goodString('ab', 0) == 'No'\n  */\nconst goodString = (str, n) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res += 'Yes'\n    } else if (str[i] === ')') {\n      res += 'No'\n    }\n  }\n  if (res === '') {\n    res = 'No'\n  }\n  return res\n}\n\n/* You are given a string S consisting of N characters and a number N. Your job\n  is to find out whether there is a way to make S good.\n  Return 'Yes' if there's a way to make S good, and return 'No' otherwise.\n  Examples:\n  goodString('ab', 3) == 'Yes'\n  goodString('ab', 2) == 'No'\n  goodString('ab', 1) == 'No'\n  goodString('ab', 0) == 'No'\n  */\nconst goodString2 = (str, n) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res += 'Yes'\n    } else if (str[i] === ')') {\n      res += 'No'\n    }\n  }\n  if (res === '') {\n    res = 'No'\n  }\n  return res\n}\n\n/* You are given a string S consisting of N characters and a number N. Your job\n  is to find out whether there is a way to make S good.\n  Return 'Yes' if there's a way to make S good, and return 'No' otherwise.\n  Examples:\n  goodString('ab', 3) == 'Yes'\n  goodString('ab', 2) == 'No'\n  goodString('ab', 1) == 'No'\n  goodString('ab', 0) == 'No'\n  */\nconst goodString3 = (str, n) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res += 'Yes'\n    } else if (str[i] === ')') {\n      res += 'No'\n    }\n  }\n  if (res === '') {\n    res = 'No'\n  }\n  return res\n}\n\n/* You are given a string S consisting of N characters and a number N. Your job\n  is to find out whether there is a way to make S good.\n  Return 'Yes' if there's a way to make S good, and return 'No' otherwise.\n  Examples:\n  goodString('ab', 3) == 'Yes'\n  goodString('ab', 2) == 'No'\n  goodString('ab', 1) == 'No'\n  goodString('ab', 0) == 'No'\n  */\nconst goodString4 = (str, n) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res += 'Yes'\n    } else if (str[i] === ')') {\n      res += 'No'\n    }\n  }\n  if (res === '') {\n    res = 'No'\n  }\n  return res\n}\n\n/* You are given a string S consisting of N characters and a number N. Your job\n  is to find out whether there is a way to make S good.\n  Return 'Yes' if there's a way to make S good, and return 'No' otherwise.\n  Examples:\n  goodString('ab', 3) == 'Yes'\n  goodString('ab', 2) == 'No'\n  goodString('ab', 1) == 'No'\n  goodString('ab', 0) == 'No'\n  */\nconst goodString5 = (str, n) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res += 'Yes'\n    } else if (str[i] === ')') {\n      res += 'No'\n    }\n  }\n  if (res === '') {\n    res = 'No'\n  }\n  return res\n}\n\n/* You are given a string S consisting of N characters and a number N. Your job\n  is to find out whether there is a way to make S good.\n  Return 'Yes' if there's a way to make S good, and return 'No' otherwise.\n  Examples:\n  goodString('ab', 3) == 'Yes'\n  goodString('ab', 2) == 'No'\n  goodString('ab', 1) == 'No'\n  goodString('ab', 0) == 'No'\n  */\nconst goodString6 = (str, n) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res += 'Yes'\n    } else if (str[i] === ')') {\n      res += 'No'\n    }\n  }\n  if (res === '') {\n    res = 'No'\n  }\n  return res\n}\n\n/* You are given a string S consisting of N characters and a number N. Your job\n  is to find out whether there is a way to make S good.\n  Return 'Yes' if there's a way to make S good, and return 'No' otherwise.\n  Examples:\n  goodString('ab', 3) == 'Yes'\n  goodString('ab', 2) == 'No'\n  goodString('ab', 1) == 'No'\n  goodString('ab', 0) == 'No'\n  */\nconst goodString7 = (str, n) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res += 'Yes'\n    } else if (str[i] === ')') {\n      res += 'No'\n    }\n  }\n  if (res === '') {\n    res = 'No'\n  }\n  return res\n}\n\n/* You are given a string S consisting of N characters and a number N. Your job\n  is to find out whether there is a way to make S good.\n  Return 'Yes' if there's a way to make S good, and return 'No' otherwise.\n  Examples:\n  goodString('ab', 3) == 'Yes'\n  goodString('ab', 2) == 'No'\n  goodString('ab', 1) == 'No'\n  goodString('ab', 0) == 'No'\n  */\nconst goodString8 = (str, n) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res += 'Yes'\n    } else if (str[i] === ')') {\n      res += 'No'\n    }\n  }\n  if (res === '') {\n    res = 'No'\n  }\n  return res\n}\n\n/* You are given a string S consisting of N characters and a number N. Your job\n  is to find out whether there is a way to make S good.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longer", "gc": "<|endoftext|>/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longerStrings = strings.reduce((acc, current) => {\n    if (current.length > acc.length) {\n      return acc\n    }\n    return current\n  }, [])\n  return longerStrings.length > 0? longerStrings : null\n}\n\n/**\n  Returns a string that is the concatenation of the given strings.\n  >>> concat(['a', 'b', 'c'])\n  'abc'\n  >>> concat(['a', 'bb', 'ccc'])\n  'bbccc'\n  */\nconst concat = (...strings) => {\n  return strings.reduce((acc, current) => {\n    return acc + current\n  }, '')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings and a separator\n  string.\n  >>> concat(['a', 'b', 'c'], '|')\n  'a|b|c'\n  >>> concat(['a', 'bb', 'ccc'], '|')\n  'a|bb|ccc'\n  */\nconst concatWithSeparator = (...strings) => {\n  return strings.reduce((acc, current) => {\n    return acc + current + '|'\n  }, '')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings and a separator\n  string.\n  >>> concatWithSeparator('a', 'b', 'c'), '|'\n  'a|b|c'\n  >>> concatWithSeparator('a', 'bb', 'ccc'), '|'\n  'a|bb|ccc'\n  */\nconst concatWithSeparatorAndSeparator = (...strings) => {\n  return strings.reduce((acc, current) => {\n    return acc + current + '|' + current\n  }, '')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings and a separator\n  string.\n  >>> concatWithSeparatorAndSeparator('a', 'b', 'c'), '|', '|'\n  'a|b|c||'\n  >>> concatWithSeparatorAndSeparator('a', 'bb', 'ccc'), '|', '|'\n  'a|bb|ccc|'\n  */\nconst concatWithSeparatorAndSeparatorAndSeparator = (...strings) => {\n  return strings.reduce((acc, current) => {\n    return acc + current + '|' + current + '|'\n  }, '')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings and a separator\n  string.\n  >>> concatWithSeparatorAndSeparatorAndSeparator('a', 'b', 'c'), '|', '|', '|'\n  'a|b|c|||'\n  >>> concatWithSeparatorAndSeparatorAndSeparator('a', 'bb', 'ccc'), '|', '|', '|'\n  'a|bb|ccc||'\n  */\nconst concatWithSeparatorAndSeparatorAndSeparatorAndSeparator = (...strings) => {\n  return strings.reduce((acc, current) => {\n    return acc + current + '|' + current + '|' + current\n  }, '')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings and a separator\n  string.\n  >>> concatWithSeparatorAndSeparatorAndSeparatorAndSeparator('a', 'b', 'c'), '|', '|', '|', '|'\n  'a|b|c||||b|c||'\n  >>> concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator('a', 'bb', 'ccc'), '|', '|', '|', '|'\n  'a|bb|ccc||b|c||'\n  */\nconst concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator = (...strings) => {\n  return strings.reduce((acc, current) => {\n    return acc + current + '|' + current + '|' + current + '|' + current\n  }, '')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings and a separator\n  string.\n  >>> concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator('a', 'b', 'c'), '|', '|', '|', '|'\n  'a|b|c|||b|c|||'\n  >>> concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator('a', 'bb', 'ccc'), '|', '|', '|', '|'\n  'a|bb|ccc||b|c|||'\n  */\nconst concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator = (...strings) => {\n  return strings.reduce((acc, current) => {\n    return acc + current + '|' + current + '|' + current + '|' + current + '|' + current\n  }, '')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings and a separator\n  string.\n  >>> concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator('a', 'b', 'c'), '|', '|', '|', '|'\n  'a|b|c||b|c|||'\n  >>> concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator('a', 'bb', 'ccc'), '|', '|', '|', '|'\n  'a|bb|ccc||b|c|||'\n  */\nconst concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator = (...strings) => {\n  return strings.reduce((acc, current) => {\n    return acc + current + '|' + current + '|' + current + '|' + current + '|' + current\n  }, '')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings and a separator\n  string.\n  >>> concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator('a', 'b', 'c'), '|', '|', '|', '|'\n  'a|b|c||b|c|||'\n  >>> concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator('a', 'bb', 'ccc'), '|', '|', '|', '|'\n  'a|bb|ccc||b|c|||'\n  */\nconst concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator = (...strings) => {\n  return strings.reduce((acc, current) => {\n    return acc + current + '|' + current + '|' + current + '|' + current + '|' + current + '|' + current\n  }, '')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings and a separator\n  string.\n  >>> concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator('a', 'b', 'c'), '|', '|', '|', '|'\n  'a|b|c||b|c|||'\n  >>> concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator('a', 'bb', 'ccc'), '|', '|', '|', '|'\n  'a|bb|ccc||b|c|||'\n  */\nconst concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator = (...strings) => {\n  return strings.reduce((acc, current) => {\n    return acc + current + '|' + current + '|' + current + '|' + current + '|' + current + '|' + current\n  }, '')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings and a separator\n  string.\n  >>> concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator('a', 'b', 'c'), '|', '|', '|', '|'\n  'a|b|c||b|c|||'\n  >>> concatWithSeparatorAndSeparatorAndSeparatorAndSeparatorAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximums", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      result.push(max);\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      result.push(min);\n      min = arr[i];\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-target/discuss/78741/Java-solution-with-O(N) complexity\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum = function(nums, target) {\n  const result = [];\n  const len = nums.length;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      result.push(max);\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      result.push(min);\n      min = nums[i];\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-target/discuss/78741/Java-solution-with-O(N) complexity\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum = function(nums, target) {\n  const result = [];\n  const len = nums.length;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      result.push(max);\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      result.push(min);\n      min = nums[i];\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-target/discuss/78741/Java-solution-with-O(N) complexity\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum = function(nums, target) {\n  const result = [];\n  const len = nums.length;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      result.push(max);\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      result.push(min);\n      min = nums[i];\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-target/discuss/78741/Java-solution-with-O(N) complexity\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum = function(nums, target) {\n  const result = [];\n  const len = nums.length;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      result.push(max);\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      result.push(min);\n      min = nums[i];\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-target/discuss/78741/Java-solution-with-O(N) complexity\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum = function(nums, target) {\n  const result = [];\n  const len = nums.length;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      result.push(max);\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      result.push(min);\n      min = nums[i];\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-target/discuss/78741/Java-solution-with-O(N) complexity\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum = function(nums, target) {\n  const result = [];\n  const len = nums.length;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      result.push(max);\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      result.push(min);\n      min = nums[i];\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-target/discuss/78741/Java-solution-with-O(N) complexity\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum = function(nums, target) {\n  const result = [];\n  const len = nums.length;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > max) {\n      result.push(max);\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      result.push(min);\n      min = nums[i];\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-target/discuss/78741/Java-solution-with-O", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solutions", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits2 = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10) * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits3 = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10) * Math.pow(10, digits.length - i - 1) * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits2 = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10) * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits3 = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10) * Math.pow(10, digits.length - i - 1) * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits2 = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10) * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits3 = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10) * Math.pow(10, digits.length - i - 1) * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits2 = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10) * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits3 = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10) * Math.pow(10, digits.length - i - 1) * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits2 = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10) * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits3 = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10) * Math.pow(10, digits.length - i - 1) * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigitsFromFirstKDigits2 = (num, k) => {\n  const digits = num.toString().split('');\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += parseInt(digits[i], 10) * Math.pow(10, digits.length - i - 1);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\nconst sumOfDigits", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "gottenOdderCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n  let result = [];\n  let current = 1;\n  let prev = 1;\n  while (current <= n) {\n    if (n % 2 === 0) {\n      result.push(current);\n      current = prev * prev + 1;\n    } else {\n      current = prev * prev + 3;\n      prev = current;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenEvenCollatz(5) returns [1, 5, 16, 8, 4, 2, 1] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, 16, and 8.\n  */\nconst gottenEvenCollatz = (n) => {\n  let result = [];\n  let current = 1;\n  let prev = 1;\n  while (current <= n) {\n    if (n % 2 === 0) {\n      result.push(current);\n      current = prev * prev + 1;\n    } else {\n      current = prev * prev + 3;\n      prev = current;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenPrimeCollatz(5) returns [1, 5, 7, 11, 13, 17, 19, 23] # The collatz sequence for 5 is [5, 7, 11, 13, 17, 19, 23]\n  */\nconst gottenPrimeCollatz = (n) => {\n  let result = [];\n  let current = 1;\n  let prev = 1;\n  while (current <= n) {\n    if (n % 2 === 0) {\n      result.push(current);\n      current = prev * prev + 1;\n    } else {\n      current = prev * prev + 3;\n      prev = current;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenPrimeCollatz(5) returns [1, 5, 7, 11, 13, 17, 19, 23] # The collatz sequence for 5 is [5, 7, 11, 13, 17, 19, 23]\n  */\nconst gottenPrimeCollatz = (n) => {\n  let result = [];\n  let current = 1;\n  let prev = 1;\n  while (current <= n) {\n    if (n % 2 === 0) {\n      result.push(current);\n      current = prev * prev + 1;\n    } else {\n      current = prev * prev + 3;\n      prev = current;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenPrimeCollatz(5) returns [1, 5, 7, 11, 13, 17, 19, 23] # The collatz sequence for 5 is [5, 7, 11, 13, 17, 19, 23]\n  */\nconst gottenPrimeCollatz = (n) => {\n  let result = [];\n  let current = 1;\n  let prev = 1;\n  while (current <= n) {\n    if (n % 2 === 0) {\n      result.push(current);\n      current = prev * prev + 1;\n    } else {\n      current = prev * prev + 3;\n      prev = current;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenPrimeCollatz(5) returns [1, 5, 7, 11, 13, 17, 19, 23] # The collatz sequence for 5 is [5, 7, 11, 13, 17, 19, 23]\n  */\nconst gottenPrimeCollatz = (n) => {\n  let result = [];\n  let current = 1;\n  let prev = 1;\n  while (current <= n) {\n    if (n % 2 === 0) {\n      result.push(current);\n      current = prev * prev + 1;\n    } else {\n      current = prev * prev + 3;\n      prev = current;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDates", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  const dateString = date.toString();\n  const [month, day, year] = dateString.split('-');\n  const isValid = month >= 1 && month <= 12 && day >= 1 && day <= 31 && year >= 1900 && year <= 2038;\n  return isValid;\n};\n\n/*\n  Given a date string and an array of dates, return an array of dates that\n  are valid for the date string.\n  If the date string is not valid, return an empty array.\n  If the date string is valid, return an array of dates whose first date is\n  the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy, return an array of dates whose first date is\n  the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm, return an array of dates whose first date is\n  the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss-ss-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss,\n  return an array of dates whose first date is the date string and the last date is the date string plus one day.\n  If the date string is in the format mm-dd-yyyy-hh-mm-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-ss-", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWord", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.split(' ');\n  const wordsWithoutSpace = words.filter(word => word.length > 0);\n  const wordsWithComma = words.filter(word => word.length > 0 && word[0] === ',');\n  const wordsWithOddOrder = words.filter(word => word.length > 0 && word[0] >= 'a' && word[0] <= 'z');\n  return wordsWithoutSpace.concat(wordsWithComma, wordsWithOddOrder);\n};\n\n/* Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(',');\n  const wordsWithoutSpace = words.filter(word => word.length > 0);\n  const wordsWithComma = words.filter(word => word.length > 0 && word[0] === ',');\n  const wordsWithOddOrder = words.filter(word => word.length > 0 && word[0] >= 'a' && word[0] <= 'z');\n  return wordsWithoutSpace.concat(wordsWithComma, wordsWithOddOrder);\n};\n\n/* Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithSpace = (txt) => {\n  const words = txt.split(' ');\n  const wordsWithoutSpace = words.filter(word => word.length > 0);\n  const wordsWithComma = words.filter(word => word.length > 0 && word[0] === ',');\n  const wordsWithOddOrder = words.filter(word => word.length > 0 && word[0] >= 'a' && word[0] <= 'z');\n  return wordsWithoutSpace.concat(wordsWithComma, wordsWithOddOrder);\n};\n\n/* Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithComma = (txt) => {\n  const words = txt.split(',');\n  const wordsWithoutSpace = words.filter(word => word.length > 0);\n  const wordsWithComma = words.filter(word => word.length > 0 && word[0] === ',');\n  const wordsWithOddOrder = words.filter(word => word.length > 0 && word[0] >= 'a' && word[0] <= 'z');\n  return wordsWithoutSpace.concat(wordsWithComma, wordsWithOddOrder);\n};\n\n/* Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithOddOrder = (txt) => {\n  const words = txt.split(',');\n  const wordsWithoutSpace = words.filter(word => word.length > 0);\n  const wordsWithComma = words.filter(word => word.length > 0 && word[0] === ',');\n  const wordsWithOddOrder = words.filter(word => word.length > 0 && word[0] >= 'a' && word[0] <= 'z');\n  return wordsWithoutSpace.concat(wordsWithComma, wordsWithOddOrder);\n};\n\n/* Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithOddOrderAndSpace = (txt) => {\n  const words = txt.split(',');\n  const wordsWithoutSpace = words.filter(word => word.length > 0);\n  const wordsWithComma = words.filter(word => word.length > 0 && word[0] === ',');\n  const wordsWithOddOrder = words.filter(word => word.length > 0 && word[0] >= 'a' && word[0] <= 'z');\n  return wordsWithoutSpace.concat(wordsWithComma, wordsWithOddOrder);\n};\n\n/* Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithOddOrderAndComma = (txt) => {\n  const words = txt.split(',');\n  const wordsWithoutSpace = words.filter(word => word.length > 0);\n  const wordsWithComma = words.filter(word => word.length > 0 && word[0] === ',');\n  const wordsWithOddOrder = words.filter(word => word.length > 0 && word[0] >= 'a' && word[0] <= 'z');\n  return wordsWithoutSpace.concat(wordsWithComma, wordsWithOddOrder);\n};\n\n/* Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithOddOrderAndCommaAndSpace = (txt) => {\n  const words = txt.split(',');\n  const wordsWithoutSpace = words.filter(word => word.length > 0);\n  const wordsWithCom", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSort", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n  const nums = lst.map(Number);\n  const numsSorted = nums.sort((a, b) => a - b);\n  return numsSorted.every((num) => num === nums[0]);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n * in descending order. If list has more than 1 duplicate of the same\n * number, return false. Assume no negative numbers and only integers.\n * Examples\n  isSort([5, 4, 3, 2, 1]) ➞ false\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ➞ true\n  isSort([5, 4, 3, 2, 1]) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let start2 = interval2[0];\n  let end1 = interval1[1];\n  let end2 = interval2[1];\n  let isIntersect = false;\n  let isIntersect2 = false;\n  let isIntersect3 = false;\n  let isIntersect4 = false;\n  let isIntersect5 = false;\n  let isIntersect6 = false;\n  let isIntersect7 = false;\n  let isIntersect8 = false;\n  let isIntersect9 = false;\n  let isIntersect10 = false;\n  let isIntersect11 = false;\n  let isIntersect12 = false;\n  let isIntersect13 = false;\n  let isIntersect14 = false;\n  let isIntersect15 = false;\n  let isIntersect16 = false;\n  let isIntersect17 = false;\n  let isIntersect18 = false;\n  let isIntersect19 = false;\n  let isIntersect20 = false;\n  let isIntersect21 = false;\n  let isIntersect22 = false;\n  let isIntersect23 = false;\n  let isIntersect24 = false;\n  let isIntersect25 = false;\n  let isIntersect26 = false;\n  let isIntersect27 = false;\n  let isIntersect28 = false;\n  let isIntersect29 = false;\n  let isIntersect30 = false;\n  let isIntersect31 = false;\n  let isIntersect32 = false;\n  let isIntersect33 = false;\n  let isIntersect34 = false;\n  let isIntersect35 = false;\n  let isIntersect36 = false;\n  let isIntersect37 = false;\n  let isIntersect38 = false;\n  let isIntersect39 = false;\n  let isIntersect40 = false;\n  let isIntersect41 = false;\n  let isIntersect42 = false;\n  let isIntersect43 = false;\n  let isIntersect44 = false;\n  let isIntersect45 = false;\n  let isIntersect46 = false;\n  let isIntersect47 = false;\n  let isIntersect48 = false;\n  let isIntersect49 = false;\n  let isIntersect50 = false;\n  let isIntersect51 = false;\n  let isIntersect52 = false;\n  let isIntersect53 = false;\n  let isIntersect54 = false;\n  let isIntersect55 = false;\n  let isIntersect56 = false;\n  let isIntersect57 = false;\n  let isIntersect58 = false;\n  let isIntersect59 = false;\n  let isIntersect60 = false;\n  let isIntersect61 = false;\n  let isIntersect62 = false;\n  let isIntersect63 = false;\n  let isIntersect64 = false;\n  let isIntersect65 = false;\n  let isIntersect66 = false;\n  let isIntersect67 = false;\n  let isIntersect68 = false;\n  let isIntersect69 = false;\n  let isIntersect70 = false;\n  let isIntersect71 = false;\n  let isIntersect72 = false;\n  let isIntersect73 = false;\n  let isIntersect74 = false;\n  let isIntersect75 = false;\n  let isIntersect76 = false;\n  let isIntersect77 = false;\n  let isIntersect78 = false;\n  let isIntersect79 = false;\n  let isIntersect80 = false;\n  let isIntersect81 = false;\n  let isIntersect82 = false;\n  let isIntersect83 = false;\n  let isIntersect84 = false;\n  let isIntersect85 = false;\n  let isIntersect86 = false;\n  let isIntersect87 = false;\n  let isIntersect88 = false;\n  let isIntersect89 = false;\n  let isIntersect90 = false;\n  let isIntersect91 = false;\n  let isIntersect92 = false;\n  let isIntersect93 = false;\n  let isIntersect94 = false;\n  let isIntersect95 = false;\n  let isIntersect96 = false;\n  let isIntersect97 = false;\n  let isIntersect98 = false;\n  let isIntersect99 = false;\n  let isIntersect100 = false;\n  let isIntersect101 = false;\n  let isIntersect102 = false;\n  let isIntersect103 = false;\n  let isIntersect104 = false;\n  let isIntersect105 = false;\n  let isIntersect106 = false;\n  let isIntersect107 = false;\n  let isIntersect108 = false;\n  let isIntersect109 = false;\n  let isIntersect110 = false;\n  let isIntersect111 = false;\n  let isIntersect112 = false;\n  let isIntersect113 = false;\n  let isIntersect114 = false;\n  let isIntersect115 = false;\n  let isIntersect116 = false;\n  let isIntersect117 = false;\n  let isIntersect118 = false;\n  let isIntersect119 = false;\n  let isIntersect120 = false;\n  let isIntersect121 = false;\n  let isIntersect122 = false;\n  let isIntersect123 = false;\n  let isIntersect124 = false;\n  let isIntersect125 = false;\n  let isIntersect126 = false;\n  let isIntersect127 = false;\n  let isIntersect128 = false;\n  let isIntersect129 = false;\n  let isIntersect130 = false;\n  let isIntersect131 = false;\n  let isIntersect132 = false;\n  let isIntersect133 = false;\n  let isIntersect134 = false;\n  let isIntersect135 = false;\n  let isIntersect136 = false;\n  let isIntersect137 = false;\n  let isIntersect138 = false;\n  let isIntersect139 = false;\n  let isIntersect140 = false;\n  let isIntersect141 = false;\n  let isIntersect142 = false;\n  let isIntersect143 = false;\n  let isIntersect144 = false;\n  let isIntersect145 = false;\n  let isIntersect146 = false;\n  let isIntersect147 = false;\n  let isIntersect148 = false;\n  let isIntersect149 = false;\n  let isIntersect150 = false;\n  let isIntersect151 = false;\n  let isIntersect152 = false;\n  let isIntersect153 = false;\n  let isIntersect154 = false;\n  let isIntersect155 = false;\n  let isIntersect156 = false;\n  let isIntersect157 = false;\n  let isIntersect158 = false;\n  let isIntersect159 = false;\n  let isIntersect160 = false;\n  let isIntersect161 = false;\n  let isIntersect162 = false;\n  let isIntersect163 = false;\n  let isIntersect164 = false;\n  let isIntersect165 = false;\n  let isIntersect166 = false;\n  let isIntersect167 = false;\n  let isIntersect168 = false;\n  let isIntersect169 = false;\n  let isIntersect170 = false;\n  let isIntersect171 = false;\n  let isIntersect172 = false;\n  let isIntersect173 = false;\n  let isIntersect174 = false;\n  let isIntersect175 = false;\n  let isIntersect176 = false;\n  let isIntersect177 = false;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodsSign", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += sign * arr[i]\n    sign = sign === 1? -1 : sign * -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += sign * arr[i]\n    sign = sign === 1? -1 : sign * -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += sign * arr[i]\n    sign = sign === 1? -1 : sign * -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += sign * arr[i]\n    sign = sign === 1? -1 : sign * -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += sign * arr[i]\n    sign = sign === 1? -1 : sign * -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += sign * arr[i]\n    sign = sign === 1? -1 : sign * -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += sign * arr[i]\n    sign = sign === 1? -1 : sign * -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += sign * arr[i]\n    sign = sign === 1? -1 : sign * -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += sign * arr[i]\n    sign = sign === 1? -1 : sign * -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += sign * arr[i]\n    sign = sign === 1? -1 : sign * -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += sign * arr[i]\n    sign = sign === 1? -1 : sign * -1\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPaths", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [gridValues, gridIndex] = getGridValues(grid);\n  const [gridValuesIndices] = getGridValuesIndices(grid);\n  const [gridValuesIndicesSorted] = sortGridValuesIndices(gridValuesIndices);\n  const [gridValuesIndicesSortedSorted] = sortGridValuesIndicesSorted(gridValuesIndicesSorted);\n  const [gridValuesIndicesSortedSortedSorted] = sortGridValuesIndicesSortedSorted(gridValuesIndicesSortedSortedSorted);\n  const [gridValuesIndicesSortedSortedSortedSorted] = sortGridValuesIndicesSortedSortedSorted(gridValuesIndicesSortedSortedSortedSorted);\n  const [gridValuesIndicesSortedSortedSortedSortedSorted] = sortGridValuesIndicesSortedSortedSortedSorted(gridValuesIndicesSortedSortedSortedSortedSortedSorted);\n  const [gridValuesIndicesSortedSortedSortedSortedSortedSorted] = sortGridValuesIndicesSortedSortedSortedSortedSorted(gridValuesIndicesSortedSortedSortedSortedSortedSorted);\n  const [gridValuesIndicesSortedSortedSortedSortedSortedSortedSorted] = sortGridValuesIndicesSortedSortedSortedSortedSortedSorted(gridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSorted);\n  const [gridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSorted] = sortGridValuesIndicesSortedSortedSortedSortedSortedSortedSorted(gridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSorted);\n  const [gridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSorted] = sortGridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSorted(gridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted);\n  const [gridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted] = sortGridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted(gridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted);\n  const [gridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted] = sortGridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted(gridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted);\n  const [gridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted] = sortGridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted(gridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted);\n  const [gridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted] = sortGridValuesIndicesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greaterCommonDivisors", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    tri(n - 1) + tri(n - 2) + tri(n + 1),\n    tri(n - 1) + tri(n - 2),\n    tri(n - 2),\n    tri(n + 1)\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n  fib(8) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227413, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, 37718368, 61059703, 123693213, 14930352, 23301384, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of all even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumEvenOdd = (n, digit) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumEvenOddDigit = (n, digit) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumEvenOddDigitOdd = (n, digit) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumEvenOddDigitOddDigit = (n, digit) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumEvenOddDigitOddDigitOddDigit = (n, digit) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumEvenOddDigitOddDigitOddDigitOddDigit = (n, digit) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumEvenOddDigitOddDigitOddDigitOddDigitOddDigit = (n, digit) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumEvenOddDigitOddDigitOddDigitOddDigitOddDigitOddDigit = (n, digit) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumEvenOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigit = (n, digit) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumEvenOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigit = (n, digit) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumEvenOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigit = (n, digit) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += digit;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumEvenOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitO", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let i = 0;\n  let j = 0;\n  let nesting = false;\n\n  while (i < string.length) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      i++;\n    } else if (char === ']') {\n      if (stack.length!== 0) {\n        const char = stack.pop();\n        if (char === '[') {\n          nesting = true;\n        } else if (char === ']') {\n          nesting = false;\n        }\n      }\n      i++;\n    } else if (nesting) {\n      if (char === ']') {\n        nesting = false;\n      } else if (char === ']') {\n        nesting = true;\n      }\n    }\n    j++;\n  }\n\n  return nesting;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let i = 0;\n  let j = 0;\n  let nesting = false;\n\n  while (i < string.length) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      i++;\n    } else if (char === ']') {\n      if (stack.length!== 0) {\n        const char = stack.pop();\n        if (char === '[') {\n          nesting = true;\n        } else if (char === ']') {\n          nesting = false;\n        }\n      }\n      i++;\n    } else if (nesting) {\n      if (char === ']') {\n        nesting = false;\n      } else if (char === ']') {\n        nesting = true;\n      }\n    }\n    j++;\n  }\n\n  return nesting;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let i = 0;\n  let j = 0;\n  let nesting = false;\n\n  while (i < string.length) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      i++;\n    } else if (char === ']') {\n      if (stack.length!== 0) {\n        const char = stack.pop();\n        if (char === '[') {\n          nesting = true;\n        } else if (char === ']') {\n          nesting = false;\n        }\n      }\n      i++;\n    } else if (nesting) {\n      if (char === ']') {\n        nesting = false;\n      } else if (char === ']') {\n        nesting = true;\n      }\n    }\n    j++;\n  }\n\n  return nesting;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let i = 0;\n  let j = 0;\n  let nesting = false;\n\n  while (i < string.length) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      i++;\n    } else if (char === ']') {\n      if (stack.length!== 0) {\n        const char = stack.pop();\n        if (char === '[') {\n          nesting = true;\n        } else if (char === ']') {\n          nesting = false;\n        }\n      }\n      i++;\n    } else if (nesting) {\n      if (char === ']') {\n        nesting = false;\n      } else if (char === ']') {\n        nesting = true;\n      }\n    }\n    j++;\n  }\n\n  return nesting;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let i = 0;\n  let j = 0;\n  let nesting = false;\n\n  while (i < string.length) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      i++;\n    } else if (char === ']') {\n      if (stack.length!== 0) {\n        const char = stack.pop();\n        if (char === '[') {\n          nesting = true;\n        } else if (char === ']') {\n          nesting = false;\n        }\n      }\n      i++;\n    } else if (nesting) {\n      if (char === ']') {\n        nesting = false;\n      } else if (char === ']') {\n        nesting = true;\n      }\n    }\n    j++;\n  }\n\n  return nesting;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let i = 0;\n  let j = 0;\n  let nesting = false;\n\n  while (i < string.length) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      i++;\n    } else if (char === ']') {\n      if (stack.length!== 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  const sumsSquare = (num) => {\n    const square = num * num\n    return Math.ceil(square)\n  }\n  return lst.map(sumsSquare)\n}\n\nmodule.exports = sumsSquares\n\n},{}],3:[function(require,module,exports){\nconst sumsSquares = require('./sumsSquares')\n\n/*\n  You are given a list of numbers.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n  You are also given an integer K.\n  You are also given an integer N.\n  You are also given an integer M.\n  You are also given an integer X.\n  You are also given an integer Y.\n  You are also given an integer Z.\n  You are also given an integer C.\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharsIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && txt.indexOf(' ', txt.length - 1) === -1;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && txt.indexOf(' ', txt.length - 1) === -1;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && txt.indexOf(' ', txt.length - 1) === -1;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && txt.indexOf(' ', txt.length - 1) === -1;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && txt.indexOf(' ', txt.length - 1) === -1;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && txt.indexOf(' ', txt.length - 1) === -1;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && txt.indexOf(' ', txt.length - 1) === -1;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && txt.indexOf(' ', txt.length - 1) === -1;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst check", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArranging", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i >= 0 && arr[i] > arr[max]) {\n    max = i;\n    i--;\n  }\n  return max;\n};\n\n/**\n  Given an array of numbers, return an array which contains all possible pairs of\n  numbers which sum to that number.\n\n  Examples:\n  pairs([1,2,3,4,5]) = [[1,2],[3,4],[5,1]]\n  pairs([1,2,3,4,5]) = [[1,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5]]\n  pairs([1,2,3,4,5]) = [[1,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3]]\n  pairs([1,2,3,4,5]) = [[1,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2]]\n  */\nconst pairs = (arr) => {\n  let result = [];\n  let i = arr.length - 1;\n  while (i >= 0) {\n    let j = i + 1;\n    while (j >= 0 && arr[j] > arr[i]) {\n      result.push([arr[i], arr[j]]);\n      i = j - 1;\n      j = i - 1;\n    }\n  }\n  return result;\n};\n\n/**\n  Given an array of numbers, return an array which contains all possible triplets\n  which sum to that number.\n\n  Examples:\n  triples([1,2,3,4,5]) = [[1,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3]]\n  triples([1,2,3,4,5]) = [[1,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],[2,3],[4,5],[1,4],[2,5],[3,1],[4,2],[5,3],[4,1],[5,2],[3,4],[5,1],", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largerSmallerIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const largest = lst.reduce((a, b) => Math.max(a, b));\n  const smallest = lst.reduce((a, b) => Math.min(a, b));\n  return [smallest, largest];\n};\n\n/**\n * Given a string, return a string that is the same length\n * as the original string but with all characters of the original string\n * replaced by their ASCII equivalent (for example, 'a' to 'A').\n * If the original string contains only digits, return an empty string.\n * If the original string contains only letters, return an empty string.\n * If the original string contains only whitespace, return an empty string.\n * If the original string contains only punctuation, return an empty string.\n * If the original string contains only uppercase letters, return an empty string.\n * If the original string contains only lowercase letters, return an empty string.\n * If the original string contains only uppercase letters and digits, return an empty string.\n * If the original string contains only lowercase letters and digits, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains only digits and letters, return an empty string.\n * If the original string contains ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comparingOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null) {\n    return b\n  }\n  if (b === null) {\n    return a\n  }\n  if (a === \"\" || b === \"\") {\n    return a > b? 1 : -1\n  }\n  if (a === \"\") {\n    return b > a? 1 : -1\n  }\n  if (b === \"\") {\n    return a > b? -1 : -1\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  return aNum > bNum? 1 : -1\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null) {\n    return b\n  }\n  if (b === null) {\n    return a\n  }\n  if (a === \"\" || b === \"\") {\n    return a < b? 1 : -1\n  }\n  if (a === \"\") {\n    return b < a? 1 : -1\n  }\n  if (b === \"\") {\n    return a < b? -1 : -1\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  return aNum < bNum? 1 : -1\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null) {\n    return b\n  }\n  if (b === null) {\n    return a\n  }\n  if (a === \"\" || b === \"\") {\n    return a < b? -1 : 1\n  }\n  if (a === \"\") {\n    return b < a? -1 : 1\n  }\n  if (b === \"\") {\n    return a < b? 1 : -1\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  return aNum < bNum? -1 : 1\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null) {\n    return b\n  }\n  if (b === null) {\n    return a\n  }\n  if (a === \"\" || b === \"\") {\n    return a < b? -1 : 1\n  }\n  if (a === \"\") {\n    return b < a? -1 : 1\n  }\n  if (b === \"\") {\n    return a < b? 1 : -1\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  return aNum < bNum? -1 : 1\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null) {\n    return b\n  }\n  if (b === null) {\n    return a\n  }\n  if (a === \"\" || b === \"\") {\n    return a > b? 1 : -1\n  }\n  if (a === \"\") {\n    return b > a? 1 : -1\n  }\n  if (b === \"\") {\n    return a > b? -1 : -1\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  return aNum > bNum? 1 : -1\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null) {\n    return b\n  }\n  if (b === null) {\n    return a\n  }\n  if (a === \"\" || b === \"\") {\n    return a < b? -1 : 1\n  }\n  if (a === \"\") {\n    return b < a? -1 : 1\n  }\n  if (b === \"\") {\n    return a < b? 1 : -1\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  return aNum < bNum? -1 : 1\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSummingEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive odd numbers\n  Example\n  isEqualToSummingOdd(4) == true\n  isEqualToSummingOdd(6) == false\n  isEqualToSummingOdd(8) == false\n  */\nconst isEqualToSummingOdd = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 16 positive odd numbers\n  Example\n  isEqualToSummingOddEven(4) == true\n  isEqualToSummingOddEven(6) == false\n  isEqualToSummingOddEven(8) == true\n  isEqualToSummingOddEven(10) == false\n  */\nconst isEqualToSummingOddEven = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return false;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 32 positive odd numbers\n  Example\n  isEqualToSummingOddEven(8) == true\n  isEqualToSummingOddEven(10) == false\n  */\nconst isEqualToSummingOddEvenEven = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return false;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 64 positive odd numbers\n  Example\n  isEqualToSummingOddEvenEven(8) == true\n  isEqualToSummingOddEvenEven(10) == false\n  */\nconst isEqualToSummingOddEvenEven = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return false;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 128 positive odd numbers\n  Example\n  isEqualToSummingOddEvenEven(8) == true\n  isEqualToSummingOddEvenEven(10) == false\n  */\nconst isEqualToSummingOddEvenEven = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return false;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 256 positive odd numbers\n  Example\n  isEqualToSummingOddEvenEven(8) == true\n  isEqualToSummingOddEvenEven(10) == false\n  */\nconst isEqualToSummingOddEvenEven = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return false;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return true;\n  }\n  if (n % 256 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 512 positive odd numbers\n  Example\n  isEqualToSummingOddEvenEven(8) == true\n  isEqualToSummingOddEvenEven(10) == false\n  */\nconst isEqualToSummingOddEvenEven = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return false;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return true;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1024 positive odd numbers\n  Example\n  isEqualToSummingOddEvenEven(8) == true\n  isEqualToSummingOddEvenEven(10) == false\n  */\nconst isEqualToSummingOddEvenEven = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return false;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return true;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return true;\n  }\n  if (n % 1024 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2048 positive odd numbers\n  Example\n  isEqualToSummingOddEvenEven(8) == true\n  isEqualToSummingOddEvenEven(10) == false\n  */\nconst isEqualToSummingOddEvenEven = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return false;\n  }\n  if (n % 16 === 0) {\n    return true;\n  }\n  if (n % 32 === 0) {\n    return true;\n  }\n  if (n % 64 === 0) {\n    return true;\n  }\n  if (n % 128 === 0) {\n    return true;\n  }\n  if (n % 256 === 0) {\n    return true;\n  }\n  if (n % 512 === 0) {\n    return true;\n  }\n  if (n % 1024 === 0) {\n    return true;\n  }\n  if (n % 2048 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4096 positive odd numbers\n  Example\n  isEqualToSummingOddEvenEven(8) == true\n  isEqualToSummingOddEvenEven(10) == false\n  */\nconst isEqualToSummingOddEvenEven = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  if (n % 8 === 0) {\n    return false;\n  }\n  if (n % ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) return 1;\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  For example:\n  >>> factorial(4)\n  120\n*/\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to 1.\n  For example:\n  >>> factorial(5)\n  720\n*/\nconst factorialGreaterThanOne = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialGreaterThanOne(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to n.\n  For example:\n  >>> factorial(6)\n  720\n*/\nconst factorialGreaterThan = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialGreaterThan(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to n.\n  For example:\n  >>> factorial(7)\n  720\n*/\nconst factorialLessThan = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialLessThan(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to n.\n  For example:\n  >>> factorial(8)\n  720\n*/\nconst factorialGreaterThanOrEqualTo = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialGreaterThanOrEqualTo(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to n.\n  For example:\n  >>> factorial(9)\n  720\n*/\nconst factorialLessThanOrEqualTo = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialLessThanOrEqualTo(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than n.\n  For example:\n  >>> factorial(10)\n  720\n*/\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than n.\n  For example:\n  >>> factorial(11)\n  720\n*/\nconst factorialLessThan = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialLessThan(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than n.\n  For example:\n  >>> factorial(12)\n  720\n*/\nconst factorialGreaterThan = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialGreaterThan(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than n.\n  For example:\n  >>> factorial(13)\n  720\n*/\nconst factorialLessThanOrEqualTo = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialLessThanOrEqualTo(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than n.\n  For example:\n  >>> factorial(14)\n  720\n*/\nconst factorialGreaterThanOrEqualTo = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialGreaterThanOrEqualTo(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than n.\n  For example:\n  >>> factorial(15)\n  720\n*/\nconst factorialLessThanOrEqualTo = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialLessThanOrEqualTo(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than n.\n  For example:\n  >>> factorial(16)\n  720\n*/\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than n.\n  For example:\n  >>> factorial(17)\n  720\n*/\nconst factorialLessThan = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialLessThan(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than n.\n  For example:\n  >>> factorial(18)\n  720\n*/\nconst factorialGreaterThan = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialGreaterThan(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than n.\n  For example:\n  >>> factorial(19)\n  720\n*/\nconst factorialLessThanOrEqualTo = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialLessThanOrEqualTo(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than n.\n  For example:\n  >>> factorial(20)\n  720\n*/\nconst factorialGreaterThanOrEqualTo = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialGreaterThanOrEqualTo(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than n.\n  For example:\n  >>> factorial(21)\n  720\n*/\nconst factorialLessThanOrEqualTo = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialLessThanOrEqualTo(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than n.\n  For example:\n  >>> factorial(22)\n  720\n*/\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than n.\n  For example:\n  >>> factorial(23)\n  720\n*/\nconst factorialLessThan = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialLessThan(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than n.\n  For example:\n  >>> factorial(24)\n  720\n*/\nconst factorialGreaterThan = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialGreaterThan(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than n.\n  For example:\n  >>> factorial(25)\n  720\n*/\nconst factorialLessThanOrEqualTo = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialLessThanOrEqualTo(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than n.\n  For example:\n  >>> factorial(26)\n  720\n*/\nconst factorialGreaterThanOrEqualTo = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialGreaterThanOrEqualTo(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than n.\n  For example:\n  >>> factorial(27)\n  720\n*/\nconst factorialLessThanOrEqualTo = (n) => {\n  if (n <= 1) return 1;\n  return n * factorialLessThanOrEqualTo(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than n.\n  For example:\n  >>> factorial(28)\n  720\n*/\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than n.\n  For example:\n  >>> factorial(29)\n  720\n*/\nconst factorialLessThan = (n) => {\n  if (n <= 1) return 1;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string.charAt(i) === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string.charAt(i);\n    }\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string.charAt(i) === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string.charAt(i);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from shortest to longest of the input string\n  >>> commonPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst commonPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string.charAt(i) === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string.charAt(i);\n    }\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from shortest to longest of the input string\n  >>> commonSuffixes('abc')\n  ['c', 'ba', 'abc']\n  */\nconst commonSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string.charAt(i) === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string.charAt(i);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from longest to shortest of the input string\n  >>> longestCommonPrefixes('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst longestCommonPrefixes = (string1, string2) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let len = string1.length;\n  while (i < len) {\n    if (string1.charAt(i) === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string1.charAt(i);\n    }\n    i++;\n  }\n  let suffixes = [];\n  let suffix = '';\n  let j = 0;\n  let len2 = string2.length;\n  while (j < len2) {\n    if (string2.charAt(j) === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string2.charAt(j);\n    }\n    j++;\n  }\n  return prefixes.concat(suffixes);\n};\n\n/* Return list of all common suffixes from longest to shortest of the input string\n  >>> longestCommonSuffixes('abc', 'abc')\n  ['c', 'ba', 'abc']\n  */\nconst longestCommonSuffixes = (string1, string2) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let len = string1.length;\n  while (i < len) {\n    if (string1.charAt(i) === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string1.charAt(i);\n    }\n    i++;\n  }\n  let prefixes = [];\n  let prefix = '';\n  let j = 0;\n  let len2 = string2.length;\n  while (j < len2) {\n    if (string2.charAt(j) === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string2.charAt(j);\n    }\n    j++;\n  }\n  return prefixes.concat(suffixes);\n};\n\n/* Return list of all common prefixes from shortest to longest of the input string\n  >>> shortestCommonPrefixes('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst shortestCommonPrefixes = (string1, string2) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let len = string1.length;\n  while (i < len) {\n    if (string1.charAt(i) === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string1.charAt(i);\n    }\n    i++;\n  }\n  let suffixes = [];\n  let suffix = '';\n  let j = 0;\n  let len2 = string2.length;\n  while (j < len2) {\n    if (string2.charAt(j) === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string2.charAt(j);\n    }\n    j++;\n  }\n  return prefixes.concat(suffixes);\n};\n\n/* Return list of all common suffixes from shortest to longest of the input string\n  >>> shortestCommonSuffixes('abc', 'abc')\n  ['c', 'ba', 'abc']\n  */\nconst shortestCommonSuffixes = (string1, string2) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let len = string1.length;\n  while (i < len) {\n    if (string1.charAt(i) === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string1.charAt(i);\n    }\n    i++;\n  }\n  let prefixes = [];\n  let prefix = '';\n  let j = 0;\n  let len2 = string2.length;\n  while (j < len2) {\n    if (string2.charAt(j) === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string2.charAt(j);\n    }\n    j++;\n  }\n  return prefixes.concat(suffixes);\n};\n\n/* Return list of all common prefixes from longest to shortest of the input string\n  >>> longestCommonPrefixes('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst longestCommonPrefixes = (string1, string2) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let len = string1.length;\n  while (i < len) {\n    if (string1.charAt(i) === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string1.charAt(i);\n    }\n    i++;\n  }\n  let suffixes = [];\n  let suffix = '';\n  let j = 0;\n  let len2 = string2.length;\n  while (j < len2) {\n    if (string2.charAt(j) === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string2.charAt(j);\n    }\n    j++;\n  }\n  return prefixes.concat(suffixes);\n};\n\n/* Return list of all common suffixes from longest to shortest of the input string\n  >>> longestCommonSuffixes('abc', 'abc')\n  ['c', 'ba', 'abc']\n  */\nconst longestCommonSuffixes = (string1, string2) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let len = string1.length;\n  while (i < len) {\n    if (string1.charAt(i) === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string1.charAt(i);\n    }\n    i++;\n  }\n  let prefixes = [];\n  let prefix = '';\n  let j = 0;\n  let len2 = string2.length;\n  while (j < len2) {\n    if (string2.charAt(j) === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string2.charAt(j);\n    }\n    j++;\n  }\n  return prefixes.concat(suffixes);\n};\n\n/* Return list of all common prefixes from shortest to lon", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixesSpace", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/ +/g, \" \");\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixesUnderscore(\"Example\") == \"Example\"\n  fixesUnderscore(\"Example 1\") == \"Example_1\"\n  fixesUnderscore(\" Example 2\") == \"_Example_2\"\n  fixesUnderscore(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesUnderscore = (text) => {\n  return text.replace(/_/g, \" \").replace(/ +/g, \" \");\n}\n\n/*\n  Given a string text, replace all dashes with spaces, \n  and if a string has more than 2 consecutive dashes, \n  then replace all consecutive dashes with - \n  \n  fixesDash(\"Example\") == \"Example\"\n  fixesDash(\"Example 1\") == \"Example_1\"\n  fixesDash(\" Example 2\") == \"_Example_2\"\n  fixesDash(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesDash = (text) => {\n  return text.replace(/-/g, \" \").replace(/ +/g, \" \");\n}\n\n/*\n  Given a string text, replace all periods with spaces, \n  and if a string has more than 2 consecutive periods, \n  then replace all consecutive periods with - \n  \n  fixesPeriod(\"Example\") == \"Example\"\n  fixesPeriod(\"Example 1\") == \"Example_1\"\n  fixesPeriod(\" Example 2\") == \"_Example_2\"\n  fixesPeriod(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesPeriod = (text) => {\n  return text.replace(/\\./g, \" \").replace(/ +/g, \" \");\n}\n\n/*\n  Given a string text, replace all commas with spaces, \n  and if a string has more than 2 consecutive commas, \n  then replace all consecutive commas with - \n  \n  fixesComma(\"Example\") == \"Example\"\n  fixesComma(\"Example 1\") == \"Example_1\"\n  fixesComma(\" Example 2\") == \"_Example_2\"\n  fixesComma(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesComma = (text) => {\n  return text.replace(/,/g, \" \").replace(/ +/g, \" \");\n}\n\n/*\n  Given a string text, replace all quotes with spaces, \n  and if a string has more than 2 consecutive quotes, \n  then replace all consecutive quotes with - \n  \n  fixesQuote(\"Example\") == \"Example\"\n  fixesQuote(\"Example 1\") == \"Example_1\"\n  fixesQuote(\" Example 2\") == \"_Example_2\"\n  fixesQuote(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesQuote = (text) => {\n  return text.replace(/\"/g, \" \").replace(/ +/g, \" \");\n}\n\n/*\n  Given a string text, replace all apostrophes with spaces, \n  and if a string has more than 2 consecutive apostrophes, \n  then replace all consecutive apostrophes with - \n  \n  fixesApostrophe(\"Example\") == \"Example\"\n  fixesApostrophe(\"Example 1\") == \"Example_1\"\n  fixesApostrophe(\" Example 2\") == \"_Example_2\"\n  fixesApostrophe(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesApostrophe = (text) => {\n  return text.replace(/\\'/g, \" \").replace(/ +/g, \" \");\n}\n\n/*\n  Given a string text, replace all commas with spaces, \n  and if a string has more than 2 consecutive commas, \n  then replace all consecutive commas with - \n  \n  fixesComma(\"Example\") == \"Example\"\n  fixesComma(\"Example 1\") == \"Example_1\"\n  fixesComma(\" Example 2\") == \"_Example_2\"\n  fixesComma(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesComma = (text) => {\n  return text.replace(/,/g, \" \").replace(/ +/g, \" \");\n}\n\n/*\n  Given a string text, replace all periods with spaces, \n  and if a string has more than 2 consecutive periods, \n  then replace all consecutive periods with - \n  \n  fixesPeriod(\"Example\") == \"Example\"\n  fixesPeriod(\"Example 1\") == \"Example_1\"\n  fixesPeriod(\" Example 2\") == \"_Example_2\"\n  fixesPeriod(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesPeriod = (text) => {\n  return text.replace(/\\./g, \" \").replace(/ +/g, \" \");\n}\n\n/*\n  Given a string text, replace all quotes with spaces, \n  and if a string has more than 2 consecutive quotes, \n  then replace all consecutive quotes with - \n  \n  fixesQuote(\"Example\") == \"Example\"\n  fixesQuote(\"Example 1\") == \"Example_1\"\n  fixesQuote(\" Example 2\") == \"_Example_2\"\n  fixesQuote(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesQuote = (text) => {\n  return text.replace(/\"/g, \" \").replace(/ +/g, \" \");\n}\n\n/*\n  Given a string text, replace all apostrophes with spaces, \n  and if a string has more than 2 consecutive apostrophes, \n  then replace all consecutive apostrophes with - \n  \n  fixesApostrophe(\"Example\") == \"Example\"\n  fixesApostrophe(\"Example 1\") == \"Example_1\"\n  fixesApostrophe(\" Example 2\") == \"_Example_2\"\n  fixesApostrophe(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesApostrophe = (text) => {\n  return text.replace(/\\'/g, \" \").replace(/ +/g, \" \");\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixesUnderscore(\"Example\") == \"Example\"\n  fixesUnderscore(\"Example 1\") == \"Example_1\"\n  fixesUnderscore(\" Example 2\") == \"_Example_2\"\n  fixesUnderscore(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesUnderscore = (text) => {\n  return text.replace(/_/g, \" \").replace(/ +/g, \" \");\n}\n\n/*\n  Given a string text, replace all dashes with spaces, \n  and if a string has more than 2 consecutive dashes, \n  then replace all consecutive dashes with - \n  \n  fixesDash(\"Example\") == \"Example\"\n  fixesDash(\"Example 1\") == \"Example_1\"\n  fixesDash(\" Example 2\") == \"_Example_2\"\n  fixesDash(\" Example   3\") == \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filesNamesCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n  const file_name_without_extension = file_name.split(\".\")[0];\n  const file_name_without_dot_extension = file_name.split(\".\")[1];\n  const file_name_without_dot_dot_extension = file_name.split(\".\")[2];\n  const file_name_without_dot_dot_dot_extension = file_name.split(\".\")[3];\n  const file_name_without_dot_dot_dot_extension = file_name.split(\".\")[4];\n  const file_name_without_dot_dot_dot_dot_extension = file_name.split(\".\")[5];\n  const file_name_without_dot_dot_dot_dot_extension = file_name.split(\".\")[6];\n  const file_name_without_dot_dot_dot_dot_extension = file_name.split(\".\")[7];\n  const file_name_without_dot_dot_dot_dot_extension = file_name.split(\".\")[8];\n  const file_name_without_dot_dot_dot_dot_extension = file_name.split(\".\")[9];\n  const file_name_without_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[10];\n  const file_name_without_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[11];\n  const file_name_without_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[12];\n  const file_name_without_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[13];\n  const file_name_without_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[14];\n  const file_name_without_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[15];\n  const file_name_without_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[16];\n  const file_name_without_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[17];\n  const file_name_without_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[18];\n  const file_name_without_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[19];\n  const file_name_without_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[20];\n  const file_name_without_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[21];\n  const file_name_without_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[22];\n  const file_name_without_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[23];\n  const file_name_without_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[24];\n  const file_name_without_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[25];\n  const file_name_without_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[26];\n  const file_name_without_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[27];\n  const file_name_without_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[28];\n  const file_name_without_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[29];\n  const file_name_without_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[30];\n  const file_name_without_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[31];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[32];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[33];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[34];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[35];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[36];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[37];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[38];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[39];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[40];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[41];\n  const file_name_without_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[42];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[43];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[44];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[45];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[46];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[47];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[48];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[49];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[50];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[51];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[52];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[53];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[54];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[55];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[56];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[57];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[58];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[59];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[60];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[61];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[62];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[63];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[64];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[65];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[66];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[67];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[68];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[69];\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_extension = file_name.split(\".\")[70];\n  const file_name_without_dot_dot_dot_dot_dot_dot_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquareAndCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquareAndCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquareAndCubesAndSquaresAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquareAndCubesAndSquaresAndSquaresAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquareAndCubesAndSquaresAndSquaresAndSquaresAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordInSentences", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  let wordLength = 0;\n  let newWord = \"\";\n  let newWordLength = 0;\n  let newWordIndex = 0;\n  let newWordIndex2 = 0;\n  let newWordIndex3 = 0;\n  let newWordIndex4 = 0;\n  let newWordIndex5 = 0;\n  let newWordIndex6 = 0;\n  let newWordIndex7 = 0;\n  let newWordIndex8 = 0;\n  let newWordIndex9 = 0;\n  let newWordIndex10 = 0;\n  let newWordIndex11 = 0;\n  let newWordIndex12 = 0;\n  let newWordIndex13 = 0;\n  let newWordIndex14 = 0;\n  let newWordIndex15 = 0;\n  let newWordIndex16 = 0;\n  let newWordIndex17 = 0;\n  let newWordIndex18 = 0;\n  let newWordIndex19 = 0;\n  let newWordIndex20 = 0;\n  let newWordIndex21 = 0;\n  let newWordIndex22 = 0;\n  let newWordIndex23 = 0;\n  let newWordIndex24 = 0;\n  let newWordIndex25 = 0;\n  let newWordIndex26 = 0;\n  let newWordIndex27 = 0;\n  let newWordIndex28 = 0;\n  let newWordIndex29 = 0;\n  let newWordIndex30 = 0;\n  let newWordIndex31 = 0;\n  let newWordIndex32 = 0;\n  let newWordIndex33 = 0;\n  let newWordIndex34 = 0;\n  let newWordIndex35 = 0;\n  let newWordIndex36 = 0;\n  let newWordIndex37 = 0;\n  let newWordIndex38 = 0;\n  let newWordIndex39 = 0;\n  let newWordIndex40 = 0;\n  let newWordIndex41 = 0;\n  let newWordIndex42 = 0;\n  let newWordIndex43 = 0;\n  let newWordIndex44 = 0;\n  let newWordIndex45 = 0;\n  let newWordIndex46 = 0;\n  let newWordIndex47 = 0;\n  let newWordIndex48 = 0;\n  let newWordIndex49 = 0;\n  let newWordIndex50 = 0;\n  let newWordIndex51 = 0;\n  let newWordIndex52 = 0;\n  let newWordIndex53 = 0;\n  let newWordIndex54 = 0;\n  let newWordIndex55 = 0;\n  let newWordIndex56 = 0;\n  let newWordIndex57 = 0;\n  let newWordIndex58 = 0;\n  let newWordIndex59 = 0;\n  let newWordIndex60 = 0;\n  let newWordIndex61 = 0;\n  let newWordIndex62 = 0;\n  let newWordIndex63 = 0;\n  let newWordIndex64 = 0;\n  let newWordIndex65 = 0;\n  let newWordIndex66 = 0;\n  let newWordIndex67 = 0;\n  let newWordIndex68 = 0;\n  let newWordIndex69 = 0;\n  let newWordIndex70 = 0;\n  let newWordIndex71 = 0;\n  let newWordIndex72 = 0;\n  let newWordIndex73 = 0;\n  let newWordIndex74 = 0;\n  let newWordIndex75 = 0;\n  let newWordIndex76 = 0;\n  let newWordIndex77 = 0;\n  let newWordIndex78 = 0;\n  let newWordIndex79 = 0;\n  let newWordIndex80 = 0;\n  let newWordIndex81 = 0;\n  let newWordIndex82 = 0;\n  let newWordIndex83 = 0;\n  let newWordIndex84 = 0;\n  let newWordIndex85 = 0;\n  let newWordIndex86 = 0;\n  let newWordIndex87 = 0;\n  let newWordIndex88 = 0;\n  let newWordIndex89 = 0;\n  let newWordIndex90 = 0;\n  let newWordIndex91 = 0;\n  let newWordIndex92 = 0;\n  let newWordIndex93 = 0;\n  let newWordIndex94 = 0;\n  let newWordIndex95 = 0;\n  let newWordIndex96 = 0;\n  let newWordIndex97 = 0;\n  let newWordIndex98 = 0;\n  let newWordIndex99 = 0;\n  let newWordIndex100 = 0;\n  let newWordIndex101 = 0;\n  let newWordIndex102 = 0;\n  let newWordIndex103 = 0;\n  let newWordIndex104 = 0;\n  let newWordIndex105 = 0;\n  let newWordIndex106 = 0;\n  let newWordIndex107 = 0;\n  let newWordIndex108 = 0;\n  let newWordIndex109 = 0;\n  let newWordIndex110 = 0;\n  let newWordIndex111 = 0;\n  let newWordIndex112 = 0;\n  let newWordIndex113 = 0;\n  let newWordIndex114 = 0;\n  let newWordIndex115 = 0;\n  let newWordIndex116 = 0;\n  let newWordIndex117 = 0;\n  let newWordIndex118 = 0;\n  let newWordIndex119 = 0;\n  let newWordIndex120 = 0;\n  let newWordIndex121 = 0;\n  let newWordIndex122 = 0;\n  let newWordIndex123 = 0;\n  let newWordIndex124 = 0;\n  let newWordIndex125 = 0;\n  let newWordIndex126 = 0;\n  let newWordIndex127 = 0;\n  let newWordIndex128 = 0;\n  let newWordIndex129 = 0;\n  let newWordIndex130 = 0;\n  let newWordIndex131 = 0;\n  let newWordIndex132 = 0;\n  let newWordIndex133 = 0;\n  let newWordIndex134 = 0;\n  let newWordIndex135 = 0;\n  let newWordIndex136 = 0;\n  let newWordIndex137 = 0;\n  let newWordIndex138 = 0;\n  let newWordIndex139 = 0;\n  let newWordIndex140 = 0;\n  let newWordIndex141 = 0;\n  let newWordIndex142 = 0;\n  let newWordIndex143 = 0;\n  let newWordIndex144 = 0;\n  let newWordIndex145 = 0;\n  let newWordIndex146 = 0;\n  let newWordIndex147 = 0;\n  let newWordIndex148 = 0;\n  let newWordIndex149 = 0;\n  let newWordIndex150 = 0;\n  let newWordIndex151 = 0;\n  let newWordIndex152 = 0;\n  let newWordIndex153 = 0;\n  let newWordIndex154 = 0;\n  let newWordIndex155 = 0;\n  let newWordIndex156 = 0;\n  let newWordIndex157 = 0;\n  let newWordIndex158 = 0;\n  let newWordIndex159 = 0;\n  let newWordIndex160 = 0;\n  let newWordIndex161 = 0;\n  let newWordIndex162 = 0;\n  let newWordIndex163 = 0;\n  let newWordIndex164 = 0;\n  let newWordIndex165 = 0;\n  let newWordIndex166 = 0;\n  let newWordIndex167 = 0;\n  let newWordIndex168 = 0;\n  let newWordIndex169 = 0;\n  let newWordIndex170 = 0;\n  let newWordIndex171 = 0;\n  let newWordIndex172 = 0;\n  let newWordIndex173 = 0;\n  let newWordIndex174 = 0;\n  let newWordIndex175 = 0;\n  let newWordIndex176 = 0;\n  let newWordIndex177 = 0;\n  let newWordIndex178 = 0;\n  let newWordIndex179 = 0;\n  let newWordIndex180 = 0;\n  let newWordIndex181 = 0;\n  let newWordIndex182 = 0;\n  let newWordIndex183 = 0;\n  let newWordIndex184 = 0;\n  let newWordIndex185 = 0;\n  let newWordIndex186 = 0;\n  let newWordIndex187 = 0;\n  let newWordIndex188 = 0;\n  let newWordIndex189 = 0;\n  let newWordIndex190 = 0;\n  let newWordIndex191 = 0;\n  let newWordIndex192 = 0;\n  let newWordIndex193 = 0;\n  let newWordIndex194 = 0;\n  let newWordIndex195 = 0;\n  let newWordIndex196 = 0;\n  let newWordIndex197 = 0;\n  let newWordIndex198", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split('/')\n  const numeratorNum = Number(numerator)\n  const denominatorNum = Number(denominator)\n  if (denominatorNum === 0) return true\n  if (denominatorNum === 1) return numeratorNum === 1\n  if (denominatorNum === 2) return numeratorNum === 2\n  if (denominatorNum === 3) return numeratorNum === 3\n  if (denominatorNum === 4) return numeratorNum === 4\n  if (denominatorNum === 5) return numeratorNum === 5\n  if (denominatorNum === 6) return numeratorNum === 6\n  if (denominatorNum === 7) return numeratorNum === 7\n  if (denominatorNum === 8) return numeratorNum === 8\n  if (denominatorNum === 9) return numeratorNum === 9\n  if (denominatorNum === 10) return numeratorNum === 10\n  if (denominatorNum === 11) return numeratorNum === 11\n  if (denominatorNum === 12) return numeratorNum === 12\n  if (denominatorNum === 13) return numeratorNum === 13\n  if (denominatorNum === 14) return numeratorNum === 14\n  if (denominatorNum === 15) return numeratorNum === 15\n  if (denominatorNum === 16) return numeratorNum === 16\n  if (denominatorNum === 17) return numeratorNum === 17\n  if (denominatorNum === 18) return numeratorNum === 18\n  if (denominatorNum === 19) return numeratorNum === 19\n  if (denominatorNum === 20) return numeratorNum === 20\n  if (denominatorNum === 21) return numeratorNum === 21\n  if (denominatorNum === 22) return numeratorNum === 22\n  if (denominatorNum === 23) return numeratorNum === 23\n  if (denominatorNum === 24) return numeratorNum === 24\n  if (denominatorNum === 25) return numeratorNum === 25\n  if (denominatorNum === 26) return numeratorNum === 26\n  if (denominatorNum === 27) return numeratorNum === 27\n  if (denominatorNum === 28) return numeratorNum === 28\n  if (denominatorNum === 29) return numeratorNum === 29\n  if (denominatorNum === 30) return numeratorNum === 30\n  if (denominatorNum === 31) return numeratorNum === 31\n  if (denominatorNum === 32) return numeratorNum === 32\n  if (denominatorNum === 33) return numeratorNum === 33\n  if (denominatorNum === 34) return numeratorNum === 34\n  if (denominatorNum === 35) return numeratorNum === 35\n  if (denominatorNum === 36) return numeratorNum === 36\n  if (denominatorNum === 37) return numeratorNum === 37\n  if (denominatorNum === 38) return numeratorNum === 38\n  if (denominatorNum === 39) return numeratorNum === 39\n  if (denominatorNum === 40) return numeratorNum === 40\n  if (denominatorNum === 41) return numeratorNum === 41\n  if (denominatorNum === 42) return numeratorNum === 42\n  if (denominatorNum === 43) return numeratorNum === 43\n  if (denominatorNum === 44) return numeratorNum === 44\n  if (denominatorNum === 45) return numeratorNum === 45\n  if (denominatorNum === 46) return numeratorNum === 46\n  if (denominatorNum === 47) return numeratorNum === 47\n  if (denominatorNum === 48) return numeratorNum === 48\n  if (denominatorNum === 49) return numeratorNum === 49\n  if (denominatorNum === 50) return numeratorNum === 50\n  if (denominatorNum === 51) return numeratorNum === 51\n  if (denominatorNum === 52) return numeratorNum === 52\n  if (denominatorNum === 53) return numeratorNum === 53\n  if (denominatorNum === 54) return numeratorNum === 54\n  if (denominatorNum === 55) return numeratorNum === 55\n  if (denominatorNum === 56) return numeratorNum === 56\n  if (denominatorNum === 57) return numeratorNum === 57\n  if (denominatorNum === 58) return numeratorNum === 58\n  if (denominatorNum === 59) return numeratorNum === 59\n  if (denominatorNum === 60) return numeratorNum === 60\n  if (denominatorNum === 61) return numeratorNum === 61\n  if (denominatorNum === 62) return numeratorNum === 62\n  if (denominatorNum === 63) return numeratorNum === 63\n  if (denominatorNum === 64) return numeratorNum === 64\n  if (denominatorNum === 65) return numeratorNum === 65\n  if (denominatorNum === 66) return numeratorNum === 66\n  if (denominatorNum === 67) return numeratorNum === 67\n  if (denominatorNum === 68) return numeratorNum === 68\n  if (denominatorNum === 69) return numeratorNum === 69\n  if (denominatorNum === 70) return numeratorNum === 70\n  if (denominatorNum === 71) return numeratorNum === 71\n  if (denominatorNum === 72) return numeratorNum === 72\n  if (denominatorNum === 73) return numeratorNum === 73\n  if (denominatorNum === 74) return numeratorNum === 74\n  if (denominatorNum === 75) return numeratorNum === 75\n  if (denominatorNum === 76) return numeratorNum === 76\n  if (denominatorNum === 77) return numeratorNum === 77\n  if (denominatorNum === 78) return numeratorNum === 78\n  if (denominatorNum === 79) return numeratorNum === 79\n  if (denominatorNum === 80) return numeratorNum === 80\n  if (denominatorNum === 81) return numeratorNum === 81\n  if (denominatorNum === 82) return numeratorNum === 82\n  if (denominatorNum === 83) return numeratorNum === 83\n  if (denominatorNum === 84) return numeratorNum === 84\n  if (denominatorNum === 85) return numeratorNum === 85\n  if (denominatorNum === 86) return numeratorNum === 86\n  if (denominatorNum === 87) return numeratorNum === 87\n  if (denominatorNum === 88) return numeratorNum === 88\n  if (denominatorNum === 89) return numeratorNum === 89\n  if (denominatorNum === 90) return numeratorNum === 90\n  if (denominatorNum === 91) return numeratorNum === 91\n  if (denominatorNum === 92) return numeratorNum === 92\n  if (denominatorNum === 93) return numeratorNum === 93\n  if (denominatorNum === 94) return numeratorNum === 94\n  if (denominatorNum === 95) return numeratorNum === 95\n  if (denominatorNum === 96) return numeratorNum === 96\n  if (denominatorNum === 97) return numeratorNum === 97\n  if (denominatorNum === 98) return numeratorNum === 98\n  if (denominatorNum === 99) return numeratorNum === 99\n  if (denominatorNum === 100) return numeratorNum === 100\n  if (denominatorNum === 101) return numeratorNum === 101\n  if (denominatorNum === 102) return numeratorNum === 102\n  if (denominatorNum === 103) return numeratorNum === 103\n  if (denominatorNum === 104) return numeratorNum === 104\n  if (denominatorNum === 105) return numeratorNum === 105\n  if (denominatorNum === 106) return numeratorNum === 106\n  if (denominatorNum === 107) return numeratorNum === 107\n  if (denominatorNum === 108) return numeratorNum === 108\n  if (denominatorNum === 109) return numeratorNum === 109\n  if (denominatorNum === 110) return numeratorNum === 110\n  if (denominatorNum === 111) return numeratorNum === 111\n  if (denominatorNum === 112) return numeratorNum === 112\n  if (denominatorNum === 113) return numeratorNum === 113\n  if (denominatorNum === 114) return numeratorNum === 114\n  if (denominatorNum === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoint", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc[num] = acc[num] || 0;\n    acc[num] += 1;\n    return acc;\n  }, {});\n  const sorted = Object.keys(sums).sort((a, b) => sums[b] - sums[a]);\n  return sorted.map(num => nums[num]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([-1, -11, -12, 11]) == [-11, -11, -11, -11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc[num] = acc[num] || 0;\n    acc[num] += 1;\n    return acc;\n  }, {});\n  const sorted = Object.keys(sums).sort((a, b) => sums[b] - sums[a]);\n  return sorted.map(num => nums[num]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDesc([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc[num] = acc[num] || 0;\n    acc[num] += 1;\n    return acc;\n  }, {});\n  const sorted = Object.keys(sums).sort((a, b) => sums[b] - sums[a]);\n  return sorted.map(num => nums[num]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDesc([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc[num] = acc[num] || 0;\n    acc[num] += 1;\n    return acc;\n  }, {});\n  const sorted = Object.keys(sums).sort((a, b) => sums[b] - sums[a]);\n  return sorted.map(num => nums[num]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDesc([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc[num] = acc[num] || 0;\n    acc[num] += 1;\n    return acc;\n  }, {});\n  const sorted = Object.keys(sums).sort((a, b) => sums[b] - sums[a]);\n  return sorted.map(num => nums[num]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDesc([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc[num] = acc[num] || 0;\n    acc[num] += 1;\n    return acc;\n  }, {});\n  const sorted = Object.keys(sums).sort((a, b) => sums[b] - sums[a]);\n  return sorted.map(num => nums[num]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDesc([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc[num] = acc[num] || 0;\n    acc[num] += 1;\n    return acc;\n  }, {});\n  const sorted = Object.keys(sums).sort((a, b) => sums[b] - sums[a]);\n  return sorted.map(num => nums[num]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDesc([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc[num] = acc[num] || 0;\n    acc[num] += 1;\n    return acc;\n  }, {});\n  const sorted = Object.keys(sums).sort((a, b) => sums[b] - sums[a]);\n  return sorted.map(num => nums[num]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDesc([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc[num] = acc[num] || 0;\n    acc[num] += 1;\n    return acc;\n  }, {});\n  const sorted = Object.keys(sums).sort((a, b) => sums[b] - sums[a]);\n  return sorted.map(num => nums[num]);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterEvenOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenOddOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenOddEvenOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenOddEvenOddOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenOddEvenOddEvenOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenOddEvenOddEvenOddOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "gottenMaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples2 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples3 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples4 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples5 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples6 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples7 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples8 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples9 = (n) => {\n  const a = [...Array(n - 1)].map((_, i) => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1OrbitDistance = planet1Orbit.distance;\n  const planet2OrbitDistance = planet2Orbit.distance;\n  const planet1OrbitOrbits = planet1Orbit.orbits;\n  const planet2OrbitOrbits = planet2Orbit.orbits;\n  const planet1OrbitOrbitDistances = planet1OrbitOrbits.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbits.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.filter(\n    distance => distance <= planet1OrbitDistance\n  );\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.filter(\n    distance => distance <= planet2OrbitDistance\n  );\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOrbitDistances = planet1OrbitOrbitDistances.map(orbitDistance);\n  const planet2OrbitOrbitDistances = planet2OrbitOrbitDistances.map(orbitDistance);\n  const planet1OrbitOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortListsSums", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return lst.sort((a, b) => a - b).map(s => s.substr(0, sum));\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsLengths = (lst) => {\n  let length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    length += lst[i].length;\n  }\n  return lst.sort((a, b) => a - b).map(s => s.substr(0, length));\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsWords = (lst) => {\n  let words = [];\n  for (let i = 0; i < lst.length; i++) {\n    words.push(lst[i].toLowerCase());\n  }\n  return lst.sort((a, b) => a.length - b.length).map(s => s.toLowerCase());\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsWordsLengths = (lst) => {\n  let words = [];\n  for (let i = 0; i < lst.length; i++) {\n    words.push(lst[i].toLowerCase());\n  }\n  return lst.sort((a, b) => a.length - b.length).map(s => s.toLowerCase());\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsWordsWords = (lst) => {\n  let words = [];\n  for (let i = 0; i < lst.length; i++) {\n    words.push(lst[i].toLowerCase());\n  }\n  return lst.sort((a, b) => a.length - b.length).map(s => s.toLowerCase());\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsWordsWordsLengths = (lst) => {\n  let words = [];\n  for (let i = 0; i < lst.length; i++) {\n    words.push(lst[i].toLowerCase());\n  }\n  return lst.sort((a, b) => a.length - b.length).map(s => s.toLowerCase());\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsWordsWordsWords = (lst) => {\n  let words = [];\n  for (let i = 0; i < lst.length; i++) {\n    words.push(lst[i].toLowerCase());\n  }\n  return lst.sort((a, b) => a.length - b.length).map(s => s.toLowerCase());\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequences", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequence = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequences = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequence = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequences = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequence = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequences = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequence = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequences = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequence = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequences = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequence = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequences = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequence = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequences = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequence = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n */\nconst stringSequences = (n) => {\n  if (n < 0 || n >= stringSequences.length) return '';\n  return stringSequences[n];\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of element", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by three. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by five. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by nine. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 9 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by ten. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by eleven. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by twelve. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 12 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by thirteen. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 13 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by fourteen. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 14 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by fifteen. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 15 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by sixteen. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [gameScore, gameGuesses] = game;\n  const [guessScore, guessGuesses] = guess;\n  const [gameScoreDiff, gameGuessesDiff] = gameScore - gameGuess;\n  const [guessScoreDiff, guessGuessesDiff] = guessScore - guessGuess;\n  const [gameScoreDiffAbs, gameGuessesDiffAbs] = Math.abs(gameScoreDiff);\n  const [guessScoreDiffAbs, guessGuessesDiffAbs] = Math.abs(guessScoreDiff);\n  const [gameScoreDiffAbsAbs, gameGuessesDiffAbsAbs] = Math.abs(gameScoreDiffAbs);\n  const [guessScoreDiffAbsAbs, guessGuessesDiffAbsAbs] = Math.abs(guessScoreDiffAbs);\n  const [gameScoreDiffAbsAbsAbsAbs, gameGuessesDiffAbsAbsAbs] = Math.abs(gameScoreDiffAbsAbs);\n  const [guessScoreDiffAbsAbsAbsAbsAbs, guessGuessesDiffAbsAbsAbs] = Math.abs(guessScoreDiffAbsAbsAbsAbs);\n  const [gameScoreDiffAbsAbsAbsAbsAbsAbsAbs, gameGuessesDiffAbsAbsAbsAbs] = Math.abs(gameScoreDiffAbsAbsAbsAbsAbs);\n  const [guessScoreDiffAbsAbsAbsAbsAbsAbsAbsAbsAbs, guessGuessesDiffAbsAbsAbsAbsAbs] = Math.abs(guessScoreDiffAbsAbsAbsAbsAbsAbs);\n  const [gameScoreDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs, gameGuessesDiffAbsAbsAbsAbsAbsAbsAbs] = Math.abs(gameScoreDiffAbsAbsAbsAbsAbsAbsAbs);\n  const [guessScoreDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs, guessGuessesDiffAbsAbsAbsAbsAbsAbsAbsAbs] = Math.abs(guessScoreDiffAbsAbsAbsAbsAbsAbsAbsAbs);\n  const [gameScoreDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs, gameGuessesDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs];\n  const [guessScoreDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAb", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongestExtension = class_name;\n  let strongestExtensionName = class_name;\n  let extensionNames = extensions.map(extension => extension.substr(0, extension.length - 1));\n  let extensionNamesLength = extensionNames.length;\n  let extensionNamesIndex = 0;\n  while (extensionNamesIndex < extensionNamesLength) {\n    let extensionName = extensionNames[extensionNamesIndex];\n    let extensionClassName = class_name + extensionName;\n    let extensionClassNameLength = extensionClassName.length;\n    let extensionClassNameIndex = 0;\n    while (extensionClassNameIndex < extensionClassNameLength) {\n      let extensionClassName = extensionClassName + extensionClassName[extensionClassNameIndex];\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameIndex = 0;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let extensionClassNameLength = extensionClassName.length;\n      let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let pattern = a.split('')\n  let rotation = b.split('')\n  let patternLength = pattern.length\n  let rotationLength = rotation.length\n  let patternIndex = 0\n  let rotationIndex = 0\n  let patternFound = false\n  let rotationFound = false\n  let patternFoundInRotation = false\n  let rotationFoundInPattern = false\n  while (rotationIndex < rotationLength) {\n    if (rotation[rotationIndex] === pattern[patternIndex]) {\n      patternFound = true\n      patternFoundInRotation = true\n      patternIndex++\n      rotationIndex++\n    } else {\n      patternFound = false\n      patternFoundInRotation = false\n      patternIndex++\n      rotationIndex++\n    }\n  }\n  while (rotationIndex < patternLength) {\n    if (pattern[rotationIndex] === pattern[patternIndex]) {\n      rotationFound = true\n      rotationFoundInPattern = true\n      rotationIndex++\n    } else {\n      rotationFound = false\n      rotationFoundInPattern = false\n      rotationIndex++\n    }\n  }\n  return patternFound && rotationFound\n}\n\n/*\n  You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let pattern = a.split('')\n  let rotation = b.split('')\n  let patternLength = pattern.length\n  let rotationLength = rotation.length\n  let patternIndex = 0\n  let rotationIndex = 0\n  let patternFound = false\n  let rotationFound = false\n  let patternFoundInRotation = false\n  let rotationFoundInPattern = false\n  let patternFoundInRotation = false\n  while (rotationIndex < rotationLength) {\n    if (rotation[rotationIndex] === pattern[patternIndex]) {\n      patternFound = true\n      patternFoundInRotation = true\n      patternIndex++\n      rotationIndex++\n    } else {\n      patternFound = false\n      patternFoundInRotation = false\n      patternIndex++\n      rotationIndex++\n    }\n  }\n  while (rotationIndex < patternLength) {\n    if (pattern[rotationIndex] === pattern[patternIndex]) {\n      rotationFound = true\n      rotationFoundInPattern = true\n      rotationIndex++\n    } else {\n      rotationFound = false\n      rotationFoundInPattern = false\n      rotationIndex++\n    }\n  }\n  return patternFound && rotationFound\n}\n\n/*\n  You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let pattern = a.split('')\n  let rotation = b.split('')\n  let patternLength = pattern.length\n  let rotationLength = rotation.length\n  let patternIndex = 0\n  let rotationIndex = 0\n  let patternFound = false\n  let rotationFound = false\n  let patternFoundInRotation = false\n  let rotationFoundInPattern = false\n  let patternFoundInRotation = false\n  while (rotationIndex < rotationLength) {\n    if (rotation[rotationIndex] === pattern[patternIndex]) {\n      patternFound = true\n      patternFoundInRotation = true\n      patternIndex++\n      rotationIndex++\n    } else {\n      patternFound = false\n      patternFoundInRotation = false\n      patternIndex++\n      rotationIndex++\n    }\n  }\n  while (rotationIndex < patternLength) {\n    if (pattern[rotationIndex] === pattern[patternIndex]) {\n      rotationFound = true\n      rotationFoundInPattern = true\n      rotationIndex++\n    } else {\n      rotationFound = false\n      rotationFoundInPattern = false\n      rotationIndex++\n    }\n  }\n  return patternFound && rotationFound\n}\n\n/*\n  You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let pattern = a.split('')\n  let rotation = b.split('')\n  let patternLength = pattern.length\n  let rotationLength = rotation.length\n  let patternIndex = 0\n  let rotationIndex = 0\n  let patternFound = false\n  let rotationFound = false\n  let patternFoundInRotation = false\n  let rotationFoundInPattern = false\n  let patternFoundInRotation = false\n  while (rotationIndex < rotationLength) {\n    if (rotation[rotationIndex] === pattern[patternIndex]) {\n      patternFound = true\n      patternFoundInRotation = true\n      patternIndex++\n      rotationIndex++\n    } else {\n      patternFound = false\n      patternFoundInRotation = false\n      patternIndex++\n      rotationIndex++\n    }\n  }\n  while (rotationIndex < patternLength) {\n    if (pattern[rotationIndex] === pattern[patternIndex]) {\n      rotationFound = true\n      rotationFoundInPattern = true\n      rotationIndex++\n    } else {\n      rotationFound = false\n      rotationFoundInPattern = false\n      rotationIndex++\n    }\n  }\n  return patternFound && rotationFound\n}\n\n/*\n  You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let pattern = a.split('')\n  let rotation = b.split('')\n  let patternLength = pattern.length\n  let rotationLength = rotation.length\n  let patternIndex = 0\n  let rotationIndex = 0\n  let patternFound = false\n  let rotationFound = false\n  let patternFoundInRotation = false\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOdderCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while(num > 0) {\n    if(num % 2 === 0) {\n      evenCount++;\n      num = (num / 2);\n    } else {\n      oddCount++;\n      num = (num / 2);\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return an array that has the first and last character of the string respectively.\n\n   Example:\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = (number + '');\n  const numArr = num.split('');\n  const numStr = '';\n  for (let i = 0; i < numArr.length; i++) {\n    numStr += numArr[i] + '';\n  }\n  return numStr.toLowerCase();\n};\n\n/*\n  Given a positive integer, return its decimal equivalent as a string,\n  and if negative, its negative equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToDecimal(19) == 19\n  >>> intToDecimal(152) == -150\n  >>> intToDecimal(426) == -42\n  */\nconst intToDecimal = (number) => {\n  const num = (number + '');\n  const numArr = num.split('');\n  const numStr = '';\n  for (let i = 0; i < numArr.length; i++) {\n    numStr += numArr[i] + '';\n  }\n  return numStr;\n};\n\n/*\n  Given a positive integer, return its hexadecimal equivalent as a string,\n  and if negative, its negative equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToHex(19) == '0x19'\n  >>> intToHex(152) == '0x152'\n  >>> intToHex(426) == '0x426'\n  */\nconst intToHex = (number) => {\n  const num = (number + '');\n  const numArr = num.split('');\n  const numStr = '';\n  for (let i = 0; i < numArr.length; i++) {\n    numStr += numArr[i] + '';\n  }\n  return numStr;\n};\n\n/*\n  Given a positive integer, return its octal equivalent as a string,\n  and if negative, its negative equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToOctal(19) == '0o19'\n  >>> intToOctal(152) == '0o152'\n  >>> intToOctal(426) == '0o426'\n  */\nconst intToOctal = (number) => {\n  const num = (number + '');\n  const numArr = num.split('');\n  const numStr = '';\n  for (let i = 0; i < numArr.length; i++) {\n    numStr += numArr[i] + '';\n  }\n  return numStr;\n};\n\n/*\n  Given a positive integer, return its binary equivalent as a string,\n  and if negative, its negative equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinary(19) == '0b19'\n  >>> intToBinary(152) == '0b152'\n  >>> intToBinary(426) == '0b426'\n  */\nconst intToBinary = (number) => {\n  const num = (number + '');\n  const numArr = num.split('');\n  const numStr = '';\n  for (let i = 0; i < numArr.length; i++) {\n    numStr += numArr[i] + '';\n  }\n  return numStr;\n};\n\n/*\n  Given a positive integer, return its hexadecimal equivalent as a string,\n  and if negative, its negative equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToHex(19) == '0x19'\n  >>> intToHex(152) == '0x152'\n  >>> intToHex(426) == '0x426'\n  */\nconst intToHexadecimal = (number) => {\n  const num = (number + '');\n  const numArr = num.split('');\n  const numStr = '';\n  for (let i = 0; i < numArr.length; i++) {\n    numStr += numArr[i] + '';\n  }\n  return numStr;\n};\n\n/*\n  Given a positive integer, return its octal equivalent as a string,\n  and if negative, its negative equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToOctal(19) == '0o19'\n  >>> intToOctal(152) == '0o152'\n  >>> intToOctal(426) == '0o426'\n  */\nconst intToOctaladecimal = (number) => {\n  const num = (number + '');\n  const numArr = num.split('');\n  const numStr = '';\n  for (let i = 0; i < numArr.length; i++) {\n    numStr += numArr[i] + '';\n  }\n  return numStr;\n};\n\n/*\n  Given a positive integer, return its binary equivalent as a string,\n  and if negative, its negative equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinary(19) == '0b19'\n  >>> intToBinary(152) == '0b152'\n  >>> intToBinary(426) == '0b426'\n  */\nconst intToBinaryadecimal = (number) => {\n  const num = (number + '');\n  const numArr = num.split('');\n  const numStr = '';\n  for (let i = 0; i < numArr.length; i++) {\n    numStr += numArr[i] + '';\n  }\n  return numStr;\n};\n\n/*\n  Given a positive integer, return its decimal equivalent as a string,\n  and if negative, its negative equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToDecimal(19) == 19\n  >>> intToDecimal(152) == -150\n  >>> intToDecimal(426) == -42\n  */\nconst intToDecimaladecimal = (number) => {\n  const num = (number + '');\n  const numArr = num.split('');\n  const numStr = '';\n  for (let i = 0; i < numArr.length; i++) {\n    numStr += numArr[i] + '';\n  }\n  return numStr;\n};\n\n/*\n  Given a positive integer, return its hexadecimal equivalent as a string,\n  and if negative, its negative equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToHex(19) == '0x19'\n  >>> intToHex(152) == '0x152'\n  >>> intToHex(426) == '0x426'\n  */\nconst intToHexadecimaladecimal = (number) => {\n  const num = (number + '');\n  const numArr = num.split('');\n  const numStr = '';\n  for (let i = 0; i < numArr.length; i++) {\n    numStr += numArr[i] + '';\n  }\n  return numStr;\n};\n\n/*\n  Given a positive integer, return its octal equivalent as a string,\n  and if negative, its negative equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToOctal(19) == '0o19'\n  >>> intToOctal(152) == '0o152'\n  >>> intToOctal(426) == '0o426'\n  */\nconst intToOctaladecimaladecimal = (number) => {\n  const num = (number + '');\n  const numArr = num.split('');\n  const numStr = '';\n  for (let i = 0; i < numArr.length; i++) {\n    numStr += numArr[i] + '';\n  }\n  return numStr;\n};\n\n/*\n  Given a positive integer, return its binary equivalent as a string,\n  and if negative, its negative equivalent as a string.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinary(19) == '0b19'\n  >>> intToBinary(152) == '0b152'\n  >>> intToBinary(426) == '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangles", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab - ac;\n  return abc === 0 || abc === 90 || abc === 180;\n};\n\n/*\n Given the lengths of the three sides of a rectangle. Return true if the three\n  sides form a right-angled rectangle, false otherwise.\n  A right-angled rectangle is a rectangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleRectangles(3, 4, 5) == true\n  rightAngleRectangles(1, 2, 3) == false\n  */\nconst rightAngleRectangles = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab - ac;\n  return abc === 0 || abc === 90 || abc === 180;\n};\n\n/*\n Given the lengths of the three sides of a circle. Return true if the three\n  sides form a right-angled circle, false otherwise.\n  A right-angled circle is a circle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleCircles(3, 4, 5) == true\n  rightAngleCircles(1, 2, 3) == false\n  */\nconst rightAngleCircles = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab - ac;\n  return abc === 0 || abc === 90 || abc === 180;\n};\n\n/*\n Given the lengths of the three sides of a square. Return true if the three\n  sides form a right-angled square, false otherwise.\n  A right-angled square is a square in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleSquares(3, 4, 5) == true\n  rightAngleSquares(1, 2, 3) == false\n  */\nconst rightAngleSquares = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab - ac;\n  return abc === 0 || abc === 90 || abc === 180;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Return true if the three\n  sides form a right-angled pentagon, false otherwise.\n  A right-angled pentagon is a pentagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAnglePentagons(3, 4, 5) == true\n  rightAnglePentagons(1, 2, 3) == false\n  */\nconst rightAnglePentagons = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab - ac;\n  return abc === 0 || abc === 90 || abc === 180;\n};\n\n/*\n Given the lengths of the three sides of a hexagon. Return true if the three\n  sides form a right-angled hexagon, false otherwise.\n  A right-angled hexagon is a hexagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleHexagons(3, 4, 5) == true\n  rightAngleHexagons(1, 2, 3) == false\n  */\nconst rightAngleHexagons = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab - ac;\n  return abc === 0 || abc === 90 || abc === 180;\n};\n\n/*\n Given the lengths of the three sides of a heptagon. Return true if the three\n  sides form a right-angled heptagon, false otherwise.\n  A right-angled heptagon is a heptagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleHeptagons(3, 4, 5) == true\n  rightAngleHeptagons(1, 2, 3) == false\n  */\nconst rightAngleHeptagons = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab - ac;\n  return abc === 0 || abc === 90 || abc === 180;\n};\n\n/*\n Given the lengths of the three sides of a octagon. Return true if the three\n  sides form a right-angled octagon, false otherwise.\n  A right-angled octagon is a octagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleOctagons(3, 4, 5) == true\n  rightAngleOctagons(1, 2, 3) == false\n  */\nconst rightAngleOctagons = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab - ac;\n  return abc === 0 || abc === 90 || abc === 180;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Return true if the three\n  sides form a right-angled decagon, false otherwise.\n  A right-angled decagon is a decagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleDecagons(3, 4, 5) == true\n  rightAngleDecagons(1, 2, 3) == false\n  */\nconst rightAngleDecagons = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab - ac;\n  return abc === 0 || abc === 90 || abc === 180;\n};\n\n/*\n Given the lengths of the three sides of a dodecagon. Return true if the three\n  sides form a right-angled dodecagon, false otherwise.\n  A right-angled dodecagon is a dodecagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleDodecagons(3, 4, 5) == true\n  rightAngleDodecagons(1, 2, 3) == false\n  */\nconst rightAngleDodecagons = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab - ac;\n  return abc === 0 || abc === 90 || abc === 180;\n};\n\n/*\n Given the lengths of the three sides of a quadigon. Return true if the three\n  sides form a right-angled quadigon, false otherwise.\n  A right-angled quadigon is a quadigon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleQuadigons(3, 4, 5) == true\n  rightAngleQuadigons(1, 2, 3) == false\n  */\nconst rightAngleQuadigons = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab - ac;\n  return abc === 0 || abc === 90 || abc === 180;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "foundMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxNum = 0;\n  let maxNumWord = \"\";\n  let maxNumWordNum = 0;\n  let maxNumWordNumWord = \"\";\n  let maxNumWordNumWordNum = 0;\n  let maxNumWordNumWordNumWord = \"\";\n  let maxNumWordNumWordNumWordNum = 0;\n  let maxNumWordNumWordNumWordNumWord = \"\";\n  let maxNumWordNumWordNumWordNumWordNum = 0;\n  let maxNumWordNumWordNumWordNumWordNumWord = \"\";\n  let maxNumWordNumWordNumWordNumWordNumWordNumWord = \"\";\n  let maxNumWordNumWordNumWordNumWordNumWordNumWordNumWord = \"\";\n  let maxNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWord = \"\";\n  let maxNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWord = \"\";\n  let maxNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWordNumWord", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const carrotLeft = number - carrots * need;\n  const carrotEaten = need - carrots * remaining;\n  const carrotRemaining = remaining - carrots * carrotLeft;\n  return [carrotEaten, carrotRemaining];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eatAll = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const carrotLeft = number - carrots * need;\n  const carrotEaten = need - carrots * remaining;\n  const carrotRemaining = remaining - carrots * carrotLeft;\n  return [carrotEaten, carrotRemaining];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eatAllWithEat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const carrotLeft = number - carrots * need;\n  const carrotEaten = need - carrots * remaining;\n  const carrotRemaining = remaining - carrots * carrotLeft;\n  return [carrotEaten, carrotRemaining];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eatAllWithEatAll = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const carrotLeft = number - carrots * need;\n  const carrotEaten = need - carrots * remaining;\n  const carrotRemaining = remaining - carrots * carrotLeft;\n  return [carrotEaten, carrotRemaining];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eatAllWithEatAllWithEat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistincterCharacter", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      continue;\n    }\n    if (char === 'a' || char === 'A') {\n      count++;\n    }\n    if (char === 'e' || char === 'E') {\n      count++;\n    }\n    if (char === 'i' || char === 'I') {\n      count++;\n    }\n    if (char === 'o' || char === 'O') {\n      count++;\n    }\n    if (char === 'u' || char === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find the most frequently occurring substring in that string\n * >>> mostFrequentSubstring('abcde')\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 2)\n  'bc'\n  >>> mostFrequentSubstring('abcde', 3)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 4)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 5)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 6)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 7)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 8)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 9)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 10)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 11)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 12)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 13)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 14)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 15)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 16)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 17)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 18)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 19)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 20)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 21)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 22)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 23)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 24)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 25)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 26)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 27)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 28)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 29)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 30)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 31)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 32)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 33)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 34)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 35)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 36)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 37)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 38)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 39)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 40)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 41)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 42)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 43)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 44)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 45)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 46)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 47)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 48)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 49)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 50)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 51)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 52)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 53)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 54)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 55)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 56)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 57)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 58)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 59)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 60)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 61)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 62)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 63)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 64)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 65)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 66)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 67)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 68)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 69)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 70)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 71)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 72)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 73)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 74)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 75)\n  'bcde'\n  >>> mostFrequentSubstring('abcde', 76)\n  'bcde'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split(',');\n  const result = operandList.reduce((acc, curr) => {\n    if (operatorList.includes(curr)) {\n      return acc + curr\n    } else {\n      return acc\n    }\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split(',');\n  const result = operandList.reduce((acc, curr) => {\n    if (operatorList.includes(curr)) {\n      return acc + curr\n    } else {\n      return acc\n    }\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split(',');\n  const result = operandList.reduce((acc, curr) => {\n    if (operatorList.includes(curr)) {\n      return acc + curr\n    } else {\n      return acc\n    }\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split(',');\n  const result = operandList.reduce((acc, curr) => {\n    if (operatorList.includes(curr)) {\n      return acc + curr\n    } else {\n      return acc\n    }\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split(',');\n  const result = operandList.reduce((acc, curr) => {\n    if (operatorList.includes(curr)) {\n      return acc + curr\n    } else {\n      return acc\n    }\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split(',');\n  const result = operandList.reduce((acc, curr) => {\n    if (operatorList.includes(curr)) {\n      return acc + curr\n    } else {\n      return acc\n    }\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = \"\";\n  let letter;\n  for (let i = 0; i < s.length; i++) {\n    letter = s[i];\n    if (letter === \"a\" || letter === \"A\") {\n      reversed = reversed.toUpperCase();\n    } else if (letter === \"b\" || letter === \"B\") {\n      reversed = reversed.toLowerCase();\n    } else if (letter === \"c\" || letter === \"C\") {\n      reversed = reversed.toUpperCase();\n    } else {\n      reversed = reversed.toLowerCase();\n    }\n  }\n  return reversed;\n};\n\n/*\n  Given a string s and an integer n, return true if and only if\n  the string contains at least n unique characters. \n  Example\n  uniqueChars(\"abcabc\", 3) = true\n  uniqueChars(\"abcabc\", 4) = false\n  uniqueChars(\"abcabc\", 5) = false\n  uniqueChars(\"abcabc\", 6) = false\n  uniqueChars(\"abcabc\", 7) = false\n  uniqueChars(\"abcabc\", 8) = false\n  uniqueChars(\"abcabc\", 9) = false\n  uniqueChars(\"abcabc\", 10) = false\n  uniqueChars(\"abcabc\", 11) = false\n  uniqueChars(\"abcabc\", 12) = false\n  uniqueChars(\"abcabc\", 13) = false\n  uniqueChars(\"abcabc\", 14) = false\n  uniqueChars(\"abcabc\", 15) = false\n  uniqueChars(\"abcabc\", 16) = false\n  uniqueChars(\"abcabc\", 17) = false\n  uniqueChars(\"abcabc\", 18) = false\n  uniqueChars(\"abcabc\", 19) = false\n  uniqueChars(\"abcabc\", 20) = false\n  uniqueChars(\"abcabc\", 21) = false\n  uniqueChars(\"abcabc\", 22) = false\n  uniqueChars(\"abcabc\", 23) = false\n  uniqueChars(\"abcabc\", 24) = false\n  uniqueChars(\"abcabc\", 25) = false\n  uniqueChars(\"abcabc\", 26) = false\n  uniqueChars(\"abcabc\", 27) = false\n  uniqueChars(\"abcabc\", 28) = false\n  uniqueChars(\"abcabc\", 29) = false\n  uniqueChars(\"abcabc\", 30) = false\n  uniqueChars(\"abcabc\", 31) = false\n  uniqueChars(\"abcabc\", 32) = false\n  uniqueChars(\"abcabc\", 33) = false\n  uniqueChars(\"abcabc\", 34) = false\n  uniqueChars(\"abcabc\", 35) = false\n  uniqueChars(\"abcabc\", 36) = false\n  uniqueChars(\"abcabc\", 37) = false\n  uniqueChars(\"abcabc\", 38) = false\n  uniqueChars(\"abcabc\", 39) = false\n  uniqueChars(\"abcabc\", 40) = false\n  uniqueChars(\"abcabc\", 41) = false\n  uniqueChars(\"abcabc\", 42) = false\n  uniqueChars(\"abcabc\", 43) = false\n  uniqueChars(\"abcabc\", 44) = false\n  uniqueChars(\"abcabc\", 45) = false\n  uniqueChars(\"abcabc\", 46) = false\n  uniqueChars(\"abcabc\", 47) = false\n  uniqueChars(\"abcabc\", 48) = false\n  uniqueChars(\"abcabc\", 49) = false\n  uniqueChars(\"abcabc\", 50) = false\n  uniqueChars(\"abcabc\", 51) = false\n  uniqueChars(\"abcabc\", 52) = false\n  uniqueChars(\"abcabc\", 53) = false\n  uniqueChars(\"abcabc\", 54) = false\n  uniqueChars(\"abcabc\", 55) = false\n  uniqueChars(\"abcabc\", 56) = false\n  uniqueChars(\"abcabc\", 57) = false\n  uniqueChars(\"abcabc\", 58) = false\n  uniqueChars(\"abcabc\", 59) = false\n  uniqueChars(\"abcabc\", 60) = false\n  uniqueChars(\"abcabc\", 61) = false\n  uniqueChars(\"abcabc\", 62) = false\n  uniqueChars(\"abcabc\", 63) = false\n  uniqueChars(\"abcabc\", 64) = false\n  uniqueChars(\"abcabc\", 65) = false\n  uniqueChars(\"abcabc\", 66) = false\n  uniqueChars(\"abcabc\", 67) = false\n  uniqueChars(\"abcabc\", 68) = false\n  uniqueChars(\"abcabc\", 69) = false\n  uniqueChars(\"abcabc\", 70) = false\n  uniqueChars(\"abcabc\", 71) = false\n  uniqueChars(\"abcabc\", 72) = false\n  uniqueChars(\"abcabc\", 73) = false\n  uniqueChars(\"abcabc\", 74) = false\n  uniqueChars(\"abcabc\", 75) = false\n  uniqueChars(\"abcabc\", 76) = false\n  uniqueChars(\"abcabc\", 77) = false\n  uniqueChars(\"abcabc\", 78) = false\n  uniqueChars(\"abcabc\", 79) = false\n  uniqueChars(\"abcabc\", 80) = false\n  uniqueChars(\"abcabc\", 81) = false\n  uniqueChars(\"abcabc\", 82) = false\n  uniqueChars(\"abcabc\", 83) = false\n  uniqueChars(\"abcabc\", 84) = false\n  uniqueChars(\"abcabc\", 85) = false\n  uniqueChars(\"abcabc\", 86) = false\n  uniqueChars(\"abcabc\", 87) = false\n  uniqueChars(\"abcabc\", 88) = false\n  uniqueChars(\"abcabc\", 89) = false\n  uniqueChars(\"abcabc\", 90) = false\n  uniqueChars(\"abcabc\", 91) = false\n  uniqueChars(\"abcabc\", 92) = false\n  uniqueChars(\"abcabc\", 93) = false\n  uniqueChars(\"abcabc\", 94) = false\n  uniqueChars(\"abcabc\", 95) = false\n  uniqueChars(\"abcabc\", 96) = false\n  uniqueChars(\"abcabc\", 97) = false\n  uniqueChars(\"abcabc\", 98) = false\n  uniqueChars(\"abcabc\", 99) = false\n  uniqueChars(\"abcabc\", 100) = false\n  uniqueChars(\"abcabc\", 101) = false\n  uniqueChars(\"abcabc\", 102) = false\n  uniqueChars(\"abcabc\", 103) = false\n  uniqueChars(\"abcabc\", 104) = false\n  uniqueChars(\"abcabc\", 105) = false\n  uniqueChars(\"abcabc\", 106) = false\n  uniqueChars(\"abcabc\", 107) = false\n  uniqueChars(\"abcabc\", 108) = false\n  uniqueChars(\"abcabc\", 109) = false\n  uniqueChars(\"abcabc\", 110) = false\n  uniqueChars(\"abcabc\", 111) = false\n  uniqueChars(\"abcabc\", 112) = false\n  uniqueChars(\"abcabc\", 113) = false\n  uniqueChars(\"abcabc\", 114) = false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Hex = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithLength = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithLength('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithLengthString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithLengthString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithLengthStringWithLength = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithLengthStringWithLength('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithLengthStringWithLengthString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithLengthStringWithLengthString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithLengthStringWithLengthStringWithLength = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithLengthStringWithLengthStringWithLength('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithLengthStringWithLengthStringWithLengthString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithLengthStringWithLengthStringWithLengthString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithLengthStringWithLengthStringWithLengthStringWithLength = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithLengthStringWithLengthStringWithLengthStringWithLength('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithLengthStringWithLengthStringWithLengthStringWithLengthString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithLengthStringWithLengthStringWithLengthStringWithLengthString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithLengthStringWithLengthStringWithLengthStringWithLengthStringWithLength = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithLengthStringWithLengthStringWithLengthStringWithLengthStringWithLength('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithLengthStringWithLengthStringWithLengthStringWithLengthStringWithLengthString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i!== j) {\n    result.push(i);\n    i = Math.floor(i / 10);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAscii = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiLower = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toLowerCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiUpper = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toUpperCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiLower = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toLowerCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiUpper = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toUpperCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiLower = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toLowerCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiUpper = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toUpperCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiLower = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toLowerCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiUpper = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toUpperCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiLower = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toLowerCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiUpper = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toUpperCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiLower = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toLowerCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiUpper = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toUpperCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiLower = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toLowerCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiUpper = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toUpperCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiLower = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toLowerCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiUpper = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toUpperCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiLower = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toLowerCase();\n};\n\n/**\n * Given a string, return the string with each character replaced by its ASCII\n * representation. For example, given \"Hello\", return \"Hell\".\n */\nconst asciiToAsciiUpper = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.charAt(i), 10));\n  }\n  return result.toUpperCase();\n};\n\n/**\n * Given a string, return the string with each ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_length = notes.length;\n  const notes_beats = [];\n  let beats_length = 0;\n  let beats_beat = 0;\n  for (let i = 0; i < notes_length; i++) {\n    if (notes[i].includes('.')) {\n      beats_length += 1;\n      beats_beat = beats_length * 4;\n    } else if (notes[i].includes('o')) {\n      beats_length += 1;\n      beats_beat = beats_length * 2;\n    } else if (notes[i].includes('o|')) {\n      beats_length += 1;\n      beats_beat = beats_length * 1;\n    } else {\n      beats_length += 1;\n      beats_beat = beats_length * 0;\n    }\n    notes_beats.push(beats_beat);\n  }\n  return notes_beats;\n};\n\nconst parseNotes = (notes_beats) => {\n  const notes = [];\n  for (let i = 0; i < notes_beats.length; i++) {\n    const note = notes_beats[i];\n    const notes_length = note.length;\n    const notes_beat = notes_length * 0;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_beat = notes_beat;\n      const notes_char = note[j];\n      if (notes_char === 'o') {\n        notes.push(notes_beat);\n      } else if (notes_char === 'o|') {\n        notes.push(notes_beat + 4);\n      } else if (notes_char === '.') {\n        notes.push(notes_beat + 2);\n      } else if (notes_char === 'o|') {\n        notes.push(notes_beat + 1);\n      } else {\n        notes.push(notes_beat);\n      }\n    }\n  }\n  return notes;\n};\n\nconst parseNotes_notes_beats = (notes_beats) => {\n  const notes_notes = [];\n  for (let i = 0; i < notes_beats.length; i++) {\n    const notes_note = notes_beats[i];\n    const notes_notes_length = notes_note.length;\n    const notes_notes_beat = notes_notes_length * 0;\n    for (let j = 0; j < notes_notes_length; j++) {\n      const notes_notes_beat = notes_notes_beat;\n      const notes_notes_char = notes_note[j];\n      if (notes_notes_char === 'o') {\n        notes_notes.push(notes_notes_beat);\n      } else if (notes_notes_char === 'o|') {\n        notes_notes.push(notes_notes_beat + 4);\n      } else if (notes_notes_char === '.') {\n        notes_notes.push(notes_notes_beat + 2);\n      } else if (notes_notes_char === 'o|') {\n        notes_notes.push(notes_notes_beat + 1);\n      } else {\n        notes_notes.push(notes_notes_beat);\n      }\n    }\n  }\n  return notes_notes;\n};\n\nconst parseNotes_notes_beats_notes_beats = (notes_beats, notes_notes) => {\n  const notes_notes_notes_beats = [];\n  for (let i = 0; i < notes_beats.length; i++) {\n    const notes_notes_notes_beat = notes_beats[i];\n    const notes_notes_notes_beats_length = notes_notes_beat.length;\n    const notes_notes_notes_beats_notes_beat = notes_notes_notes_beats_length * 0;\n    for (let j = 0; j < notes_notes_notes_beats_length; j++) {\n      const notes_notes_notes_beats_notes_beat = notes_notes_notes_beats_notes_beat;\n      const notes_notes_notes_notes_char = notes_notes_notes_beat[j];\n      if (notes_notes_notes_char === 'o') {\n        notes_notes_notes_notes_beats.push(notes_notes_notes_beats_notes_beat);\n      } else if (notes_notes_notes_char === 'o|') {\n        notes_notes_notes_notes_beats.push(notes_notes_notes_beats_notes_beat + 4);\n      } else if (notes_notes_notes_char === '.') {\n        notes_notes_notes_notes_beats.push(notes_notes_notes_beats_notes_beat + 2);\n      } else if (notes_notes_notes_char === 'o|') {\n        notes_notes_notes_notes_beats.push(notes_notes_notes_beats_notes_beat + 1);\n      } else {\n        notes_notes_notes_notes_beats.push(notes_notes_notes_beats_notes_beat);\n      }\n    }\n  }\n  return notes_notes_notes_beats;\n};\n\nconst parseNotes_notes_beats_notes_beats_notes_beats = (notes_beats, notes_notes, notes_notes_beats) => {\n  const notes_notes_notes_beats_notes_beats = [];\n  for (let i = 0; i < notes_beats.length; i++) {\n    const notes_notes_notes_beats_notes_beat = notes_beats[i];\n    const notes_notes_notes_notes_beats_notes_beats_length = notes_notes_beats_notes_beat.length;\n    const notes_notes_notes_notes_beats_notes_beats_notes_beat = notes_notes_notes_beats_notes_beats_length * 0;\n    for (let j = 0; j < notes_notes_notes_beats_notes_beats_length; j++) {\n      const notes_notes_notes_notes_beats_notes_beats_notes_beat = notes_notes_notes_notes_beats_notes_beats_notes_beat;\n      const notes_notes_notes_notes_notes_char = notes_notes_notes_beats_notes_beat[j];\n      if (notes_notes_notes_notes_char === 'o') {\n        notes_notes_notes_notes_beats_notes_beats_notes_beats.push(notes_notes_notes_beats_notes_beats_notes_beat);\n      } else if (notes_notes_notes_notes_char === 'o|') {\n        notes_notes_notes_notes_beats_notes_beats_notes_beats.push(notes_notes_notes_beats_notes_beats_notes_beat + 4);\n      } else if (notes_notes_notes_notes_char === '.') {\n        notes_notes_notes_notes_beats_notes_beats_notes_beats.push(notes_notes_notes_beats_notes_beats_notes_beat + 2);\n      } else if (notes_notes_notes_notes_char === 'o|') {\n        notes_notes_notes_notes_beats_notes_beats_notes_beats.push(notes_notes_notes_beats_notes_beats_notes_beat + 1);\n      } else {\n        notes_notes_notes_notes_beats_notes_beats_notes_beats.push(notes_notes_notes_beats_notes_beats_notes_beat);\n      }\n    }\n  }\n  return notes_notes_notes_beats_notes_beats_notes_beats;\n};\n\nconst parseNotes_notes_beats_notes_beat", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTime", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n// Given a string, return all possible permutations of its characters. Return an empty array if there are no permutations.\nconst permutations = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let currentIndex = index;\n    let nextIndex = index + 1;\n    while (nextIndex < length) {\n      let currentChar = string.charAt(currentIndex);\n      let nextChar = string.charAt(nextIndex);\n      let currentCharIndex = currentIndex - 1;\n      let nextCharIndex = nextIndex + 1;\n      if (currentChar === nextChar) {\n        result.push(string.slice(currentIndex, nextIndex));\n      }\n      currentIndex--;\n      nextIndex--;\n    }\n    index++;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of its characters. Return an empty array if there are no permutations.\nconst permutations_recursive = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let currentIndex = index;\n    let nextIndex = index + 1;\n    while (nextIndex < length) {\n      let currentChar = string.charAt(currentIndex);\n      let nextChar = string.charAt(nextIndex);\n      let currentCharIndex = currentIndex - 1;\n      let nextCharIndex = nextIndex + 1;\n      if (currentChar === nextChar) {\n        result.push(string.slice(currentIndex, nextIndex));\n      }\n      currentIndex--;\n      nextIndex--;\n    }\n    index++;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of its characters. Return an empty array if there are no permutations.\nconst permutations_recursive_recursive = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let currentIndex = index;\n    let nextIndex = index + 1;\n    while (nextIndex < length) {\n      let currentChar = string.charAt(currentIndex);\n      let nextChar = string.charAt(nextIndex);\n      let currentCharIndex = currentIndex - 1;\n      let nextCharIndex = nextIndex + 1;\n      if (currentChar === nextChar) {\n        result.push(string.slice(currentIndex, nextIndex));\n      }\n      currentIndex--;\n      nextIndex--;\n    }\n    index++;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of its characters. Return an empty array if there are no permutations.\nconst permutations_recursive_recursive_recursive = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let currentIndex = index;\n    let nextIndex = index + 1;\n    while (nextIndex < length) {\n      let currentChar = string.charAt(currentIndex);\n      let nextChar = string.charAt(nextIndex);\n      let currentCharIndex = currentIndex - 1;\n      let nextCharIndex = nextIndex + 1;\n      if (currentChar === nextChar) {\n        result.push(string.slice(currentIndex, nextIndex));\n      }\n      currentIndex--;\n      nextIndex--;\n    }\n    index++;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of its characters. Return an empty array if there are no permutations.\nconst permutations_recursive_recursive_recursive_recursive = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let currentIndex = index;\n    let nextIndex = index + 1;\n    while (nextIndex < length) {\n      let currentChar = string.charAt(currentIndex);\n      let nextChar = string.charAt(nextIndex);\n      let currentCharIndex = currentIndex - 1;\n      let nextCharIndex = nextIndex + 1;\n      if (currentChar === nextChar) {\n        result.push(string.slice(currentIndex, nextIndex));\n      }\n      currentIndex--;\n      nextIndex--;\n    }\n    index++;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of its characters. Return an empty array if there are no permutations.\nconst permutations_recursive_recursive_recursive_recursive_recursive = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let currentIndex = index;\n    let nextIndex = index + 1;\n    while (nextIndex < length) {\n      let currentChar = string.charAt(currentIndex);\n      let nextChar = string.charAt(nextIndex);\n      let currentCharIndex = currentIndex - 1;\n      let nextCharIndex = nextIndex + 1;\n      if (currentChar === nextChar) {\n        result.push(string.slice(currentIndex, nextIndex));\n      }\n      currentIndex--;\n      nextIndex--;\n    }\n    index++;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of its characters. Return an empty array if there are no permutations.\nconst permutations_recursive_recursive_recursive_recursive_recursive_recursive = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let currentIndex = index;\n    let nextIndex = index + 1;\n    while (nextIndex < length) {\n      let currentChar = string.charAt(currentIndex);\n      let nextChar = string.charAt(nextIndex);\n      let currentCharIndex = currentIndex - 1;\n      let nextCharIndex = nextIndex + 1;\n      if (currentChar === nextChar) {\n        result.push(string.slice(currentIndex, nextIndex));\n      }\n      currentIndex--;\n      nextIndex--;\n    }\n    index++;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of its characters. Return an empty array if there are no permutations.\nconst permutations_recursive_recursive_recursive_recursive_recursive_recursive_recursive = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let currentIndex = index;\n    let nextIndex = index + 1;\n    while (nextIndex < length) {\n      let currentChar = string.charAt(currentIndex);\n      let nextChar = string.charAt(nextIndex);\n      let currentCharIndex = currentIndex - 1;\n      let nextCharIndex = nextIndex + 1;\n      if (currentChar === nextChar) {\n        result.push(string.slice(currentIndex, nextIndex));\n      }\n      currentIndex--;\n      nextIndex--;\n    }\n    index++;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of its characters. Return an empty array if there are no permutations.\nconst permutations_recursive_recursive_recursive_recursive_recursive_recursive_recursive = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let currentIndex = index;\n    let nextIndex = index + 1;\n    while (nextIndex < length) {\n      let currentChar = string.charAt(currentIndex);\n      let nextChar = string.charAt(nextIndex);\n      let currentCharIndex = currentIndex - 1;\n      let nextCharIndex = nextIndex + 1;\n      if (currentChar === nextChar) {\n        result.push(string.slice(currentIndex, nextIndex));\n      }\n      currentIndex--;\n      nextIndex--;\n    }\n    index++;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of its characters. Return an empty array if there are no permutations.\nconst permutations_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let currentIndex = index;\n    let nextIndex = index + 1;\n    while (nextIndex < length) {\n      let currentChar = string.charAt(currentIndex);\n      let nextChar = string.charAt(nextIndex);\n      let currentCharIndex = currentIndex - 1;\n      let nextCharIndex = nextIndex + 1;\n      if (currentChar ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortsNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortsNumbers('three one five')\n  'five three one'\n  */\nconst sortsNumbersReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortsNumbers('three one five')\n  'five three one'\n  */\nconst sortsNumbersReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbersReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortsNumbers('three one five')\n  'five three one'\n  */\nconst sortsNumbersReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'five three one'\n  */\nconst sortsNumbersReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortsNumbers('three one five')\n  'five three one'\n  */\nconst sortsNumbersReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'five three one'\n  */\nconst sortsNumbersReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortsNumbers('three one five')\n  'five three one'\n  */\nconst sortsNumbersReverseReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'five three one'\n  */\nconst sortsNumbersReverseReverseReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortsNumbers('three one five')\n  'five three one'\n  */\nconst sortsNumbersReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'five three one'\n  */\nconst sortsNumbersReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortsNumbers('three one five')\n  'fi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = decimals <= 0? 0 : decimals - 1;\n  let integerPart = Math.floor(number / Math.pow(10, decimal));\n  let decimalPart = number % Math.pow(10, decimal);\n  return `${integerPart}.${decimalPart}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = decimals <= 0? 0 : decimals - 1;\n  let integerPart = Math.floor(number / Math.pow(10, decimal));\n  let decimalPart = number % Math.pow(10, decimal);\n  return `${integerPart}.${decimalPart}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateFraction = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = decimals <= 0? 0 : decimals - 1;\n  let integerPart = Math.floor(number / Math.pow(10, decimal));\n  let decimalPart = number % Math.pow(10, decimal);\n  let fractionPart = decimalPart === 0? 0 : decimalPart - 1;\n  return `${integerPart}.${decimalPart}.${fractionPart}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponent = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = decimals <= 0? 0 : decimals - 1;\n  let integerPart = Math.floor(number / Math.pow(10, decimal));\n  let decimalPart = number % Math.pow(10, decimal);\n  let exponentPart = decimalPart === 0? 0 : decimalPart - 1;\n  return `${integerPart}.${decimalPart}.${exponentPart}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateMantissa = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = decimals <= 0? 0 : decimals - 1;\n  let integerPart = Math.floor(number / Math.pow(10, decimal));\n  let decimalPart = number % Math.pow(10, decimal);\n  let mantissaPart = decimalPart === 0? 0 : decimalPart - 1;\n  return `${integerPart}.${decimalPart}.${mantissaPart}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentMantissa = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = decimals <= 0? 0 : decimals - 1;\n  let integerPart = Math.floor(number / Math.pow(10, decimal));\n  let decimalPart = number % Math.pow(10, decimal);\n  let exponentPart = decimalPart === 0? 0 : decimalPart - 1;\n  return `${integerPart}.${decimalPart}.${exponentPart}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateMantissaMantissa = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = decimals <= 0? 0 : decimals - 1;\n  let integerPart = Math.floor(number / Math.pow(10, decimal));\n  let decimalPart = number % Math.pow(10, decimal);\n  let mantissaPart = decimalPart === 0? 0 : decimalPart - 1;\n  return `${integerPart}.${decimalPart}.${mantissaPart}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentMantissaMantissa = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = decimals <= 0? 0 : decimals - 1;\n  let integerPart = Math.floor(number / Math.pow(10, decimal));\n  let decimalPart = number % Math.pow(10, decimal);\n  let exponentPart = decimalPart === 0? 0 : decimalPart - 1;\n  return `${integerPart}.${decimalPart}.${exponentPart}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateMantissaMantissaMantissa = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = decimals <= 0? 0 : decimals - 1;\n  let integerPart = Math.floor(number / Math.pow(10, decimal));\n  let decimalPart = number % Math.pow(10, decimal);\n  let mantissaPart = decimalPart === 0? 0 : decimalPart - 1;\n  return `${integerPart}.${decimalPart}.${mantissaPart}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentMantissaMantissaMantissa = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = decimals <= 0? 0 : decimals - 1;\n  let integerPart = Math.floor(number / Math.pow(10, decimal));\n  let decimalPart = number % Math.pow(10, decimal);\n  let exponentPart = decimalPart === 0? 0 : decimalPart - 1;\n  return `${integerPart}.${decimalPart}.${exponentPart}`;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateMantissaMantissaMantissaMantissa = (number) => {\n  let decimals = Math.floor(Math.log10(number));\n  let decimal = decimals <= 0? 0 : decimals - 1;\n  let integerPart = Math.floor(number / Math.pow(10, decimal));\n  let decimalPart = number % Math.pow(10, decimal);\n  let mantissaPart = decimalPart === 0? 0 : ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "foundCloserElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  const [minNumber, maxNumber] = numbers.map(n => Number(n))\n  const [minNumber2, maxNumber2] = numbers.map(n => Number(n))\n  const [minNumber3, maxNumber3] = numbers.map(n => Number(n))\n  const [minNumber4, maxNumber4] = numbers.map(n => Number(n))\n  const [minNumber5, maxNumber5] = numbers.map(n => Number(n))\n  const [minNumber6, maxNumber6] = numbers.map(n => Number(n))\n  const [minNumber7, maxNumber7] = numbers.map(n => Number(n))\n  const [minNumber8, maxNumber8] = numbers.map(n => Number(n))\n  const [minNumber9, maxNumber9] = numbers.map(n => Number(n))\n  const [minNumber10, maxNumber10] = numbers.map(n => Number(n))\n  const [minNumber11, maxNumber11] = numbers.map(n => Number(n))\n  const [minNumber12, maxNumber12] = numbers.map(n => Number(n))\n  const [minNumber13, maxNumber13] = numbers.map(n => Number(n))\n  const [minNumber14, maxNumber14] = numbers.map(n => Number(n))\n  const [minNumber15, maxNumber15] = numbers.map(n => Number(n))\n  const [minNumber16, maxNumber16] = numbers.map(n => Number(n))\n  const [minNumber17, maxNumber17] = numbers.map(n => Number(n))\n  const [minNumber18, maxNumber18] = numbers.map(n => Number(n))\n  const [minNumber19, maxNumber19] = numbers.map(n => Number(n))\n  const [minNumber20, maxNumber20] = numbers.map(n => Number(n))\n  const [minNumber21, maxNumber21] = numbers.map(n => Number(n))\n  const [minNumber22, maxNumber22] = numbers.map(n => Number(n))\n  const [minNumber23, maxNumber23] = numbers.map(n => Number(n))\n  const [minNumber24, maxNumber24] = numbers.map(n => Number(n))\n  const [minNumber25, maxNumber25] = numbers.map(n => Number(n))\n  const [minNumber26, maxNumber26] = numbers.map(n => Number(n))\n  const [minNumber27, maxNumber27] = numbers.map(n => Number(n))\n  const [minNumber28, maxNumber28] = numbers.map(n => Number(n))\n  const [minNumber29, maxNumber29] = numbers.map(n => Number(n))\n  const [minNumber30, maxNumber30] = numbers.map(n => Number(n))\n  const [minNumber31, maxNumber31] = numbers.map(n => Number(n))\n  const [minNumber32, maxNumber32] = numbers.map(n => Number(n))\n  const [minNumber33, maxNumber33] = numbers.map(n => Number(n))\n  const [minNumber34, maxNumber34] = numbers.map(n => Number(n))\n  const [minNumber35, maxNumber35] = numbers.map(n => Number(n))\n  const [minNumber36, maxNumber36] = numbers.map(n => Number(n))\n  const [minNumber37, maxNumber37] = numbers.map(n => Number(n))\n  const [minNumber38, maxNumber38] = numbers.map(n => Number(n))\n  const [minNumber39, maxNumber39] = numbers.map(n => Number(n))\n  const [minNumber40, maxNumber40] = numbers.map(n => Number(n))\n  const [minNumber41, maxNumber41] = numbers.map(n => Number(n))\n  const [minNumber42, maxNumber42] = numbers.map(n => Number(n))\n  const [minNumber43, maxNumber43] = numbers.map(n => Number(n))\n  const [minNumber44, maxNumber44] = numbers.map(n => Number(n))\n  const [minNumber45, maxNumber45] = numbers.map(n => Number(n))\n  const [minNumber46, maxNumber46] = numbers.map(n => Number(n))\n  const [minNumber47, maxNumber47] = numbers.map(n => Number(n))\n  const [minNumber48, maxNumber48] = numbers.map(n => Number(n))\n  const [minNumber49, maxNumber49] = numbers.map(n => Number(n))\n  const [minNumber50, maxNumber50] = numbers.map(n => Number(n))\n  const [minNumber51, maxNumber51] = numbers.map(n => Number(n))\n  const [minNumber52, maxNumber52] = numbers.map(n => Number(n))\n  const [minNumber53, maxNumber53] = numbers.map(n => Number(n))\n  const [minNumber54, maxNumber54] = numbers.map(n => Number(n))\n  const [minNumber55, maxNumber55] = numbers.map(n => Number(n))\n  const [minNumber56, maxNumber56] = numbers.map(n => Number(n))\n  const [minNumber57, maxNumber57] = numbers.map(n => Number(n))\n  const [minNumber58, maxNumber58] = numbers.map(n => Number(n))\n  const [minNumber59, maxNumber59] = numbers.map(n => Number(n))\n  const [minNumber60, maxNumber60] = numbers.map(n => Number(n))\n  const [minNumber61, maxNumber61] = numbers.map(n => Number(n))\n  const [minNumber62, maxNumber62] = numbers.map(n => Number(n))\n  const [minNumber63, maxNumber63] = numbers.map(n => Number(n))\n  const [minNumber64, maxNumber64] = numbers.map(n => Number(n))\n  const [minNumber65, maxNumber65] = numbers.map(n => Number(n))\n  const [minNumber66, maxNumber66] = numbers.map(n => Number(n))\n  const [minNumber67, maxNumber67] = numbers.map(n => Number(n))\n  const [minNumber68, maxNumber68] = numbers.map(n => Number(n))\n  const [minNumber69, maxNumber69] = numbers.map(n => Number(n))\n  const [minNumber70, maxNumber70] = numbers.map(n => Number(n))\n  const [minNumber71, maxNumber71] = numbers.map(n => Number(n))\n  const [minNumber72, maxNumber72] = numbers.map(n => Number(n))\n  const [minNumber73, maxNumber73] = numbers.map(n => Number(n))\n  const [minNumber74, maxNumber74] = numbers.map(n => Number(n))\n  const [minNumber75, maxNumber75] = numbers.map(n => Number(n))\n  const [minNumber76, maxNumber76] = numbers.map(n => Number(n))\n  const [minNumber77, maxNumber77] = numbers.map(n => Number(n))\n  const [minNumber78, maxNumber78] = numbers.map(n => Number(n))\n  const [minNumber79, maxNumber79] = numbers.map(n => Number(n))\n  const [minNumber80, maxNumber80] = numbers.map(n => Number(n))\n  const [minNumber81, maxNumber81] = numbers.map(n => Number(n))\n  const [minNumber82, maxNumber82] = numbers.map(n => Number(n))\n  const [minNumber83, maxNumber83] = numbers.map(n => Number(n))\n  const [minNumber84, maxNumber84] = numbers.map(n => Number(n))\n  const [minNumber85, maxNumber85] = numbers.map(n => Number(n))\n  const [minNumber86, maxNumber86] = numbers.map(n => Number(n))\n  const [minNumber87, maxNumber87] = numbers.map(n => Number(n))\n  const [minNumber88, maxNumber88] = numbers.map(n => Number(n))\n  const [minNumber89, maxNumber89] = numbers.map(n => Number(n))\n  const [min", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnits", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const [min, max] = numbers.map((n) => Math.min(n, 1))\n  return [min, max]\n}\n\n/**\n * Given a list of numbers (of at least two elements), return a new list where\n * each element is the result of applying a linear transform to that list.\n * For example, given [1.0, 2.0, 3.0, 4.0, 5.0], the output will be\n * [0.0, 0.25, 0.5, 0.75, 1.0].\n */\nconst transform = (numbers) => {\n  const [min, max] = rescaleToUnits(numbers)\n  return numbers.map((n) => n * min)\n}\n\n/**\n * Given a list of numbers (of at least two elements), return a new list where\n * each element is the result of applying a linear transform to that list.\n * For example, given [1.0, 2.0, 3.0, 4.0, 5.0], the output will be\n * [0.0, 0.25, 0.5, 0.75, 1.0].\n */\nconst transformInverse = (numbers) => {\n  const [min, max] = rescaleToUnits(numbers)\n  return numbers.map((n) => n * max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), return a new list where\n * each element is the result of applying a linear transform to that list.\n * For example, given [1.0, 2.0, 3.0, 4.0, 5.0], the output will be\n * [0.0, 0.25, 0.5, 0.75, 1.0].\n */\nconst transformInverseInverse = (numbers) => {\n  const [min, max] = rescaleToUnits(numbers)\n  return numbers.map((n) => n * min * max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), return a new list where\n * each element is the result of applying a linear transform to that list.\n * For example, given [1.0, 2.0, 3.0, 4.0, 5.0], the output will be\n * [0.0, 0.25, 0.5, 0.75, 1.0].\n */\nconst transformInverseInverseInverse = (numbers) => {\n  const [min, max] = rescaleToUnits(numbers)\n  return numbers.map((n) => n * max * min)\n}\n\n/**\n * Given a list of numbers (of at least two elements), return a new list where\n * each element is the result of applying a linear transform to that list.\n * For example, given [1.0, 2.0, 3.0, 4.0, 5.0], the output will be\n * [0.0, 0.25, 0.5, 0.75, 1.0].\n */\nconst transformInverseInverseInverseInverse = (numbers) => {\n  const [min, max] = rescaleToUnits(numbers)\n  return numbers.map((n) => n * max * min * max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), return a new list where\n * each element is the result of applying a linear transform to that list.\n * For example, given [1.0, 2.0, 3.0, 4.0, 5.0], the output will be\n * [0.0, 0.25, 0.5, 0.75, 1.0].\n */\nconst transformInverseInverseInverseInverseInverse = (numbers) => {\n  const [min, max] = rescaleToUnits(numbers)\n  return numbers.map((n) => n * max * min * min * max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), return a new list where\n * each element is the result of applying a linear transform to that list.\n * For example, given [1.0, 2.0, 3.0, 4.0, 5.0], the output will be\n * [0.0, 0.25, 0.5, 0.75, 1.0].\n */\nconst transformInverseInverseInverseInverseInverseInverse = (numbers) => {\n  const [min, max] = rescaleToUnits(numbers)\n  return numbers.map((n) => n * max * min * min * min * max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), return a new list where\n * each element is the result of applying a linear transform to that list.\n * For example, given [1.0, 2.0, 3.0, 4.0, 5.0], the output will be\n * [0.0, 0.25, 0.5, 0.75, 1.0].\n */\nconst transformInverseInverseInverseInverseInverseInverseInverseInverse = (numbers) => {\n  const [min, max] = rescaleToUnits(numbers)\n  return numbers.map((n) => n * max * min * min * min * min * max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), return a new list where\n * each element is the result of applying a linear transform to that list.\n * For example, given [1.0, 2.0, 3.0, 4.0, 5.0], the output will be\n * [0.0, 0.25, 0.5, 0.75, 1.0].\n */\nconst transformInverseInverseInverseInverseInverseInverseInverseInverseInverseInverse = (numbers) => {\n  const [min, max] = rescaleToUnits(numbers)\n  return numbers.map((n) => n * max * min * min * min * min * min * max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), return a new list where\n * each element is the result of applying a linear transform to that list.\n * For example, given [1.0, 2.0, 3.0, 4.0, 5.0], the output will be\n * [0.0, 0.25, 0.5, 0.75, 1.0].\n */\nconst transformInverseInverseInverseInverseInverseInverseInverseInverseInverseInverse = (numbers) => {\n  const [min, max] = rescaleToUnits(numbers)\n  return numbers.map((n) => n * max * min * min * min * min * min * min * min * min)\n}\n\n/**\n * Given a list of numbers (of at least two elements), return a new list where\n * each element is the result of applying a linear transform to that list.\n * For example, given [1.0, 2.0, 3.0, 4.0, 5.0], the output will be\n * [0.0, 0.25, 0.5, 0.75, 1.0].\n */\nconst transformInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverse = (numbers) => {\n  const [min, max] = rescaleToUnits(numbers)\n  return numbers.map((n) => n * max * min * min * min * min * min * min * min * min * min * min * min * min)\n}\n\n/**\n * Given a list of numbers (of at least two elements), return a new list where\n * each element is the result of applying a linear transform to that list.\n * For example, given [1.0, 2.0, 3.0, 4.0, 5.0], the output will be\n * [0.0, 0.25, 0.5, 0.75, 1.0].\n */\nconst transformInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverseInverse", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNone(['a', 3.14, 5])\n  [5]\n  >>> filterNone([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNone = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmptyList([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyList = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDict({a: 1, b: 2, c: 3})\n  {}\n  >>> filterEmptyDict({a: 1, b: 2, c: 3, d: 4})\n  {}\n  */\nconst filterEmptyDict = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyString(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyString(['abc', {}, []])\n  []\n  */\nconst filterEmptyString = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of any python values only for empty array\n  >>> filterEmptyArray([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArray = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty function\n  >>> filterEmptyFunction(() => {})\n  {}\n  >>> filterEmptyFunction(() => {})()\n  {}\n  */\nconst filterEmptyFunction = (values) => {\n  return values.filter(value => value === () => {});\n};\n\n/**\n * Filter given list of any python values only for empty object\n  >>> filterEmptyObject({a: 1, b: 2, c: 3})\n  {}\n  >>> filterEmptyObject({a: 1, b: 2, c: 3, d: 4})\n  {}\n  */\nconst filterEmptyObject = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given list of any python values only for empty number\n  >>> filterEmptyNumber([1, 2])\n  [1, 2]\n  >>> filterEmptyNumber([1, 2, 'abc', {}, []])\n  [1, 2]\n  */\nconst filterEmptyNumber = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty boolean\n  >>> filterEmptyBoolean([true, false])\n  [true, false]\n  >>> filterEmptyBoolean([true, false, 'abc', {}, []])\n  [true, false]\n  */\nconst filterEmptyBoolean = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyString(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyString(['abc', {}, []])\n  []\n  */\nconst filterEmptyString = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of any python values only for empty array\n  >>> filterEmptyArray([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArray = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty function\n  >>> filterEmptyFunction(() => {})\n  {}\n  >>> filterEmptyFunction(() => {})()\n  {}\n  */\nconst filterEmptyFunction = (values) => {\n  return values.filter(value => value === () => {});\n};\n\n/**\n * Filter given list of any python values only for empty object\n  >>> filterEmptyObject({a: 1, b: 2, c: 3})\n  {}\n  >>> filterEmptyObject({a: 1, b: 2, c: 3, d: 4})\n  {}\n  */\nconst filterEmptyObject = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given list of any python values only for empty number\n  >>> filterEmptyNumber([1, 2])\n  [1, 2]\n  >>> filterEmptyNumber([1, 2, 'abc', {}, []])\n  [1, 2]\n  */\nconst filterEmptyNumber = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty boolean\n  >>> filterEmptyBoolean([true, false])\n  [true, false]\n  >>> filterEmptyBoolean([true, false, 'abc', {}, []])\n  [true, false]\n  */\nconst filterEmptyBoolean = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyString(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyString(['abc', {}, []])\n  []\n  */\nconst filterEmptyString = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of any python values only for empty array\n  >>> filterEmptyArray([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArray = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty function\n  >>> filterEmptyFunction(() => {})\n  {}\n  >>> filterEmptyFunction(() => {})()\n  {}\n  */\nconst filterEmptyFunction = (values) => {\n  return values.filter(value => value === () => {});\n};\n\n/**\n * Filter given list of any python values only for empty object\n  >>> filterEmptyObject({a: 1, b: 2, c: 3})\n  {}\n  >>> filterEmptyObject({a: 1, b: 2, c: 3, d: 4})\n  {}\n  */\nconst filterEmptyObject = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given list of any python values only for empty number\n  >>> filterEmptyNumber([1, 2])\n  [1, 2]\n  >>> filterEmptyNumber([1, 2, 'abc', {}, []])\n  [1, 2]\n  */\nconst filterEmptyNumber = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty boolean\n  >>> filterEmptyBoolean([true, false])\n  [true, false]\n  >>> filterEmptyBoolean([true, false, 'abc', {}, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring, 0) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largerDivisors", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n  let maxDivisor = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n      divisor++;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimes(15)\n  true\n  */\nconst isDivisibleByAllPrimes = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimes(15)\n  false\n  */\nconst isDivisibleByAllPrimesOrZero = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZero(15)\n  true\n  */\nconst isDivisibleByAllPrimesOrZeroOrZero = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZero(15)\n  true\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZero = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZero(15)\n  false\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(15)\n  true\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(15)\n  false\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZero(15)\n  true\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(15)\n  false\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(15)\n  true\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(15)\n  false\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(15)\n  true\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(15)\n  false\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(15)\n  true\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorizes", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicate", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, cur) => {\n    if (seen.has(cur)) {\n      seen.delete(cur);\n    } else {\n      seen.add(cur);\n      acc.push(cur);\n    }\n    return acc;\n  }, []);\n};\n\n// Given a string, return the first character of the string if it is a letter, else return '?'\nconst isLetter = str => str[0] >= 'a' && str[0] <= 'z';\n\n// Given a string, return the first character of the string if it is a digit, else return '?'\nconst isDigit = str => str[0] >= '0' && str[0] <= '9';\n\n// Given a string, return the first character of the string if it is a punctuation character, else return '?'\nconst isPunctuation = (str) => str[0] === '.' || str[0] === '?';\n\n// Given a string, return the first character of the string if it is a letter, else return '?'\nconst isLetterOrDigit = str => isLetter(str) || isDigit(str);\n\n// Given a string, return the first character of the string if it is a letter, else return '?'\nconst isLetterOrPunctuation = (str) => isLetterOrDigit(str) || isPunctuation(str);\n\n// Given a string, return the first character of the string if it is a letter, else return '?'\nconst isLetterOrDigitOrPunctuation = (str) => isLetterOrDigitOrPunctuation(str) || isPunctuation(str);\n\n// Given a string, return the first character of the string if it is a letter, else return '?'\nconst isLetterOrDigitOrLetterOrDigit = str => isLetterOrDigitOrLetterOrDigit(str) || isLetterOrDigit(str);\n\n// Given a string, return the first character of the string if it is a letter, else return '?'\nconst isLetterOrDigitOrLetterOrPunctuation = (str) => isLetterOrDigitOrLetterOrDigit(str) || isPunctuation(str);\n\n// Given a string, return the first character of the string if it is a letter, else return '?'\nconst isLetterOrDigitOrLetterOrDigitOrPunctuation = (str) => isLetterOrDigitOrLetterOrDigitOrPunctuation(str) || isLetterOrDigit(str);\n\n// Given a string, return the first character of the string if it is a letter, else return '?'\nconst isLetterOrDigitOrLetterOrDigitOrLetterOrDigit = str => isLetterOrDigitOrLetterOrDigitOrLetterOrDigit(str) || isLetterOrDigit(str);\n\n// Given a string, return the first character of the string if it is a letter, else return '?'\nconst isLetterOrDigitOrLetterOrDigitOrLetterOrPunctuation = (str) => isLetterOrDigitOrLetterOrDigitOrLetterOrDigit(str) || isPunctuation(str);\n\n// Given a string, return the first character of the string if it is a letter, else return '?'\nconst isLetterOrDigitOrLetterOrDigitOrLetterOrDigitOrLetterOrPunctuation = (str) => isLetterOrDigitOrLetterOrDigitOrLetterOrDigitOrLetterOrDigit(str) || isLetterOrDigit(str);\n\n// Given a string, return the first character of the string if it is a letter, else return '?'\nconst isLetterOrDigitOrLetterOrDigitOrLetterOrDigitOrLetterOrLetterOrDigitOrLetterOrLetterOrPunctuation = (str) => isLetterOrDigitOrLetterOrDigitOrLetterOrLetterOrDigitOrLetterOrLetterOrDigitOrLetterOrLetterOrDigitOrLetterOrLetterOrLetterOrDigitOrLetterOrLetterOrLetterOrPunctuation(str);\n\n// Given a string, return the first character of the string if it is a letter, else return '?'\nconst isLetterOrDigitOrLetterOrDigitOrLetterOrLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipsCases", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/([a-z])([A-Z])/g, '$1 $2')\n   .toUpperCase();\n};\n\n/**\n * For a given string, remove all non-alphanumeric characters and convert them to lowercase.\n  >>> removeNonAlphaNumericChars('Hello')\n  'hello'\n  */\nconst removeNonAlphaNumericChars = (string) => {\n  return string\n   .replace(/[^a-zA-Z0-9]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-alphabetic characters and convert them to lowercase.\n  >>> removeNonAlphabeticChars('Hello')\n  'hello'\n  */\nconst removeNonAlphabeticChars = (string) => {\n  return string\n   .replace(/[^a-zA-Z]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-numeric characters and convert them to lowercase.\n  >>> removeNonNumericChars('Hello')\n  'hello'\n  */\nconst removeNonNumericChars = (string) => {\n  return string\n   .replace(/[^0-9]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-alphabetic characters and convert them to lowercase.\n  >>> removeNonAlphabeticChars('Hello')\n  'hello'\n  */\nconst removeNonAlphabeticChars = (string) => {\n  return string\n   .replace(/[^a-zA-Z]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-numeric characters and convert them to lowercase.\n  >>> removeNonNumericChars('Hello')\n  'hello'\n  */\nconst removeNonNumericChars = (string) => {\n  return string\n   .replace(/[^0-9]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-alphabetic characters and convert them to lowercase.\n  >>> removeNonAlphabeticChars('Hello')\n  'hello'\n  */\nconst removeNonAlphabeticChars = (string) => {\n  return string\n   .replace(/[^a-zA-Z]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-numeric characters and convert them to lowercase.\n  >>> removeNonNumericChars('Hello')\n  'hello'\n  */\nconst removeNonNumericChars = (string) => {\n  return string\n   .replace(/[^0-9]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-alphabetic characters and convert them to lowercase.\n  >>> removeNonAlphabeticChars('Hello')\n  'hello'\n  */\nconst removeNonAlphabeticChars = (string) => {\n  return string\n   .replace(/[^a-zA-Z]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-numeric characters and convert them to lowercase.\n  >>> removeNonNumericChars('Hello')\n  'hello'\n  */\nconst removeNonNumericChars = (string) => {\n  return string\n   .replace(/[^0-9]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-alphabetic characters and convert them to lowercase.\n  >>> removeNonAlphabeticChars('Hello')\n  'hello'\n  */\nconst removeNonAlphabeticChars = (string) => {\n  return string\n   .replace(/[^a-zA-Z]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-numeric characters and convert them to lowercase.\n  >>> removeNonNumericChars('Hello')\n  'hello'\n  */\nconst removeNonNumericChars = (string) => {\n  return string\n   .replace(/[^0-9]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-alphabetic characters and convert them to lowercase.\n  >>> removeNonAlphabeticChars('Hello')\n  'hello'\n  */\nconst removeNonAlphabeticChars = (string) => {\n  return string\n   .replace(/[^a-zA-Z]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-numeric characters and convert them to lowercase.\n  >>> removeNonNumericChars('Hello')\n  'hello'\n  */\nconst removeNonNumericChars = (string) => {\n  return string\n   .replace(/[^0-9]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-alphabetic characters and convert them to lowercase.\n  >>> removeNonAlphabeticChars('Hello')\n  'hello'\n  */\nconst removeNonAlphabeticChars = (string) => {\n  return string\n   .replace(/[^a-zA-Z]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-numeric characters and convert them to lowercase.\n  >>> removeNonNumericChars('Hello')\n  'hello'\n  */\nconst removeNonNumericChars = (string) => {\n  return string\n   .replace(/[^0-9]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-alphabetic characters and convert them to lowercase.\n  >>> removeNonAlphabeticChars('Hello')\n  'hello'\n  */\nconst removeNonAlphabeticChars = (string) => {\n  return string\n   .replace(/[^a-zA-Z]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-numeric characters and convert them to lowercase.\n  >>> removeNonNumericChars('Hello')\n  'hello'\n  */\nconst removeNonNumericChars = (string) => {\n  return string\n   .replace(/[^0-9]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-alphabetic characters and convert them to lowercase.\n  >>> removeNonAlphabeticChars('Hello')\n  'hello'\n  */\nconst removeNonAlphabeticChars = (string) => {\n  return string\n   .replace(/[^a-zA-Z]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-numeric characters and convert them to lowercase.\n  >>> removeNonNumericChars('Hello')\n  'hello'\n  */\nconst removeNonNumericChars = (string) => {\n  return string\n   .replace(/[^0-9]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-alphabetic characters and convert them to lowercase.\n  >>> removeNonAlphabeticChars('Hello')\n  'hello'\n  */\nconst removeNonAlphabeticChars = (string) => {\n  return string\n   .replace(/[^a-zA-Z]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-numeric characters and convert them to lowercase.\n  >>> removeNonNumericChars('Hello')\n  'hello'\n  */\nconst removeNonNumericChars = (string) => {\n  return string\n   .replace(/[^0-9]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-alphabetic characters and convert them to lowercase.\n  >>> removeNonAlphabeticChars('Hello')\n  'hello'\n  */\nconst removeNonAlphabeticChars = (string) => {\n  return string\n   .replace(/[^a-zA-Z]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-numeric characters and convert them to lowercase.\n  >>> removeNonNumericChars('Hello')\n  'hello'\n  */\nconst removeNonNumericChars = (string) => {\n  return string\n   .replace(/[^0-9]/g, '')\n   .toLowerCase();\n};\n\n/**\n * For a given string, remove all non-alphabetic characters and convert them to lowercase.\n  >>> removeNonAlphabeticChars('Hello')\n  'hello'\n  */\nconst removeNonAlphabeticChars = (string) => {\n  return string\n   .replace(/[^a-zA-Z]/g, '')\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => {\n    return acc + string\n  }, '')\n}\n\n/* Convert string to number\n  >>> convertToNumber(0)\n  0\n  >>> convertToNumber('0')\n  0\n  >>> convertToNumber('1')\n  1\n  >>> convertToNumber('1.1')\n  1.1\n  >>> convertToNumber('1.10')\n  1.10\n  >>> convertToNumber('1.100')\n  1.100\n  >>> convertToNumber('1.1000')\n  1.1000\n  >>> convertToNumber('1.10000')\n  1.10000\n  >>> convertToNumber('1.100000')\n  1.100000\n  >>> convertToNumber('1.1000000')\n  1.1000000\n  >>> convertToNumber('1.10000000')\n  1.10000000\n  >>> convertToNumber('1.100000000')\n  1.100000000\n  >>> convertToNumber('1.1000000000')\n  1.1000000000\n  >>> convertToNumber('1.10000000000')\n  1.10000000000\n  >>> convertToNumber('1.100000000000')\n  1.100000000000\n  >>> convertToNumber('1.1000000000000')\n  1.1000000000000\n  >>> convertToNumber('1.10000000000000')\n  1.10000000000000\n  >>> convertToNumber('1.100000000000000')\n  1.100000000000000\n  >>> convertToNumber('1.1000000000000000')\n  1.1000000000000000\n  >>> convertToNumber('1.10000000000000000')\n  1.10000000000000000\n  >>> convertToNumber('1.100000000000000000')\n  1.100000000000000000\n  >>> convertToNumber('1.1000000000000000000')\n  1.1000000000000000000\n  >>> convertToNumber('1.10000000000000000000')\n  1.10000000000000000000\n  >>> convertToNumber('1.100000000000000000000')\n  1.100000000000000000000\n  >>> convertToNumber('1.1000000000000000000000')\n  1.1000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000')\n  1.10000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000')\n  1.100000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000')\n  1.1000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000')\n  1.10000000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000000')\n  1.100000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000')\n  1.1000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000')\n  1.10000000000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000000000')\n  1.100000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000')\n  1.1000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000')\n  1.10000000000000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000000000000')\n  1.100000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000')\n  1.1000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000')\n  1.10000000000000000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000000000000000')\n  1.100000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000000000000000000')\n  1.100000000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000000000000000000000')\n  1.100000000000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000000000000000000')\n  1.100000000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000000000000000000000')\n  1.100000000000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000000000000000000')\n  1.100000000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000000000000000000000')\n  1.100000000000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000000000000000000')\n  1.100000000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000000000000000000000')\n  1.100000000000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000\n  >>> convertToNumber('1.100000000000000000000000000000000000000')\n  1.100000000000000000000000000000000000000\n  >>> convertToNumber('1.1000000000000000000000000000000000000000')\n  1.1000000000000000000000000000000000000000\n  >>> convertToNumber('1.10000000000000000000000000000000000000000')\n  1.10000000000000000000000000000000000000000\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffixNot = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixNot([], 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNotNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterBySuffixNot([], 'a')\n  []\n  >>> filterBySuffixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterBySuffixNotNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNotNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeros", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\nmodule.exports = belowZeros;\n\n},{}],4:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance >= 0;\n};\n\nmodule.exports = belowZeros;\n\n},{}],5:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZeros;\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZeros;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZeros;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZeros;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZeros;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZeros;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZeros;\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZeros;\n\n},{}],13:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZeros;\n\n},{}],14:[function(require,module,exports){\n/*\n  You are given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "gottenPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only negative numbers in the list.\n  >>> gottenNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenDivisible = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenDivisible = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenDivisible = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenDivisible = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenDivisible = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenDivisible = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenDivisible = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenDivisible = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenDivisible = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenDivisible = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenDivisible = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenDivisible = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenDivisible = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number, return its decimal representation in base 10.\n  >>> toDecimal(123)\n  \"123.00\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123\"\n  >>> toDecimal(123)\n  \"123", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  findCoefficients finds coefficients of a polynomial with coefficients xs at point x.\n  >>> round(findCoefficients([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findCoefficients([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCoefficients = (xs) => {\n  const zero = findZero(xs);\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  findCoefficients finds coefficients of a polynomial with coefficients xs at point x.\n  >>> round(findCoefficients([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findCoefficients([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCoefficientsAt = (xs, x) => {\n  const zero = findZero(xs);\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  findCoefficientsAt finds coefficients of a polynomial with coefficients xs at point x.\n  >>> round(findCoefficientsAt([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findCoefficientsAt([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCoefficientsAt = (xs, x) => {\n  const zero = findZero(xs);\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  findCoefficientsAt finds coefficients of a polynomial with coefficients xs at point x.\n  >>> round(findCoefficientsAt([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findCoefficientsAt([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCoefficientsAt = (xs, x) => {\n  const zero = findZero(xs);\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  findCoefficientsAt finds coefficients of a polynomial with coefficients xs at point x.\n  >>> round(findCoefficientsAt([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findCoefficientsAt([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCoefficientsAt = (xs, x) => {\n  const zero = findZero(xs);\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  findCoefficientsAt finds coefficients of a polynomial with coefficients xs at point x.\n  >>> round(findCoefficientsAt([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findCoefficientsAt([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCoefficientsAt = (xs, x) => {\n  const zero = findZero(xs);\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  findCoefficientsAt finds coefficients of a polynomial with coefficients xs at point x.\n  >>> round(findCoefficientsAt([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findCoefficientsAt([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCoefficientsAt = (xs, x) => {\n  const zero = findZero(xs);\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  findCoefficientsAt finds coefficients of a polynomial with coefficients xs at point x.\n  >>> round(findCoefficientsAt([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findCoefficientsAt([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCoefficientsAt = (xs, x) => {\n  const zero = findZero(xs);\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  findCoefficientsAt finds coefficients of a polynomial with coefficients xs at point x.\n  >>> round(findCoefficientsAt([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findCoefficientsAt([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCoefficientsAt = (xs, x) => {\n  const zero = findZero(xs);\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  findCoefficientsAt finds coefficients of a polynomial with coefficients xs at point x.\n  >>> round(findCoefficientsAt([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findCoefficientsAt([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCoefficientsAt = (xs, x) => {\n  const zero = findZero(xs);\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  findCoefficientsAt finds coefficients of a ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortsThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l151 = l150.slice();\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = 1\n      result.push(l[i][key])\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElements", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  return l.sort((a, b) => b - a).pop();\n};\n\n/*Return minimum element in the list.\n  >>> minElements([1, 2, 3])\n  1\n  >>> minElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElements = (l) => {\n  return l.sort((a, b) => b - a).shift();\n};\n\n/*Return element at index i in the list.\n  >>> elementAt([0, 1, 2, 3])\n  1\n  >>> elementAt([0, 1, 2, 3], 1)\n  0\n  >>> elementAt([0, 1, 2, 3], 2)\n  2\n  >>> elementAt([0, 1, 2, 3], 3)\n  3\n  >>> elementAt([0, 1, 2, 3], 4)\n  undefined\n  */\nconst elementAt = (l, i) => {\n  return l[i] || undefined;\n};\n\n/*Return element at index i in the list if index is valid, else return undefined.\n  >>> elementAtOrUndefined([0, 1, 2, 3])\n  1\n  >>> elementAtOrUndefined([0, 1, 2, 3], 1)\n  0\n  >>> elementAtOrUndefined([0, 1, 2, 3], 2)\n  2\n  >>> elementAtOrUndefined([0, 1, 2, 3], 3)\n  3\n  >>> elementAtOrUndefined([0, 1, 2, 3], 4)\n  undefined\n  */\nconst elementAtOrUndefined = (l, i) => {\n  return i < 0? undefined : l[i];\n};\n\n/*Return element at index i in the list if index is valid, else return undefined.\n  >>> elementAtOrUndefined([0, 1, 2, 3], 1)\n  0\n  >>> elementAtOrUndefined([0, 1, 2, 3], 2)\n  2\n  >>> elementAtOrUndefined([0, 1, 2, 3], 3)\n  3\n  >>> elementAtOrUndefined([0, 1, 2, 3], 4)\n  undefined\n  */\nconst elementAtOrUndefinedIfIndexIsValid = (l, i) => {\n  return i < 0? undefined : l[i];\n};\n\n/*Return element at index i in the list if index is valid, else return undefined.\n  >>> elementAtOrUndefined([0, 1, 2, 3], 1)\n  0\n  >>> elementAtOrUndefined([0, 1, 2, 3], 2)\n  2\n  >>> elementAtOrUndefined([0, 1, 2, 3], 3)\n  3\n  >>> elementAtOrUndefined([0, 1, 2, 3], 4)\n  undefined\n  */\nconst elementAtOrUndefinedIfIndexIsValidOrUndefined = (l, i) => {\n  return i < 0? undefined : l[i];\n};\n\n/*Return element at index i in the list if index is valid, else return undefined.\n  >>> elementAtOrUndefined([0, 1, 2, 3], 1)\n  0\n  >>> elementAtOrUndefined([0, 1, 2, 3], 2)\n  2\n  >>> elementAtOrUndefined([0, 1, 2, 3], 3)\n  3\n  >>> elementAtOrUndefined([0, 1, 2, 3], 4)\n  undefined\n  */\nconst elementAtOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValid = (l, i) => {\n  return i < 0? undefined : l[i];\n};\n\n/*Return element at index i in the list if index is valid, else return undefined.\n  >>> elementAtOrUndefined([0, 1, 2, 3], 1)\n  0\n  >>> elementAtOrUndefined([0, 1, 2, 3], 2)\n  2\n  >>> elementAtOrUndefined([0, 1, 2, 3], 3)\n  3\n  >>> elementAtOrUndefined([0, 1, 2, 3], 4)\n  undefined\n  */\nconst elementAtOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefined = (l, i) => {\n  return i < 0? undefined : l[i];\n};\n\n/*Return element at index i in the list if index is valid, else return undefined.\n  >>> elementAtOrUndefined([0, 1, 2, 3], 1)\n  0\n  >>> elementAtOrUndefined([0, 1, 2, 3], 2)\n  2\n  >>> elementAtOrUndefined([0, 1, 2, 3], 3)\n  3\n  >>> elementAtOrUndefined([0, 1, 2, 3], 4)\n  undefined\n  */\nconst elementAtOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValid = (l, i) => {\n  return i < 0? undefined : l[i];\n};\n\n/*Return element at index i in the list if index is valid, else return undefined.\n  >>> elementAtOrUndefined([0, 1, 2, 3], 1)\n  0\n  >>> elementAtOrUndefined([0, 1, 2, 3], 2)\n  2\n  >>> elementAtOrUndefined([0, 1, 2, 3], 3)\n  3\n  >>> elementAtOrUndefined([0, 1, 2, 3], 4)\n  undefined\n  */\nconst elementAtOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefined = (l, i) => {\n  return i < 0? undefined : l[i];\n};\n\n/*Return element at index i in the list if index is valid, else return undefined.\n  >>> elementAtOrUndefined([0, 1, 2, 3], 1)\n  0\n  >>> elementAtOrUndefined([0, 1, 2, 3], 2)\n  2\n  >>> elementAtOrUndefined([0, 1, 2, 3], 3)\n  3\n  >>> elementAtOrUndefined([0, 1, 2, 3], 4)\n  undefined\n  */\nconst elementAtOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValid = (l, i) => {\n  return i < 0? undefined : l[i];\n};\n\n/*Return element at index i in the list if index is valid, else return undefined.\n  >>> elementAtOrUndefined([0, 1, 2, 3], 1)\n  0\n  >>> elementAtOrUndefined([0, 1, 2, 3], 2)\n  2\n  >>> elementAtOrUndefined([0, 1, 2, 3], 3)\n  3\n  >>> elementAtOrUndefined([0, 1, 2, 3], 4)\n  undefined\n  */\nconst elementAtOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefined = (l, i) => {\n  return i < 0? undefined : l[i];\n};\n\n/*Return element at index i in the list if index is valid, else return undefined.\n  >>> elementAtOrUndefined([0, 1, 2, 3], 1)\n  0\n  >>> elementAtOrUndefined([0, 1, 2, 3], 2)\n  2\n  >>> elementAtOrUndefined([0, 1, 2, 3], 3)\n  3\n  >>> elementAtOrUndefined([0, 1, 2, 3], 4)\n  undefined\n  */\nconst elementAtOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValid = (l, i) => {\n  return i < 0? undefined : l[i];\n};\n\n/*Return element at index i in the list if index is valid, else return undefined.\n  >>> elementAtOrUndefined([0, 1, 2, 3], 1)\n  0\n  >>> elementAtOrUndefined([0, 1, 2, 3], 2)\n  2\n  >>> elementAtOrUndefined([0, 1, 2, 3], 3)\n  3\n  >>> elementAtOrUndefined([0, 1, 2, 3], 4)\n  undefined\n  */\nconst elementAtOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValidOrUndefinedIfIndexIsValid = (l, i) => {\n  return i < 0? undefined : l[i];\n};\n\n/*Return element at index i in the list if index is valid, else return undefined.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzzes", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = n;\n  while (i <= n) {\n    if (n % i === 0) {\n      count++;\n    }\n    i++;\n  }\n  while (j <= n) {\n    if (n % j === 0) {\n      count++;\n    }\n    j++;\n  }\n  while (k <= n) {\n    if (n % k === 0) {\n      count++;\n    }\n    k++;\n  }\n  while (l <= n) {\n    if (n % l === 0) {\n      count++;\n    }\n    l++;\n  }\n  while (m <= n) {\n    if (n % m === 0) {\n      count++;\n    }\n    m++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return true if the number is a palindrome.\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(321)\n  false\n  */\nconst isPalindrome = (n) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if the number is a palindrome of length n.\n  >>> isPalindromeOfLength(3, 5)\n  true\n  >>> isPalindromeOfLength(3, 6)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('') && reversed === n.toString().split('').reverse().join('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if the number is a palindrome of length n.\n  >>> isPalindromeOfLength(123, 5)\n  true\n  >>> isPalindromeOfLength(123, 6)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('') && reversed === n.toString().split('').reverse().join('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if the number is a palindrome of length n.\n  >>> isPalindromeOfLength(123, 5)\n  true\n  >>> isPalindromeOfLength(123, 6)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('') && reversed === n.toString().split('').reverse().join('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if the number is a palindrome of length n.\n  >>> isPalindromeOfLength(123, 5)\n  true\n  >>> isPalindromeOfLength(123, 6)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('') && reversed === n.toString().split('').reverse().join('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if the number is a palindrome of length n.\n  >>> isPalindromeOfLength(123, 5)\n  true\n  >>> isPalindromeOfLength(123, 6)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('') && reversed === n.toString().split('').reverse().join('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if the number is a palindrome of length n.\n  >>> isPalindromeOfLength(123, 5)\n  true\n  >>> isPalindromeOfLength(123, 6)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('') && reversed === n.toString().split('').reverse().join('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if the number is a palindrome of length n.\n  >>> isPalindromeOfLength(123, 5)\n  true\n  >>> isPalindromeOfLength(123, 6)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('') && reversed === n.toString().split('').reverse().join('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if the number is a palindrome of length n.\n  >>> isPalindromeOfLength(123, 5)\n  true\n  >>> isPalindromeOfLength(123, 6)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('') && reversed === n.toString().split('').reverse().join('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if the number is a palindrome of length n.\n  >>> isPalindromeOfLength(123, 5)\n  true\n  >>> isPalindromeOfLength(123, 6)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('') && reversed === n.toString().split('').reverse().join('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if the number is a palindrome of length n.\n  >>> isPalindromeOfLength(123, 5)\n  true\n  >>> isPalindromeOfLength(123, 6)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('') && reversed === n.toString().split('').reverse().join('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if the number is a palindrome of length n.\n  >>> isPalindromeOfLength(123, 5)\n  true\n  >>> isPalindromeOfLength(123, 6)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('') && reversed === n.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortsEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortsOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortsOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortsEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEvenOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortsEvenOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 2]\n  */\nconst sortsEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEvenOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortsEvenOddOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 2]\n  */\nconst sortsEvenOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEvenOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortsEvenOddOddOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 2]\n  */\nconst sortsEvenOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEvenOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortsEvenOddOddOddOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 2]\n  */\nconst sortsEvenOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEvenOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortsEvenOddOddOddOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 2]\n  */\nconst sortsEvenOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEvenOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortsEvenOddOddOddOddOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 2]\n  */\nconst sortsEvenOddOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEvenOddOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortsEvenOddOddOddOddOddOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 2]\n  */\nconst sortsEvenOddOddO", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroups", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFibs", "gc": "<|endoftext|>/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let a = 1;\n  let b = 2;\n  let fibs = [];\n  while (a <= n) {\n    fibs.push(a);\n    fibs.push(b);\n    fibs.push(a + b);\n    fibs.push(a + b + 2);\n    fibs.push(a + b + 3);\n    fibs.push(a + b + 4);\n    fibs.push(a + b + 5);\n    fibs.push(a + b + 6);\n    fibs.push(a + b + 7);\n    fibs.push(a + b + 8);\n    fibs.push(a + b + 9);\n    fibs.push(a + b + 10);\n    fibs.push(a + b + 11);\n    fibs.push(a + b + 12);\n    fibs.push(a + b + 13);\n    fibs.push(a + b + 14);\n    fibs.push(a + b + 15);\n    fibs.push(a + b + 16);\n    fibs.push(a + b + 17);\n    fibs.push(a + b + 18);\n    fibs.push(a + b + 19);\n    fibs.push(a + b + 20);\n    fibs.push(a + b + 21);\n    fibs.push(a + b + 22);\n    fibs.push(a + b + 23);\n    fibs.push(a + b + 24);\n    fibs.push(a + b + 25);\n    fibs.push(a + b + 26);\n    fibs.push(a + b + 27);\n    fibs.push(a + b + 28);\n    fibs.push(a + b + 29);\n    fibs.push(a + b + 30);\n    fibs.push(a + b + 31);\n    fibs.push(a + b + 32);\n    fibs.push(a + b + 33);\n    fibs.push(a + b + 34);\n    fibs.push(a + b + 35);\n    fibs.push(a + b + 36);\n    fibs.push(a + b + 37);\n    fibs.push(a + b + 38);\n    fibs.push(a + b + 39);\n    fibs.push(a + b + 40);\n    fibs.push(a + b + 41);\n    fibs.push(a + b + 42);\n    fibs.push(a + b + 43);\n    fibs.push(a + b + 44);\n    fibs.push(a + b + 45);\n    fibs.push(a + b + 46);\n    fibs.push(a + b + 47);\n    fibs.push(a + b + 48);\n    fibs.push(a + b + 49);\n    fibs.push(a + b + 50);\n    fibs.push(a + b + 51);\n    fibs.push(a + b + 52);\n    fibs.push(a + b + 53);\n    fibs.push(a + b + 54);\n    fibs.push(a + b + 55);\n    fibs.push(a + b + 56);\n    fibs.push(a + b + 57);\n    fibs.push(a + b + 58);\n    fibs.push(a + b + 59);\n    fibs.push(a + b + 60);\n    fibs.push(a + b + 61);\n    fibs.push(a + b + 62);\n    fibs.push(a + b + 63);\n    fibs.push(a + b + 64);\n    fibs.push(a + b + 65);\n    fibs.push(a + b + 66);\n    fibs.push(a + b + 67);\n    fibs.push(a + b + 68);\n    fibs.push(a + b + 69);\n    fibs.push(a + b + 70);\n    fibs.push(a + b + 71);\n    fibs.push(a + b + 72);\n    fibs.push(a + b + 73);\n    fibs.push(a + b + 74);\n    fibs.push(a + b + 75);\n    fibs.push(a + b + 76);\n    fibs.push(a + b + 77);\n    fibs.push(a + b + 78);\n    fibs.push(a + b + 79);\n    fibs.push(a + b + 80);\n    fibs.push(a + b + 81);\n    fibs.push(a + b + 82);\n    fibs.push(a + b + 83);\n    fibs.push(a + b + 84);\n    fibs.push(a + b + 85);\n    fibs.push(a + b + 86);\n    fibs.push(a + b + 87);\n    fibs.push(a + b + 88);\n    fibs.push(a + b + 89);\n    fibs.push(a + b + 90);\n    fibs.push(a + b + 91);\n    fibs.push(a + b + 92);\n    fibs.push(a + b + 93);\n    fibs.push(a + b + 94);\n    fibs.push(a + b + 95);\n    fibs.push(a + b + 96);\n    fibs.push(a + b + 97);\n    fibs.push(a + b + 98);\n    fibs.push(a + b + 99);\n    fibs.push(a + b + 100);\n    fibs.push(a + b + 101);\n    fibs.push(a + b + 102);\n    fibs.push(a + b + 103);\n    fibs.push(a + b + 104);\n    fibs.push(a + b + 105);\n    fibs.push(a + b + 106);\n    fibs.push(a + b + 107);\n    fibs.push(a + b + 108);\n    fibs.push(a + b + 109);\n    fibs.push(a + b + 110);\n    fibs.push(a + b + 111);\n    fibs.push(a + b + 112);\n    fibs.push(a + b + 113);\n    fibs.push(a + b + 114);\n    fibs.push(a + b + 115);\n    fibs.push(a + b + 116);\n    fibs.push(a + b + 117);\n    fibs.push(a + b + 118);\n    fibs.push(a + b + 119);\n    fibs.push(a + b + 120);\n    fibs.push(a + b + 121);\n    fibs.push(a + b + 122);\n    fibs.push(a + b + 123);\n    fibs.push(a + b + 124);\n    fibs.push(a + b + 125);\n    fibs.push(a + b + 126);\n    fibs.push(a + b + 127);\n    fibs.push(a + b + 128);\n    fibs.push(a + b + 129);\n    fibs.push(a + b + 130);\n    fibs.push(a + b + 131);\n    fibs.push(a + b + 132);\n    fibs.push(a + b + 133);\n    fibs.push(a + b + 134);\n    fibs.push(a + b + 135);\n    fibs.push(a + b + 136);\n    fibs.push(a + b + 137);\n    fibs.push(a + b + 138);\n    fibs.push(a + b + 139);\n    fibs.push(a + b + 140);\n    fibs.push(a + b + 141);\n    fibs.push(a + b + 142);\n    fibs.push(a + b + 143);\n    fibs.push(a + b + 144);\n    fibs.push(a + b + 145);\n    fibs.push(a + b + 146);\n    fibs.push(a + b + 147);\n    fibs.push(a + b + 148);\n    fibs.push(a + b + 149);\n    fibs.push(a + b + 150);\n    fibs.push(a + b + 151);\n    fibs.push(a + b + 152);\n    fibs.push(a + b + 153);\n    fibs.push(a + b + 154);\n    fibs.push(a + b + 155);\n    fibs.push(a + b + 156);\n    fibs.push(a + b + 157);\n    fibs.push(a + b + 158);\n    fibs.push(a + b + 159);\n    fibs.push(a + b + 160);\n    fibs.push(a + b + ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanerAbsolutesDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const meansMean = means.reduce((a, b) => a + b, 0);\n  const meansMeanSquared = means.reduce((a, b) => a * b, 0);\n  const meansMeanAbsolute = meansMean - meansMeanSquared;\n  const meansMeanAbsoluteDeviation = Math.sqrt(meansMeanAbsolute);\n  return meansMeanAbsoluteDeviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squares of the difference\n  between each element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meanerSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanerSquaredDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const meansMean = means.reduce((a, b) => a + b, 0);\n  const meansMeanSquared = means.reduce((a, b) => a * b, 0);\n  const meansMeanAbsolute = meansMean - meansMeanSquared;\n  const meansMeanAbsoluteDeviation = Math.sqrt(meansMeanAbsolute);\n  return meansMeanAbsoluteDeviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Error\n  around the mean of this dataset.\n  Mean Squared Error is the average of the squares of the difference\n  between each element and a centerpoint (mean in this case):\n  MSE = average | x - x_mean |^2\n  >>> meanerSquaredError([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanerSquaredError = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const meansMean = means.reduce((a, b) => a + b, 0);\n  const meansMeanSquared = means.reduce((a, b) => a * b, 0);\n  const meansMeanAbsolute = meansMean - meansMeanSquared;\n  const meansMeanAbsoluteDeviation = Math.sqrt(meansMeanAbsolute);\n  return meansMeanAbsoluteDeviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Absolute Error\n  around the mean of this dataset.\n  Mean Absolute Error is the average of the absolute difference\n  between each element and a centerpoint (mean in this case):\n  MAE = average | x - x_mean |\n  >>> meanerAbsoluteError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsoluteError = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const meansMean = means.reduce((a, b) => a + b, 0);\n  const meansMeanSquared = means.reduce((a, b) => a * b, 0);\n  const meansMeanAbsolute = meansMean - meansMeanSquared;\n  const meansMeanAbsoluteDeviation = Math.sqrt(meansMeanAbsolute);\n  return meansMeanAbsoluteDeviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Absolute Percentage Error\n  around the mean of this dataset.\n  Mean Absolute Percentage Error is the average of the absolute difference\n  between each element and a centerpoint (mean in this case):\n  MAPE = average | x - x_mean |%\n  >>> meanerAbsolutePercentageError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutePercentageError = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const meansMean = means.reduce((a, b) => a + b, 0);\n  const meansMeanSquared = means.reduce((a, b) => a * b, 0);\n  const meansMeanAbsolute = meansMean - meansMeanSquared;\n  const meansMeanAbsoluteDeviation = Math.sqrt(meansMeanAbsolute);\n  return meansMeanAbsoluteDeviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Percentage Error\n  around the mean of this dataset.\n  Mean Squared Percentage Error is the average of the squares of the difference\n  between each element and a centerpoint (mean in this case):\n  MSRPE = average | x - x_mean |%\n  >>> meanerSquaredPercentageError([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanerSquaredPercentageError = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const meansMean = means.reduce((a, b) => a + b, 0);\n  const meansMeanSquared = means.reduce((a, b) => a * b, 0);\n  const meansMeanAbsolute = meansMean - meansMeanSquared;\n  const meansMeanAbsoluteDeviation = Math.sqrt(meansMeanAbsolute);\n  return meansMeanAbsoluteDeviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Relative Error\n  around the mean of this dataset.\n  Mean Squared Relative Error is the average of the squares of the difference\n  between each element and a centerpoint (mean in this case):\n  MSRE = average | x - x_mean |%\n  >>> meanerSquaredRelativeError([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst meanerSquaredRelativeError = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const meansMean = means.reduce((a, b) => a + b, 0);\n  const meansMeanSquared = means.reduce((a, b) => a * b, 0);\n  const meansMeanAbsolute = meansMean - meansMeanSquared;\n  const meansMeanAbsoluteDeviation = Math.sqrt(meansMeanAbsolute);\n  return meansMeanAbsoluteDeviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Absolute Relative Error\n  around the mean of this dataset.\n  Mean Absolute Relative Error is the average of the absolute difference\n  between each element and a centerpoint (mean in this case):\n  MARE = average | x - x_mean |%\n  >>> meanerAbsoluteRelativeError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsoluteRelativeError = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const meansMean = means.reduce((a, b) => a + b, 0);\n  const meansMeanSquared = means.reduce((a, b) => a * b, 0);\n  const meansMeanAbsolute = meansMean - meansMeanSquared;\n  const meansMeanAbsoluteDeviation = Math.sqrt(meansMeanAbsolute);\n  return meansMeanAbsoluteDeviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Absolute Deviation Relative Error\n  around the mean of this dataset.\n  Mean Absolute Deviation Relative Error is the average of the absolute difference\n  between each element and a centerpoint (mean in this case):\n  MADRE = average | x - x_mean |%\n  >>> meanerAbsoluteDeviationRelativeError([1.0, 2.0, 3.0, 4.0])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSummingToZeroed", "gc": "<|endoftext|>/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  removeDuplicatesFromList takes a list of integers as an input.\n  it returns another list without duplicates.\n\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5])\n  [3, 5, 5]\n  >>> removeDuplicatesFromList([1, 3, 5])\n  [3, 5, 5]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carsRacesCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n  const carsLeft = n.cars.filter(c => c.speed > 0)\n  const carsRight = n.cars.filter(c => c.speed < 0)\n  const collisions = carsLeft.length + carsRight.length\n  return collisions\n}\n\n/*\n  Given a road network, find the number of roads whose roads are strongly\n  connected and whose roads are weakly connected.\n  */\nconst roadsConnectedAndWeaklyConnected = (roadNetwork) => {\n  const roads = roadNetwork.roads.filter(road => road.roadType === 'road')\n  const roadsWithStronglyConnectedRoads = roads.filter(road => road.roadType ==='stronglyConnectedRoad')\n  const roadsWithWeaklyConnectedRoads = roads.filter(road => road.roadType === 'weaklyConnectedRoad')\n  return roadsWithStronglyConnectedRoads.length + roadsWithWeaklyConnectedRoads.length\n}\n\n/*\n  Given a road network, find the number of roads whose roads are strongly\n  connected and whose roads are weakly connected.\n  */\nconst roadsConnectedAndStronglyConnected = (roadNetwork) => {\n  const roads = roadNetwork.roads.filter(road => road.roadType === 'road')\n  const roadsWithStronglyConnectedRoads = roads.filter(road => road.roadType ==='stronglyConnectedRoad')\n  const roadsWithWeaklyConnectedRoads = roads.filter(road => road.roadType === 'weaklyConnectedRoad')\n  return roadsWithStronglyConnectedRoads.length + roadsWithWeaklyConnectedRoads.length\n}\n\n/*\n  Given a road network, find the number of roads whose roads are strongly\n  connected and whose roads are weakly connected.\n  */\nconst roadsConnectedAndWeaklyConnectedAndStronglyConnected = (roadNetwork) => {\n  const roads = roadNetwork.roads.filter(road => road.roadType === 'road')\n  const roadsWithStronglyConnectedRoads = roads.filter(road => road.roadType ==='stronglyConnectedRoad')\n  const roadsWithWeaklyConnectedRoads = roads.filter(road => road.roadType === 'weaklyConnectedRoad')\n  const roadsWithStronglyConnectedAndWeaklyConnectedRoads = roads.filter(road => road.roadType ==='stronglyConnectedRoad' && road.roadType === 'weaklyConnectedRoad')\n  return roadsWithStronglyConnectedRoads.length + roadsWithWeaklyConnectedRoads.length + roadsWithStronglyConnectedAndWeaklyConnectedRoads.length\n}\n\n/*\n  Given a road network, find the number of roads whose roads are strongly\n  connected and whose roads are weakly connected.\n  */\nconst roadsConnectedAndStronglyConnectedAndWeaklyConnected = (roadNetwork) => {\n  const roads = roadNetwork.roads.filter(road => road.roadType === 'road')\n  const roadsWithStronglyConnectedRoads = roads.filter(road => road.roadType ==='stronglyConnectedRoad')\n  const roadsWithWeaklyConnectedRoads = roads.filter(road => road.roadType === 'weaklyConnectedRoad')\n  const roadsWithStronglyConnectedAndWeaklyConnectedRoads = roads.filter(road => road.roadType ==='stronglyConnectedRoad' && road.roadType === 'weaklyConnectedRoad')\n  return roadsWithStronglyConnectedRoads.length + roadsWithWeaklyConnectedRoads.length + roadsWithStronglyConnectedAndWeaklyConnectedRoads.length\n}\n\n/*\n  Given a road network, find the number of roads whose roads are strongly\n  connected and whose roads are weakly connected.\n  */\nconst roadsConnectedAndWeaklyConnectedAndStronglyConnectedAndWeaklyConnected = (roadNetwork) => {\n  const roads = roadNetwork.roads.filter(road => road.roadType === 'road')\n  const roadsWithStronglyConnectedRoads = roads.filter(road => road.roadType ==='stronglyConnectedRoad')\n  const roadsWithWeaklyConnectedRoads = roads.filter(road => road.roadType === 'weaklyConnectedRoad')\n  const roadsWithStronglyConnectedAndWeaklyConnectedRoads = roads.filter(road => road.roadType ==='stronglyConnectedRoad' && road.roadType === 'weaklyConnectedRoad')\n  return roadsWithStronglyConnectedRoads.length + roadsWithWeaklyConnectedRoads.length + roadsWithStronglyConnectedAndWeaklyConnectedRoads.length\n}\n\n/*\n  Given a road network, find the number of roads whose roads are strongly\n  connected and whose roads are weakly connected.\n  */\nconst roadsConnectedAndStronglyConnectedAndWeaklyConnectedAndStronglyConnected = (roadNetwork) => {\n  const roads = roadNetwork.roads.filter(road => road.roadType === 'road')\n  const roadsWithStronglyConnectedRoads = roads.filter(road => road.roadType ==='stronglyConnectedRoad')\n  const roadsWithWeaklyConnectedRoads = roads.filter(road => road.roadType === 'weaklyConnectedRoad')\n  const roadsWithStronglyConnectedAndWeaklyConnectedRoads = roads.filter(road => road.roadType ==='stronglyConnectedRoad' && road.roadType === 'weaklyConnectedRoad')\n  return roadsWithStronglyConnectedRoads.length + roadsWithWeaklyConnectedRoads.length + roadsWithStronglyConnectedAndWeaklyConnectedRoads.length\n}\n\n/*\n  Given a road network, find the number of roads whose roads are strongly\n  connected and whose roads are weakly connected.\n  */\nconst roadsConnectedAndWeaklyConnectedAndStronglyConnectedAndWeaklyConnectedAndStronglyConnected = (roadNetwork) => {\n  const roads = roadNetwork.roads.filter(road => road.roadType === 'road')\n  const roadsWithStronglyConnectedRoads = roads.filter(road => road.roadType ==='stronglyConnectedRoad')\n  const roadsWithWeaklyConnectedRoads = roads.filter(road => road.roadType === 'weaklyConnectedRoad')\n  const road", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrLists", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrLists = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversed = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversed = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversedReversed = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversedReversed = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversedReversedReversed = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversedReversedReversed = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversedReversedReversedReversedReversed = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversedReversedReversedReversedReversed = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversedReversedReversedReversedReversedReversed = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversedReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversedReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversedReversedReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversedReversedReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  let result = []\n  for (let i = l.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairSumsToZero", "gc": "<|endoftext|>/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  removeDuplicates\n  removes duplicates from a list\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 1, 1, 2, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBases", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n  let s = x.toString(base);\n  while (s.length < base) s = '0' + s;\n  return s;\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let binary = [];\n  for (let i = 0; i < str.length; i++) {\n    binary[i] = str.charCodeAt(i).toString(2);\n  }\n  return binary.join('');\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let decimal = [];\n  for (let i = 0; i < str.length; i++) {\n    decimal[i] = parseInt(str.charAt(i), 2);\n  }\n  return decimal.join('');\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str => {\n  let hex = [];\n  for (let i = 0; i < str.length; i++) {\n    hex[i] = str.charCodeAt(i).toString(16);\n  }\n  return hex.join('');\n};\n\n/**\n * Convert a string to its octal representation.\n * @param {string} str\n * @return {string}\n */\nconst octal = str => {\n  let octal = [];\n  for (let i = 0; i < str.length; i++) {\n    octal[i] = str.charCodeAt(i).toString(8);\n  }\n  return octal.join('');\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let binary = [];\n  for (let i = 0; i < str.length; i++) {\n    binary[i] = parseInt(str.charAt(i), 2);\n  }\n  return binary.join('');\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let decimal = [];\n  for (let i = 0; i < str.length; i++) {\n    decimal[i] = parseInt(str.charAt(i), 8);\n  }\n  return decimal.join('');\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str => {\n  let hex = [];\n  for (let i = 0; i < str.length; i++) {\n    hex[i] = parseInt(str.charAt(i), 16);\n  }\n  return hex.join('');\n};\n\n/**\n * Convert a string to its octal representation.\n * @param {string} str\n * @return {string}\n */\nconst octal = str => {\n  let octal = [];\n  for (let i = 0; i < str.length; i++) {\n    octal[i] = parseInt(str.charAt(i), 8);\n  }\n  return octal.join('');\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let binary = [];\n  for (let i = 0; i < str.length; i++) {\n    binary[i] = parseInt(str.charAt(i), 2);\n  }\n  return binary.join('');\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let decimal = [];\n  for (let i = 0; i < str.length; i++) {\n    decimal[i] = parseInt(str.charAt(i), 8);\n  }\n  return decimal.join('');\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str => {\n  let hex = [];\n  for (let i = 0; i < str.length; i++) {\n    hex[i] = parseInt(str.charAt(i), 16);\n  }\n  return hex.join('');\n};\n\n/**\n * Convert a string to its octal representation.\n * @param {string} str\n * @return {string}\n */\nconst octal = str => {\n  let octal = [];\n  for (let i = 0; i < str.length; i++) {\n    octal[i] = parseInt(str.charAt(i), 8);\n  }\n  return octal.join('');\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let binary = [];\n  for (let i = 0; i < str.length; i++) {\n    binary[i] = parseInt(str.charAt(i), 2);\n  }\n  return binary.join('');\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let decimal = [];\n  for (let i = 0; i < str.length; i++) {\n    decimal[i] = parseInt(str.charAt(i), 8);\n  }\n  return decimal.join('');\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str => {\n  let hex = [];\n  for (let i = 0; i < str.length; i++) {\n    hex[i] = parseInt(str.charAt(i), 16);\n  }\n  return hex.join('');\n};\n\n/**\n * Convert a string to its octal representation.\n * @param {string} str\n * @return {string}\n */\nconst octal = str => {\n  let octal = [];\n  for (let i = 0; i < str.length; i++) {\n    octal[i] = parseInt(str.charAt(i), 8);\n  }\n  return octal.join('');\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let binary = [];\n  for (let i = 0; i < str.length; i++) {\n    binary[i] = parseInt(str.charAt(i), 2);\n  }\n  return binary.join('');\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let decimal = [];\n  for (let i = 0; i < str.length; i++) {\n    decimal[i] = parseInt(str.charAt(i), 8);\n  }\n  return decimal.join('');\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str => {\n  let hex = [];\n  for (let i = 0; i < str.length; i++) {\n    hex[i] = parseInt(str.charAt(i), 16);\n  }\n  return hex.join('');\n};\n\n/**\n * Convert a string to its octal representation.\n * @param {string} str\n * @return {string}\n */\nconst octal = str => {\n  let octal = [];\n  for (let i = 0; i < str.length; i++) {\n    octal[i] = parseInt(str.charAt(i), 8);\n  }\n  return octal.join('');\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let binary = [];\n  for (let i = 0; i < str.length; i++) {\n    binary[i] = parseInt(str.charAt(i), 2);\n  }\n  return binary.join('');\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let decimal = [];\n  for (let i = 0; i < str.length; i++) {\n    decimal[i] = parseInt(str.charAt(i), 8);\n  }\n  return decimal.join('');\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str => {\n  let hex = [];\n  for (let i = 0; i < str.length; i++) {\n    hex[i] = parseInt(str.charAt(i), 16);\n  }\n  return hex.join('');\n};\n\n/**\n * Convert a string to its octal representation.\n * @param {string} str\n * @return {string}\n */\nconst octal = str => {\n  let octal = [];\n  for (let i = 0; i < str.length; i++) {\n    octal[i] = parseInt(str.charAt(i), 8);\n  }\n  return octal.join('');\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let binary = [];\n  for (let i = 0; i < str.length; i++) {\n    binary[i] = parseInt(str.charAt(i), 2);\n  }\n  return binary.join('');\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let decimal = [];\n  for (let i = 0; i < str.length; i++) {\n    decimal[i] = parseInt(str.charAt(i), 8);\n  }\n  return decimal.join('');\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 2)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  3\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  -1\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  -1\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  -1\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  -1\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  -1\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  -1\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  -1\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  -1\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return Math.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1.\n  >>> fib2(5)\n  0\n  >>> fib2(6)\n  1\n  >>> fib2(7)\n  2\n  >>> fib2(8)\n  3\n  >>> fib2(9)\n  5\n  >>> fib2(10)\n  8\n  >>> fib2(11)\n  13\n  >>> fib2(12)\n  21\n  >>> fib2(13)\n  34\n  >>> fib2(14)\n  55\n  >>> fib2(15)\n  89\n  >>> fib2(16)\n  144\n  >>> fib2(17)\n  233\n  >>> fib2(18)\n  377\n  >>> fib2(19)\n  610\n  >>> fib2(20)\n  987\n  >>> fib2(21)\n  1597\n  >>> fib2(22)\n  2584\n  >>> fib2(23)\n  4181\n  >>> fib2(24)\n  6765\n  >>> fib2(25)\n  10946\n  >>> fib2(26)\n  17711\n  >>> fib2(27)\n  28657\n  >>> fib2(28)\n  46368\n  >>> fib2(29)\n  75025\n  >>> fib2(30)\n  121393\n  >>> fib2(31)\n  258443\n  >>> fib2(32)\n  570285\n  >>> fib2(33)\n  92274\n  >>> fib2(34)\n  1493035\n  >>> fib2(35)\n  2914593\n  >>> fib2(36)\n  4293297\n  >>> fib2(37)\n  676531\n  >>> fib2(38)\n  1094639\n  >>> fib2(39)\n  1771193\n  >>> fib2(40)\n  2865739\n  >>> fib2(41)\n  4636839\n  >>> fib2(42)\n  7502539\n  >>> fib2(43)\n  12139389\n  >>> fib2(44)\n  25844389\n  >>> fib2(45)\n  57028589\n  >>> fib2(46)\n  9227489\n  >>> fib2(47)\n  149303589\n  >>> fib2(48)\n  291459389\n  >>> fib2(49)\n  429329789\n  >>> fib2(50)\n  67653119\n  >>> fib2(51)\n  109463989\n  >>> fib2(52)\n  177119389\n  >>> fib2(53)\n  286573989\n  >>> fib2(54)\n  463683989\n  >>> fib2(55)\n  750253989\n  >>> fib2(56)\n  1213938989\n  >>> fib2(57)\n  2584438989\n  >>> fib2(58)\n  5702858989\n  >>> fib2(59)\n  922748989\n  >>> fib2(60)\n  14930358989\n  >>> fib2(61)\n  2914593897\n  >>> fib2(62)\n  4293297897\n  >>> fib2(63)\n  6765311972\n  >>> fib2(64)\n  10946398972\n  >>> fib2(65)\n  17711938972\n  >>> fib2(66)\n  28657398972\n  >>> fib2(67)\n  46368398972\n  >>> fib2(68)\n  75025398972\n  >>> fib2(69)\n  121393898972\n  >>> fib2(70)\n  258443898972\n  >>> fib2(71)\n  570285898972\n  >>> fib2(72)\n  92274898972\n  >>> fib2(73)\n  1493035898972\n  >>> fib2(74)\n  291459389722\n  >>> fib2(75)\n  429329789722\n  >>> fib2(76)\n  676531197225\n  >>> fib2(77)\n  1094639897225\n  >>> fib2(78)\n  1771193897225\n  >>> fib2(79)\n  2865739897225\n  >>> fib2(80)\n  4636839897225\n  >>> fib2(81)\n  7502539897225\n  >>> fib2(82)\n  12139389897225\n  >>> fib2(83)\n  25844389897225\n  >>> fib2(84)\n  57028589897225\n  >>> fib2(85)\n  9227489897225\n  >>> fib2(86)\n  149303589897225\n  >>> fib2(87)\n  2914593897223\n  >>> fib2(88)\n  4293297897223\n  >>> fib2(89)\n  6765311972253\n  >>> fib2(90)\n  10946398972253\n  >>> fib2(91)\n  17711938972253\n  >>> fib2(92)\n  28657398972253\n  >>> fib2(93)\n  46368398972253\n  >>> fib2(94)\n  75025398972253\n  >>> fib2(95)\n  121393898972253\n  >>> fib2(96)\n  258443898972253\n  >>> fib2(97)\n  570285898972253\n  >>> fib2(98)\n  92274898972253\n  >>> fib2(99)\n  1493035898972253\n  >>> fib2(100)\n  2914593897223\n  >>> fib2(101)\n  4293297897223\n  >>> fib2(102)\n  6765311972253\n  >>> fib2(103)\n  10946398972253\n  >>> fib2(104)\n  17711938972253\n  >>> fib2(105)\n  28657398972253\n  >>> fib2(106)\n  46368398972253\n  >>> fib2(107)", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  if (n === 0) {\n    return 0;\n  }\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (i + 1) < n? i + 1 : n;\n  let pivot = l[Math.floor((j - 1) / 2)];\n  let left = median(l[0 : i - 1]);\n  let right = median(l[i - 1 : j]);\n  return ((left + right) / 2) + (pivot || 0);\n};\n\n/**\n * Return true if all elements in the list are less than or equal to x.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If x is a set, then it must be empty.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If x is a set, then it must be empty.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If x is a set, then it must be empty.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If x is a set, then it must be empty.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If x is a set, then it must be empty.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If x is a set, then it must be empty.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If x is a set, then it must be empty.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If x is a set, then it must be empty.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If x is a set, then it must be empty.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If x is a set, then it must be empty.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If x is a set, then it must be empty.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If x is a set, then it must be empty.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If x is a set, then it must be empty.\n * If x is a string, then it must be one of 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n * If x is a number, then it must be greater than or equal to 0.\n * If x is a boolean, then it must be true or false.\n * If x is a list, then it must be empty.\n * If x is a dictionary, then it must be empty.\n * If ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text.reverse();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(0, length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(0, length).reverse();\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(length - 1).reverse();\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(0, length).reverse().slice(0, length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(length - 1).reverse().slice(0, length).reverse();\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(0, length).reverse().slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(length - 1).reverse().slice(0, length).reverse();\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(0, length).reverse().slice(length - 1).slice(0, length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(length - 1).reverse().slice(0, length).reverse().slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(0, length).reverse().slice(length - 1).slice(0, length).reverse();\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(length - 1).reverse().slice(0, length).reverse().slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(0, length).reverse().slice(length - 1).slice(0, length).reverse();\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversed = text.reverse();\n  return text === reversed.slice(length - 1).reverse().slice(0, length).reverse().slice(length - 1);\n};\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  n = n.toString(2);\n  if (n.length < 2) return 0;\n  let m = n.length - 1;\n  let r = n % p;\n  if (r === 0) return 0;\n  if (r === 1) return m;\n  return r === 0? m - 1 : m + 1;\n};\n\n/*\n  >>> modp(1, 3)\n  1\n  >>> modp(3, 3)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 11)\n  8\n  >>> modp(3, 21)\n  15\n  >>> modp(3, 51)\n  15\n  >>> modp(3, 101)\n  21\n  >>> modp(3, 151)\n  31\n  >>> modp(3, 201)\n  61\n  >>> modp(3, 501)\n  61\n  >>> modp(3, 1001)\n  101\n  >>> modp(3, 5011)\n  101\n  >>> modp(3, 10011)\n  101\n  >>> modp(3, 5021) // overflow\n  101\n  >>> modp(3, 10021)\n  101\n  >>> modp(3, 5031)\n  101\n  >>> modp(3, 10031)\n  101\n  >>> modp(3, 5041)\n  101\n  >>> modp(3, 10041)\n  101\n  >>> modp(3, 5051)\n  101\n  >>> modp(3, 10051)\n  101\n  >>> modp(3, 5061)\n  101\n  >>> modp(3, 10061)\n  101\n  >>> modp(3, 5071)\n  101\n  >>> modp(3, 10071)\n  101\n  >>> modp(3, 5081)\n  101\n  >>> modp(3, 10081)\n  101\n  >>> modp(3, 5091)\n  101\n  >>> modp(3, 10091)\n  101\n  >>> modp(3, 5101)\n  101\n  >>> modp(3, 1011)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)\n  101\n  >>> modp(3, 5111)\n  101\n  >>> modp(3, 10111)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n    } else {\n      result.push(numbers[i] + delimeter + numbers[j]);\n      i++;\n      j++;\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing all but the first `n` elements of the given list.\n * If `n` is negative the returned list will contain all but the last `n` elements.\n *\n * If `list` is empty the returned list will be empty.\n *\n * If `list` is non-empty the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is negative the returned list will contain all but the last `n` elements.\n *\n * If `list` is non-empty and `n` is positive the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than or equal to zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than or equal to `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is less than or equal to `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is less than zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is less than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is zero the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If `list` is non-empty and `n` is greater than `n` the returned list will contain all but the first `n` elements.\n *\n * If ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBytes = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBytes function. Returns decoded string.\n  */\nconst decodeToBytes = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToHex = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToHex function. Returns decoded string.\n  */\nconst decodeToHex = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64 function. Returns decoded string.\n  */\nconst decodeToBase64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowel", "gc": "<|endoftext|>/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('')\n  let newText = ''\n  for (let i = 0; i < punctuation.length; i++) {\n    if (punctuation[i] === '.' || punctuation[i] === '!' || punctuation[i] === '?' || punctuation[i] === '(' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '/' || punctuation[i] === '\\\\' || punctuation[i] === '|' || punctuation[i] === '-' || punctuation[i] === '_' || punctuation[i] === '+' || punctuation[i] === '*' || punctuation[i] === '&' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '&' || punctuation[i] === '|' || punctuation[i] === '!' || punctuation[i] === '@' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThresholds", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> isEven([0, 2, 4, 6, 8])\n  true\n  >>> isEven([0, 2, 4, 6, 8])\n  false\n  >>> isEven([0, 2, 4, 6, 8])\n  true\n  >>> isEven([0, 2, 4, 6, 8])\n  false\n  >>> isEven([0, 2, 4, 6, 8])\n  true\n  >>> isEven([0, 2, 4, 6, 8])\n  false\n*/\nconst isEven = arr => {\n  return arr.reduce((acc, n) => acc && n % 2 === 0, true);\n};\n\n/*\n  >>> isOdd([0, 2, 4, 6, 8])\n  false\n  >>> isOdd([0, 2, 4, 6, 8])\n  true\n  >>> isOdd([0, 2, 4, 6, 8])\n  false\n  >>> isOdd([0, 2, 4, 6, 8])\n  true\n  >>> isOdd([0, 2, 4, 6, 8])\n  false\n*/\nconst isOdd = arr => {\n  return arr.reduce((acc, n) => acc && n % 2!== 0, false);\n};\n\n/*\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n*/\nconst isEvenOrOdd = arr => {\n  return arr.reduce((acc, n) => acc || (n % 2 === 0), true);\n};\n\n/*\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n*/\nconst isEvenOrOddOrZero = arr => {\n  return arr.reduce((acc, n) => acc || (n % 2 === 0), true);\n};\n\n/*\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n*/\nconst isEvenOrOddOrZeroOrOne = arr => {\n  return arr.reduce((acc, n) => acc || (n % 2 === 0), true);\n};\n\n/*\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n*/\nconst isEvenOrOddOrZeroOrOneOrZero = arr => {\n  return arr.reduce((acc, n) => acc || (n % 2 === 0), true);\n};\n\n/*\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n*/\nconst isEvenOrOddOrZeroOrOneOrZeroOrOne = arr => {\n  return arr.reduce((acc, n) => acc || (n % 2 === 0), true);\n};\n\n/*\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n*/\nconst isEvenOrOddOrZeroOrOneOrZeroOrOneOrZero = arr => {\n  return arr.reduce((acc, n) => acc || (n % 2 === 0), true);\n};\n\n/*\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n*/\nconst isEvenOrOddOrZeroOrOneOrZeroOrOneOrZeroOrOne = arr => {\n  return arr.reduce((acc, n) => acc || (n % 2 === 0), true);\n};\n\n/*\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n*/\nconst isEvenOrOddOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZero = arr => {\n  return arr.reduce((acc, n) => acc || (n % 2 === 0), true);\n};\n\n/*\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n*/\nconst isEvenOrOddOrZeroOr", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst subtracting = (x, y) => {\n  return x - y;\n};\n\n/*\n  Subtract two numbers x and y\n  >>> subtracting(2, 3)\n  3\n  >>> subtracting(5, 7)\n  -1\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  0.5\n  >>> dividing(5, 7)\n  0.25\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modulo(7, 2)\n  1\n  >>> modulo(7, 3)\n  0\n  */\nconst modInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverse(7, 2)\n  1\n  >>> modInverse(7, 3)\n  0\n  */\nconst modInverseMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseMod(7, 2)\n  1\n  >>> modInverseMod(7, 3)\n  0\n  */\nconst modInverseModInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverse(7, 2)\n  1\n  >>> modInverseModInverse(7, 3)\n  0\n  */\nconst modInverseModInverseMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverseMod(7, 2)\n  1\n  >>> modInverseModInverseMod(7, 3)\n  0\n  */\nconst modInverseModInverseModInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverseModInverse(7, 2)\n  1\n  >>> modInverseModInverseModInverse(7, 3)\n  0\n  */\nconst modInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverseModInverseModInverse(7, 2)\n  1\n  >>> modInverseModInverseModInverseModInverse(7, 3)\n  0\n  */\nconst modInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverseModInverseModInverseModInverse(7, 2)\n  1\n  >>> modInverseModInverseModInverseModInverseModInverse(7, 3)\n  0\n  */\nconst modInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverseModInverseModInverseModInverse(7, 2)\n  1\n  >>> modInverseModInverseModInverseModInverseModInverse(7, 3)\n  0\n  */\nconst modInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverseModInverseModInverseModInverseModInverse(7, 2)\n  1\n  >>> modInverseModInverseModInverseModInverseModInverseModInverse(7, 3)\n  0\n  */\nconst modInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverseModInverseModInverseModInverseModInverse(7, 2)\n  1\n  >>> modInverseModInverseModInverseModInverseModInverseModInverseModInverse(7, 3)\n  0\n  */\nconst modInverseModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverseModInverseModInverseModInverseModInverseModInverse(7, 2)\n  1\n  >>> modInverseModInverseModInverseModInverseModInverseModInverseModInverse(7, 3)\n  0\n  */\nconst modInverseModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverseModInverseModInverseModInverseModInverseModInverse(7, 2)\n  1\n  >>> modInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(7, 3)\n  0\n  */\nconst modInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(7, 2)\n  1\n  >>> modInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(7, 3)\n  0\n  */\nconst modInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(7, 2)\n  1\n  >>> modInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(7, 3)\n  0\n  */\nconst modInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(7, 2)\n  1\n  >>> modInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(7, 3)\n  0\n  */\nconst modInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  return x % y;\n};\n\n/*\n  Calculate a number modulo another number\n  >>> modInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(7, 2)\n  1\n  >>> modInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseMod", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChar", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length < s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same letters.\n  >>> sameLetter('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLetter('abcd', 'dddddddabc')\n  true\n  >>> sameLetter('dddddddabc', 'abcd')\n  true\n  >>> sameLetter('eabcd', 'dddddddabc')\n  false\n  >>> sameLetter('abcd', 'dddddddabce')\n  false\n  >>> sameLetter('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLetter = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length < s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same numbers.\n  >>> sameNumber('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameNumber('abcd', 'dddddddabc')\n  true\n  >>> sameNumber('dddddddabc', 'abcd')\n  true\n  >>> sameNumber('eabcd', 'dddddddabc')\n  false\n  >>> sameNumber('abcd', 'dddddddabce')\n  false\n  >>> sameNumber('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameNumber = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length < s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same symbols.\n  >>> sameSymbol('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameSymbol('abcd', 'dddddddabc')\n  true\n  >>> sameSymbol('dddddddabc', 'abcd')\n  true\n  >>> sameSymbol('eabcd', 'dddddddabc')\n  false\n  >>> sameSymbol('abcd', 'dddddddabce')\n  false\n  >>> sameSymbol('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameSymbol = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length < s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same uppercase letters.\n  >>> sameUpperCase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameUpperCase('abcd', 'dddddddabc')\n  true\n  >>> sameUpperCase('dddddddabc', 'abcd')\n  true\n  >>> sameUpperCase('eabcd', 'dddddddabc')\n  false\n  >>> sameUpperCase('abcd', 'dddddddabce')\n  false\n  >>> sameUpperCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameUpperCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length < s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same lowercase letters.\n  >>> sameLowerCase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLowerCase('abcd', 'dddddddabc')\n  true\n  >>> sameLowerCase('dddddddabc', 'abcd')\n  true\n  >>> sameLowerCase('eabcd', 'dddddddabc')\n  false\n  >>> sameLowerCase('abcd', 'dddddddabce')\n  false\n  >>> sameLowerCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLowerCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length < s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same digits (0-9).\n  >>> sameDigit('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameDigit('abcd', 'dddddddabc')\n  true\n  >>> sameDigit('dddddddabc', 'abcd')\n  true\n  >>> sameDigit('eabcd', 'dddddddabc')\n  false\n  >>> sameDigit('abcd', 'dddddddabce')\n  false\n  >>> sameDigit('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameDigit = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length < s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same special characters (!@#$%^&*()_+).\n  >>> sameSpecial('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameSpecial('abcd', 'dddddddabc')\n  true\n  >>> sameSpecial('dddddddabc', 'abcd')\n  true\n  >>> sameSpecial('eabcd', 'dddddddabc')\n  false\n  >>> sameSpecial('abcd', 'dddddddabce')\n  false\n  >>> sameSpecial('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameSpecial = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length < s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same uppercase letters and lowercase letters.\n  >>> sameCase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCase('abcd', 'dddddddabc')\n  true\n  >>> sameCase('dddddddabc', 'abcd')\n  true\n  >>> sameCase('eabcd', 'dddddddabc')\n  false\n  >>> sameCase('abcd', 'dddddddabce')\n  false\n  >>> sameCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length < s1.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fibs", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs2 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs3 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs4 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs5 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs6 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs7 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs8 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs9 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs10 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs11 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs12 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs13 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs14 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs15 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs16 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs17 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs18 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    c += d;\n    d += b;\n    b += a;\n    a += c;\n    n--;\n  }\n  return a;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs19 = (n) => {\n  let a = 0, b = 1, c = 0, d = 1;\n  while (n) {\n    ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"\");\n  const closingBrackets = openingBrackets.filter(\n    (openingBracket) => openingBracket.includes(\"<\")\n  );\n  return closingBrackets.length === openingBrackets.length;\n};\n\n/**\n * Returns true if a character is a digit.\n *\n * >>> isDigit(\"1\")\n * true\n * >>> isDigit(\"2\")\n * false\n */\nconst isDigit = char => char >= \"0\" && char <= \"9\";\n\n/**\n * Returns true if a character is a letter.\n *\n * >>> isLetter(\"a\")\n * true\n * >>> isLetter(\"b\")\n * false\n */\nconst isLetter = char => char >= \"a\" && char <= \"z\";\n\n/**\n * Returns true if a character is a underscore.\n *\n * >>> isUnderscore(\"_\")\n * true\n * >>> isUnderscore(\"a\")\n * false\n */\nconst isUnderscore = char => char === \"_\";\n\n/**\n * Returns true if a character is a punctuation character.\n *\n * >>> isPunctuation(\".\")\n * true\n * >>> isPunctuation(\",\")\n * false\n */\nconst isPunctuation = char => char === \".\" || char === \",\";\n\n/**\n * Returns true if a character is a quote character.\n *\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * false\n */\nconst isQuote = char => char === \"\\\"\";\n\n/**\n * Returns true if a character is a backslash character.\n *\n * >>> isBackslash(\"\\\\\")\n * true\n * >>> isBackslash(\"\\\")\n * false\n */\nconst isBackslash = char => char === \"\\\\\";\n\n/**\n * Returns true if a character is a control character.\n *\n * >>> isControl(\"\\r\")\n * true\n * >>> isControl(\"\\n\")\n * false\n */\nconst isControl = char => char === \"\\r\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a whitespace character.\n *\n * >>> isWhitespace(\"\\t\")\n * true\n * >>> isWhitespace(\"\\r\")\n * false\n */\nconst isWhitespace = char => char === \"\\t\" || char === \"\\r\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a newline character.\n *\n * >>> isNewline(\"\\r\")\n * true\n * >>> isNewline(\"\\n\")\n * false\n */\nconst isNewline = char => char === \"\\r\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a form feed character.\n *\n * >>> isFormFeed(\"\\f\")\n * true\n * >>> isFormFeed(\"\\n\")\n * false\n */\nconst isFormFeed = char => char === \"\\f\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a carriage return character.\n *\n * >>> isCarriageReturn(\"\\r\")\n * true\n * >>> isCarriageReturn(\"\\n\")\n * false\n */\nconst isCarriageReturn = char => char === \"\\r\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a vertical tab character.\n *\n * >>> isVerticalTab(\"\\t\")\n * true\n * >>> isVerticalTab(\"\\r\")\n * false\n */\nconst isVerticalTab = char => char === \"\\t\" || char === \"\\r\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a form feed character.\n *\n * >>> isFormFeed(\"\\f\")\n * true\n * >>> isFormFeed(\"\\n\")\n * false\n */\nconst isFormFeed = char => char === \"\\f\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a carriage return character.\n *\n * >>> isCarriageReturn(\"\\r\")\n * true\n * >>> isCarriageReturn(\"\\n\")\n * false\n */\nconst isCarriageReturn = char => char === \"\\r\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a vertical tab character.\n *\n * >>> isVerticalTab(\"\\t\")\n * true\n * >>> isVerticalTab(\"\\r\")\n * false\n */\nconst isVerticalTab = char => char === \"\\t\" || char === \"\\r\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a form feed character.\n *\n * >>> isFormFeed(\"\\f\")\n * true\n * >>> isFormFeed(\"\\n\")\n * false\n */\nconst isFormFeed = char => char === \"\\f\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a carriage return character.\n *\n * >>> isCarriageReturn(\"\\r\")\n * true\n * >>> isCarriageReturn(\"\\n\")\n * false\n */\nconst isCarriageReturn = char => char === \"\\r\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a vertical tab character.\n *\n * >>> isVerticalTab(\"\\t\")\n * true\n * >>> isVerticalTab(\"\\r\")\n * false\n */\nconst isVerticalTab = char => char === \"\\t\" || char === \"\\r\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a form feed character.\n *\n * >>> isFormFeed(\"\\f\")\n * true\n * >>> isFormFeed(\"\\n\")\n * false\n */\nconst isFormFeed = char => char === \"\\f\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a carriage return character.\n *\n * >>> isCarriageReturn(\"\\r\")\n * true\n * >>> isCarriageReturn(\"\\n\")\n * false\n */\nconst isCarriageReturn = char => char === \"\\r\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a vertical tab character.\n *\n * >>> isVerticalTab(\"\\t\")\n * true\n * >>> isVerticalTab(\"\\r\")\n * false\n */\nconst isVerticalTab = char => char === \"\\t\" || char === \"\\r\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a form feed character.\n *\n * >>> isFormFeed(\"\\f\")\n * true\n * >>> isFormFeed(\"\\n\")\n * false\n */\nconst isFormFeed = char => char === \"\\f\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a carriage return character.\n *\n * >>> isCarriageReturn(\"\\r\")\n * true\n * >>> isCarriageReturn(\"\\n\")\n * false\n */\nconst isCarriageReturn = char => char === \"\\r\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a vertical tab character.\n *\n * >>> isVerticalTab(\"\\t\")\n * true\n * >>> isVerticalTab(\"\\r\")\n * false\n */\nconst isVerticalTab = char => char === \"\\t\" || char === \"\\r\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a form feed character.\n *\n * >>> isFormFeed(\"\\f\")\n * true\n * >>> isFormFeed(\"\\n\")\n * false\n */\nconst isFormFeed = char => char === \"\\f\" || char === \"\\n\";\n\n/**\n * Returns true if a character is a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.reverse();\n  while (i-- > 0 || j > 0) {\n    if (l[i] < j) j = l[i];\n    if (l[j] < k) k = l[j];\n  }\n  return k === 0;\n};\n\n/**\n * Return true if all elements are unique.\n * If there are duplicates, return false.\n * If there are any duplicates, return true only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are unique.\n * If there are any duplicates, return false only if all elements are ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < Math.min(l1.length, l2.length); i++) {\n    const a = l1.find((v, i) => v === l2[i])\n    const b = l2.find((v, i) => v === l1[i])\n    if (a === b) {\n      result.push(a)\n    } else {\n      if (set.has(a)) {\n        set.delete(a)\n      } else {\n        set.add(b)\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSort = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < Math.min(l1.length, l2.length); i++) {\n    const a = l1.find((v, i) => v === l2[i])\n    const b = l2.find((v, i) => v === l1[i])\n    if (a === b) {\n      result.push(a)\n    } else {\n      if (set.has(a)) {\n        set.delete(a)\n      } else {\n        set.add(b)\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSort([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortBy = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < Math.min(l1.length, l2.length); i++) {\n    const a = l1.find((v, i) => v === l2[i])\n    const b = l2.find((v, i) => v === l1[i])\n    if (a === b) {\n      result.push(a)\n    } else {\n      if (set.has(a)) {\n        set.delete(a)\n      } else {\n        set.add(b)\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortBy([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortByDesc = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < Math.min(l1.length, l2.length); i++) {\n    const a = l1.find((v, i) => v === l2[i])\n    const b = l2.find((v, i) => v === l1[i])\n    if (a === b) {\n      result.push(a)\n    } else {\n      if (set.has(a)) {\n        set.delete(a)\n      } else {\n        set.add(b)\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortByDesc([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortByDescBy = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < Math.min(l1.length, l2.length); i++) {\n    const a = l1.find((v, i) => v === l2[i])\n    const b = l2.find((v, i) => v === l1[i])\n    if (a === b) {\n      result.push(a)\n    } else {\n      if (set.has(a)) {\n        set.delete(a)\n      } else {\n        set.add(b)\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortByDescBy([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortByDescByDesc = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < Math.min(l1.length, l2.length); i++) {\n    const a = l1.find((v, i) => v === l2[i])\n    const b = l2.find((v, i) => v === l1[i])\n    if (a === b) {\n      result.push(a)\n    } else {\n      if (set.has(a)) {\n        set.delete(a)\n      } else {\n        set.add(b)\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortByDescByDesc([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortByDescByDescBy = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < Math.min(l1.length, l2.length); i++) {\n    const a = l1.find((v, i) => v === l2[i])\n    const b = l2.find((v, i) => v === l1[i])\n    if (a === b) {\n      result.push(a)\n    } else {\n      if (set.has(a)) {\n        set.delete(a)\n      } else {\n        set.add(b)\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortByDescByDescBy([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortByDescByDescByDesc = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < Math.min(l1.length, l2.length); i++) {\n    const a = l1.find((v, i) => v === l2[i])\n    const b = l2.find((v, i) => v === l1[i])\n    if (a === b) {\n      result.push(a)\n    } else {\n      if (set.has(a)) {\n        set.delete(a)\n      } else {\n        set.add(b)\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortByDescByDescByDesc([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortByDescByDescByDescByDesc = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < Math.min(l1.length, l2.length); i++) {\n    const a = l1.find((v, i) => v === l2[i])\n    const b = l2.find((v, i) => v === l1[i])\n    if (a === b) {\n      result.push(a)\n    } else {\n      if (set.has(a)) {\n        set.delete(a)\n      } else {\n        set.add(b)\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortByDescByDescByDescByDesc([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortByDescByDescByDescByDescByDesc = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < Math.min(l1.length, l2.length); i++) {\n    const a = l1.find((v, i) => v === l2[i])\n    const b = l2.find((v, i) => v === l1[i])\n    if (a === b) {\n      result.push(a)\n    } else {\n      if (set.has(a)) {\n        set.delete(a)\n      } else {\n        set.add(b)\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortByDescByDescByDescByDescByDesc([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortByDescByDescByDescByDescByDescByDesc = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < Math.min(l1.length, l2.length); i++) {\n    const a = l1.find((v, i) => v === l2[i])\n    const b = l2.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largerPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n  let i = 2;\n  let result = 1;\n  while (true) {\n    if (n % i === 0) {\n      result = i;\n      break;\n    }\n    i += 2;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997\n*/\nconst isDivisibleBy = (n, divisors) => {\n  let i = 2;\n  let result = true;\n  while (true) {\n    if (n % i === 0) {\n      result = false;\n      break;\n    }\n    i += 2;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997\n*/\nconst isDivisibleBy2 = (n, divisors) => {\n  let i = 2;\n  let result = true;\n  while (true) {\n    if (n % i === 0) {\n      result = false;\n      break;\n    }\n    i += 2;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997\n*/\nconst isDivisibleBy3 = (n, divisors) => {\n  let i = 2;\n  let result = true;\n  while (true) {\n    if (n % i === 0) {\n      result = false;\n      break;\n    }\n    i += 2;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 82", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s+/g);\n  const max_nesting = 0;\n  const max_level = 0;\n  const nesting = [];\n\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const group_nesting = 0;\n    const group_level = 0;\n\n    for (let j = 0; j < group.length; j++) {\n      const char = group[j];\n      if (char === '(') {\n        group_nesting++;\n      } else if (char === ')') {\n        group_nesting--;\n      } else if (char === '(') {\n        group_level++;\n      } else if (char === ')') {\n        group_level--;\n      }\n\n      if (group_nesting > max_nesting) {\n        max_nesting = group_nesting;\n        max_level = group_level;\n      }\n    }\n\n    if (group_nesting > max_nesting) {\n      nesting.push(max_level);\n    }\n  }\n\n  return nesting;\n};\n\nconst parseNesting = (nesting_string) => {\n  const nesting_groups = nesting_string.split(/\\s+/g);\n  const max_nesting = 0;\n  const max_level = 0;\n  const nesting = [];\n\n  for (let i = 0; i < nesting_groups.length; i++) {\n    const group = nesting_groups[i];\n    const group_nesting = 0;\n    const group_level = 0;\n\n    for (let j = 0; j < group.length; j++) {\n      const char = group[j];\n      if (char === '(') {\n        group_nesting++;\n      } else if (char === ')') {\n        group_nesting--;\n      } else if (char === '(') {\n        group_level++;\n      } else if (char === ')') {\n        group_level--;\n      }\n\n      if (group_nesting > max_nesting) {\n        max_nesting = group_nesting;\n        max_level = group_level;\n      }\n    }\n\n    if (group_nesting > max_nesting) {\n      nesting.push(max_level);\n    }\n  }\n\n  return nesting;\n};\n\nconst parseNestingLevel = (nesting_string) => {\n  const nesting_groups = nesting_string.split(/\\s+/g);\n  const max_nesting = 0;\n  const max_level = 0;\n  const nesting = [];\n\n  for (let i = 0; i < nesting_groups.length; i++) {\n    const group = nesting_groups[i];\n    const group_nesting = 0;\n    const group_level = 0;\n\n    for (let j = 0; j < group.length; j++) {\n      const char = group[j];\n      if (char === '(') {\n        group_nesting++;\n      } else if (char === ')') {\n        group_nesting--;\n      } else if (char === '(') {\n        group_level++;\n      } else if (char === ')') {\n        group_level--;\n      }\n\n      if (group_nesting > max_nesting) {\n        max_nesting = group_nesting;\n        max_level = group_level;\n      }\n    }\n\n    if (group_nesting > max_nesting) {\n      nesting.push(max_level);\n    }\n  }\n\n  return nesting;\n};\n\nconst parseNestingLevels = (nesting_string) => {\n  const nesting_groups = nesting_string.split(/\\s+/g);\n  const max_nesting = 0;\n  const max_level = 0;\n  const nesting = [];\n\n  for (let i = 0; i < nesting_groups.length; i++) {\n    const group = nesting_groups[i];\n    const group_nesting = 0;\n    const group_level = 0;\n\n    for (let j = 0; j < group.length; j++) {\n      const char = group[j];\n      if (char === '(') {\n        group_nesting++;\n      } else if (char === ')') {\n        group_nesting--;\n      } else if (char === '(') {\n        group_level++;\n      } else if (char === ')') {\n        group_level--;\n      }\n\n      if (group_nesting > max_nesting) {\n        max_nesting = group_nesting;\n        max_level = group_level;\n      }\n    }\n\n    if (group_nesting > max_nesting) {\n      nesting.push(max_level);\n    }\n  }\n\n  return nesting;\n};\n\nconst parseNestingLevelsMax = (nesting_string) => {\n  const nesting_groups = nesting_string.split(/\\s+/g);\n  const max_nesting = 0;\n  const max_level = 0;\n  const nesting = [];\n\n  for (let i = 0; i < nesting_groups.length; i++) {\n    const group = nesting_groups[i];\n    const group_nesting = 0;\n    const group_level = 0;\n\n    for (let j = 0; j < group.length; j++) {\n      const char = group[j];\n      if (char === '(') {\n        group_nesting++;\n      } else if (char === ')') {\n        group_nesting--;\n      } else if (char === '(') {\n        group_level++;\n      } else if (char === ')') {\n        group_level--;\n      }\n\n      if (group_nesting > max_nesting) {\n        max_nesting = group_nesting;\n        max_level = group_level;\n      }\n    }\n\n    if (group_nesting > max_nesting) {\n      nesting.push(max_level);\n    }\n  }\n\n  return nesting;\n};\n\nconst parseNestingLevelsMax2 = (nesting_string) => {\n  const nesting_groups = nesting_string.split(/\\s+/g);\n  const max_nesting = 0;\n  const max_level = 0;\n  const nesting = [];\n\n  for (let i = 0; i < nesting_groups.length; i++) {\n    const group = nesting_groups[i];\n    const group_nesting = 0;\n    const group_level = 0;\n\n    for (let j = 0; j < group.length; j++) {\n      const char = group[j];\n      if (char === '(') {\n        group_nesting++;\n      } else if (char === ')') {\n        group_nesting--;\n      } else if (char === '(') {\n        group_level++;\n      } else if (char === ')') {\n        group_level--;\n      }\n\n      if (group_nesting > max_nesting) {\n        max_nesting = group_nesting;\n        max_level = group_level;\n      }\n    }\n\n    if (group_nesting > max_nesting) {\n      nesting.push(max_level);\n    }\n  }\n\n  return nesting;\n};\n\nconst parseNestingLevelsMax3 = (nesting_string) => {\n  const nesting_groups = nesting_string.split(/\\s+/g);\n  const max_nesting = 0;\n  const max_level = 0;\n  const nesting = [];\n\n  for (let i = 0; i < nesting_groups.length; i++) {\n    const group = nesting_groups[i];\n    const group_nesting = 0;\n    const group_level = 0;\n\n    for (let j = 0; j < group.length; j++) {\n      const char = group[j];\n      if (char === '(') {\n        group_nesting++;\n      } else if (char === ')') {\n        group_nesting--;\n      } else if (char === '(') {\n        group_level++;\n      } else if (char === ')') {\n        group_level--;\n      }\n\n      if (group_nesting > max_nesting) {\n        max_nesting = group_nesting;\n        max_level = group_level;\n      }\n    }\n\n    if (group_nesting > max_nesting) {\n      nesting.push(max_level);\n    }\n  }\n\n  return nesting;\n};\n\nconst parseNestingLevelsMax4 = (nesting_string) => {\n  const nesting_groups = nesting_string.split(/\\s+/g);\n  const max_nesting = 0;\n  const max_level = 0;\n  const nesting = [];\n\n  for (let i = 0; i < nesting_groups.length; i++) {\n    const group = nesting_groups[i];\n    const group_nesting = 0;\n    const group_level = 0;\n\n    for (let j = 0; j < group.length; j++) {\n      const char = group[j];\n      if (char === '(') {\n        group_nesting++;\n      } else if (char === ')') {\n        group_nesting--;\n      } else if (char === '(') {\n        group_level++;\n      } else if (char === ')') {\n        group_level--;\n      }\n\n      if (group_nesting > max_nesting) {\n        max_nesting = group_nesting;\n        max_level = group_level;\n      }\n    }\n\n    if (group_nesting > max_nesting) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumsToN", "gc": "<|endoftext|>/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n\n  and returns the number that sums to n.\n  >>> sumAllToNAndSum(30)\n  465\n  >>> sumAllToNAndSum(100)\n  5050\n  >>> sumAllToNAndSum(5)\n  15\n  >>> sumAllToNAndSum(10)\n  55\n  >>> sumAllToNAndSum(1)\n  1\n  */\nconst sumAllToNAndSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n\n  and returns the number that sums to n\n  and returns the number that sums to n.\n  >>> sumAllToNAndSumAndSum(30)\n  465\n  >>> sumAllToNAndSumAndSum(100)\n  5050\n  >>> sumAllToNAndSumAndSum(5)\n  15\n  >>> sumAllToNAndSumAndSum(10)\n  55\n  >>> sumAllToNAndSumAndSum(1)\n  1\n  */\nconst sumAllToNAndSumAndSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n\n  and returns the number that sums to n\n  and returns the number that sums to n.\n  >>> sumAllToNAndSumAndSumAndSum(30)\n  465\n  >>> sumAllToNAndSumAndSumAndSum(100)\n  5050\n  >>> sumAllToNAndSumAndSumAndSum(5)\n  15\n  >>> sumAllToNAndSumAndSumAndSum(10)\n  55\n  >>> sumAllToNAndSumAndSumAndSum(1)\n  1\n  */\nconst sumAllToNAndSumAndSumAndSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n\n  and returns the number that sums to n\n  and returns the number that sums to n.\n  >>> sumAllToNAndSumAndSumAndSumAndSum(30)\n  465\n  >>> sumAllToNAndSumAndSumAndSumAndSum(100)\n  5050\n  >>> sumAllToNAndSumAndSumAndSumAndSum(5)\n  15\n  >>> sumAllToNAndSumAndSumAndSumAndSum(10)\n  55\n  >>> sumAllToNAndSumAndSumAndSumAndSum(1)\n  1\n  */\nconst sumAllToNAndSumAndSumAndSumAndSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n\n  and returns the number that sums to n\n  and returns the number that sums to n.\n  >>> sumAllToNAndSumAndSumAndSumAndSumAndSum(30)\n  465\n  >>> sumAllToNAndSumAndSumAndSumAndSumAndSum(100)\n  5050\n  >>> sumAllToNAndSumAndSumAndSumAndSumAndSum(5)\n  15\n  >>> sumAllToNAndSumAndSumAndSumAndSumAndSum(10)\n  55\n  >>> sumAllToNAndSumAndSumAndSumAndSumAndSumAndSum(1)\n  1\n  */\nconst sumAllToNAndSumAndSumAndSumAndSumAndSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n\n  and returns the number that sums to n\n  and returns the number that sums to n.\n  >>> sumAllToNAndSumAndSumAndSumAndSumAndSumAndSum(30)\n  465\n  >>> sumAllToNAndSumAndSumAndSumAndSumAndSumAndSum(100)\n  5050\n  >>> sumAllToNAndSumAndSumAndSumAndSumAndSumAndSum(5)\n  15\n  >>> sumAllToNAndSumAndSumAndSumAndSumAndSumAndSumAndSum(10)\n  55\n  >>> sumAllToNAndSumAndSumAndSumAndSumAndSumAndSumAndSum(1)\n  1\n  */\nconst sumAllToNAndSumAndSumAndSumAndSumAndSumAndSumAnd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n\n  and returns the number that sums to n\n  and returns the number that sums to n.\n  >>> sumAllToNAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSum(30)\n  465\n  >>> sumAllToNAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAndSumAnd", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/[()]/g);\n  const closingBrackets = brackets.match(/[)]/g);\n  return openingBrackets.every(opening => closingBrackets.includes(opening));\n};\n\n/**\n * Given a string, return true if the string is a valid JSON string.\n *\n * Valid JSON strings are valid JavaScript objects and arrays, and\n * are wrapped in double quotes.\n *\n * Valid JSON strings may contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing quote and comma. Valid JSON\n * strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the opening quote and colon.\n *\n * Valid JSON strings may also contain any Unicode character (except for the\n * surrogate blocks) except for the closing ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 1\n  let k = 0\n  let d = 0\n  let result = []\n  while (i < n) {\n    result.push(xs[j] * xs[k])\n    i++\n    j++\n    k++\n  }\n  return result\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 1\n  let k = 0\n  let d = 0\n  let result = []\n  while (i < n) {\n    result.push(xs[k] * xs[j])\n    i++\n    j++\n    k++\n  }\n  return result\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 1\n  let k = 0\n  let d = 0\n  let result = []\n  while (i < n) {\n    result.push(xs[k] * xs[j])\n    i++\n    j++\n    k++\n  }\n  return result\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseOf([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverseOf([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 1\n  let k = 0\n  let d = 0\n  let result = []\n  while (i < n) {\n    result.push(xs[k] * xs[j])\n    i++\n    j++\n    k++\n  }\n  return result\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseOf([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverseOf([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 1\n  let k = 0\n  let d = 0\n  let result = []\n  while (i < n) {\n    result.push(xs[k] * xs[j])\n    i++\n    j++\n    k++\n  }\n  return result\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseOf([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverseOf([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 1\n  let k = 0\n  let d = 0\n  let result = []\n  while (i < n) {\n    result.push(xs[k] * xs[j])\n    i++\n    j++\n    k++\n  }\n  return result\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseOf([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverseOf([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 1\n  let k = 0\n  let d = 0\n  let result = []\n  while (i < n) {\n    result.push(xs[k] * xs[j])\n    i++\n    j++\n    k++\n  }\n  return result\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseOf([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverseOf([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 1\n  let k = 0\n  let d = 0\n  let result = []\n  while (i < n) {\n    result.push(xs[k] * xs[j])\n    i++\n    j++\n    k++\n  }\n  return result\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseOf([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverseOf([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 1\n  let k = 0\n  let d = 0\n  let result = []\n  while (i < n) {\n    result.push(xs[k] * xs[j])\n    i++\n    j++\n    k++\n  }\n  return result\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseOf([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverseOf([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 1\n  let k = 0\n  let d = 0\n  let result = []\n  while (i < n) {\n    result.push(xs[k] * xs[j])\n    i++\n    j++\n    k++\n  }\n  return result\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseOf([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverseOf([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 1\n  let k = 0\n  let d = 0\n  let result = []\n  while (i < n) {\n    result.push(xs[k] * xs[j])\n    i++\n    j++\n    k++\n  }\n  return result\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseOf([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverseOf([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseOf = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 1\n  let k = 0\n  let d = 0\n  let result = []\n  while (i < n) {\n    result.push(xs[k] * xs[j])\n    i++\n    j++\n    k++\n  }\n  return result\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibRecursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibRecursive(n - 1) + fibfibRecursive(n - 2);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using iteration.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibIterative = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibRecursiveIterative = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibRecursiveIterative(n - 1) + fibfibRecursiveIterative(n - 2);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using iteration.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibIterativeRecursive = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibIterativeRecursive = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using iteration.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibIterativeIterative = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibIterativeRecursiveIterative = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using iteration.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibIterativeIterativeRecursive = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using iteration.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibIterativeIterativeRecursive = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using iteration.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibIterativeIterativeRecursive = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using iteration.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibIterativeIterativeRecursive = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using iteration.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibIterativeIterativeRecursive = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using iteration.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibIterativeIterativeRecursive = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using iteration.\n  >>> fibfib(0)\n  0\n  >>> fibfib(4)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfibIterativeIterativeRecursive = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using iteration.\n  >>> fibfib(0)\n  0\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelCount", "gc": "<|endoftext|>/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function wordCount which takes a string representing\n  a word as input and returns the number of words in the string.\n  Words in this case are 'hello', 'world', 'hello', 'world', and\n  'hello'. The words are separated by spaces.\n\n  Example:\n  >>> wordCount(\"hello world\")\n  4\n  >>> wordCount(\"hello world hello\")\n  3\n  */\nconst wordCount = (s) => {\n  let words = 0;\n  let lastWord = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastWord) {\n      words++;\n    }\n  }\n  return words;\n};\n\n/*Write a function wordLength which takes a string representing\n  a word as input and returns the number of characters in the word.\n  Words in this case are 'hello', 'world', 'hello', 'world', and\n  'hello'. The words are separated by spaces.\n\n  Example:\n  >>> wordLength(\"hello world\")\n  5\n  >>> wordLength(\"hello world hello\")\n  4\n  */\nconst wordLength = (s) => {\n  let words = 0;\n  let lastWord = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastWord) {\n      words++;\n    }\n  }\n  return words;\n};\n\n/*Write a function wordConcat which takes a string representing\n  a word as input and returns a string with the words together in\n  a space-separated list.\n\n  Example:\n  >>> wordConcat(\"hello world\")\n  \"hello world hello\"\n  */\nconst wordConcat = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++) {\n    result.push(words[i]);\n  }\n  return result.join(\" \");\n};\n\n/*Write a function wordRemove which takes a string representing\n  a word as input and returns a string with the words in reverse\n  order.\n\n  Example:\n  >>> wordRemove(\"hello world\")\n  \"hello world\"\n  */\nconst wordRemove = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = words.length - 1; i >= 0; i--) {\n    result.push(words[i]);\n  }\n  return result.join(\" \");\n};\n\n/*Write a function wordToArray which takes a string representing\n  a word as input and returns a string with the words in an array\n  separated by commas.\n\n  Example:\n  >>> wordToArray(\"hello world\")\n  [\"hello\", \"world\"]\n  */\nconst wordToArray = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++) {\n    result.push(words[i]);\n  }\n  return result;\n};\n\n/*Write a function wordToArray which takes a string representing\n  a word as input and returns a string with the words in an array\n  separated by commas.\n\n  Example:\n  >>> wordToArray(\"hello world\")\n  [\"hello\", \"world\"]\n  */\nconst wordToArray = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++) {\n    result.push(words[i]);\n  }\n  return result;\n};\n\n/*Write a function wordToArray which takes a string representing\n  a word as input and returns a string with the words in an array\n  separated by commas.\n\n  Example:\n  >>> wordToArray(\"hello world\")\n  [\"hello\", \"world\"]\n  */\nconst wordToArray = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++) {\n    result.push(words[i]);\n  }\n  return result;\n};\n\n/*Write a function wordToArray which takes a string representing\n  a word as input and returns a string with the words in an array\n  separated by commas.\n\n  Example:\n  >>> wordToArray(\"hello world\")\n  [\"hello\", \"world\"]\n  */\nconst wordToArray = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++) {\n    result.push(words[i]);\n  }\n  return result;\n};\n\n/*Write a function wordToArray which takes a string representing\n  a word as input and returns a string with the words in an array\n  separated by commas.\n\n  Example:\n  >>> wordToArray(\"hello world\")\n  [\"hello\", \"world\"]\n  */\nconst wordToArray = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++) {\n    result.push(words[i]);\n  }\n  return result;\n};\n\n/*Write a function wordToArray which takes a string representing\n  a word as input and returns a string with the words in an array\n  separated by commas.\n\n  Example:\n  >>> wordToArray(\"hello world\")\n  [\"hello\", \"world\"]\n  */\nconst wordToArray = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++) {\n    result.push(words[i]);\n  }\n  return result;\n};\n\n/*Write a function wordToArray which takes a string representing\n  a word as input and returns a string with the words in an array\n  separated by commas.\n\n  Example:\n  >>> wordToArray(\"hello world\")\n  [\"hello\", \"world\"]\n  */\nconst wordToArray = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++) {\n    result.push(words[i]);\n  }\n  return result;\n};\n\n/*Write a function wordToArray which takes a string representing\n  a word as input and returns a string with the words in an array\n  separated by commas.\n\n  Example:\n  >>> wordToArray(\"hello world\")\n  [\"hello\", \"world\"]\n  */\nconst wordToArray = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++) {\n    result.push(words[i]);\n  }\n  return result;\n};\n\n/*Write a function wordToArray which takes a string representing\n  a word as input and returns a string with the words in an array\n  separated by commas.\n\n  Example:\n  >>> wordToArray(\"hello world\")\n  [\"hello\", \"world\"]\n  */\nconst wordToArray = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++) {\n    result.push(words[i]);\n  }\n  return result;\n};\n\n/*Write a function wordToArray which takes a string representing\n  a word as input and returns a string with the words in an array\n  separated by commas.\n\n  Example:\n  >>> wordToArray(\"hello world\")\n  [\"hello\", \"world\"]\n  */\nconst wordToArray = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++) {\n    result.push(words[i]);\n  }\n  return result;\n};\n\n/*Write a function wordToArray which takes a string representing\n  a word as input and returns a string with the words in an array\n  separated by commas.\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString(2).split('');\n  digits.reverse();\n  return digits.slice(shift).join('');\n};\n\n/*\n  Convert a number to a string in base 10.\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(123)\n  \"0123\"\n  >>> toBase10(123)\n  \"00123\"\n  >>> toBase10(123)\n  \"000123\"\n  >>> toBase10(123)\n  \"0000123\"\n  >>> toBase10(123)\n  \"00000123\"\n  >>> toBase10(123)\n  \"000000123\"\n  >>> toBase10(123)\n  \"0000000123\"\n  >>> toBase10(123)\n  \"00000000123\"\n  >>> toBase10(123)\n  \"000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSums", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums2 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums3 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums4 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums5 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums6 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums7 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums8 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums9 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums10 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums11 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apple\") {\n      apples++;\n    } else if (fruits[i] == \"orange\") {\n      oranges++;\n    } else if (fruits[i] == \"mango\") {\n      mango++;\n    }\n  }\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apple\") {\n      total++;\n    } else if (fruits[i] == \"orange\") {\n      total++;\n    } else if (fruits[i] == \"mango\") {\n      total++;\n    }\n  }\n  return total - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apple\") {\n      apples++;\n    } else if (fruits[i] == \"orange\") {\n      oranges++;\n    } else if (fruits[i] == \"mango\") {\n      mango++;\n    }\n  }\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apple\") {\n      total++;\n    } else if (fruits[i] == \"orange\") {\n      total++;\n    } else if (fruits[i] == \"mango\") {\n      total++;\n    }\n  }\n  return total - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apple\") {\n      apples++;\n    } else if (fruits[i] == \"orange\") {\n      oranges++;\n    } else if (fruits[i] == \"mango\") {\n      mango++;\n    }\n  }\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apple\") {\n      total++;\n    } else if (fruits[i] == \"orange\") {\n      total++;\n    } else if (fruits[i] == \"mango\") {\n      total++;\n    }\n  }\n  return total - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apple\") {\n      apples++;\n    } else if (fruits[i] == \"orange\") {\n      oranges++;\n    } else if (fruits[i] == \"mango\") {\n      mango++;\n    }\n  }\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apple\") {\n      total++;\n    } else if (fruits[i] == \"orange\") {\n      total++;\n    } else if (fruits[i] == \"mango\") {\n      total++;\n    }\n  }\n  return total - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apple\") {\n      apples++;\n    } else if (fruits[i] == \"orange\") {\n      oranges++;\n    } else if (fruits[i] == \"mango\") {\n      mango++;\n    }\n  }\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apple\") {\n      total++;\n    } else if (fruits[i] == \"orange\") {\n      total++;\n    } else if (fruits[i] == \"mango\") {\n      total++;\n    }\n  }\n  return total - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = len - 1;\n  let even = 0;\n  let index = -1;\n  while (min <= max) {\n    even = arr[min];\n    if (even % 2 === 0) {\n      min = min + 1;\n    } else {\n      max = max - 1;\n    }\n    index++;\n  }\n  return [even, index];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-less-than-or-equal-to-k/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findSmallestPositiveIntegerLessThanOrEqualToK = function(head) {\n  let ans = Number.MAX_VALUE;\n  let curr = head;\n  while (curr!== null) {\n    if (curr.val <= ans) {\n      ans = curr.val;\n    }\n    curr = curr.next;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-greater-than-or-equal-to-k/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findSmallestPositiveIntegerGreaterThanOrEqualToK = function(head) {\n  let ans = Number.MAX_VALUE;\n  let curr = head;\n  while (curr!== null) {\n    if (curr.val >= ans) {\n      ans = curr.val;\n    }\n    curr = curr.next;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-less-than-or-equal-to-k/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findSmallestPositiveIntegerLessThanOrEqualToK2 = function(head) {\n  let ans = Number.MAX_VALUE;\n  let curr = head;\n  while (curr!== null) {\n    if (curr.val < ans) {\n      ans = curr.val;\n    }\n    curr = curr.next;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-greater-than-or-equal-to-k/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findSmallestPositiveIntegerGreaterThanOrEqualToK2 = function(head) {\n  let ans = Number.MAX_VALUE;\n  let curr = head;\n  while (curr!== null) {\n    if (curr.val > ans) {\n      ans = curr.val;\n    }\n    curr = curr.next;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-less-than-or-equal-to-k/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findSmallestPositiveIntegerLessThanOrEqualToK3 = function(head) {\n  let ans = Number.MAX_VALUE;\n  let curr = head;\n  while (curr!== null) {\n    if (curr.val < ans) {\n      ans = curr.val;\n    }\n    curr = curr.next;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-greater-than-or-equal-to-k/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findSmallestPositiveIntegerGreaterThanOrEqualToK3 = function(head) {\n  let ans = Number.MAX_VALUE;\n  let curr = head;\n  while (curr!== null) {\n    if (curr.val > ans) {\n      ans = curr.val;\n    }\n    curr = curr.next;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-less-than-or-equal-to-k/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findSmallestPositiveIntegerLessThanOrEqualToK4 = function(head) {\n  let ans = Number.MAX_VALUE;\n  let curr = head;\n  while (curr!== null) {\n    if (curr.val < ans) {\n      ans = curr.val;\n    }\n    curr = curr.next;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-greater-than-or-equal-to-k/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findSmallestPositiveIntegerGreaterThanOrEqualToK4 = function(head) {\n  let ans = Number.MAX_VALUE;\n  let curr = head;\n  while (curr!== null) {\n    if (curr.val > ans) {\n      ans = curr.val;\n    }\n    curr = curr.next;\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-less-than-or-equal-to-k/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findSmallestPositiveIntegerLessThanOrEqualToK5 = function(head) {\n  let ans = Number.MAX_VALUE;\n  let curr = head;\n  while (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandom = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (min, max, weight) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + weight;\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n */\nconst getRandomInRangeWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAnd", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangerSortsLists", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const strangerSortsList = lst.sort((a, b) => a - b);\n  return strangerSortsList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsInts = (lst) => {\n  const strangerSortsList = lst.sort((a, b) => a - b);\n  return strangerSortsList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsInts([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsInts([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsInts([]) == []\n  */\nconst strangerSortsIntLists = (lst) => {\n  const strangerSortsList = lst.sort((a, b) => a - b);\n  return strangerSortsList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsIntLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsIntLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsIntLists([]) == []\n  */\nconst strangerSortsIntListsInts = (lst) => {\n  const strangerSortsList = lst.sort((a, b) => a - b);\n  return strangerSortsList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsIntListsInts([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsIntListsInts([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsIntListsInts([]) == []\n  */\nconst strangerSortsIntListsIntLists = (lst) => {\n  const strangerSortsList = lst.sort((a, b) => a - b);\n  return strangerSortsList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsIntListsIntLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsIntListsIntLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsIntListsIntLists([]) == []\n  */\nconst strangerSortsIntListsIntListsInts = (lst) => {\n  const strangerSortsList = lst.sort((a, b) => a - b);\n  return strangerSortsList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsIntListsIntListsInts([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsIntListsIntListsInts([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsIntListsIntListsInts([]) == []\n  */\nconst strangerSortsIntListsIntListsIntListsInts = (lst) => {\n  const strangerSortsList = lst.sort((a, b) => a - b);\n  return strangerSortsList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsIntListsIntListsIntListsInts([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsIntListsIntListsIntListsInts([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsIntListsIntListsIntListsInts([]) == []\n  */\nconst strangerSortsIntListsIntListsIntListsIntListsInts = (lst) => {\n  const strangerSortsList = lst.sort((a, b) => a - b);\n  return strangerSortsList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsIntListsIntListsIntListsIntListsInts([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsIntListsIntListsIntListsIntListsInts([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsIntListsIntListsIntListsIntListsInts([]) == []\n  */\nconst strangerSortsIntListsIntListsIntListsIntListsIntListsInts = (lst) => {\n  const strangerSortsList = lst.sort((a, b) => a - b);\n  return strangerSortsList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsIntListsIntListsIntListsIntListsIntListsInts([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsIntListsIntListsIntListsIntListsIntListsInts([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsIntListsIntListsIntListsIntListsIntListsInts([]) == []\n  */\nconst strangerSortsIntListsIntListsIntListsIntListsIntListsIntListsInts = (lst) => {\n  const strangerSortsList = lst.sort((a, b) => a - b);\n  return strangerSortsList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsIntListsIntListsIntListsIntListsIntListsInt", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  if (ab < ac || ab < bc || ac < bc) return -1;\n  return Math.sqrt(ab * ab + ac * ac + bc * bc)\n}\n\n/*\n  Given the lengths of the four sides of a rectangle. Return the area of\n  the rectangle rounded to 2 decimal points if the four sides form a valid rectangle.\n  Otherwise return -1\n  Rectangle sides make a valid rectangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  rectangleAreas(3, 4, 5) == 10.00\n  rectangleAreas(1, 2, 10) == -1\n  */\nconst rectangleAreas = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  if (ab < ac || ab < bc || ac < bc) return -1;\n  return Math.sqrt(ab * ab + ac * ac + bc * bc)\n}\n\n/*\n  Given the lengths of the five sides of a pentagon. Return the area of\n  the pentagon rounded to 2 decimal points if the five sides form a valid pentagon.\n  Otherwise return -1\n  Pentagon sides make a valid pentagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  pentagonAreas(3, 4, 5) == 15.00\n  pentagonAreas(1, 2, 10) == -1\n  */\nconst pentagonAreas = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  if (ab < ac || ab < bc || ac < bc) return -1;\n  return Math.sqrt(ab * ab + ac * ac + bc * bc)\n}\n\n/*\n  Given the lengths of the six sides of a hexagon. Return the area of\n  the hexagon rounded to 2 decimal points if the six sides form a valid hexagon.\n  Otherwise return -1\n  Hexagon sides make a valid hexagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  hexagonAreas(3, 4, 5) == 25.00\n  hexagonAreas(1, 2, 10) == -1\n  */\nconst hexagonAreas = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  if (ab < ac || ab < bc || ac < bc) return -1;\n  return Math.sqrt(ab * ab + ac * ac + bc * bc)\n}\n\n/*\n  Given the lengths of the seven sides of a heptagon. Return the area of\n  the heptagon rounded to 2 decimal points if the seven sides form a valid heptagon.\n  Otherwise return -1\n  Heptagon sides make a valid heptagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  heptagonAreas(3, 4, 5) == 35.00\n  heptagonAreas(1, 2, 10) == -1\n  */\nconst heptagonAreas = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  if (ab < ac || ab < bc || ac < bc) return -1;\n  return Math.sqrt(ab * ab + ac * ac + bc * bc)\n}\n\n/*\n  Given the lengths of the eight sides of a decagon. Return the area of\n  the decagon rounded to 2 decimal points if the eight sides form a valid decagon.\n  Otherwise return -1\n  Decagon sides make a valid decagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  decagonAreas(3, 4, 5) == 50.00\n  decagonAreas(1, 2, 10) == -1\n  */\nconst decagonAreas = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  if (ab < ac || ab < bc || ac < bc) return -1;\n  return Math.sqrt(ab * ab + ac * ac + bc * bc)\n}\n\n/*\n  Given the lengths of the nine sides of a triangular. Return the area of\n  the triangular rounded to 2 decimal points if the nine sides form a valid triangular.\n  Otherwise return -1\n  Triangular sides make a valid triangular when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangularAreas(3, 4, 5) == 60.00\n  triangularAreas(1, 2, 10) == -1\n  */\nconst triangularAreas = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  if (ab < ac || ab < bc || ac < bc) return -1;\n  return Math.sqrt(ab * ab + ac * ac + bc * bc)\n}\n\n/*\n  Given the lengths of the ten sides of a hexagon. Return the area of\n  the hexagon rounded to 2 decimal points if the ten sides form a valid hexagon.\n  Otherwise return -1\n  Hexagon sides make a valid hexagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  hexagonAreas(3, 4, 5) == 100.00\n  hexagonAreas(1, 2, 10) == -1\n  */\nconst hexagonAreas = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  if (ab < ac || ab < bc || ac < bc) return -1;\n  return Math.sqrt(ab * ab + ac * ac + bc * bc)\n}\n\n/*\n  Given the lengths of the eleven sides of a hexagon. Return the area of\n  the hexagon rounded to 2 decimal points if the eleven sides form a valid hexagon.\n  Otherwise return -1\n  Hexagon sides make a valid hexagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  hexagonAreas(3, 4, 5) == 200.00\n  hexagonAreas(1, 2, 10) == -1\n  */\nconst hexagonAreas = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  if (ab < ac || ab < bc || ac < bc) return -1;\n  return Math.sqrt(ab * ab + ac * ac + bc * bc)\n}\n\n/*\n  Given the lengths of the twelve sides of a hexagon. Return the area of\n  the hexagon rounded to 2 decimal points if the twelve sides form a valid hexagon.\n  Otherwise return -1\n  Hexagon sides make a valid hexagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  hexagonAreas(3, 4, 5) == 300.00\n  hexagonAreas(1, 2, 10) == -1\n  */\nconst hexagonAreas = (a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlied", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const maxWeight = Math.max(...q);\n  const sumWeight = q.reduce((acc, cur) => acc + cur, 0);\n  return sumWeight <= maxWeight && sumWeight <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2+1 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2+1 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2+1 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const maxWeight = Math.max(...q);\n  const sumWeight = q.reduce((acc, cur) => acc + cur, 0);\n  return sumWeight <= maxWeight && sumWeight <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2+1 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2+1 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2+1 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const maxWeight = Math.max(...q);\n  const sumWeight = q.reduce((acc, cur) => acc + cur, 0);\n  return sumWeight <= maxWeight && sumWeight <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2+1 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2+1 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2+1 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const maxWeight = Math.max(...q);\n  const sumWeight = q.reduce((acc, cur) => acc + cur, 0);\n  return sumWeight <= maxWeight && sumWeight <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2+1 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2+1 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2+1 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const maxWeight = Math.max(...q);\n  const sumWeight = q.reduce((acc, cur) => acc + cur, 0);\n  return sumWeight <= maxWeight && sumWeight <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2+1 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2+1 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2+1 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const maxWeight = Math.max(...q);\n  const sumWeight = q.reduce((acc, cur) => acc + cur, 0);\n  return sumWeight <= maxWeight && sumWeight <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2+1 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2+1 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2+1 is less than the maximum possible weight", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallerChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let len = arr.length;\n  let min = len / 2;\n  let count = 0;\n  for (let i = 0; i < min; i++) {\n    if (arr[i]!== arr[(len - i) % len]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  biggerChange([1,2,3,5,4,7,9,6]) == 6\n  biggerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  biggerChange([1, 2, 3, 2, 1]) == 1\n  biggerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let len = arr.length;\n  let max = len / 2;\n  let count = 0;\n  for (let i = 0; i < max; i++) {\n    if (arr[i]!== arr[(len - i) % len]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let len = arr.length;\n  let min = len / 2;\n  let count = 0;\n  for (let i = 0; i < min; i++) {\n    if (arr[i]!== arr[(len - i) % len]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  biggerChange([1,2,3,5,4,7,9,6]) == 6\n  biggerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  biggerChange([1, 2, 3, 2, 1]) == 1\n  biggerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let len = arr.length;\n  let max = len / 2;\n  let count = 0;\n  for (let i = 0; i < max; i++) {\n    if (arr[i]!== arr[(len - i) % len]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let len = arr.length;\n  let min = len / 2;\n  let count = 0;\n  for (let i = 0; i < min; i++) {\n    if (arr[i]!== arr[(len - i) % len]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  biggerChange([1,2,3,5,4,7,9,6]) == 6\n  biggerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  biggerChange([1, 2, 3, 2, 1]) == 1\n  biggerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let len = arr.length;\n  let max = len / 2;\n  let count = 0;\n  for (let i = 0; i < max; i++) {\n    if (arr[i]!== arr[(len - i) % len]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let len = arr.length;\n  let min = len / 2;\n  let count = 0;\n  for (let i = 0; i < min; i++) {\n    if (arr[i]!== arr[(len - i) % len]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  biggerChange([1,2,3,5,4,7,9,6]) == 6\n  biggerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  biggerChange([1, 2, 3, 2, 1]) == 1\n  biggerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let len = arr.length;\n  let max = len / 2;\n  let count = 0;\n  for (let i = 0; i < max; i++) {\n    if (arr[i]!== arr[(len - i) % len]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let len = arr.length;\n  let min = len / 2;\n  let count = 0;\n  for (let i = 0; i < min; i++) {\n    if (arr[i]!== arr[(len - i) % len]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  biggerChange([1,2,3,5,4,7,9,6]) == 6\n  biggerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  biggerChange([1, 2, 3, 2, 1]) == 1\n  biggerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let len = arr.length;\n  let max = len / 2;\n  let count = 0;\n  for (let i = 0; i < max; i++) {\n    if (arr[i]!== arr[(len - i) % len]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const totalCharsOfLst2 = lst2.reduce((acc, curr) => acc + curr.length, 0)\n  return lst1.filter(item => totalChars < totalCharsOfLst2)\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const totalCharsOfLst2 = lst2.reduce((acc, curr) => acc + curr.length, 0)\n  return lst1.filter(item => totalChars > totalCharsOfLst2)\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const totalCharsOfLst2 = lst2.reduce((acc, curr) => acc + curr.length, 0)\n  return lst1.filter(item => totalChars === totalCharsOfLst2)\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const totalCharsOfLst2 = lst2.reduce((acc, curr) => acc + curr.length, 0)\n  return lst1.filter(item => totalChars!== totalCharsOfLst2)\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list between the first and last\n  chars of the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const totalCharsOfLst2 = lst2.reduce((acc, curr) => acc + curr.length, 0)\n  return lst1.filter(item => totalChars >= totalCharsOfLst2 && totalChars <= totalCharsOfLst2)\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list between the first and last\n  chars of the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const totalCharsOfLst2 = lst2.reduce((acc, curr) => acc + curr.length, 0)\n  return lst1.filter(item => totalChars >= totalCharsOfLst2 && totalChars <= totalCharsOfLst2)\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list between the first and last\n  chars of the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a prime and false in\n  other cases.\n  x is a prime if n%int=0 \n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  */\nconst isPrime = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect square and\n  false in other cases.\n  x is a perfect square if n%int=0 \n  For example:\n  isPerfectSquare(2) => true\n  isPerfectSquare(3) => false\n  isPerfectSquare(5) => false\n  isPerfectSquare(7) => true\n  */\nconst isPerfectSquare = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=0 \n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  */\nconst isPerfectCube = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=0 \n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  */\nconst isPerfectCube = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=0 \n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  */\nconst isPerfectCube = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=0 \n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  */\nconst isPerfectCube = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=0 \n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  */\nconst isPerfectCube = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=0 \n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  */\nconst isPerfectCube = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=0 \n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  */\nconst isPerfectCube = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=0 \n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  */\nconst isPerfectCube = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a perfect cube\n  and false in other cases.\n  x is a perfect cube if n%int=0 \n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => false\n  isPerfectCube(5) => false\n  isPerfectCube(7) => true\n  */\nconst isPerfectCube = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false;\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return false;\n  if (a % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a pentagonal number with sides equal to\n  some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  ispentagonal(1) ==> true\n  ispentagonal(2) ==> false\n  ispentagonal(3) ==> true\n  ispentagonal(4) ==> false\n  ispentagonal(5) ==> true\n  ispentagonal(6) ==> false\n  ispentagonal(7) ==> true\n  ispentagonal(8) ==> false\n  ispentagonal(9) ==> true\n  ispentagonal(10) ==> false\n  ispentagonal(11) ==> true\n  ispentagonal(12) ==> false\n  ispentagonal(13) ==> true\n  ispentagonal(14) ==> false\n  ispentagonal(15) ==> true\n  ispentagonal(16) ==> false\n  ispentagonal(17) ==> true\n  ispentagonal(18) ==> false\n  ispentagonal(19) ==> true\n  ispentagonal(20) ==> false\n  ispentagonal(21) ==> true\n  ispentagonal(22) ==> false\n  ispentagonal(23) ==> true\n  ispentagonal(24) ==> false\n  ispentagonal(25) ==> true\n  ispentagonal(26) ==> false\n  ispentagonal(27) ==> true\n  ispentagonal(28) ==> false\n  ispentagonal(29) ==> true\n  ispentagonal(30) ==> false\n  ispentagonal(31) ==> true\n  ispentagonal(32) ==> false\n  ispentagonal(33) ==> true\n  ispentagonal(34) ==> false\n  ispentagonal(35) ==> true\n  ispentagonal(36) ==> false\n  ispentagonal(37) ==> true\n  ispentagonal(38) ==> false\n  ispentagonal(39) ==> true\n  ispentagonal(40) ==> false\n  ispentagonal(41) ==> true\n  ispentagonal(42) ==> false\n  ispentagonal(43) ==> true\n  ispentagonal(44) ==> false\n  ispentagonal(45) ==> true\n  ispentagonal(46) ==> false\n  ispentagonal(47) ==> true\n  ispentagonal(48) ==> false\n  ispentagonal(49) ==> true\n  ispentagonal(50) ==> false\n  ispentagonal(51) ==> true\n  ispentagonal(52) ==> false\n  ispentagonal(53) ==> true\n  ispentagonal(54) ==> false\n  ispentagonal(55) ==> true\n  ispentagonal(56) ==> false\n  ispentagonal(57) ==> true\n  ispentagonal(58) ==> false\n  ispentagonal(59) ==> true\n  ispentagonal(60) ==> false\n  ispentagonal(61) ==> true\n  ispentagonal(62) ==> false\n  ispentagonal(63) ==> true\n  ispentagonal(64) ==> false\n  ispentagonal(65) ==> true\n  ispentagonal(66) ==> false\n  ispentagonal(67) ==> true\n  ispentagonal(68) ==> false\n  ispentagonal(69) ==> true\n  ispentagonal(70) ==> false\n  ispentagonal(71) ==> true\n  ispentagonal(72) ==> false\n  ispentagonal(73) ==> true\n  ispentagonal(74) ==> false\n  ispentagonal(75) ==> true\n  ispentagonal(76) ==> false\n  ispentagonal(77) ==> true\n  ispentagonal(78) ==> false\n  ispentagonal(79) ==> true\n  ispentagonal(80) ==> false\n  ispentagonal(81) ==> true\n  ispentagonal(82) ==> false\n  ispentagonal(83) ==> true\n  ispentagonal(84) ==> false\n  ispentagonal(85) ==> true\n  ispentagonal(86) ==> false\n  ispentagonal(87) ==> true\n  ispentagonal(88) ==> false\n  ispentagonal(89) ==> true\n  ispentagonal(90) ==> false\n  ispentagonal(91) ==> true\n  ispentagonal(92) ==> false\n  ispentagonal(93) ==> true\n  ispentagonal(94) ==> false\n  ispentagonal(95) ==> true\n  ispentagonal(96) ==> false\n  ispentagonal(97) ==> true\n  ispentagonal(98) ==> false\n  ispentagonal(99) ==> true\n  ispentagonal(100) ==> false\n  ispentagonal(101) ==> true\n  ispentagonal(102) ==> false\n  ispentagonal(103) ==> true\n  ispentagonal(104) ==> false\n  ispentagonal(105) ==> true\n  ispentagonal(106) ==> false\n  ispentagonal(107) ==> true\n  ispentagonal(108) ==> false\n  ispentagonal(109) ==> true\n  ispentagonal(110) ==> false\n  ispentagonal(111) ==> true\n  ispentagonal(112) ==> false\n  ispentagonal(113) ==> true\n  ispentagonal(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexesKeys", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n  let count = 0;\n  let numStr = \"\";\n  let symbols = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  let symbol = symbols.charAt(Math.floor(Math.random() * symbols.length));\n  let numArr = num.split(\"\");\n  for (let i = 0; i < numArr.length; i++) {\n    if (numArr[i] === symbol) {\n      numStr += symbol;\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that receives a string and returns the number of uppercase letters.\n  Examples:\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 5.\n  For str = \"ABCDEFGH", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalsToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  let decimalLength = decimalString.length;\n  let decimalNumber = 0;\n  let decimalDigit;\n\n  for (let i = 0; i < decimalLength; i++) {\n    decimalDigit = decimalString.charAt(i);\n    decimalNumber += decimalDigit === '0'? 1 : 0;\n  }\n\n  for (let i = 0; i < decimalLength; i++) {\n    binary += decimalNumber % 2? '1' : '0';\n    decimalNumber = Math.floor(decimalNumber / 2);\n  }\n\n  return binary;\n};\n\n/*\n  Write a function that converts a binary string to a decimal number.\n\n  Examples:\n  binaryToDecimal('1111')   # returns 15\n  binaryToDecimal('100000')   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  let binaryNumber = 0;\n  let binaryDigit;\n\n  for (let i = 0; i < binaryLength; i++) {\n    binaryDigit = binary.charAt(i);\n    decimal += binaryDigit === '1'? 1 : 0;\n    binaryNumber = Math.floor(decimal);\n    decimal = decimal - binaryNumber;\n  }\n\n  return decimal;\n};\n\n/*\n  Write a function that converts a decimal number to a binary string.\n\n  Examples:\n  decimalToBinary('15')   # returns \"1111\"\n  decimalToBinary('32')   # returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  let decimalLength = decimalString.length;\n  let decimalNumber = 0;\n  let decimalDigit;\n\n  for (let i = 0; i < decimalLength; i++) {\n    decimalDigit = decimalString.charAt(i);\n    decimalNumber += decimalDigit === '1'? 1 : 0;\n  }\n\n  for (let i = 0; i < decimalLength; i++) {\n    binary += decimalNumber % 2? '1' : '0';\n    decimalNumber = Math.floor(decimalNumber / 2);\n  }\n\n  return binary;\n};\n\n/*\n  Write a function that converts a binary string to a hexadecimal string.\n\n  Examples:\n  binaryToHex('1111')   # returns \"db\"\n  binaryToHex('100000')   # returns \"db\"\n  */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  let binaryLength = binary.length;\n  let binaryNumber = 0;\n  let binaryDigit;\n\n  for (let i = 0; i < binaryLength; i++) {\n    binaryDigit = binary.charAt(i);\n    hex += binaryDigit === '1'? '1' : '0';\n    binaryNumber = Math.floor(decimal);\n    decimal = decimal - binaryNumber;\n  }\n\n  return hex;\n};\n\n/*\n  Write a function that converts a hexadecimal string to a binary string.\n\n  Examples:\n  hexToBinary('db')   # returns \"1111\"\n  hexToBinary('db')   # returns \"1111\"\n  */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  let hexString = hex.toString();\n  let hexLength = hexString.length;\n  let hexNumber = 0;\n  let hexDigit;\n\n  for (let i = 0; i < hexLength; i++) {\n    hexDigit = hexString.charAt(i);\n    binary += hexDigit === '1'? '1' : '0';\n    hexNumber = Math.floor(hexNumber / 2);\n    hexNumber = hexNumber - hexNumber * 2;\n  }\n\n  return binary;\n};\n\n/*\n  Write a function that converts a decimal number to a hexadecimal string.\n\n  Examples:\n  decimalToHex(15)   # returns \"db\"\n  decimalToHex(32)   # returns \"db\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = '';\n  let decimalString = decimal.toString();\n  let decimalLength = decimalString.length;\n  let decimalNumber = 0;\n  let decimalDigit;\n\n  for (let i = 0; i < decimalLength; i++) {\n    decimalDigit = decimalString.charAt(i);\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;\n    decimal += decimalDigit === '0'? 1 : 0;\n    decimal += decimalDigit === '1'? 1 : 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProducts", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  [(1, 10), (2, 24), (3, 120), (4, 720)]\n  */\nconst sumProductsNoZero = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === 0) {\n      continue;\n    }\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductsNoZero([1, 2, 3, 4])\n  [(1, 10), (2, 24), (3, 120), (4, 720)]\n  */\nconst sumProductsNoZeroNoZero = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === 0) {\n      continue;\n    }\n    sum += numbers[i];\n    product *= numbers[i];\n    if (numbers[i]!== 0) {\n      break;\n    }\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductsNoZeroNoZero([1, 2, 3, 4])\n  [(1, 10), (2, 24), (3, 120), (4, 720)]\n  */\nconst sumProductsNoZeroNoZeroNoZero = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === 0) {\n      continue;\n    }\n    sum += numbers[i];\n    product *= numbers[i];\n    if (numbers[i]!== 0) {\n      break;\n    }\n  }\n  if (numbers[i]!== 0) {\n    return [sum, product];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductsNoZeroNoZeroNoZero([1, 2, 3, 4])\n  [(1, 10), (2, 24), (3, 120), (4, 720)]\n  */\nconst sumProductsNoZeroNoZeroNoZeroNoZero = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === 0) {\n      continue;\n    }\n    sum += numbers[i];\n    product *= numbers[i];\n    if (numbers[i]!== 0) {\n      break;\n    }\n  }\n  if (numbers[i]!== 0) {\n    return [sum, product];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductsNoZeroNoZeroNoZeroNoZero([1, 2, 3, 4])\n  [(1, 10), (2, 24), (3, 120), (4, 720)]\n  */\nconst sumProductsNoZeroNoZeroNoZeroNoZeroNoZero = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === 0) {\n      continue;\n    }\n    sum += numbers[i];\n    product *= numbers[i];\n    if (numbers[i]!== 0) {\n      break;\n    }\n  }\n  if (numbers[i]!== 0) {\n    return [sum, product];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductsNoZeroNoZeroNoZeroNoZeroNoZero([1, 2, 3, 4])\n  [(1, 10), (2, 24), (3, 120), (4, 720)]\n  */\nconst sumProductsNoZeroNoZeroNoZeroNoZeroNoZeroNoZero = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === 0) {\n      continue;\n    }\n    sum += numbers[i];\n    product *= numbers[i];\n    if (numbers[i]!== 0) {\n      break;\n    }\n  }\n  if (numbers[i]!== 0) {\n    return [sum, product];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductsNoZeroNoZeroNoZeroNoZeroNoZeroNoZero([1, 2, 3, 4])\n  [(1, 10), (2, 24), (3, 120), (4, 720)]\n  */\nconst sumProductsNoZeroNoZeroNoZeroNoZeroNoZeroNoZero = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === 0) {\n      continue;\n    }\n    sum += numbers[i];\n    product *= numbers[i];\n    if (numbers[i]!== 0) {\n      break;\n    }\n  }\n  if (numbers[i]!== 0) {\n    return [sum, product];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductsNoZeroNoZeroNoZeroNoZeroNoZeroNoZero([1, 2, 3, 4])\n  [(1, 10), (2, 24), (3, 120), (4, 720)]\n  */\nconst sumProductsNoZeroNoZeroNoZeroNoZeroNoZeroNoZero = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === 0) {\n      continue;\n    }\n    sum += numbers[i];\n    product *= numbers[i];\n    if (numbers[i]!== 0) {\n      break;\n    }\n  }\n  if (numbers[i]!== 0) {\n    return [sum, product];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductsNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZero([1, 2, 3, 4])\n  [(1, 10), (2, 24), (3, 120), (4, 720)]\n  */\nconst sumProductsNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZero = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === 0) {\n      continue;\n    }\n    sum += numbers[i];\n    product *= numbers[i];\n    if (numbers[i]!== 0) {\n      break;\n    }\n  }\n  if (numbers[i]!== 0) {\n    return [sum, product];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a list of tuples consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductsNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZero([1, 2, 3, 4])\n  [(1, 10), (2, 24), (3, 120), (4, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappiest", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  let isHappy = true;\n  let count = 0;\n  let letter;\n  let letterCount = 0;\n  let letterCount2 = 0;\n  let letterCount3 = 0;\n  let letterCount4 = 0;\n  let letterCount5 = 0;\n  let letterCount6 = 0;\n  let letterCount7 = 0;\n  let letterCount8 = 0;\n  let letterCount9 = 0;\n  let letterCount10 = 0;\n  let letterCount11 = 0;\n  let letterCount12 = 0;\n  let letterCount13 = 0;\n  let letterCount14 = 0;\n  let letterCount15 = 0;\n  let letterCount16 = 0;\n  let letterCount17 = 0;\n  let letterCount18 = 0;\n  let letterCount19 = 0;\n  let letterCount20 = 0;\n  let letterCount21 = 0;\n  let letterCount22 = 0;\n  let letterCount23 = 0;\n  let letterCount24 = 0;\n  let letterCount25 = 0;\n  let letterCount26 = 0;\n  let letterCount27 = 0;\n  let letterCount28 = 0;\n  let letterCount29 = 0;\n  let letterCount30 = 0;\n  let letterCount31 = 0;\n  let letterCount32 = 0;\n  let letterCount33 = 0;\n  let letterCount34 = 0;\n  let letterCount35 = 0;\n  let letterCount36 = 0;\n  let letterCount37 = 0;\n  let letterCount38 = 0;\n  let letterCount39 = 0;\n  let letterCount40 = 0;\n  let letterCount41 = 0;\n  let letterCount42 = 0;\n  let letterCount43 = 0;\n  let letterCount44 = 0;\n  let letterCount45 = 0;\n  let letterCount46 = 0;\n  let letterCount47 = 0;\n  let letterCount48 = 0;\n  let letterCount49 = 0;\n  let letterCount50 = 0;\n  let letterCount51 = 0;\n  let letterCount52 = 0;\n  let letterCount53 = 0;\n  let letterCount54 = 0;\n  let letterCount55 = 0;\n  let letterCount56 = 0;\n  let letterCount57 = 0;\n  let letterCount58 = 0;\n  let letterCount59 = 0;\n  let letterCount60 = 0;\n  let letterCount61 = 0;\n  let letterCount62 = 0;\n  let letterCount63 = 0;\n  let letterCount64 = 0;\n  let letterCount65 = 0;\n  let letterCount66 = 0;\n  let letterCount67 = 0;\n  let letterCount68 = 0;\n  let letterCount69 = 0;\n  let letterCount70 = 0;\n  let letterCount71 = 0;\n  let letterCount72 = 0;\n  let letterCount73 = 0;\n  let letterCount74 = 0;\n  let letterCount75 = 0;\n  let letterCount76 = 0;\n  let letterCount77 = 0;\n  let letterCount78 = 0;\n  let letterCount79 = 0;\n  let letterCount80 = 0;\n  let letterCount81 = 0;\n  let letterCount82 = 0;\n  let letterCount83 = 0;\n  let letterCount84 = 0;\n  let letterCount85 = 0;\n  let letterCount86 = 0;\n  let letterCount87 = 0;\n  let letterCount88 = 0;\n  let letterCount89 = 0;\n  let letterCount90 = 0;\n  let letterCount91 = 0;\n  let letterCount92 = 0;\n  let letterCount93 = 0;\n  let letterCount94 = 0;\n  let letterCount95 = 0;\n  let letterCount96 = 0;\n  let letterCount97 = 0;\n  let letterCount98 = 0;\n  let letterCount99 = 0;\n  let letterCount100 = 0;\n  let letterCount101 = 0;\n  let letterCount102 = 0;\n  let letterCount103 = 0;\n  let letterCount104 = 0;\n  let letterCount105 = 0;\n  let letterCount106 = 0;\n  let letterCount107 = 0;\n  let letterCount108 = 0;\n  let letterCount109 = 0;\n  let letterCount110 = 0;\n  let letterCount111 = 0;\n  let letterCount112 = 0;\n  let letterCount113 = 0;\n  let letterCount114 = 0;\n  let letterCount115 = 0;\n  let letterCount116 = 0;\n  let letterCount117 = 0;\n  let letterCount118 = 0;\n  let letterCount119 = 0;\n  let letterCount120 = 0;\n  let letterCount121 = 0;\n  let letterCount122 = 0;\n  let letterCount123 = 0;\n  let letterCount124 = 0;\n  let letterCount125 = 0;\n  let letterCount126 = 0;\n  let letterCount127 = 0;\n  let letterCount128 = 0;\n  let letterCount129 = 0;\n  let letterCount130 = 0;\n  let letterCount131 = 0;\n  let letterCount132 = 0;\n  let letterCount133 = 0;\n  let letterCount134 = 0;\n  let letterCount135 = 0;\n  let letterCount136 = 0;\n  let letterCount137 = 0;\n  let letterCount138 = 0;\n  let letterCount139 = 0;\n  let letterCount140 = 0;\n  let letterCount141 = 0;\n  let letterCount142 = 0;\n  let letterCount143 = 0;\n  let letterCount144 = 0;\n  let letterCount145 = 0;\n  let letterCount146 = 0;\n  let letterCount147 = 0;\n  let letterCount148 = 0;\n  let letterCount149 = 0;\n  let letterCount150 = 0;\n  let letterCount151 = 0;\n  let letterCount152 = 0;\n  let letterCount153 = 0;\n  let letterCount154 = 0;\n  let letterCount155 = 0;\n  let letterCount156 = 0;\n  let letterCount157 = 0;\n  let letterCount158 = 0;\n  let letterCount159 = 0;\n  let letterCount160 = 0;\n  let letterCount161 = 0;\n  let letterCount162 = 0;\n  let letterCount163 = 0;\n  let letterCount164 = 0;\n  let letterCount165 = 0;\n  let letterCount166 = 0;\n  let letterCount167 = 0;\n  let letterCount168 = 0;\n  let letterCount169 = 0;\n  let letterCount170 = 0;\n  let letterCount171 = 0;\n  let letterCount172 = 0;\n  let letterCount173 = 0;\n  let letterCount174 = 0;\n  let letterCount175 = 0;\n  let letterCount176 = 0;\n  let letterCount177 = 0;\n  let letterCount178 = 0;\n  let letterCount179 = 0;\n  let letterCount180 = 0;\n  let letterCount181 = 0;\n  let letterCount182 = 0;\n  let letterCount183 = 0;\n  let letterCount184 = 0;\n  let letterCount185 = 0;\n  let letterCount186 = 0;\n  let letterCount187 = 0;\n  let letterCount188 = 0;\n  let letterCount189 = 0;\n  let letterCount190 = 0;\n  let letterCount191 = 0;\n  let letterCount192 = 0;\n  let letterCount193 = 0;\n  let letterCount194 = 0;\n  let letterCount195 = 0;\n  let letterCount196 = 0;\n  let letterCount197 = 0;\n  let letterCount198 = 0;\n  let letterCount199 = 0;\n  let letterCount200 = 0;\n  let letterCount201 = 0;\n  let letterCount202 = 0;\n  let letterCount203 = 0;\n  let letterCount204 = 0;\n  let letterCount205 = 0;\n  let letterCount206 = 0;\n  let letterCount207 = 0;\n  let letterCount208 = 0;\n  let letterCount209 = 0;\n  let letterCount210 = 0;\n  let letterCount211 = 0;\n  let letterCount212 = 0;\n  let letterCount213 = 0;\n  let letterCount214 = 0;\n  let letterCount215 = 0;\n  let letterCount216 = 0;\n  let letterCount217 = 0;\n  let letterCount218 = 0;\n  let letterCount219 = 0;\n  let letterCount220 = 0;\n  let letterCount221 = 0;\n  let letterCount222 = 0;\n  let letterCount223 = 0;\n  let letterCount224 = 0;\n  let letterCount225 = 0;\n  let letterCount226 = 0;\n  let letterCount227 = 0;\n  let letterCount228 = 0;\n  let letterCount229 = 0;\n  let letterCount230 = 0;\n  let letterCount231 = 0;\n  let letterCount232 = 0;\n  let letterCount233 = 0;\n  let letterCount234 = 0;\n  let letterCount235 = 0;\n  let letterCount236 = 0;\n  let letter", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(parseFloat);\n  const gradesArrayLength = gradesArray.length;\n  let letterGrades = [];\n  let letterGrade = '';\n  let currentGrade = 0;\n  let currentLetterGrade = '';\n  let currentLetterGradeIndex = 0;\n  let currentLetterGradeIndex2 = 0;\n  let currentLetterGradeIndex3 = 0;\n  let currentLetterGradeIndex4 = 0;\n  let currentLetterGradeIndex5 = 0;\n  let currentLetterGradeIndex6 = 0;\n  let currentLetterGradeIndex7 = 0;\n  let currentLetterGradeIndex8 = 0;\n  let currentLetterGradeIndex9 = 0;\n  let currentLetterGradeIndex10 = 0;\n  let currentLetterGradeIndex11 = 0;\n  let currentLetterGradeIndex12 = 0;\n  let currentLetterGradeIndex13 = 0;\n  let currentLetterGradeIndex14 = 0;\n  let currentLetterGradeIndex15 = 0;\n  let currentLetterGradeIndex16 = 0;\n  let currentLetterGradeIndex17 = 0;\n  let currentLetterGradeIndex18 = 0;\n  let currentLetterGradeIndex19 = 0;\n  let currentLetterGradeIndex20 = 0;\n  let currentLetterGradeIndex21 = 0;\n  let currentLetterGradeIndex22 = 0;\n  let currentLetterGradeIndex23 = 0;\n  let currentLetterGradeIndex24 = 0;\n  let currentLetterGradeIndex25 = 0;\n  let currentLetterGradeIndex26 = 0;\n  let currentLetterGradeIndex27 = 0;\n  let currentLetterGradeIndex28 = 0;\n  let currentLetterGradeIndex29 = 0;\n  let currentLetterGradeIndex30 = 0;\n  let currentLetterGradeIndex31 = 0;\n  let currentLetterGradeIndex32 = 0;\n  let currentLetterGradeIndex33 = 0;\n  let currentLetterGradeIndex34 = 0;\n  let currentLetterGradeIndex35 = 0;\n  let currentLetterGradeIndex36 = 0;\n  let currentLetterGradeIndex37 = 0;\n  let currentLetterGradeIndex38 = 0;\n  let currentLetterGradeIndex39 = 0;\n  let currentLetterGradeIndex40 = 0;\n  let currentLetterGradeIndex41 = 0;\n  let currentLetterGradeIndex42 = 0;\n  let currentLetterGradeIndex43 = 0;\n  let currentLetterGradeIndex44 = 0;\n  let currentLetterGradeIndex45 = 0;\n  let currentLetterGradeIndex46 = 0;\n  let currentLetterGradeIndex47 = 0;\n  let currentLetterGradeIndex48 = 0;\n  let currentLetterGradeIndex49 = 0;\n  let currentLetterGradeIndex50 = 0;\n  let currentLetterGradeIndex51 = 0;\n  let currentLetterGradeIndex52 = 0;\n  let currentLetterGradeIndex53 = 0;\n  let currentLetterGradeIndex54 = 0;\n  let currentLetterGradeIndex55 = 0;\n  let currentLetterGradeIndex56 = 0;\n  let currentLetterGradeIndex57 = 0;\n  let currentLetterGradeIndex58 = 0;\n  let currentLetterGradeIndex59 = 0;\n  let currentLetterGradeIndex60 = 0;\n  let currentLetterGradeIndex61 = 0;\n  let currentLetterGradeIndex62 = 0;\n  let currentLetterGradeIndex63 = 0;\n  let currentLetterGradeIndex64 = 0;\n  let currentLetterGradeIndex65 = 0;\n  let currentLetterGradeIndex66 = 0;\n  let currentLetterGradeIndex67 = 0;\n  let currentLetterGradeIndex68 = 0;\n  let currentLetterGradeIndex69 = 0;\n  let currentLetterGradeIndex70 = 0;\n  let currentLetterGradeIndex71 = 0;\n  let currentLetterGradeIndex72 = 0;\n  let currentLetterGradeIndex73 = 0;\n  let currentLetterGradeIndex74 = 0;\n  let currentLetterGradeIndex75 = 0;\n  let currentLetterGradeIndex76 = 0;\n  let currentLetterGradeIndex77 = 0;\n  let currentLetterGradeIndex78 = 0;\n  let currentLetterGradeIndex79 = 0;\n  let currentLetterGradeIndex80 = 0;\n  let currentLetterGradeIndex81 = 0;\n  let currentLetterGradeIndex82 = 0;\n  let currentLetterGradeIndex83 = 0;\n  let currentLetterGradeIndex84 = 0;\n  let currentLetterGradeIndex85 = 0;\n  let currentLetterGradeIndex86 = 0;\n  let currentLetterGradeIndex87 = 0;\n  let currentLetterGradeIndex88 = 0;\n  let currentLetterGradeIndex89 = 0;\n  let currentLetterGradeIndex90 = 0;\n  let currentLetterGradeIndex91 = 0;\n  let currentLetterGradeIndex92 = 0;\n  let currentLetterGradeIndex93 = 0;\n  let currentLetterGradeIndex94 = 0;\n  let currentLetterGradeIndex95 = 0;\n  let currentLetterGradeIndex96 = 0;\n  let currentLetterGradeIndex97 = 0;\n  let currentLetterGradeIndex98 = 0;\n  let currentLetterGradeIndex99 = 0;\n  let currentLetterGradeIndex100 = 0;\n  let currentLetterGradeIndex101 = 0;\n  let currentLetterGradeIndex102 = 0;\n  let currentLetterGradeIndex103 = 0;\n  let currentLetterGradeIndex104 = 0;\n  let currentLetterGradeIndex105 = 0;\n  let currentLetterGradeIndex106 = 0;\n  let currentLetterGradeIndex107 = 0;\n  let currentLetterGradeIndex108 = 0;\n  let currentLetterGradeIndex109 = 0;\n  let currentLetterGradeIndex110 = 0;\n  let currentLetterGradeIndex111 = 0;\n  let currentLetterGradeIndex112 = 0;\n  let currentLetterGradeIndex113 = 0;\n  let currentLetterGradeIndex114 = 0;\n  let currentLetterGradeIndex115 = 0;\n  let currentLetterGradeIndex116 = 0;\n  let currentLetterGradeIndex117 = 0;\n  let currentLetterGradeIndex118 = 0;\n  let currentLetterGradeIndex119 = 0;\n  let currentLetterGradeIndex120 = 0;\n  let currentLetterGradeIndex121 = 0;\n  let currentLetterGradeIndex122 = 0;\n  let currentLetterGradeIndex123 = 0;\n  let currentLetterGradeIndex124 = 0;\n  let currentLetterGradeIndex125 = 0;\n  let currentLetterGradeIndex126 = 0;\n  let currentLetterGradeIndex127 = 0;\n  let currentLetterGradeIndex128 = 0;\n  let currentLetterGradeIndex129 = 0;\n  let currentLetterGradeIndex130 = 0;\n  let currentLetterGradeIndex131 = 0;\n  let currentLetterGradeIndex132 = 0;\n  let currentLetterGradeIndex133 = 0;\n  let currentLetterGradeIndex134 = 0;\n  let currentLetterGradeIndex135 = 0;\n  let currentLetterGradeIndex136 = 0;\n  let currentLetterGradeIndex137 = 0;\n  let currentLetterGradeIndex138 = 0;\n  let currentLetterGradeIndex139 = 0;\n  let currentLetterGradeIndex140 = 0;\n  let currentLetterGradeIndex141 = 0;\n  let currentLetterGradeIndex14", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == false\n  */\nconst divisibleBy3 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 3 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == false\n  */\nconst divisibleBy5 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 5 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == false\n  */\nconst divisibleBy7 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 7 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisibleBy9('Hello') == true\n  divisibleBy9('abcdcba') == true\n  divisibleBy9('kittens') == false\n  */\nconst divisibleBy9 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 9 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == false\n  */\nconst divisibleBy11 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 11 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == false\n  */\nconst divisibleBy13 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 13 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('abcdcba') == true\n  divisibleBy15('kittens') == false\n  */\nconst divisibleBy15 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 15 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == false\n  */\nconst divisibleBy17 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 17 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('abcdcba') == true\n  divisibleBy19('kittens') == false\n  */\nconst divisibleBy19 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 19 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 21 or false otherwise\n  Examples\n  divisibleBy21('Hello') == true\n  divisibleBy21('abcdcba') == true\n  divisibleBy21('kittens') == false\n  */\nconst divisibleBy21 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 21 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 23 or false otherwise\n  Examples\n  divisibleBy23('Hello') == true\n  divisibleBy23('abcdcba') == true\n  divisibleBy23('kittens') == false\n  */\nconst divisibleBy23 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 23 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 25 or false otherwise\n  Examples\n  divisibleBy25('Hello') == true\n  divisibleBy25('abcdcba') == true\n  divisibleBy25('kittens') == false\n  */\nconst divisibleBy25 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 25 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 27 or false otherwise\n  Examples\n  divisibleBy27('Hello') == true\n  divisibleBy27('abcdcba') == true\n  divisibleBy27('kittens') == false\n  */\nconst divisibleBy27 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (i % 27 === 0) {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 29 or false otherwise\n  Examples\n  di", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 2.\n  */\nconst startTwoEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 3.\n  */\nconst startThreeEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 4.\n  */\nconst startFourEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 5.\n  */\nconst startFiveEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 6.\n  */\nconst startSixEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 7.\n  */\nconst startSevenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 8.\n  */\nconst startEightEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 9.\n  */\nconst startNineEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 10.\n  */\nconst startTenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 11.\n  */\nconst startElevenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 12.\n  */\nconst startTwelveEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 13.\n  */\nconst startThirteenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 14.\n  */\nconst startFourteenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 15.\n  */\nconst startFifteenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 16.\n  */\nconst startSixteenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 17.\n  */\nconst startSeventeenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 18.\n  */\nconst startEighteenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 19.\n  */\nconst startNineteenEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 20.\n  */\nconst startTwentyEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 21.\n  */\nconst startThirtyEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 22.\n  */\nconst startFortyEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 23.\n  */\nconst startFiftyEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let digit = 0;\n  let binary = \"\";\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n  let even = 0;\n  let odd = 0;\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenValue = 0;\n  let oddValue = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  let evenSum2 = 0;\n  let oddSum2 = 0;\n  let evenSum3 = 0;\n  let oddSum3 = 0;\n  let evenSum4 = 0;\n  let oddSum4 = 0;\n  let evenSum5 = 0;\n  let oddSum5 = 0;\n  let evenSum6 = 0;\n  let oddSum6 = 0;\n  let evenSum7 = 0;\n  let oddSum7 = 0;\n  let evenSum8 = 0;\n  let oddSum8 = 0;\n  let evenSum9 = 0;\n  let oddSum9 = 0;\n  let evenSum10 = 0;\n  let oddSum10 = 0;\n  let evenSum11 = 0;\n  let oddSum11 = 0;\n  let evenSum12 = 0;\n  let oddSum12 = 0;\n  let evenSum13 = 0;\n  let oddSum13 = 0;\n  let evenSum14 = 0;\n  let oddSum14 = 0;\n  let evenSum15 = 0;\n  let oddSum15 = 0;\n  let evenSum16 = 0;\n  let oddSum16 = 0;\n  let evenSum17 = 0;\n  let oddSum17 = 0;\n  let evenSum18 = 0;\n  let oddSum18 = 0;\n  let evenSum19 = 0;\n  let oddSum19 = 0;\n  let evenSum20 = 0;\n  let oddSum20 = 0;\n  let evenSum21 = 0;\n  let oddSum21 = 0;\n  let evenSum22 = 0;\n  let oddSum22 = 0;\n  let evenSum23 = 0;\n  let oddSum23 = 0;\n  let evenSum24 = 0;\n  let oddSum24 = 0;\n  let evenSum25 = 0;\n  let oddSum25 = 0;\n  let evenSum26 = 0;\n  let oddSum26 = 0;\n  let evenSum27 = 0;\n  let oddSum27 = 0;\n  let evenSum28 = 0;\n  let oddSum28 = 0;\n  let evenSum29 = 0;\n  let oddSum29 = 0;\n  let evenSum30 = 0;\n  let oddSum30 = 0;\n  let evenSum31 = 0;\n  let oddSum31 = 0;\n  let evenSum32 = 0;\n  let oddSum32 = 0;\n  let evenSum33 = 0;\n  let oddSum33 = 0;\n  let evenSum34 = 0;\n  let oddSum34 = 0;\n  let evenSum35 = 0;\n  let oddSum35 = 0;\n  let evenSum36 = 0;\n  let oddSum36 = 0;\n  let evenSum37 = 0;\n  let oddSum37 = 0;\n  let evenSum38 = 0;\n  let oddSum38 = 0;\n  let evenSum39 = 0;\n  let oddSum39 = 0;\n  let evenSum40 = 0;\n  let oddSum40 = 0;\n  let evenSum41 = 0;\n  let oddSum41 = 0;\n  let evenSum42 = 0;\n  let oddSum42 = 0;\n  let evenSum43 = 0;\n  let oddSum43 = 0;\n  let evenSum44 = 0;\n  let oddSum44 = 0;\n  let evenSum45 = 0;\n  let oddSum45 = 0;\n  let evenSum46 = 0;\n  let oddSum46 = 0;\n  let evenSum47 = 0;\n  let oddSum47 = 0;\n  let evenSum48 = 0;\n  let oddSum48 = 0;\n  let evenSum49 = 0;\n  let oddSum49 = 0;\n  let evenSum50 = 0;\n  let oddSum50 = 0;\n  let evenSum51 = 0;\n  let oddSum51 = 0;\n  let evenSum52 = 0;\n  let oddSum52 = 0;\n  let evenSum53 = 0;\n  let oddSum53 = 0;\n  let evenSum54 = 0;\n  let oddSum54 = 0;\n  let evenSum55 = 0;\n  let oddSum55 = 0;\n  let evenSum56 = 0;\n  let oddSum56 = 0;\n  let evenSum57 = 0;\n  let oddSum57 = 0;\n  let evenSum58 = 0;\n  let oddSum58 = 0;\n  let evenSum59 = 0;\n  let oddSum59 = 0;\n  let evenSum60 = 0;\n  let oddSum60 = 0;\n  let evenSum61 = 0;\n  let oddSum61 = 0;\n  let evenSum62 = 0;\n  let oddSum62 = 0;\n  let evenSum63 = 0;\n  let oddSum63 = 0;\n  let evenSum64 = 0;\n  let oddSum64 = 0;\n  let evenSum65 = 0;\n  let oddSum65 = 0;\n  let evenSum66 = 0;\n  let oddSum66 = 0;\n  let evenSum67 = 0;\n  let oddSum67 = 0;\n  let evenSum68 = 0;\n  let oddSum68 = 0;\n  let evenSum69 = 0;\n  let oddSum69 = 0;\n  let evenSum70 = 0;\n  let oddSum70 = 0;\n  let evenSum71 = 0;\n  let oddSum71 = 0;\n  let evenSum72 = 0;\n  let oddSum72 = 0;\n  let evenSum73 = 0;\n  let oddSum73 = 0;\n  let evenSum74 = 0;\n  let oddSum74 = 0;\n  let evenSum75 = 0;\n  let oddSum75 = 0;\n  let evenSum76 = 0;\n  let oddSum76 = 0;\n  let evenSum77 = 0;\n  let oddSum77 = 0;\n  let evenSum78 = 0;\n  let oddSum78 = 0;\n  let evenSum79 = 0;\n  let oddSum79 = 0;\n  let evenSum80 = 0;\n  let oddSum80 = 0;\n  let evenSum81 = 0;\n  let oddSum81 = 0;\n  let evenSum82 = 0;\n  let oddSum82 = 0;\n  let evenSum83 = 0;\n  let oddSum83 = 0;\n  let evenSum84 = 0;\n  let oddSum84 = 0;\n  let evenSum85 = 0;\n  let oddSum85 = 0;\n  let evenSum86 = 0;\n  let oddSum86 = 0;\n  let evenSum87 = 0;\n  let oddSum87 = 0;\n  let evenSum88 = 0;\n  let oddSum88 = 0;\n  let evenSum89 = 0;\n  let oddSum89 = 0;\n  let evenSum90 = 0;\n  let oddSum90 = 0;\n  let evenSum91 = 0;\n  let oddSum91 = 0;\n  let evenSum92 = 0;\n  let oddSum92 = 0;\n  let evenSum93 = 0;\n  let oddSum93 = 0;\n  let evenSum94 = 0;\n  let oddSum94 = 0;\n  let evenSum95 = 0;\n  let oddSum95 = 0;\n  let evenSum96 = 0;\n  let oddSum96 = 0;\n  let evenSum97 = 0;\n  let oddSum97 = 0;\n  let evenSum98 = 0;\n  let oddSum98 = 0;\n  let evenSum99 = 0;\n  let oddSum99 = 0;\n  let evenSum100 = 0;\n  let oddSum100 = 0;\n  let evenSum101 = 0;\n  let oddSum101 = 0;\n  let evenSum102 = 0;\n  let oddSum102 = 0;\n  let evenSum103 = 0;\n  let oddSum103 = 0;\n  let evenSum104 = 0;\n  let oddSum104 = 0;\n  let evenSum105 = 0;\n  let oddSum105 = 0;\n  let evenSum106 = 0;\n  let oddSum106 = 0;\n  let evenSum107 = 0;\n  let oddSum107 = 0;\n  let evenSum108 = 0;\n  let oddSum108 = 0;\n  let evenSum109 = 0;\n  let oddSum109 = 0;\n  let evenSum110 = 0;\n  let oddSum110 = 0;\n  let evenSum111 = 0;\n  let oddSum111 = 0;\n  let evenSum112 = 0;\n  let oddSum112 = 0;\n  let evenSum113 = 0;\n  let oddSum113 = 0;\n  let evenSum114 = 0;\n  let oddSum114 = 0;\n  let evenSum115 = 0;\n  let oddSum115 = 0;\n  let evenSum116 = 0;\n  let oddSum116 = 0;\n  let evenSum117 = 0;\n  let oddSum117 = 0;\n  let evenSum118 = 0;\n  let oddSum118 = 0;\n  let evenSum119 = 0;\n  let oddSum119 = 0;\n  let evenSum120 = 0;\n  let oddSum120 = 0;\n  let evenSum121 = 0;\n  let oddSum121 = 0;\n  let evenSum122 = 0;\n  let oddSum122 = 0;\n  let evenSum123 = 0;\n  let oddSum123 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antisShuffles", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  const words = s.split(' ');\n  let newWords = [];\n  let newWord = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = '';\n  let tempWord = '';\n  let tempWords = [];\n  let tempWordsArr = [];\n  let tempWordsArr2 = [];\n  let tempWordsArr3 = [];\n  let tempWordsArr4 = [];\n  let tempWordsArr5 = [];\n  let tempWordsArr6 = [];\n  let tempWordsArr7 = [];\n  let tempWordsArr8 = [];\n  let tempWordsArr9 = [];\n  let tempWordsArr10 = [];\n  let tempWordsArr11 = [];\n  let tempWordsArr12 = [];\n  let tempWordsArr13 = [];\n  let tempWordsArr14 = [];\n  let tempWordsArr15 = [];\n  let tempWordsArr16 = [];\n  let tempWordsArr17 = [];\n  let tempWordsArr18 = [];\n  let tempWordsArr19 = [];\n  let tempWordsArr20 = [];\n  let tempWordsArr21 = [];\n  let tempWordsArr22 = [];\n  let tempWordsArr23 = [];\n  let tempWordsArr24 = [];\n  let tempWordsArr25 = [];\n  let tempWordsArr26 = [];\n  let tempWordsArr27 = [];\n  let tempWordsArr28 = [];\n  let tempWordsArr29 = [];\n  let tempWordsArr30 = [];\n  let tempWordsArr31 = [];\n  let tempWordsArr32 = [];\n  let tempWordsArr33 = [];\n  let tempWordsArr34 = [];\n  let tempWordsArr35 = [];\n  let tempWordsArr36 = [];\n  let tempWordsArr37 = [];\n  let tempWordsArr38 = [];\n  let tempWordsArr39 = [];\n  let tempWordsArr40 = [];\n  let tempWordsArr41 = [];\n  let tempWordsArr42 = [];\n  let tempWordsArr43 = [];\n  let tempWordsArr44 = [];\n  let tempWordsArr45 = [];\n  let tempWordsArr46 = [];\n  let tempWordsArr47 = [];\n  let tempWordsArr48 = [];\n  let tempWordsArr49 = [];\n  let tempWordsArr50 = [];\n  let tempWordsArr51 = [];\n  let tempWordsArr52 = [];\n  let tempWordsArr53 = [];\n  let tempWordsArr54 = [];\n  let tempWordsArr55 = [];\n  let tempWordsArr56 = [];\n  let tempWordsArr57 = [];\n  let tempWordsArr58 = [];\n  let tempWordsArr59 = [];\n  let tempWordsArr60 = [];\n  let tempWordsArr61 = [];\n  let tempWordsArr62 = [];\n  let tempWordsArr63 = [];\n  let tempWordsArr64 = [];\n  let tempWordsArr65 = [];\n  let tempWordsArr66 = [];\n  let tempWordsArr67 = [];\n  let tempWordsArr68 = [];\n  let tempWordsArr69 = [];\n  let tempWordsArr70 = [];\n  let tempWordsArr71 = [];\n  let tempWordsArr72 = [];\n  let tempWordsArr73 = [];\n  let tempWordsArr74 = [];\n  let tempWordsArr75 = [];\n  let tempWordsArr76 = [];\n  let tempWordsArr77 = [];\n  let tempWordsArr78 = [];\n  let tempWordsArr79 = [];\n  let tempWordsArr80 = [];\n  let tempWordsArr81 = [];\n  let tempWordsArr82 = [];\n  let tempWordsArr83 = [];\n  let tempWordsArr84 = [];\n  let tempWordsArr85 = [];\n  let tempWordsArr86 = [];\n  let tempWordsArr87 = [];\n  let tempWordsArr88 = [];\n  let tempWordsArr89 = [];\n  let tempWordsArr90 = [];\n  let tempWordsArr91 = [];\n  let tempWordsArr92 = [];\n  let tempWordsArr93 = [];\n  let tempWordsArr94 = [];\n  let tempWordsArr95 = [];\n  let tempWordsArr96 = [];\n  let tempWordsArr97 = [];\n  let tempWordsArr98 = [];\n  let tempWordsArr99 = [];\n  let tempWordsArr100 = [];\n  let tempWordsArr101 = [];\n  let tempWordsArr102 = [];\n  let tempWordsArr103 = [];\n  let tempWordsArr104 = [];\n  let tempWordsArr105 = [];\n  let tempWordsArr106 = [];\n  let tempWordsArr107 = [];\n  let tempWordsArr108 = [];\n  let tempWordsArr109 = [];\n  let tempWordsArr110 = [];\n  let tempWordsArr111 = [];\n  let tempWordsArr112 = [];\n  let tempWordsArr113 = [];\n  let tempWordsArr114 = [];\n  let tempWordsArr115 = [];\n  let tempWordsArr116 = [];\n  let tempWordsArr117 = [];\n  let tempWordsArr118 = [];\n  let tempWordsArr119 = [];\n  let tempWordsArr120 = [];\n  let tempWordsArr21 = [];\n  let tempWordsArr121 = [];\n  let tempWordsArr122 = [];\n  let tempWordsArr123 = [];\n  let tempWordsArr124 = [];\n  let tempWordsArr125 = [];\n  let tempWordsArr126 = [];\n  let tempWordsArr127 = [];\n  let tempWordsArr128 = [];\n  let tempWordsArr129 = [];\n  let tempWordsArr130 = [];\n  let tempWordsArr131 = [];\n  let tempWordsArr132 = [];\n  let tempWordsArr133 = [];\n  let tempWordsArr134 = [];\n  let tempWordsArr135 = [];\n  let tempWordsArr136 = [];\n  let tempWordsArr137 = [];\n  let tempWordsArr138 = [];\n  let tempWordsArr139 = [];\n  let tempWordsArr140 = [];\n  let tempWordsArr141 = [];\n  let tempWordsArr142 = [];\n  let tempWordsArr143 = [];\n  let tempWordsArr144 = [];\n  let tempWordsArr145 = [];\n  let tempWordsArr146 = [];\n  let tempWordsArr147 = [];\n  let tempWordsArr148 = [];\n  let tempWordsArr149 = [];\n  let tempWordsArr150 = [];\n  let tempWordsArr151 = [];\n  let tempWordsArr152 = [];\n  let tempWordsArr153 = [];\n  let tempWordsArr154 = [];\n  let tempWordsArr155 = [];\n  let tempWordsArr156 = [];\n  let tempWordsArr157 = [];\n  let tempWordsArr158 = [];\n  let tempWordsArr159 = [];\n  let tempWordsArr160 = [];\n  let tempWordsArr161 = [];\n  let tempWordsArr162 = [];\n  let tempWordsArr163 = [];\n  let tempWordsArr164 = [];\n  let tempWordsArr165 = [];\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRows", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const rows = []\n  let row = 0\n  let col = 0\n  while (row < lst.length) {\n    const rowItem = lst[row]\n    if (rowItem === undefined) {\n      rows.push([])\n      row++\n      col = 0\n    } else {\n      if (col < x) {\n        rows.push([])\n        row++\n        col++\n      } else {\n        rows[row].push(col)\n        col++\n      }\n    }\n  }\n  return rows\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCols = (lst, x) => {\n  const cols = []\n  let col = 0\n  let row = 0\n  while (col < lst.length) {\n    const colItem = lst[col]\n    if (colItem === undefined) {\n      cols.push([])\n      col++\n      row = 0\n    } else {\n      if (row < x) {\n        cols.push([])\n        col++\n        row++\n      } else {\n        cols[col].push(row)\n        row++\n      }\n    }\n  }\n  return cols\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowsCols = (lst, x) => {\n  const rows = []\n  let row = 0\n  let col = 0\n  while (row < lst.length) {\n    const rowItem = lst[row]\n    if (rowItem === undefined) {\n      rows.push([])\n      row++\n      col = 0\n    } else {\n      if (col < x) {\n        rows.push([])\n        row++\n        col++\n      } else {\n        rows[row].push(col)\n        col++\n      }\n    }\n  }\n  return rows\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowsColsRows = (lst, x) => {\n  const rows = []\n  let row = 0\n  let col = 0\n  while (row < lst.length) {\n    const rowItem = lst[row]\n    if (rowItem === undefined) {\n      rows.push([])\n      row++\n      col = 0\n    } else {\n      if (col < x) {\n        rows.push([])\n        row++\n        col++\n      } else {\n        rows[row].push(col)\n        col++\n      }\n    }\n  }\n  return rows\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowsColsRowsCols = (lst, x) => {\n  const rows = []\n  let row = 0\n  let col = 0\n  while (row < lst.length) {\n    const rowItem = lst[row]\n    if (rowItem === undefined) {\n      rows.push([])\n      row++\n      col = 0\n    } else {\n      if (col < x) {\n        rows.push([])\n        row++\n        col++\n      } else {\n        rows[row].push(col)\n        col++\n      }\n    }\n  }\n  return rows\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowsColsRowsRowsColsRowsColsRowsColsRowsColsRowsColsRowsColsRowsColsRowsColsRowsColsRowsColsRowsColsRowsColsRow", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const sortedArray = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/**\n * Given an array of non-negative integers, return the first element of the array that is greater than the given number.\n * If the array is empty, return null.\n * If the given number is negative, return null.\n * If the given number is 0, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the given number is greater than the length of this array, return null.\n * If the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i;\n  for (i = 0; i < s.length; i += 1) {\n    rotated += alphabet[alphabet.indexOf(s.charAt(i))];\n  }\n  return rotated;\n};\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i;\n  for (i = 0; i < s.length; i += 1) {\n    rotated += alphabet[alphabet.indexOf(s.charAt(i))];\n  }\n  return rotated;\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of a string.\n  For example:\n  trim('  ') returns' '\n  trim('  abc') returns 'abc'\n  trim('  abc  ') returns 'abc'\n  trim('  abc  def') returns 'def'\n  trim('  abc  def  ghi') returns 'ghi'\n  */\nconst trim = s => {\n  return s.trim();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of a string.\n  For example:\n  trim('  ') returns' '\n  trim('  abc') returns 'abc'\n  trim('  abc  ') returns 'abc'\n  trim('  abc  def') returns 'def'\n  trim('  abc  def  ghi') returns 'ghi'\n  */\nconst trimLeft = s => {\n  return s.trimLeft();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of a string.\n  For example:\n  trim('  ') returns' '\n  trim('  abc') returns 'abc'\n  trim('  abc  ') returns 'abc'\n  trim('  abc  def') returns 'def'\n  trim('  abc  def  ghi') returns 'ghi'\n  */\nconst trimRight = s => {\n  return s.trimRight();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of a string.\n  For example:\n  trim('  ') returns' '\n  trim('  abc') returns 'abc'\n  trim('  abc  ') returns 'abc'\n  trim('  abc  def') returns 'def'\n  trim('  abc  def  ghi') returns 'ghi'\n  */\nconst trim = s => {\n  return s.trim();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of a string.\n  For example:\n  trim('  ') returns' '\n  trim('  abc') returns 'abc'\n  trim('  abc  ') returns 'abc'\n  trim('  abc  def') returns 'def'\n  trim('  abc  def  ghi') returns 'ghi'\n  */\nconst trimLeft = s => {\n  return s.trimLeft();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of a string.\n  For example:\n  trim('  ') returns' '\n  trim('  abc') returns 'abc'\n  trim('  abc  ') returns 'abc'\n  trim('  abc  def') returns 'def'\n  trim('  abc  def  ghi') returns 'ghi'\n  */\nconst trimRight = s => {\n  return s.trimRight();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of a string.\n  For example:\n  trim('  ') returns' '\n  trim('  abc') returns 'abc'\n  trim('  abc  ') returns 'abc'\n  trim('  abc  def') returns 'def'\n  trim('  abc  def  ghi') returns 'ghi'\n  */\nconst trim = s => {\n  return s.trim();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of a string.\n  For example:\n  trim('  ') returns' '\n  trim('  abc') returns 'abc'\n  trim('  abc  ') returns 'abc'\n  trim('  abc  def') returns 'def'\n  trim('  abc  def  ghi') returns 'ghi'\n  */\nconst trimLeft = s => {\n  return s.trimLeft();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of a string.\n  For example:\n  trim('  ') returns' '\n  trim('  abc') returns 'abc'\n  trim('  abc  ') returns 'abc'\n  trim('  abc  def') returns 'def'\n  trim('  abc  def  ghi') returns 'ghi'\n  */\nconst trimRight = s => {\n  return s.trimRight();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of a string.\n  For example:\n  trim('  ') returns' '\n  trim('  abc') returns 'abc'\n  trim('  abc  ') returns 'abc'\n  trim('  abc  def') returns 'def'\n  trim('  abc  def  ghi') returns 'ghi'\n  */\nconst trim = s => {\n  return s.trim();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of a string.\n  For example:\n  trim('  ') returns' '\n  trim('  abc') returns 'abc'\n  trim('  abc  ') returns 'abc'\n  trim('  abc  def') returns 'def'\n  trim('  abc  def  ghi') returns 'ghi'\n  */\nconst trimLeft = s => {\n  return s.trimLeft();\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of a string.\n  For example:\n  trim('  ') returns' '\n  trim('  abc') returns 'abc'\n  trim('  abc  ') returns 'abc'\n  trim('  abc  def", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxes = numbers.reduce((acc, curr) => {\n    if (curr > acc) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr > maxes) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingMin = (numbers) => {\n  const mins = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr < mins) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 6, 7]\n  */\nconst rollingSum = (numbers) => {\n  const sums = numbers.reduce((acc, curr) => {\n    if (curr + acc > acc) {\n      return acc;\n    }\n    return curr + acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr + sums > sums) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rollingProduct([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 16, 25]\n  */\nconst rollingProduct = (numbers) => {\n  const products = numbers.reduce((acc, curr) => {\n    if (curr * acc > acc) {\n      return acc;\n    }\n    return curr * acc;\n  }, 1);\n  return numbers.reduce((acc, curr) => {\n    if (curr * products > products) {\n      return curr;\n    }\n    return acc;\n  }, 1);\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSumOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 6, 7]\n  */\nconst rollingSumOf = (numbers) => {\n  const sums = numbers.reduce((acc, curr) => {\n    if (curr + acc > acc) {\n      return acc;\n    }\n    return curr + acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr + sums > sums) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rollingProductOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 16, 25]\n  */\nconst rollingProductOf = (numbers) => {\n  const products = numbers.reduce((acc, curr) => {\n    if (curr * acc > acc) {\n      return acc;\n    }\n    return curr * acc;\n  }, 1);\n  return numbers.reduce((acc, curr) => {\n    if (curr * products > products) {\n      return curr;\n    }\n    return acc;\n  }, 1);\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSumOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 6, 7]\n  */\nconst rollingSumOf = (numbers) => {\n  const sums = numbers.reduce((acc, curr) => {\n    if (curr + acc > acc) {\n      return acc;\n    }\n    return curr + acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr + sums > sums) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rollingProductOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 16, 25]\n  */\nconst rollingProductOf = (numbers) => {\n  const products = numbers.reduce((acc, curr) => {\n    if (curr * acc > acc) {\n      return acc;\n    }\n    return curr * acc;\n  }, 1);\n  return numbers.reduce((acc, curr) => {\n    if (curr * products > products) {\n      return curr;\n    }\n    return acc;\n  }, 1);\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSumOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 6, 7]\n  */\nconst rollingSumOf = (numbers) => {\n  const sums = numbers.reduce((acc, curr) => {\n    if (curr + acc > acc) {\n      return acc;\n    }\n    return curr + acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr + sums > sums) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rollingProductOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 16, 25]\n  */\nconst rollingProductOf = (numbers) => {\n  const products = numbers.reduce((acc, curr) => {\n    if (curr * acc > acc) {\n      return acc;\n    }\n    return curr * acc;\n  }, 1);\n  return numbers.reduce((acc, curr) => {\n    if (curr * products > products) {\n      return curr;\n    }\n    return acc;\n  }, 1);\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSumOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 6, 7]\n  */\nconst rollingSumOf = (numbers) => {\n  const sums = numbers.reduce((acc, curr) => {\n    if (curr + acc > acc) {\n      return acc;\n    }\n    return curr + acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr + sums > sums) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rollingProductOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 16, 25]\n  */\nconst rollingProductOf = (numbers) => {\n  const products = numbers.reduce((acc, curr) => {\n    if (curr * acc > acc) {\n      return acc;\n    }\n    return curr * acc;\n  }, 1);\n  return numbers.reduce((acc, curr) => {\n    if (curr * products > products) {\n      return curr;\n    }\n    return acc;\n  }, 1);\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSumOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 6, 7]\n  */\nconst rollingSumOf = (numbers) => {\n  const sums = numbers.reduce((acc, curr) => {\n    if (curr + acc > acc) {\n      return acc;\n    }\n    return curr + acc;\n  }, 0);\n  return numbers.reduce((acc, curr) => {\n    if (curr + sums > sums) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n};\n\n/* From a given list of integers, generate a list of rolling product element found until given moment\n  in the sequence.\n  >>> rollingProductOf([1, 2, 3, 2, 3, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  let minValue = null;\n  let minIndexValue = null;\n  let minIndexValue2 = null;\n  let minIndexValue3 = null;\n  let minIndexValue4 = null;\n  let minIndexValue5 = null;\n  let minIndexValue6 = null;\n  let minIndexValue7 = null;\n  let minIndexValue8 = null;\n  let minIndexValue9 = null;\n  let minIndexValue10 = null;\n  let minIndexValue11 = null;\n  let minIndexValue12 = null;\n  let minIndexValue13 = null;\n  let minIndexValue14 = null;\n  let minIndexValue15 = null;\n  let minIndexValue16 = null;\n  let minIndexValue17 = null;\n  let minIndexValue18 = null;\n  let minIndexValue19 = null;\n  let minIndexValue20 = null;\n  let minIndexValue21 = null;\n  let minIndexValue22 = null;\n  let minIndexValue23 = null;\n  let minIndexValue24 = null;\n  let minIndexValue25 = null;\n  let minIndexValue26 = null;\n  let minIndexValue27 = null;\n  let minIndexValue28 = null;\n  let minIndexValue29 = null;\n  let minIndexValue30 = null;\n  let minIndexValue31 = null;\n  let minIndexValue32 = null;\n  let minIndexValue33 = null;\n  let minIndexValue34 = null;\n  let minIndexValue35 = null;\n  let minIndexValue36 = null;\n  let minIndexValue37 = null;\n  let minIndexValue38 = null;\n  let minIndexValue39 = null;\n  let minIndexValue40 = null;\n  let minIndexValue41 = null;\n  let minIndexValue42 = null;\n  let minIndexValue43 = null;\n  let minIndexValue44 = null;\n  let minIndexValue45 = null;\n  let minIndexValue46 = null;\n  let minIndexValue47 = null;\n  let minIndexValue48 = null;\n  let minIndexValue49 = null;\n  let minIndexValue50 = null;\n  let minIndexValue51 = null;\n  let minIndexValue52 = null;\n  let minIndexValue53 = null;\n  let minIndexValue54 = null;\n  let minIndexValue55 = null;\n  let minIndexValue56 = null;\n  let minIndexValue57 = null;\n  let minIndexValue58 = null;\n  let minIndexValue59 = null;\n  let minIndexValue60 = null;\n  let minIndexValue61 = null;\n  let minIndexValue62 = null;\n  let minIndexValue63 = null;\n  let minIndexValue64 = null;\n  let minIndexValue65 = null;\n  let minIndexValue66 = null;\n  let minIndexValue67 = null;\n  let minIndexValue68 = null;\n  let minIndexValue69 = null;\n  let minIndexValue70 = null;\n  let minIndexValue71 = null;\n  let minIndexValue72 = null;\n  let minIndexValue73 = null;\n  let minIndexValue74 = null;\n  let minIndexValue75 = null;\n  let minIndexValue76 = null;\n  let minIndexValue77 = null;\n  let minIndexValue78 = null;\n  let minIndexValue79 = null;\n  let minIndexValue80 = null;\n  let minIndexValue81 = null;\n  let minIndexValue82 = null;\n  let minIndexValue83 = null;\n  let minIndexValue84 = null;\n  let minIndexValue85 = null;\n  let minIndexValue86 = null;\n  let minIndexValue87 = null;\n  let minIndexValue88 = null;\n  let minIndexValue89 = null;\n  let minIndexValue90 = null;\n  let minIndexValue91 = null;\n  let minIndexValue92 = null;\n  let minIndexValue93 = null;\n  let minIndexValue94 = null;\n  let minIndexValue95 = null;\n  let minIndexValue96 = null;\n  let minIndexValue97 = null;\n  let minIndexValue98 = null;\n  let minIndexValue99 = null;\n  let minIndexValue100 = null;\n  let minIndexValue101 = null;\n  let minIndexValue102 = null;\n  let minIndexValue103 = null;\n  let minIndexValue104 = null;\n  let minIndexValue105 = null;\n  let minIndexValue106 = null;\n  let minIndexValue107 = null;\n  let minIndexValue108 = null;\n  let minIndexValue109 = null;\n  let minIndexValue110 = null;\n  let minIndexValue111 = null;\n  let minIndexValue112 = null;\n  let minIndexValue113 = null;\n  let minIndexValue114 = null;\n  let minIndexValue115 = null;\n  let minIndexValue116 = null;\n  let minIndexValue117 = null;\n  let minIndexValue118 = null;\n  let minIndexValue119 = null;\n  let minIndexValue120 = null;\n  let minIndexValue121 = null;\n  let minIndexValue122 = null;\n  let minIndexValue123 = null;\n  let minIndexValue124 = null;\n  let minIndexValue125 = null;\n  let minIndexValue126 = null;\n  let minIndexValue127 = null;\n  let minIndexValue128 = null;\n  let minIndexValue129 = null;\n  let minIndexValue130 = null;\n  let minIndexValue131 = null;\n  let minIndexValue132 = null;\n  let minIndexValue133 = null;\n  let minIndexValue134 = null;\n  let minIndexValue135 = null;\n  let minIndexValue136 = null;\n  let minIndexValue137 = null;\n  let minIndexValue138 = null;\n  let minIndexValue139 = null;\n  let minIndexValue140 = null;\n  let minIndexValue141 = null;\n  let minIndexValue142 = null;\n  let minIndexValue143 = null;\n  let minIndexValue144 = null;\n  let minIndexValue145 = null;\n  let minIndexValue146 = null;\n  let minIndexValue147 = null;\n  let minIndexValue148 = null;\n  let minIndexValue149 = null;\n  let minIndexValue150 = null;\n  let minIndexValue151 = null;\n  let minIndexValue152 = null;\n  let minIndexValue153 = null;\n  let minIndexValue154 = null;\n  let minIndexValue155 = null;\n  let minIndexValue156 = null;\n  let minIndexValue157 = null;\n  let minIndexValue158 = null;\n  let minIndexValue159 = null;\n  let minIndexValue160 = null;\n  let minIndexValue161 = null;\n  let minIndexValue162 = null;\n  let minIndexValue163 = null;\n  let minIndexValue164 = null;\n  let minIndexValue165 = null;\n  let minIndexValue166 = null;\n  let minIndexValue167 = null;\n  let minIndexValue168 = null;\n  let minIndexValue169 = null;\n  let minIndexValue170 = null;\n  let minIndexValue171 = null;\n  let minIndexValue172 = null;\n  let minIndexValue173 = null;\n  let minIndexValue174 = null;\n  let minIndexValue175 = null;\n  let minIndexValue176 = null;\n  let minIndexValue177 = null;\n  let minIndexValue178 = null;\n  let minIndexValue179 = null;\n  let minIndexValue180 = null;\n  let minIndexValue181 = null;\n  let minIndexValue182 = null;\n  let minIndexValue183 = null;\n  let minIndexValue184 = null;\n  let minIndexValue185 = null;\n  let minIndexValue186 = null;\n  let minIndexValue187 = null;\n  let minIndexValue188 = null;\n  let minIndexValue189 = null;\n  let minIndexValue190 = null;\n  let minIndexValue191 = null;\n  let minIndexValue192 = null;\n  let minIndexValue193 = null;\n  let min", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBore", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let bore = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      bore++;\n    }\n  });\n  return bore;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that is used more than once.\n  Words are delimited by spaces.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common letters. A common letter is a letter that is used more than once.\n  Letters are delimited by letters.\n \n  For example:\n  >>> commonLetters(\"Hello world\")\n  2\n  >>> commonLetters(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonLetters = (S) => {\n  let letterCount = 0;\n  let words = S.split('');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      letterCount++;\n    }\n  });\n  return letterCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that is used more than once.\n  Words are delimited by spaces.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common letters. A common letter is a letter that is used more than once.\n  Letters are delimited by letters.\n \n  For example:\n  >>> commonLetters(\"Hello world\")\n  2\n  >>> commonLetters(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonLetters = (S) => {\n  let letterCount = 0;\n  let words = S.split('');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      letterCount++;\n    }\n  });\n  return letterCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that is used more than once.\n  Words are delimited by spaces.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common letters. A common letter is a letter that is used more than once.\n  Letters are delimited by letters.\n \n  For example:\n  >>> commonLetters(\"Hello world\")\n  2\n  >>> commonLetters(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonLetters = (S) => {\n  let letterCount = 0;\n  let words = S.split('');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      letterCount++;\n    }\n  });\n  return letterCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that is used more than once.\n  Words are delimited by spaces.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common letters. A common letter is a letter that is used more than once.\n  Letters are delimited by letters.\n \n  For example:\n  >>> commonLetters(\"Hello world\")\n  2\n  >>> commonLetters(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonLetters = (S) => {\n  let letterCount = 0;\n  let words = S.split('');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      letterCount++;\n    }\n  });\n  return letterCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that is used more than once.\n  Words are delimited by spaces.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common letters. A common letter is a letter that is used more than once.\n  Letters are delimited by letters.\n \n  For example:\n  >>> commonLetters(\"Hello world\")\n  2\n  >>> commonLetters(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonLetters = (S) => {\n  let letterCount = 0;\n  let words = S.split('');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      letterCount++;\n    }\n  });\n  return letterCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that is used more than once.\n  Words are delimited by spaces.\n \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return x + y + z === Math.max(...[x, y, z]);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return x + y + z === Math.min(...[x, y, z]);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return x + y + z === Math.max(...[x, y, z]);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return x + y + z === Math.min(...[x, y, z]);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return x + y + z === Math.max(...[x, y, z]);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return x + y + z === Math.min(...[x, y, z]);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return x + y + z === Math.max(...[x, y, z]);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return x + y + z === Math.min(...[x, y, z]);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return x + y + z === Math.max(...[x, y, z]);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return x + y + z === Math.min(...[x, y, z]);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return x + y + z === Math.max(...[x, y, z]);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return x + y + z === Math.min(...[x, y, z]);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLengthIndex = 0;\n  let messageIndexLength = 0;\n  let messageIndexLengthIndex = 0;\n  let messageIndexLengthIndex2 = 0;\n  let messageIndexLengthIndex2 = 0;\n  let messageIndexLengthIndex3 = 0;\n  let messageIndexLengthIndex3 = 0;\n  let messageIndexLengthIndex4 = 0;\n  let messageIndexLengthIndex4 = 0;\n  let messageIndexLengthIndex5 = 0;\n  let messageIndexLengthIndex5 = 0;\n  let messageIndexLengthIndex6 = 0;\n  let messageIndexLengthIndex6 = 0;\n  let messageIndexLengthIndex7 = 0;\n  let messageIndexLengthIndex7 = 0;\n  let messageIndexLengthIndex8 = 0;\n  let messageIndexLengthIndex8 = 0;\n  let messageIndexLengthIndex9 = 0;\n  let messageIndexLengthIndex9 = 0;\n  let messageIndexLengthIndex10 = 0;\n  let messageIndexLengthIndex10 = 0;\n  let messageIndexLengthIndex11 = 0;\n  let messageIndexLengthIndex11 = 0;\n  let messageIndexLengthIndex12 = 0;\n  let messageIndexLengthIndex12 = 0;\n  let messageIndexLengthIndex13 = 0;\n  let messageIndexLengthIndex13 = 0;\n  let messageIndexLengthIndex14 = 0;\n  let messageIndexLengthIndex14 = 0;\n  let messageIndexLengthIndex15 = 0;\n  let messageIndexLengthIndex15 = 0;\n  let messageIndexLengthIndex16 = 0;\n  let messageIndexLengthIndex16 = 0;\n  let messageIndexLengthIndex17 = 0;\n  let messageIndexLengthIndex17 = 0;\n  let messageIndexLengthIndex18 = 0;\n  let messageIndexLengthIndex18 = 0;\n  let messageIndexLengthIndex19 = 0;\n  let messageIndexLengthIndex19 = 0;\n  let messageIndexLengthIndex20 = 0;\n  let messageIndexLengthIndex20 = 0;\n  let messageIndexLengthIndex21 = 0;\n  let messageIndexLengthIndex21 = 0;\n  let messageIndexLengthIndex22 = 0;\n  let messageIndexLengthIndex22 = 0;\n  let messageIndexLengthIndex23 = 0;\n  let messageIndexLengthIndex23 = 0;\n  let messageIndexLengthIndex24 = 0;\n  let messageIndexLengthIndex24 = 0;\n  let messageIndexLengthIndex25 = 0;\n  let messageIndexLengthIndex25 = 0;\n  let messageIndexLengthIndex26 = 0;\n  let messageIndexLengthIndex26 = 0;\n  let messageIndexLengthIndex27 = 0;\n  let messageIndexLengthIndex27 = 0;\n  let messageIndexLengthIndex28 = 0;\n  let messageIndexLengthIndex28 = 0;\n  let messageIndexLengthIndex29 = 0;\n  let messageIndexLengthIndex29 = 0;\n  let messageIndexLengthIndex30 = 0;\n  let messageIndexLengthIndex30 = 0;\n  let messageIndexLengthIndex31 = 0;\n  let messageIndexLengthIndex31 = 0;\n  let messageIndexLengthIndex32 = 0;\n  let messageIndexLengthIndex32 = 0;\n  let messageIndexLengthIndex33 = 0;\n  let messageIndexLengthIndex33 = 0;\n  let messageIndexLengthIndex34 = 0;\n  let messageIndexLengthIndex34 = 0;\n  let messageIndexLengthIndex35 = 0;\n  let messageIndexLengthIndex35 = 0;\n  let messageIndexLengthIndex36 = 0;\n  let messageIndexLengthIndex36 = 0;\n  let messageIndexLengthIndex37 = 0;\n  let messageIndexLengthIndex37 = 0;\n  let messageIndexLengthIndex38 = 0;\n  let messageIndexLengthIndex38 = 0;\n  let messageIndexLengthIndex39 = 0;\n  let messageIndexLengthIndex39 = 0;\n  let messageIndexLengthIndex40 = 0;\n  let messageIndexLengthIndex40 = 0;\n  let messageIndexLengthIndex41 = 0;\n  let messageIndexLengthIndex41 = 0;\n  let messageIndexLengthIndex42 = 0;\n  let messageIndexLengthIndex42 = 0;\n  let messageIndexLengthIndex43 = 0;\n  let messageIndexLengthIndex43 = 0;\n  let messageIndexLengthIndex44 = 0;\n  let messageIndexLengthIndex44 = 0;\n  let messageIndexLengthIndex45 = 0;\n  let messageIndexLengthIndex45 = 0;\n  let messageIndexLengthIndex46 = 0;\n  let messageIndexLengthIndex46 = 0;\n  let messageIndexLengthIndex47 = 0;\n  let messageIndexLengthIndex47 = 0;\n  let messageIndexLengthIndex48 = 0;\n  let messageIndexLengthIndex48 = 0;\n  let messageIndexLengthIndex49 = 0;\n  let messageIndexLengthIndex49 = 0;\n  let messageIndexLengthIndex50 = 0;\n  let messageIndexLengthIndex50 = 0;\n  let messageIndexLengthIndex51 = 0;\n  let messageIndexLengthIndex51 = 0;\n  let messageIndexLengthIndex52 = 0;\n  let messageIndexLengthIndex52 = 0;\n  let messageIndexLengthIndex53 = 0;\n  let messageIndexLengthIndex53 = 0;\n  let messageIndexLengthIndex54 = 0;\n  let messageIndexLengthIndex54 = 0;\n  let messageIndexLengthIndex55 = 0;\n  let messageIndexLengthIndex55 = 0;\n  let messageIndexLengthIndex56 = 0;\n  let messageIndexLengthIndex56 = 0;\n  let messageIndexLengthIndex57 = 0;\n  let messageIndexLengthIndex57 = 0;\n  let messageIndexLengthIndex58 = 0;\n  let messageIndexLengthIndex58 = 0;\n  let messageIndexLengthIndex59 = 0;\n  let messageIndexLengthIndex59 = 0;\n  let messageIndexLengthIndex60 = 0;\n  let messageIndexLengthIndex60 = 0;\n  let messageIndexLengthIndex61 = 0;\n  let messageIndexLengthIndex61 = 0;\n  let messageIndexLengthIndex62 = 0;\n  let messageIndexLengthIndex62 = 0;\n  let messageIndexLengthIndex63 = 0;\n  let messageIndexLengthIndex63 = 0;\n  let messageIndexLengthIndex64 = 0;\n  let messageIndexLengthIndex64 = 0;\n  let messageIndexLengthIndex65 = 0;\n  let messageIndexLengthIndex65 = 0;\n  let messageIndexLengthIndex66 = 0;\n  let messageIndexLengthIndex66 = 0;\n  let messageIndexLengthIndex67 = 0;\n  let messageIndexLengthIndex67 = 0;\n  let messageIndexLengthIndex68 = 0;\n  let messageIndexLengthIndex68 = 0;\n  let messageIndexLengthIndex69 = 0;\n  let messageIndexLengthIndex69 = 0;\n  let messageIndexLengthIndex70 = 0;\n  let messageIndexLengthIndex70 = 0;\n  let messageIndexLengthIndex71 = 0;\n  let messageIndexLengthIndex71 = 0;\n  let messageIndexLengthIndex72 = 0;\n  let messageIndexLengthIndex72 = 0;\n  let messageIndexLengthIndex73 = 0;\n  let messageIndexLengthIndex73 = 0;\n  let messageIndexLengthIndex74 = 0;\n  let messageIndexLengthIndex74 = 0;\n  let messageIndexLengthIndex75 = 0;\n  let messageIndexLengthIndex75 = 0;\n  let messageIndexLengthIndex76 = 0;\n  let messageIndexLengthIndex76 = 0;\n  let messageIndexLengthIndex77 = 0;\n  let messageIndexLengthIndex77 = 0;\n  let messageIndexLengthIndex78 = 0;\n  let messageIndexLengthIndex78 = 0;\n  let messageIndexLengthIndex79 = 0;\n  let messageIndexLengthIndex79 = 0;\n  let messageIndexLengthIndex80 = 0;\n  let messageIndexLengthIndex80 = 0;\n  let messageIndexLengthIndex81 = 0;\n  let messageIndexLengthIndex81 = 0;\n  let messageIndexLengthIndex82 = 0;\n  let messageIndexLengthIndex82 = 0;\n  let messageIndexLengthIndex83 = 0;\n  let messageIndexLengthIndex83 = 0;\n  let messageIndexLengthIndex84 = 0;\n  let messageIndexLengthIndex84 = 0;\n  let messageIndexLengthIndex85 = 0;\n  let messageIndexLengthIndex85 = 0;\n  let messageIndexLengthIndex86 = 0;\n  let messageIndexLengthIndex86 = 0;\n  let messageIndexLengthIndex87 = 0;\n  let messageIndexLengthIndex87 = 0;\n  let messageIndexLengthIndex88 = 0;\n  let messageIndexLengthIndex88 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let largestPrime = 0;\n  let sum = 0;\n  let sumDigits = 0;\n  let sumOfDigits = 0;\n  let sumOfDigits2 = 1;\n  let sumOfDigits3 = 1;\n  let sumOfDigits4 = 1;\n  let sumOfDigits5 = 1;\n  let sumOfDigits6 = 1;\n  let sumOfDigits7 = 1;\n  let sumOfDigits8 = 1;\n  let sumOfDigits9 = 1;\n  let sumOfDigits10 = 1;\n  let sumOfDigits11 = 1;\n  let sumOfDigits12 = 1;\n  let sumOfDigits13 = 1;\n  let sumOfDigits14 = 1;\n  let sumOfDigits15 = 1;\n  let sumOfDigits16 = 1;\n  let sumOfDigits17 = 1;\n  let sumOfDigits18 = 1;\n  let sumOfDigits19 = 1;\n  let sumOfDigits20 = 1;\n  let sumOfDigits21 = 1;\n  let sumOfDigits22 = 1;\n  let sumOfDigits23 = 1;\n  let sumOfDigits24 = 1;\n  let sumOfDigits25 = 1;\n  let sumOfDigits26 = 1;\n  let sumOfDigits27 = 1;\n  let sumOfDigits28 = 1;\n  let sumOfDigits29 = 1;\n  let sumOfDigits30 = 1;\n  let sumOfDigits31 = 1;\n  let sumOfDigits32 = 1;\n  let sumOfDigits33 = 1;\n  let sumOfDigits34 = 1;\n  let sumOfDigits35 = 1;\n  let sumOfDigits36 = 1;\n  let sumOfDigits37 = 1;\n  let sumOfDigits38 = 1;\n  let sumOfDigits39 = 1;\n  let sumOfDigits40 = 1;\n  let sumOfDigits41 = 1;\n  let sumOfDigits42 = 1;\n  let sumOfDigits43 = 1;\n  let sumOfDigits44 = 1;\n  let sumOfDigits45 = 1;\n  let sumOfDigits46 = 1;\n  let sumOfDigits47 = 1;\n  let sumOfDigits48 = 1;\n  let sumOfDigits49 = 1;\n  let sumOfDigits50 = 1;\n  let sumOfDigits51 = 1;\n  let sumOfDigits52 = 1;\n  let sumOfDigits53 = 1;\n  let sumOfDigits54 = 1;\n  let sumOfDigits55 = 1;\n  let sumOfDigits56 = 1;\n  let sumOfDigits57 = 1;\n  let sumOfDigits58 = 1;\n  let sumOfDigits59 = 1;\n  let sumOfDigits60 = 1;\n  let sumOfDigits61 = 1;\n  let sumOfDigits62 = 1;\n  let sumOfDigits63 = 1;\n  let sumOfDigits64 = 1;\n  let sumOfDigits65 = 1;\n  let sumOfDigits66 = 1;\n  let sumOfDigits67 = 1;\n  let sumOfDigits68 = 1;\n  let sumOfDigits69 = 1;\n  let sumOfDigits70 = 1;\n  let sumOfDigits71 = 1;\n  let sumOfDigits72 = 1;\n  let sumOfDigits73 = 1;\n  let sumOfDigits74 = 1;\n  let sumOfDigits75 = 1;\n  let sumOfDigits76 = 1;\n  let sumOfDigits77 = 1;\n  let sumOfDigits78 = 1;\n  let sumOfDigits79 = 1;\n  let sumOfDigits80 = 1;\n  let sumOfDigits81 = 1;\n  let sumOfDigits82 = 1;\n  let sumOfDigits83 = 1;\n  let sumOfDigits84 = 1;\n  let sumOfDigits85 = 1;\n  let sumOfDigits86 = 1;\n  let sumOfDigits87 = 1;\n  let sumOfDigits88 = 1;\n  let sumOfDigits89 = 1;\n  let sumOfDigits90 = 1;\n  let sumOfDigits91 = 1;\n  let sumOfDigits92 = 1;\n  let sumOfDigits93 = 1;\n  let sumOfDigits94 = 1;\n  let sumOfDigits95 = 1;\n  let sumOfDigits96 = 1;\n  let sumOfDigits97 = 1;\n  let sumOfDigits98 = 1;\n  let sumOfDigits99 = 1;\n  let sumOfDigits100 = 1;\n  let sumOfDigits101 = 1;\n  let sumOfDigits102 = 1;\n  let sumOfDigits103 = 1;\n  let sumOfDigits104 = 1;\n  let sumOfDigits105 = 1;\n  let sumOfDigits106 = 1;\n  let sumOfDigits107 = 1;\n  let sumOfDigits108 = 1;\n  let sumOfDigits109 = 1;\n  let sumOfDigits110 = 1;\n  let sumOfDigits111 = 1;\n  let sumOfDigits112 = 1;\n  let sumOfDigits113 = 1;\n  let sumOfDigits114 = 1;\n  let sumOfDigits115 = 1;\n  let sumOfDigits116 = 1;\n  let sumOfDigits117 = 1;\n  let sumOfDigits118 = 1;\n  let sumOfDigits119 = 1;\n  let sumOfDigits120 = 1;\n  let sumOfDigits121 = 1;\n  let sumOfDigits122 = 1;\n  let sumOfDigits123 = 1;\n  let sumOfDigits124 = 1;\n  let sumOfDigits125 = 1;\n  let sumOfDigits126 = 1;\n  let sumOfDigits127 = 1;\n  let sumOfDigits128 = 1;\n  let sumOfDigits129 = 1;\n  let sumOfDigits130 = 1;\n  let sumOfDigits131 = 1;\n  let sumOfDigits132 = 1;\n  let sumOfDigits133 = 1;\n  let sumOfDigits134 = 1;\n  let sumOfDigits135 = 1;\n  let sumOfDigits136 = 1;\n  let sumOfDigits137 = 1;\n  let sumOfDigits138 = 1;\n  let sumOfDigits139 = 1;\n  let sumOfDigits140 = 1;\n  let sumOfDigits141 = 1;\n  let sumOfDigits142 = 1;\n  let sumOfDigits143 = 1;\n  let sumOfDigits144 = 1;\n  let sumOfDigits145 = 1;\n  let sumOfDigits146 = 1;\n  let sumOfDigits147 = 1;\n  let sumOfDigits148 = 1;\n  let sumOfDigits149 = 1;\n  let sumOfDigits150 = 1;\n  let sumOfDigits151 = 1;\n  let sumOfDigits152 = 1;\n  let sumOfDigits153 = 1;\n  let sumOfDigits154 = 1;\n  let sumOfDigits155 = 1;\n  let sumOfDigits156 = 1;\n  let sumOfDigits157 = 1;\n  let sumOfDigits158 = 1;\n  let sumOfDigits159 = 1;\n  let sumOfDigits160 = 1;\n  let sumOfDigits161 = 1;\n  let sumOfDigits162 = 1;\n  let sumOfDigits163 = 1;\n  let sumOfDigits164 = 1;\n  let sumOfDigits165 = 1;\n  let sumOfDig", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCases", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  let keys = Object.keys(dict);\n  let lowerCaseKeys = keys.filter(key => dict[key].toLowerCase() === key);\n  let upperCaseKeys = keys.filter(key => dict[key].toUpperCase() === key);\n  return lowerCaseKeys.length === 0 || upperCaseKeys.length === 0;\n};\n\n/*\n  Given a string, return true if all characters are alphabetic or \n  all characters are digits, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringCases(\"abc\") should return true.\n  checkStringCases(\"123\") should return false.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"A\") should return false.\n  checkStringCases(\"aA\") should return false.\n  checkStringCases(\"aAa\") should return false.\n  checkStringCases(\"aAaA\") should return false.\n  checkStringCases(\"aAaAa\") should return false.\n  checkStringCases(\"aAaAaA\") should return false.\n  checkStringCases(\"aAaAaAa\") should return false.\n  checkStringCases(\"aAaAaAaAa\") should return false.\n  checkStringCases(\"aAaAaAaAaA\") should return false.\n  checkStringCases(\"aAaAaAaAaAaA\") should return false.\n  checkStringCases(\"aAaAaAaAaAaAaAa\") should return false.\n  checkStringCases(\"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let primes = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i--;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let primes = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i--;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let primes = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i--;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let primes = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i--;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let primes = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n      i--;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first n\n  integers that are prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  let i = 1;\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const product = a / b;\n  return product * product;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their \n  unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148) should return 14.\n  abs(19) should return 19.\n  abs(2020) should return 20.\n  abs(14,-15) should return 14.\n  */\nconst abs = a => {\n  return Math.abs(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148) should return 1.414213562.\n  sqrt(19) should return 1.414213562.\n  sqrt(2020) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  return Math.sqrt(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their \n  unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148) should return 14.\n  abs(19) should return 19.\n  abs(2020) should return 20.\n  abs(14,-15) should return 14.\n  */\nconst abs = a => {\n  return Math.abs(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148) should return 1.414213562.\n  sqrt(19) should return 1.414213562.\n  sqrt(2020) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  return Math.sqrt(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148) should return 1.414213562.\n  sqrt(19) should return 1.414213562.\n  sqrt(2020) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  return Math.sqrt(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148) should return 1.414213562.\n  sqrt(19) should return 1.414213562.\n  sqrt(2020) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  return Math.sqrt(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148) should return 1.414213562.\n  sqrt(19) should return 1.414213562.\n  sqrt(2020) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  return Math.sqrt(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148) should return 1.414213562.\n  sqrt(19) should return 1.414213562.\n  sqrt(2020) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  return Math.sqrt(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148) should return 1.414213562.\n  sqrt(19) should return 1.414213562.\n  sqrt(2020) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  return Math.sqrt(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148) should return 1.414213562.\n  sqrt(19) should return 1.414213562.\n  sqrt(2020) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  return Math.sqrt(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148) should return 1.414213562.\n  sqrt(19) should return 1.414213562.\n  sqrt(2020) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  return Math.sqrt(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148) should return 1.414213562.\n  sqrt(19) should return 1.414213562.\n  sqrt(2020) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  return Math.sqrt(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148) should return 1.414213562.\n  sqrt(19) should return 1.414213562.\n  sqrt(2020) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  return Math.sqrt(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148) should return 1.414213562.\n  sqrt(19) should return 1.414213562.\n  sqrt(2020) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  return Math.sqrt(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148) should return 1.414213562.\n  sqrt(19) should return 1.414213562.\n  sqrt(2020) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  return Math.sqrt(a);\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'A' && s[l] <= 'Z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'A' && s[k] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'A' && s[k] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'A' && s[k] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowelOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'A' && s[k] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonant('dBBE') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'A' && s[k] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  countUpper('dBBE') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'A' && s[k] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closerIntegers", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n  const [integer1, integer2] = value.split(\".\").map(Number);\n  const integerDiff = Math.abs(integer1 - integer2);\n  const integerDiffSign = integerDiff > 0? 1 : -1;\n  return integer1 + integerDiffSign * integerDiff;\n};\n\n/**\n * Given a string, returns a function that will convert it to a number\n * and round it to the nearest integer.\n * Examples\n * >>> toNumber(\"10\")\n * 10\n * >>> toNumber(\"15.3\")\n * 15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> toNumber(\"14.5\")\n * 14\n * >>> toNumber(\"-14.5\")\n * -15\n * >>> to", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
