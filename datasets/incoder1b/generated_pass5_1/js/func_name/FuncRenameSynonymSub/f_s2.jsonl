{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n  const numbersToCompare = numbers.map(n => Math.abs(n));\n  const numbersToCompareSorted = numbersToCompare.sort((a, b) => a - b);\n  const numbersToCompareSortedReversed = numbersToCompareSorted.reverse();\n\n  const numbersToCompareSortedReversedLength = numbersToCompareSortedReversed.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  while (i < numbersToCompareSortedReversedLength) {\n    if (numbersToCompareSortedReversed[i] < numbersToCompareSorted[j]) {\n      i++;\n    } else if (numbersToCompareSortedReversed[i] > numbersToCompareSorted[j]) {\n      j++;\n    } else {\n      k++;\n    }\n  }\n\n  return numbersToCompareSortedReversed[k] > threshold;\n};\n\n/**\n * Check if two arrays have the same elements.\n * >>> arrayEqual([1,2,3], [1,2,3])\n * true\n * >>> arrayEqual([1,2,3], [1,2,4])\n * false\n */\nconst arrayEqual = (array1, array2) => {\n  if (array1.length!== array2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i]!== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Check if two arrays have the same elements and are in different orders.\n * >>> arrayEqualWithOrders([1,2,3], [1,2,3])\n * false\n * >>> arrayEqualWithOrders([1,2,3], [1,2,4])\n * true\n */\nconst arrayEqualWithOrders = (array1, array2) => {\n  if (array1.length!== array2.length) {\n    return false;\n  }\n\n  const array1Sorted = array1.sort();\n  const array2Sorted = array2.sort();\n\n  if (array1Sorted!== array2Sorted) {\n    return false;\n  }\n\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i]!== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Check if two arrays have the same elements and are in different orders.\n * >>> arrayEqualWithOrders([1,2,3], [1,2,3])\n * false\n * >>> arrayEqualWithOrders([1,2,3], [1,2,4])\n * true\n */\nconst arrayEqualWithOrdersReversed = (array1, array2) => {\n  if (array1.length!== array2.length) {\n    return false;\n  }\n\n  const array1Sorted = array1.sort();\n  const array2Sorted = array2.sort();\n\n  if (array1Sorted!== array2Sorted) {\n    return false;\n  }\n\n  for (let i = array1.length - 1; i >= 0; i--) {\n    if (array1[i]!== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Check if two arrays have the same elements and are in different orders.\n * >>> arrayEqualWithOrders([1,2,3], [1,2,3])\n * false\n * >>> arrayEqualWithOrders([1,2,3], [1,2,4])\n * true\n */\nconst arrayEqualWithOrdersReversedWithOrders = (array1, array2) => {\n  if (array1.length!== array2.length) {\n    return false;\n  }\n\n  const array1Sorted = array1.sort();\n  const array2Sorted = array2.sort();\n\n  if (array1Sorted!== array2Sorted) {\n    return false;\n  }\n\n  for (let i = array1.length - 1; i >= 0; i--) {\n    if (array1[i]!== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Check if two arrays have the same elements and are in different orders.\n * >>> arrayEqualWithOrders([1,2,3], [1,2,3])\n * false\n * >>> arrayEqualWithOrders([1,2,3], [1,2,4])\n * true\n */\nconst arrayEqualWithOrdersReversedWithOrdersReversed = (array1, array2) => {\n  if (array1.length!== array2.length) {\n    return false;\n  }\n\n  const array1Sorted = array1.sort();\n  const array2Sorted = array2.sort();\n\n  if (array1Sorted!== array2Sorted) {\n    return false;\n  }\n\n  for (let i = array1.length - 1; i >= 0; i--) {\n    if (array1[i]!== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Check if two arrays have the same elements and are in different orders.\n * >>> arrayEqualWithOrders([1,2,3], [1,2,3])\n * false\n * >>> arrayEqualWithOrders([1,2,3], [1,2,4])\n * true\n */\nconst arrayEqualWithOrdersReversedWithOrdersReversedWithOrders = (array1, array2) => {\n  if (array1.length!== array2.length) {\n    return false;\n  }\n\n  const array1Sorted = array1.sort();\n  const array2Sorted = array2.sort();\n\n  if (array1Sorted!== array2Sorted) {\n    return false;\n  }\n\n  for (let i = array1.length - 1; i >= 0; i--) {\n    if (array1[i]!== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Check if two arrays have the same elements and are in different orders.\n * >>> arrayEqualWithOrders([1,2,3], [1,2,3])\n * false\n * >>> arrayEqualWithOrders([1,2,3], [1,2,4])\n * true\n */\nconst arrayEqualWithOrdersReversedWithOrdersReversedWithOrdersReversed = (array1, array2) => {\n  if (array1.length!== array2.length) {\n    return false;\n  }\n\n  const array1Sorted = array1.sort();\n  const array2Sorted = array2.sort();\n\n  if (array1Sorted!== array2Sorted) {\n    return false;\n  }\n\n  for (let i = array1.length - 1; i >= 0; i--) {\n    if (array1[i]!== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Check if two arrays have the same elements and are in different orders.\n * >>> arrayEqualWithOrders([1,2,3], [1,2,3])\n * false\n * >>> arrayEqualWithOrders([1,2,3], [1,2,4])\n * true\n */\nconst arrayEqualWithOrdersReversedWithOrdersReversedWithOrdersReversedWithOrders = (array1, array2) => {\n  if (array1.length!== array2.length) {\n    return false;\n  }\n\n  const array1Sorted = array1.sort();\n  const array2Sorted = array2.sort();\n\n  if (array1Sorted!== array2Sorted) {\n    return false;\n  }\n\n  for (let i = array1.length - 1; i >= 0; i--) {\n    if (array1[i]!== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Check if two arrays have the same elements and are in different orders.\n * >>> arrayEqualWithOrders([1,2,3], [1,2,3])\n * false\n * >>> arrayEqualWithOrders([1,2,3], [1,2,4])\n * true\n */\nconst arrayEqualWithOrdersReversedWithOrdersReversedWithOrdersReversedWithOrdersReversed = (array1, array2) => {\n  if (array1.length!== array2.length) {\n    return false;\n  }\n\n  const array1Sorted = array1.sort();\n  const array2Sorted = array2.sort();\n\n  if (array1Sorted!== array2Sorted) {\n    return false;\n  }\n\n  for (let i = array1.length - 1; i >= 0; i--) {\n    if (array1[i]!== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Check if two arrays have the same elements and are in different orders.\n * >>> arrayEqualWithOrders([1,2,3], [1,2,3])\n * false\n * >>> arrayEqual"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const paren_groups = [];\n  let paren_open = false;\n  let paren_closed = false;\n  let paren_paren_count = 0;\n  let paren_paren_open = false;\n  let paren_paren_closed = false;\n  let paren_paren_paren_count = 0;\n  let paren_paren_paren_open = false;\n  let paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren_paren_paren_paren_paren_open = false;\n  let paren_paren_paren_paren_paren_paren_closed = false;\n  let paren_paren_paren_paren_paren_paren_count = 0;\n  let paren_paren"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerAndDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalAndInteger = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerAndDecimalAndInteger = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalAndIntegerAndDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerAndDecimalAndIntegerAndDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalAndIntegerAndDecimalAndIntegerAndDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalAndIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalAndIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalAndIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimalAndIntegerAndDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer < 0? integer + 1 : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given "}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const balance = operations.reduce((acc, operation) => {\n    return acc + operation.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }])\n  true\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }, { amount: 4 }])\n  false\n  */\nconst belowZero = (operations) => {\n  const balance = operations.reduce((acc, operation) => {\n    return acc + operation.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }, { amount: 4 }, { amount: 5 }])\n  true\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }, { amount: 4 }, { amount: 5 }, { amount: 6 }])\n  false\n  */\nconst belowZero = (operations) => {\n  const balance = operations.reduce((acc, operation) => {\n    return acc + operation.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }, { amount: 4 }, { amount: 5 }, { amount: 6 }, { amount: 7 }])\n  true\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }, { amount: 4 }, { amount: 5 }, { amount: 6 }, { amount: 7 }, { amount: 8 }])\n  false\n  */\nconst belowZero = (operations) => {\n  const balance = operations.reduce((acc, operation) => {\n    return acc + operation.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }, { amount: 4 }, { amount: 5 }, { amount: 6 }, { amount: 7 }, { amount: 8 }, { amount: 9 }])\n  true\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }, { amount: 4 }, { amount: 5 }, { amount: 6 }, { amount: 7 }, { amount: 8 }, { amount: 9 }, { amount: 10 }])\n  false\n  */\nconst belowZero = (operations) => {\n  const balance = operations.reduce((acc, operation) => {\n    return acc + operation.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }, { amount: 4 }, { amount: 5 }, { amount: 6 }, { amount: 7 }, { amount: 8 }, { amount: 9 }, { amount: 10 }, { amount: 11 }])\n  true\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }, { amount: 4 }, { amount: 5 }, { amount: 6 }, { amount: 7 }, { amount: 8 }, { amount: 9 }, { amount: 10 }, { amount: 11 }, { amount: 12 }])\n  false\n  */\nconst belowZero = (operations) => {\n  const balance = operations.reduce((acc, operation) => {\n    return acc + operation.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }, { amount: 4 }, { amount: 5 }, { amount: 6 }, { amount: 7 }, { amount: 8 }, { amount: 9 }, { amount: 10 }, { amount: 11 }, { amount: 12 }, { amount: 13 }])\n  true\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }, { amount: 4 }, { amount: 5 }, { amount: 6 }, { amount: 7 }, { amount: 8 }, { amount: 9 }, { amount: 10 }, { amount: 11 }, { amount: 12 }, { amount: 13 }, { amount: 14 }])\n  false\n  */\nconst belowZero = (operations) => {\n  const balance = operations.reduce((acc, operation) => {\n    return acc + operation.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }, { amount: 4 }, { amount: 5 }, { amount: 6 }, { amount: 7 }, { amount: 8 }, { amount: 9 }, { amount: 10 }, { amount: 11 }, { amount: 12 }, { amount: 13 }, { amount: 14 }, { amount: 15 }])\n  true\n  >>> belowZero([{ amount: 1 }, { amount: 2 }, { amount: 3 }, { amount: 4 }, { amount: 5 }, { amount: 6 }, { amount: 7 }, { amount: 8 }, { amount: 9 }, { amount: 10 }, { amount: 11 }, { amount: 12 }, { amount: 13 }, { amount: 14 }, { amount: 15 }, { amount: 16 }])\n  false\n  */\nconst belowZero = (operations) => {\n  const balance = operations.reduce((acc, operation) => {\n    return acc + operation.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([{ amount: 1 }, { amount"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - mean));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSE = average | x - x_mean |^2\n  >>> entailMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailMeanSquaredDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => number * number);\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(mean | x - x_mean |)\n  >>> entailRootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailRootMeanSquaredDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a given list of input numbers, calculate Mean Squared Error\n  around the mean of this dataset.\n  Mean Squared Error is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  MSE = sqrt(mean | x - x_mean |)^2\n  >>> entailMeanSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailMeanSquaredError = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => number * number);\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Error\n  around the mean of this dataset.\n  Root Mean Squared Error is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(mean | x - x_mean |)\n  >>> entailRootMeanSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailRootMeanSquaredError = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Error\n  around the mean of this dataset.\n  Mean Absolute Error is the absolute difference between each element and a centerpoint (mean in this case):\n  MAE = average | x - x_mean |\n  >>> entailMeanAbsoluteError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailMeanAbsoluteError = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - mean));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a given list of input numbers, calculate Root Mean Absolute Error\n  around the mean of this dataset.\n  Root Mean Absolute Error is the absolute difference between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(mean | x - x_mean |)\n  >>> entailRootMeanAbsoluteError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailRootMeanAbsoluteError = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Percentage Error\n  around the mean of this dataset.\n  Mean Absolute Percentage Error is the percentage difference between each element and a centerpoint (mean in this case):\n  MAPE = average | x - x_mean |\n  >>> entailMeanAbsolutePercentageError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailMeanAbsolutePercentageError = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - mean));\n  return deviations.reduce((a, b) => a + b) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Root Mean Absolute Percentage Error\n  around the mean of this dataset.\n  Root Mean Absolute Percentage Error is the percentage difference between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(mean | x - x_mean |)\n  >>> entailRootMeanAbsolutePercentageError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailRootMeanAbsolutePercentageError = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Percentage Error\n  around the mean of this dataset.\n  Mean Squared Percentage Error is the percentage difference between each element and a centerpoint (mean in this case):\n  MSE = average | x - x_mean |^2\n  >>> entailMeanSquaredPercentageError([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailMeanSquaredPercentageError = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => number * number);\n  return deviations.reduce((a, b) => a + b) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Percentage Error\n  around the mean of this dataset.\n  Root Mean Squared Percentage Error is the percentage difference between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(mean | x - x_mean |)\n  >>> entailRootMeanSquaredPercentageError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailRootMeanSquaredPercentageError = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b) / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Percentage Error\n  around the mean of this dataset.\n  Mean Absolute Percentage Error is the percentage difference between each element and a centerpoint (mean in this case):\n  MAE = average | x - x_mean |\n  >>> entailMeanAbsolutePercentageError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailMeanAbsolutePercentageError = (number"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  while (i < numbers.length) {\n    const number = numbers[i]\n    if (i === 0 || numbers[i - 1] + delimeter > number) {\n      result.push(number)\n    }\n    result.push(delimeter)\n    i++\n  }\n  return result\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n/**\n * Returns the first element of an array\n * >>> first([1, 2, 3])\n  1\n */\nconst first = (arr) => {\n  return arr[0]\n}\n\n/**\n * Returns the last element of an array\n * >>> last([1, 2, 3])\n  3\n */\nconst last = (arr) => {\n  return arr[arr.length - 1]\n}\n\n"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_level_count = 0;\n  let paren_level_stack = [];\n  let paren_level_stack_count = 0;\n  let paren_level_stack_index = 0;\n  let paren_level_stack_index2 = 0;\n  let paren_level_stack_index3 = 0;\n  let paren_level_stack_index4 = 0;\n  let paren_level_stack_index5 = 0;\n  let paren_level_stack_index6 = 0;\n  let paren_level_stack_index7 = 0;\n  let paren_level_stack_index8 = 0;\n  let paren_level_stack_index9 = 0;\n  let paren_level_stack_index10 = 0;\n  let paren_level_stack_index11 = 0;\n  let paren_level_stack_index12 = 0;\n  let paren_level_stack_index13 = 0;\n  let paren_level_stack_index14 = 0;\n  let paren_level_stack_index15 = 0;\n  let paren_level_stack_index16 = 0;\n  let paren_level_stack_index17 = 0;\n  let paren_level_stack_index18 = 0;\n  let paren_level_stack_index19 = 0;\n  let paren_level_stack_index20 = 0;\n  let paren_level_stack_index21 = 0;\n  let paren_level_stack_index22 = 0;\n  let paren_level_stack_index23 = 0;\n  let paren_level_stack_index24 = 0;\n  let paren_level_stack_index25 = 0;\n  let paren_level_stack_index26 = 0;\n  let paren_level_stack_index27 = 0;\n  let paren_level_stack_index28 = 0;\n  let paren_level_stack_index29 = 0;\n  let paren_level_stack_index30 = 0;\n  let paren_level_stack_index31 = 0;\n  let paren_level_stack_index32 = 0;\n  let paren_level_stack_index33 = 0;\n  let paren_level_stack_index34 = 0;\n  let paren_level_stack_index35 = 0;\n  let paren_level_stack_index36 = 0;\n  let paren_level_stack_index37 = 0;\n  let paren_level_stack_index38 = 0;\n  let paren_level_stack_index39 = 0;\n  let paren_level_stack_index40 = 0;\n  let paren_level_stack_index41 = 0;\n  let paren_level_stack_index42 = 0;\n  let paren_level_stack_index43 = 0;\n  let paren_level_stack_index44 = 0;\n  let paren_level_stack_index45 = 0;\n  let paren_level_stack_index46 = 0;\n  let paren_level_stack_index47 = 0;\n  let paren_level_stack_index48 = 0;\n  let paren_level_stack_index49 = 0;\n  let paren_level_stack_index50 = 0;\n  let paren_level_stack_index51 = 0;\n  let paren_level_stack_index52 = 0;\n  let paren_level_stack_index53 = 0;\n  let paren_level_stack_index54 = 0;\n  let paren_level_stack_index55 = 0;\n  let paren_level_stack_index56 = 0;\n  let paren_level_stack_index57 = 0;\n  let paren_level_stack_index58 = 0;\n  let paren_level_stack_index59 = 0;\n  let paren_level_stack_index60 = 0;\n  let paren_level_stack_index61 = 0;\n  let paren_level_stack_index62 = 0;\n  let paren_level_stack_index63 = 0;\n  let paren_level_stack_index64 = 0;\n  let paren_level_stack_index65 = 0;\n  let paren_level_stack_index66 = 0;\n  let paren_level_stack_index67 = 0;\n  let paren_level_stack_index68 = 0;\n  let paren_level_stack_index69 = 0;\n  let paren_level_stack_index70 = 0;\n  let paren_level_stack_index71 = 0;\n  let paren_level_stack_index72 = 0;\n  let paren_level_stack_index73 = 0;\n  let paren_level_stack_index74 = 0;\n  let paren_level_stack_index75 = 0;\n  let paren_level_stack_index76 = 0;\n  let paren_level_stack_index77 = 0;\n  let paren_level_stack_index78 = 0;\n  let paren_level_stack_index79 = 0;\n  let paren_level_stack_index80 = 0;\n  let paren_level_stack_index81 = 0;\n  let paren_level_stack_index82 = 0;\n  let paren_level_stack_index83 = 0;\n  let paren_level_stack_index84 = 0;\n  let paren_level_stack_index85 = 0;\n  let paren_level_stack_index86 = 0;\n  let paren_level_stack_index87 = 0;\n  let paren_level_stack_index88 = 0;\n  let paren_level_stack_index89 = 0;\n  let paren_level_stack_index90 = 0;\n  let paren_level_stack_index91 = 0;\n  let paren_level_stack_index92 = 0;\n  let paren_level_stack_index93 = 0;\n  let paren_level_stack_index94 = 0;\n  let paren_level_stack_index95 = 0;\n  let paren_level_stack_index96 = 0;\n  let paren_level_stack_index97 = 0;\n  let paren_level_stack_index98 = 0;\n  let paren_level_stack_index99 = 0;\n  let paren_level_stack_index100 = 0;\n  let paren_level_stack_index101 = 0;\n  let paren_level_stack_index102 = 0;\n  let paren_level_stack_index103 = 0;\n  let paren_level_stack_index104 = 0;\n  let paren_level_stack_index105 = 0;\n  let paren_level_stack_index106 = 0;\n  let paren_level_stack_index107 = 0;\n  let paren_level_stack_index108 = 0;\n  let paren_level_stack_index109 = 0;\n  let paren_level_stack_index110 = 0;\n  let paren_level_stack_index111 = 0;\n  let paren_level_stack_index112 = 0;\n  let paren_level_stack_index113 = 0;\n  let paren_level_stack_index114 = 0;\n  let paren_level_stack_index115 = 0;\n  let paren_level_stack_index116 = 0;\n  let paren_level_stack_index117 = 0;\n  let paren_level_stack_index118 = 0;\n  let paren_level_stack_index119 = 0;\n  let paren_level_stack_index120 = 0;\n  let paren_level_stack_index121 = 0;\n  let paren_level_stack_index122 = 0;\n  let paren_level_stack_index123 = 0;\n  let paren_level_stack_index124 = 0;\n  let paren_level_stack_index125 = 0;\n  let paren_level_stack_index126 = 0;\n  let paren_level_stack_index127 = 0;\n  let paren_level_stack_index128 = 0;\n  let paren_level_stack_index129 = 0;\n  let paren_level_stack_index130 = 0;\n  let paren_level_stack_index131 = 0;\n  let paren_level_stack_index132 = 0;\n  let paren_level_stack_index133 = 0;\n  let paren_level_stack_index134 = 0;\n  let paren_level_stack_index135 = 0;\n  let paren_level_stack_index136 = 0;\n  let paren_level_stack_index137 = 0;\n  let paren_level_stack_index138 = 0;\n  let paren_level_stack_index139 = 0;\n  let paren_level_stack_index140 = 0;\n  let paren_level_stack_index141 = 0;\n  let paren_level_stack_index142 = 0;\n  let paren_level_stack_index143 = 0;\n  let paren_level_stack_index144 = 0;\n  let paren_level_stack_index145 = 0;\n  let paren_level_stack_index146 = 0;\n  let paren_level_stack_index147 = 0;\n  let paren_level_stack_index148 = 0;\n  let paren_level_stack_index149 = 0;\n  let paren_level_stack_index150 = 0;\n  let paren_level_stack_index151 = 0;\n  let paren_level_stack_index152 = 0;\n  let paren_level_stack_index153 = 0;\n  let paren_level_stack_index154 = 0;\n  let paren_level_stack_index155 = 0;\n  let paren_level_stack_index156 = 0;\n  let paren_level_"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstring([], 'b')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'b')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNot"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return the list of integers such that all integers in the list are divisible by each other.\n  Empty list should be equal to [].\n  >>> kernelDivisibility([])\n  []\n  >>> kernelDivisibility([2, 3])\n  []\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  [2]\n  >>> kernelDivisibility([2, 3])\n  "}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  const rollingMax = numbers.reduce((acc, curr) => {\n    if (curr > acc) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  return [...Array(rollingMax).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling minimum element found until given moment\n// in the sequence.\nconst rolledMin = (numbers) => {\n  const rollingMin = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  return [...Array(rollingMin).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling mean element found until given moment\n// in the sequence.\nconst rolledMean = (numbers) => {\n  const rollingMean = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return curr + acc;\n  }, 0);\n  return [...Array(rollingMean).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling standard deviation element found until given moment\n// in the sequence.\nconst rolledStd = (numbers) => {\n  const rollingStd = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return Math.sqrt(curr + acc);\n  }, 0);\n  return [...Array(rollingStd).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling variance element found until given moment\n// in the sequence.\nconst rolledVar = (numbers) => {\n  const rollingVar = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return Math.pow(curr - acc, 2);\n  }, 0);\n  return [...Array(rollingVar).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling skewness element found until given moment\n// in the sequence.\nconst rolledSkewness = (numbers) => {\n  const rollingSkewness = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return Math.pow(curr - acc, 3);\n  }, 0);\n  return [...Array(rollingSkewness).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling kurtosis element found until given moment\n// in the sequence.\nconst rolledKurtosis = (numbers) => {\n  const rollingKurtosis = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return Math.pow(curr - acc, 4);\n  }, 0);\n  return [...Array(rollingKurtosis).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\nconst rolledMaxOf = (numbers) => {\n  const rollingMax = numbers.reduce((acc, curr) => {\n    if (curr > acc) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  return [...Array(rollingMax).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling minimum element found until given moment\n// in the sequence.\nconst rolledMinOf = (numbers) => {\n  const rollingMin = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  return [...Array(rollingMin).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling mean element found until given moment\n// in the sequence.\nconst rolledMeanOf = (numbers) => {\n  const rollingMean = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return curr + acc;\n  }, 0);\n  return [...Array(rollingMean).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling standard deviation element found until given moment\n// in the sequence.\nconst rolledStdOf = (numbers) => {\n  const rollingStd = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return Math.sqrt(curr + acc);\n  }, 0);\n  return [...Array(rollingStd).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling variance element found until given moment\n// in the sequence.\nconst rolledVarOf = (numbers) => {\n  const rollingVar = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return Math.pow(curr - acc, 2);\n  }, 0);\n  return [...Array(rollingVar).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling skewness element found until given moment\n// in the sequence.\nconst rolledSkewnessOf = (numbers) => {\n  const rollingSkewness = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return Math.pow(curr - acc, 3);\n  }, 0);\n  return [...Array(rollingSkewness).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling kurtosis element found until given moment\n// in the sequence.\nconst rolledKurtosisOf = (numbers) => {\n  const rollingKurtosis = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return Math.pow(curr - acc, 4);\n  }, 0);\n  return [...Array(rollingKurtosis).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\nconst rolledMaxOfOf = (numbers) => {\n  const rollingMax = numbers.reduce((acc, curr) => {\n    if (curr > acc) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  return [...Array(rollingMax).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling minimum element found until given moment\n// in the sequence.\nconst rolledMinOfOf = (numbers) => {\n  const rollingMin = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  return [...Array(rollingMin).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling mean element found until given moment\n// in the sequence.\nconst rolledMeanOfOf = (numbers) => {\n  const rollingMean = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      return acc;\n    }\n    return curr + acc;\n  }, 0);\n  return [...Array(rollingMean).keys()].map((_, i) => numbers[i]);\n};\n\n// From a given list of integers, generate a list of rolling standard deviation element found until given moment\n// in the sequence.\nconst rolledStdOfOf"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (isPalindrome(string[i])) {\n      longestPalindrome = string[i];\n      longestPalindromeLength = string[i].length;\n      longestPalindromePrefix = longestPalindrome.slice(0, longestPalindromeLength);\n      longestPalindromeSuffix = longestPalindrome.slice(longestPalindromeLength);\n      break;\n    }\n  }\n\n  return longestPalindromePrefix + longestPalindromeSuffix;\n}\n\n/* Given a string, return its reverse (from right to left) string.\n  >>> reverse('cat')\n  'atac'\n  >>> reverse('cata')\n  'atac'\n  */\nconst reverse = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse (from left to right) string.\n  >>> reverse('cat')\n  'atac'\n  >>> reverse('cata')\n  'atac'\n  */\nconst reverseL = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse (from left to right) string.\n  >>> reverseL('cat')\n  'atac'\n  >>> reverseL('cata')\n  'atac'\n  */\nconst reverseR = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse (from left to right) string.\n  >>> reverseR('cat')\n  'atac'\n  >>> reverseR('cata')\n  'atac'\n  */\nconst reverseBoth = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse (from left to right) string.\n  >>> reverseBoth('cat')\n  'atac'\n  >>> reverseBoth('cata')\n  'atac'\n  */\nconst reverseBothL = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse (from left to right) string.\n  >>> reverseBothR('cat')\n  'atac'\n  >>> reverseBothR('cata')\n  'atac'\n  */\nconst reverseBothR = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse (from left to right) string.\n  >>> reverseBothBoth('cat')\n  'atac'\n  >>> reverseBothBoth('cata')\n  'atac'\n  */\nconst reverseBothBothL = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse (from left to right) string.\n  >>> reverseBothBothR('cat')\n  'atac'\n  >>> reverseBothBothR('cata')\n  'atac'\n  */\nconst reverseBothBothR = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse (from left to right) string.\n  >>> reverseBothBothBothBoth('cat')\n  'atac'\n  >>> reverseBothBothBothBoth('cata')\n  'atac'\n  */\nconst reverseBothBothBothBothL = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse (from left to right) string.\n  >>> reverseBothBothBothBothR('cat')\n  'atac'\n  >>> reverseBothBothBothBothBothR('cata')\n  'atac'\n  */\nconst reverseBothBothBothBothR = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse (from left to right) string.\n  >>> reverseBothBothBothBothBothBoth('cat')\n  'atac'\n  >>> reverseBothBothBothBothBothBoth('cata')\n  'atac'\n  */\nconst reverseBothBothBothBothBothL = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse (from left to right) string.\n  >>> reverseBothBothBothBothBothBothBothR('cat')\n  'atac'\n  >>> reverseBothBothBothBothBothBothBothR('cata')\n  'atac'\n  */\nconst reverseBothBothBothBothBothR = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse (from left to right) string.\n  >>> reverseBothBothBothBothBothBothBothBoth('cat')\n  'atac'\n  >>> reverseBothBothBothBothBothBothBoth('cata')\n  'atac'\n  */\nconst reverseBothBothBothBothBothBothL = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse (from left to right) string.\n  >>> reverseBothBothBothBothBothBothBothR('cat')\n  'atac'\n  >>> reverseBothBothBothBothBothBothBothR('cata')\n  'atac'\n  */\nconst reverse"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let aChar = a[i];\n    let bChar = b[i];\n    let xorResult = aChar ^ bChar;\n    if (xorResult === 0) {\n      result += aChar;\n    } else {\n      result += String.fromCharCode(xorResult);\n    }\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentAnd(['010', '110'], ['100', '110'])\n  '110'\n  */\nconst bowedStringedInstrumentAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let aChar = a[i];\n    let bChar = b[i];\n    let andResult = aChar & bChar;\n    if (andResult === 0) {\n      result += aChar;\n    } else {\n      result += String.fromCharCode(andResult);\n    }\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentOr(['010', '110'], ['100', '110'])\n  '110'\n  */\nconst bowedStringedInstrumentOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let aChar = a[i];\n    let bChar = b[i];\n    let orResult = aChar | bChar;\n    if (orResult === 0) {\n      result += aChar;\n    } else {\n      result += String.fromCharCode(orResult);\n    }\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor(['010', '110'], ['100', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let aChar = a[i];\n    let bChar = b[i];\n    let xorResult = aChar ^ bChar;\n    if (xorResult === 0) {\n      result += aChar;\n    } else {\n      result += String.fromCharCode(xorResult);\n    }\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentAnd(['010', '110'], ['100', '110'])\n  '110'\n  */\nconst bowedStringedInstrumentAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let aChar = a[i];\n    let bChar = b[i];\n    let andResult = aChar & bChar;\n    if (andResult === 0) {\n      result += aChar;\n    } else {\n      result += String.fromCharCode(andResult);\n    }\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentOr(['010', '110'], ['100', '110'])\n  '110'\n  */\nconst bowedStringedInstrumentOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let aChar = a[i];\n    let bChar = b[i];\n    let orResult = aChar | bChar;\n    if (orResult === 0) {\n      result += aChar;\n    } else {\n      result += String.fromCharCode(orResult);\n    }\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor(['010', '110'], ['100', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let aChar = a[i];\n    let bChar = b[i];\n    let xorResult = aChar ^ bChar;\n    if (xorResult === 0) {\n      result += aChar;\n    } else {\n      result += String.fromCharCode(xorResult);\n    }\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentAnd(['010', '110'], ['100', '110'])\n  '110'\n  */\nconst bowedStringedInstrumentAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let aChar = a[i];\n    let bChar = b[i];\n    let andResult = aChar & bChar;\n    if (andResult === 0) {\n      result += aChar;\n    } else {\n      result += String.fromCharCode(andResult);\n    }\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentOr(['010', '110'], ['100', '110'])\n  '110'\n  */\nconst bowedStringedInstrumentOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let aChar = a[i];\n    let bChar = b[i];\n    let orResult = aChar | bChar;\n    if (orResult === 0) {\n      result += aChar;\n    } else {\n      result += String.fromCharCode(orResult);\n    }\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor(['010', '110'], ['100', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let aChar = a[i];\n    let bChar = b[i];\n    let xorResult = aChar ^ bChar;\n    if (xorResult === 0) {\n      result += aChar;\n    } else {\n      result += String.fromCharCode(xorResult);\n    }\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentAnd(['010', '110'], ['100', '110'])\n  '110'\n  */\nconst bowedStringedInstrumentAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let aChar = a[i];\n    let bChar = b[i];\n    let andResult = aChar & bChar;\n    if (andResult === 0) {\n      result += aChar;\n    } else {\n      result += String.fromCharCode(andResult);\n    }\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentOr(['010', '110'], ['100', '110"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "<|endoftext|>/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const [first,...rest] = strings\n  if (rest.length === 0) {\n    return first\n  }\n  return farseeing(rest.slice(0, -1))\n}\n\n/**\n  Returns a list of all possible permutations of a list of strings.\n  >>> permutations(['a', 'b', 'c'])\n  [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', ''], ['a', 'b', 'c'], ['a', ''], ['a', 'b', 'c'], ['a', ''], ['a', 'b', 'c'], ['a', ''], ['a', 'b', 'c'], ['a', ''], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', '"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n  if (a < b) return a;\n  if (b < a) return b;\n  return a % b;\n};\n\n/**\n * Capitalize first letter of a string\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeFirstLetter = str => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/**\n * Capitalize all letters in a string\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLetters = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLetters = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLettersAndSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLettersAndCapitalizeSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllSpaces = str => {\n  return str.split('').map(char => char.charAt(0).toUpperCase() + char.slice(1)).join('');\n};\n\n/**\n * Capitalize all letters in a string and replace all spaces with underscores\n *\n * @param {string} str\n * @return {string}\n */\nconst capitalizeAllLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllCapitalLettersAndCapitalizeAllSpaces = str => {\n  return str.split('')."}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  let prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, -1));\n    currentPrefix = currentPrefix.slice(1, currentPrefix.length);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffix = (string) => {\n  let suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix.slice(1, -1));\n    currentSuffix = currentSuffix.slice(0, -1);\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from shortest to longest of the input string\n  >>> commonPrefix('abc')\n  ['a', 'b', 'c']\n  */\nconst commonPrefix = (string) => {\n  let prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, -1));\n    currentPrefix = currentPrefix.slice(1, currentPrefix.length);\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from shortest to longest of the input string\n  >>> commonSuffix('abc')\n  ['c', 'ba', 'cab']\n  */\nconst commonSuffix = (string) => {\n  let suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix.slice(1, -1));\n    currentSuffix = currentSuffix.slice(0, -1);\n  }\n  return suffixes;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstring('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstring = (string1, string2) => {\n  let substrings = [];\n  let currentSubstring = string1;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring === string2) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.slice(0, -1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstring('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings = (string1, string2) => {\n  let substrings = [];\n  let currentSubstring = string1;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring === string2) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.slice(0, -1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstring('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings2 = (string, string2) => {\n  let substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring === string2) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.slice(0, -1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstring('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings3 = (string, string2) => {\n  let substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring === string2) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.slice(0, -1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstring('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings4 = (string, string2) => {\n  let substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring === string2) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.slice(0, -1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstring('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings5 = (string, string2) => {\n  let substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring === string2) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.slice(0, -1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstring('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings6 = (string, string2) => {\n  let substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring === string2) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.slice(0, -1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstring('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings7 = (string, string2) => {\n  let substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring === string2) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.slice(0, -1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstring('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings8 = (string, string2) => {\n  let substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring === string2) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.slice(0, -1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstring('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings9 = (string, string2) => {\n  let substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring === string2) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.slice(0, -1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstring('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings10 = (string, string2) => {\n  let substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring === string2) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.slice(0, -1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstring('abc', 'abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings11 = (string, string2) => {\n  let substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    if (currentSubstring === string2) {\n      substrings.push(currentSubstring);\n    }\n    currentSubstring = currentSubstring.slice(0, -1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstring('abc', '"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFail = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> bowedStringedInstrumentFail(0)\n  '0'\n  >>> bowedStringedInstrumentFail(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailing = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> bowedStringedInstrumentFailing(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailingFail = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> bowedStringedInstrumentFailingFail(0)\n  '0'\n  >>> bowedStringedInstrumentFailingFail(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailingFailing = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> bowedStringedInstrumentFailingFailing(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailingFailingFailing = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n  Return a string containing space-delimited numbers starting from n inclusive.\n  >>> bowedStringedInstrumentFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFailingFail"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  let distinctCharacters = 0;\n  let currentCharacter;\n  let currentCharacterCount;\n  let currentCharacterLowercase;\n  let currentCharacterUppercase;\n  let currentCharacterLowercaseCount;\n  let currentCharacterUppercaseCount;\n  let currentCharacterLowercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseCount;\n  let currentCharacterLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseLowercaseUppercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLowercaseCount;\n  let currentCharacterUppercaseLowercaseUppercaseCount;\n  let currentCharacterLowercaseUppercaseLower"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_lengths = notes.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseMusic;\n\n},{}],9:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],10:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],11:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],12:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],13:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],14:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],15:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],16:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],17:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],18:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],19:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],20:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],21:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],22:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],23:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],24:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],25:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],26:[function(require,module,exports){\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const notes_lengths = note.map((note) => note.length);\n  const notes_beats = notes_lengths.map((length) => length / 4);\n  return notes_beats;\n};\n\nmodule.exports = parseNote;\n\n},{}],27:[function(require,module,exports){\nconst parseNote = (note_string) => {"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = string.indexOf(substring);\n  while (index > -1) {\n    count++;\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return count;\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * If there are duplicate permutations, return only the first.\n * If there are multiple solutions, return all of them.\n * If there are no solutions, return an empty array.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n * If there are multiple solutions, return all of them.\n"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  return numbers.sort((a, b) => a - b);\n};\n\n/**\n  Given a string, return all possible permutations of its characters.\n  >>> permutations('abc')\n  [ 'a', 'b', 'c', 'ab', 'ba', 'bc', 'abc' ]\n  >>> permutations('ab')\n  [ 'a', 'b', 'ab' ]\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  >>> permutations('')\n  []\n  "}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  const smallest = numbers.reduce((a, b) => a < b? a : b)\n  const largest = numbers.reduce((a, b) => a > b? a : b)\n  return [smallest, largest]\n}\n\nconst getChemicalElement = (chemicalElements, element) => {\n  const chemicalElement = chemicalElements.find(\n    chemicalElement => chemicalElement.element === element\n  )\n  return chemicalElement\n}\n\nconst getChemicalElements = (chemicalElements, element) => {\n  const chemicalElement = chemicalElements.find(\n    chemicalElement => chemicalElement.element === element\n  )\n  return chemicalElement.chemicalElements\n}\n\nconst getChemicalElementsOfType = (chemicalElements, type) => {\n  const chemicalElement = chemicalElements.find(\n    chemicalElement => chemicalElement.type === type\n  )\n  return chemicalElement.chemicalElements\n}\n\nconst getChemicalElementsOfTypes = (chemicalElements, types) => {\n  const chemicalElement = chemicalElements.find(\n    chemicalElement => chemicalElement.types.includes(types)\n  )\n  return chemicalElement.chemicalElements\n}\n\nconst getChemicalElementsOfTypeAndElement = (chemicalElements, types, element) => {\n  const chemicalElement = chemicalElements.find(\n    chemicalElement => chemicalElement.type === types && chemicalElement.element === element\n  )\n  return chemicalElement.chemicalElements\n}\n\nconst getChemicalElementsOfTypeAndElements = (chemicalElements, types, elements) => {\n  const chemicalElement = chemicalElements.find(\n    chemicalElement => chemicalElement.types.includes(types) && chemicalElement.elements.includes(element)\n  )\n  return chemicalElement.chemicalElements\n}\n\nconst getChemicalElementsOfTypeAndElementsOfType = (chemicalElements, types, elements) => {\n  const chemicalElement = chemicalElements.find(\n    chemicalElement => chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements)\n  )\n  return chemicalElement.chemicalElements\n}\n\nconst getChemicalElementsOfTypeAndElementsOfTypes = (chemicalElements, types, elements) => {\n  const chemicalElement = chemicalElements.find(\n    chemicalElement => chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements)\n  )\n  return chemicalElement.chemicalElements\n}\n\nconst getChemicalElementsOfTypeAndElementsOfTypeAndElement = (chemicalElements, types, elements, element) => {\n  const chemicalElement = chemicalElements.find(\n    chemicalElement => chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.element === element\n  )\n  return chemicalElement.chemicalElements\n}\n\nconst getChemicalElementsOfTypeAndElementsOfTypeAndElements = (chemicalElements, types, elements, elements) => {\n  const chemicalElement = chemicalElements.find(\n    chemicalElement => chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.elements.includes(element)\n  )\n  return chemicalElement.chemicalElements\n}\n\nconst getChemicalElementsOfTypeAndElementsOfTypeAndElementsOfType = (chemicalElements, types, elements, elements) => {\n  const chemicalElement = chemicalElements.find(\n    chemicalElement => chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types)\n  )\n  return chemicalElement.chemicalElements\n}\n\nconst getChemicalElementsOfTypeAndElementsOfTypeAndElementsOfTypes = (chemicalElements, types, elements, elements) => {\n  const chemicalElement = chemicalElements.find(\n    chemicalElement => chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements)\n  )\n  return chemicalElement.chemicalElements\n}\n\nconst getChemicalElementsOfTypeAndElementsOfTypeAndElementsOfTypesOfType = (chemicalElements, types, elements, elements) => {\n  const chemicalElement = chemicalElements.find(\n    chemicalElement => chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && chemicalElement.types.includes(types) && chemicalElement.elements.includes(elements) && "}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers.map(n => Math.min(n, 1))\n  const [a, b] = max - min\n  const [c, d] = numbers.length\n  const [e, f] = numbers.length\n  const [g, h] = numbers.length\n  const [i, j] = numbers.length\n  const [k, l] = numbers.length\n  const [m, n] = numbers.length\n  const [o, p] = numbers.length\n  const [q, r] = numbers.length\n  const [s, t] = numbers.length\n  const [u, v] = numbers.length\n  const [w, x] = numbers.length\n  const [y, z] = numbers.length\n  const [A1, B1, C1, D1] = numbers.length\n  const A2, B2, C2, D2 = numbers.length\n  const A3, B3, C3, D3 = numbers.length\n  const A4, B4, C4, D4 = numbers.length\n  const A5, B5, C5, D5 = numbers.length\n  const A6, B6, C6, D6 = numbers.length\n  const A7, B7, C7, D7 = numbers.length\n  const A8, B8, C8, D8 = numbers.length\n  const A9, B9, C9, D9 = numbers.length\n  const A10, B10, C10, D10 = numbers.length\n  const A11, B11, C11, D11 = numbers.length\n  const A12, B12, C12, D12 = numbers.length\n  const A13, B13, C13, D13 = numbers.length\n  const A14, B14, C14, D14 = numbers.length\n  const A15, B15, C15, D15 = numbers.length\n  const A16, B16, C16, D16 = numbers.length\n  const A17, B17, C17, D17 = numbers.length\n  const A18, B18, C18, D18 = numbers.length\n  const A19, B19, C19, D19 = numbers.length\n  const A20, B20, C20, D20 = numbers.length\n  const A21, B21, C21, D21 = numbers.length\n  const A22, B22, C22, D22 = numbers.length\n  const A23, B23, C23, D23 = numbers.length\n  const A24, B24, C24, D24 = numbers.length\n  const A25, B25, C25, D25 = numbers.length\n  const A26, B26, C26, D26 = numbers.length\n  const A27, B27, C27, D27 = numbers.length\n  const A28, B28, C28, D28 = numbers.length\n  const A29, B29, C29, D29 = numbers.length\n  const A30, B30, C30, D30 = numbers.length\n  const A31, B31, C31, D31 = numbers.length\n  const A32, B32, C32, D32 = numbers.length\n  const A33, B33, C33, D33 = numbers.length\n  const A34, B34, C34, D34 = numbers.length\n  const A35, B35, C35, D35 = numbers.length\n  const A36, B36, C36, D36 = numbers.length\n  const A37, B37, C37, D37 = numbers.length\n  const A38, B38, C38, D38 = numbers.length\n  const A39, B39, C39, D39 = numbers.length\n  const A40, B40, C40, D40 = numbers.length\n  const A41, B41, C41, D41 = numbers.length\n  const A42, B42, C42, D42 = numbers.length\n  const A43, B43, C43, D43 = numbers.length\n  const A44, B44, C44, D44 = numbers.length\n  const A45, B45, C45, D45 = numbers.length\n  const A46, B46, C46, D46 = numbers.length\n  const A47, B47, C47, D47 = numbers.length\n  const A48, B48, C48, D48 = numbers.length\n  const A49, B49, C49, D49 = numbers.length\n  const A50, B50, C51, D51 = numbers.length\n  const A51, B51, C51, D51 = numbers.length\n  const A52, B52, C52, D52 = numbers.length\n  const A53, B53, C53, D53 = numbers.length\n  const A54, B54, C54, D54 = numbers.length\n  const A55, B55, C55, D55 = numbers.length\n  const A56, B56, C56, D56 = numbers.length\n  const A57, B57, C57, D57 = numbers.length\n  const A58, B58, C58, D58 = numbers.length\n  const A59, B59, C59, D59 = numbers.length\n  const A60, B60, C60, D60 = numbers.length\n  const A61, B61, C61, D61 = numbers.length\n  const A62, B62, C62, D62 = numbers.length\n  const A63, B63, C63, D63 = numbers.length\n  const A64, B64, C64, D64 = numbers.length\n  const A65, B65, C65, D65 = numbers.length\n  const A66, B66, C66, D66 = numbers.length\n  const A67, B67, C67, D67 = numbers.length\n  const A68, B68, C68, D68 = numbers.length\n  const A69, B69, C69, D69 = numbers.length\n  const A70, B70, C71, D70 = numbers.length\n  const A71, B71, C71, D71 = numbers.length\n  const A72, B72, C72, D72 = numbers.length\n  const A73, B73, C73, D73 = numbers.length\n  const A74, B74, C74, D74 = numbers.length\n  const A75, B75, C75, D75 = numbers.length\n  const A76, B76, C76, D76 = numbers.length\n  const A77, B77, C77, D77 = numbers.length\n  const A78, B78, C78, D78 = numbers.length\n  const A79, B79, C79, D79 = numbers.length\n  const A80, B80, C80, D80 = numbers.length\n  const A81, B81, C81, D81 = numbers.length\n  const A82, B82, C82, D82 = numbers.length\n  const A83, B83, C83, D83 = numbers.length\n  const A84, B84, C84, D84 = numbers.length\n  const A85, B85, C85, D85 = numbers.length\n  const A86, B86, C86, D86 = numbers.length\n  const A87, B87, C87, D87 = numbers.length\n  const A88, B88, C88, D88 = numbers.length\n  const A89, B89, C89, D89 = numbers.length\n  const A90, B90, C91, D90 = numbers.length\n  const A91, B91, C91, D91 = numbers.length\n  const A92, B92, C92, D92 = numbers.length\n  const A93, B93, C93, D93 = numbers.length\n  const A94, B94, C94, D94 = numbers.length\n  const A95, B95, C95, D95 = numbers.length\n  const A96, B96, C96, D96 = numbers.length\n  const A97, B97, C97, D97 = numbers.length\n  const A98, B98, C98, D98 = numbers.length\n  const A99, B99, C98, D98 = numbers.length\n  const A100, B100, "}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5.0]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, true, false, true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNone(['a', 3.14, 5])\n  []\n  >>> filterNone([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNone = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmptyList(['a', 3.14, 5])\n  []\n  >>> filterEmptyList([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyList = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDict(['a', 3.14, 5])\n  {}\n  >>> filterEmptyDict([1, 2, 3, 'abc', {}, []])\n  {}\n  */\nconst filterEmptyDict = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyString(['a', 3.14, 5])\n  ''\n  >>> filterEmptyString([1, 2, 3, 'abc', {}, []])\n  ''\n  */\nconst filterEmptyString = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of any python values only for empty array\n  >>> filterEmptyArray([a, 3.14, 5])\n  []\n  >>> filterEmptyArray([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyArray = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty function\n  >>> filterEmptyFunction([a, 3.14, 5])\n  []\n  >>> filterEmptyFunction([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyFunction = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty class\n  >>> filterEmptyClass(['a', 'b', 3.14, 5])\n  []\n  >>> filterEmptyClass([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyClass = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty instance\n  >>> filterEmptyInstance([a, 3.14, 5])\n  []\n  >>> filterEmptyInstance([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyInstance = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmptyList(['a', 'b', 3.14, 5])\n  []\n  >>> filterEmptyList([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyList = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDict(['a', 'b', 3.14, 5])\n  {}\n  >>> filterEmptyDict([1, 2, 3, 'abc', {}, []])\n  {}\n  */\nconst filterEmptyDict = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyString(['a', 'b', 3.14, 5])\n  ''\n  >>> filterEmptyString([1, 2, 3, 'abc', {}, []])\n  ''\n  */\nconst filterEmptyString = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty array\n  >>> filterEmptyArray(['a', 3.14, 5])\n  []\n  >>> filterEmptyArray([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyArray = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty function\n  >>> filterEmptyFunction(['a', 3.14, 5])\n  []\n  >>> filterEmptyFunction([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyFunction = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty class\n  >>> filterEmptyClass(['a', 'b', 3.14, 5])\n  []\n  >>> filterEmptyClass([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyClass = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty instance\n  >>> filterEmptyInstance(['a', 3.14, 5])\n  []\n  >>> filterEmptyInstance([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyInstance = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmptyList(['a', 'b', 3.14, 5])\n  []\n  >>> filterEmptyList([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyList = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDict(['a', 'b', 3.14, 5])\n  {}\n  >>> filterEmptyDict([1, 2, 3, 'abc', {}, []])\n  {}\n  */\nconst filterEmptyDict = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyString(['a', 'b', 3.14, 5])\n  ''\n  >>> filterEmptyString([1, 2, 3, 'abc', {}, []])\n  ''\n  */\nconst filterEmptyString = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty array\n  >>> filterEmptyArray(['a', 3.14, 5])\n  []\n  >>> filterEmptyArray([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterEmptyArray = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty function\n  >>> filterEmptyFunction(['a', 3.14, 5])\n  []\n"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return true if given string starts with given prefix\n  >>> strstarts('abc', 'ab')\n  true\n  >>> strstarts('abc', 'abc')\n  false\n  */\nconst strstarts = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/* Return true if given string ends with given suffix\n  >>> strends('abc', 'ab')\n  true\n  >>> strends('abc', 'abc')\n  false\n  */\nconst strends = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strcontains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontains = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, 0) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, 0) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, 0) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, 0) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, 0) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, 0) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, 0) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'ab')\n  true\n  >>> strcontains('abc', 'abc"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> bigDivisor(20)\n * 10\n */\nconst bigModulo = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigModulo(15)\n * 5\n */\nconst bigModuloSmall = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> bigModuloSmall(20)\n * 10\n */\nconst bigModuloLarge = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigModuloLarge(15)\n * 5\n */\nconst bigModuloLargeSmall = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> bigModuloLargeSmall(20)\n * 10\n */\nconst bigModuloLargeLarge = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigModuloLargeLarge(15)\n * 5\n */\nconst bigModuloLargeLargeSmall = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> bigModuloLargeLargeSmall(20)\n * 10\n */\nconst bigModuloLargeLarge = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigModuloLargeLargeSmall(20)\n * 10\n */\nconst bigModuloLargeLargeSmall = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> bigModuloLargeLarge(15)\n * 5\n */\nconst bigModuloLargeLarge = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigModuloLargeLargeSmall(20)\n * 10\n */\nconst bigModuloLargeLargeSmall = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> bigModuloLargeLarge(15)\n * 5\n */\nconst bigModuloLargeLarge = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigModuloLargeLargeSmall(20)\n * 10\n */\nconst bigModuloLargeLargeSmall = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> bigModuloLargeLarge(15)\n * 5\n */\nconst bigModuloLargeLarge = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigModuloLargeLargeSmall(20)\n * 10\n */\nconst bigModuloLargeLargeSmall = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> bigModuloLargeLarge(15)\n * 5\n */\nconst bigModuloLargeLarge = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigModuloLargeLargeSmall(20)\n * 10\n */\nconst bigModuloLargeLargeSmall = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> bigModuloLargeLarge(15)\n * 5\n */\nconst bigModuloLargeLarge = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigModuloLargeLargeSmall(20)\n * 10\n */\nconst bigModuloLargeLarge = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> bigModuloLargeLargeSmall(20)\n * 10\n */\nconst bigModuloLargeLargeSmall = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> bigModuloLargeLarge(15)\n * 5\n */\nconst bigModuloLargeLarge = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigModuloLargeLargeSmall(20)\n * 10\n */\nconst bigModuloLargeLargeSmall = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return n % divisor;\n"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(n % i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(n % i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(n % i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(n % i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(n % i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(n % i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(n % i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(n % i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(n % i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(n % i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(n % i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize12 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(n % i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, current) => {\n    if (seen.has(current)) {\n      seen.delete(current);\n    } else {\n      seen.add(current);\n      acc.push(current);\n    }\n    return acc;\n  }, []);\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicates = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSet = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWith = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSet = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWith = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWithSet = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWithSetWith = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWithSetWithSet = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWithSetWithSetWith = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWithSetWithSetWithSet = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWithSetWithSetWithSetWith = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWithSetWithSetWithSetWithSet = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWithSetWithSetWithSetWithSetWithSet = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWithSetWithSetWithSetWithSetWithSetWithSet = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWithSetWithSetWithSetWithSetWithSetWithSetWithSet = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWithSetWithSetWithSetWithSetWithSetWithSetWithSetWithSet = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWithSetWithSetWithSetWithSetWithSetWithSetWithSetWithSet = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.has(arr[i])) {\n      result.delete(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new array with all occurrences of elements in the original array\n * removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2, 3]\n */\nconst removeDuplicatesSetWithSetWithSetWithSetWithSetWithSetWithSetWithSetWithSetWithSet"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n  return string.toLowerCase().replace(/([a-z])([A-Z])/g, '$1 $2').toUpperCase();\n};\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize('Hello')\n  'Hell'\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalize('Hello')\n  'Hell'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalizeFirst('Hello')\n  'Hell'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalizeFirstLetter('Hello')\n  'Hell'\n  */\nconst capitalizeFirstLetterCapitalized = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalizeFirstLetterCapitalized('Hello')\n  'Hell'\n  */\nconst capitalizeFirstLetterCapitalizedFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalizeFirstLetterCapitalizedFirst('Hello')\n  'Hell'\n  */\nconst capitalizeFirstLetterCapitalizedFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalizeFirstLetterCapitalizedFirstLetter('Hello')\n  'Hell'\n  */\nconst capitalizeFirstLetterCapitalizedFirstLetterCapitalized = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalizeFirstLetterCapitalizedFirstLetterCapitalized('Hello')\n  'Hell'\n  */\nconst capitalizeFirstLetterCapitalizedFirstLetterCapitalizedFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalizeFirstLetterCapitalizedFirstLetterCapitalizedFirst('Hello')\n  'Hell'\n  */\nconst capitalizeFirstLetterCapitalizedFirstLetterCapitalizedFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalizeFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalized('Hello')\n  'Hell'\n  */\nconst capitalizeFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalizeFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalized('Hello')\n  'Hell'\n  */\nconst capitalizeFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/* Given a string, return the first letter of the string capitalized.\n  >>> capitalizeFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapitalizedFirstLetterCapit"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* Convert string to number\n  >>> toNumber(null)\n  NaN\n  >>> toNumber('abc')\n  123\n  >>> toNumber('123')\n  123\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber('123.456')\n  123.456\n  >>> toNumber"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByNoPrefix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByNoSuffix = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix or suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoPrefixOrSuffix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) ||!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given prefix or suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoSuffixOrPrefix = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix) ||!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix or suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoPrefixOrSuffix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) ||!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given prefix or suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoSuffixOrPrefix = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix) ||!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix or suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoPrefixOrSuffix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) ||!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given prefix or suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoSuffixOrPrefix = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix) ||!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix or suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoPrefixOrSuffix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) ||!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given prefix or suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoSuffixOrPrefix = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix) ||!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix or suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoPrefixOrSuffix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) ||!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given prefix or suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoSuffixOrPrefix = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix) ||!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix or suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterBy"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNegative = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*\n  >>> catchZero([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchZero = (l) => {\n  return l.filter(n => n === 0)\n}\n\n/*\n  >>> catchNaN([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNaN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNaN = (l) => {\n  return l.filter(n => isNaN(n))\n}\n\n/*\n  >>> catchInfinity([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchInfinity = (l) => {\n  return l.filter(n => n === Infinity)\n}\n\n/*\n  >>> catchNegativeInfinity([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNegativeInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNegativeInfinity = (l) => {\n  return l.filter(n => n <= 0)\n}\n\n/*\n  >>> catchNaN([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNaN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNaN = (l) => {\n  return l.filter(n => isNaN(n))\n}\n\n/*\n  >>> catchInfinity([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchInfinity = (l) => {\n  return l.filter(n => n === Infinity)\n}\n\n/*\n  >>> catchNegativeInfinity([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNegativeInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNegativeInfinity = (l) => {\n  return l.filter(n => n <= 0)\n}\n\n/*\n  >>> catchNaN([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNaN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNaN = (l) => {\n  return l.filter(n => isNaN(n))\n}\n\n/*\n  >>> catchInfinity([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchInfinity = (l) => {\n  return l.filter(n => n === Infinity)\n}\n\n/*\n  >>> catchNegativeInfinity([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNegativeInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNegativeInfinity = (l) => {\n  return l.filter(n => n <= 0)\n}\n\n/*\n  >>> catchNaN([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNaN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNaN = (l) => {\n  return l.filter(n => isNaN(n))\n}\n\n/*\n  >>> catchInfinity([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchInfinity = (l) => {\n  return l.filter(n => n === Infinity)\n}\n\n/*\n  >>> catchNegativeInfinity([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNegativeInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNegativeInfinity = (l) => {\n  return l.filter(n => n <= 0)\n}\n\n/*\n  >>> catchNaN([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNaN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNaN = (l) => {\n  return l.filter(n => isNaN(n))\n}\n\n/*\n  >>> catchInfinity([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchInfinity = (l) => {\n  return l.filter(n => n === Infinity)\n}\n\n/*\n  >>> catchNegativeInfinity([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNegativeInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNegativeInfinity = (l) => {\n  return l.filter(n => n <= 0)\n}\n\n/*\n  >>> catchNaN([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNaN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNaN = (l) => {\n  return l.filter(n => isNaN(n))\n}\n\n/*\n  >>> catchInfinity([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchInfinity = (l) => {\n  return l.filter(n => n === Infinity)\n}\n\n/*\n  >>> catchNegativeInfinity([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNegativeInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNegativeInfinity = (l) => {\n  return l.filter(n => n <= 0)\n}\n\n/*\n  >>> catchNaN([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNaN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNaN = (l) => {\n  return l.filter(n => isNaN(n))\n}\n\n/*\n  >>> catchInfinity([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchInfinity([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, "}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Given a number n, return true if it is divisible by 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, or 31, and false otherwise.\n  >>> isDivisibleBy(6)\n  true\n  >>> isDivisibleBy(10)\n  false\n  >>> isDivisibleBy(11)\n  false\n  >>> isDivisibleBy(13)\n  false\n  >>> isDivisibleBy(17)\n  false\n  >>> isDivisibleBy(19)\n  false\n  >>> isDivisibleBy(23)\n  false\n  >>> isDivisibleBy(29)\n  false\n  >>> isDivisibleBy(31)\n  true\n  >>> isDivisibleBy(32)\n  true\n  >>> isDivisibleBy(33)\n  true\n  >>> isDivisibleBy(34)\n  true\n  >>> isDivisibleBy(35)\n  true\n  >>> isDivisibleBy(36)\n  true\n  >>> isDivisibleBy(37)\n  true\n  >>> isDivisibleBy(38)\n  true\n  >>> isDivisibleBy(39)\n  true\n  >>> isDivisibleBy(40)\n  true\n  >>> isDivisibleBy(41)\n  true\n  >>> isDivisibleBy(42)\n  true\n  >>> isDivisibleBy(43)\n  true\n  >>> isDivisibleBy(44)\n  true\n  >>> isDivisibleBy(45)\n  true\n  >>> isDivisibleBy(46)\n  true\n  >>> isDivisibleBy(47)\n  true\n  >>> isDivisibleBy(48)\n  true\n  >>> isDivisibleBy(49)\n  true\n  >>> isDivisibleBy(50)\n  true\n  >>> isDivisibleBy(51)\n  true\n  >>> isDivisibleBy(52)\n  true\n  >>> isDivisibleBy(53)\n  true\n  >>> isDivisibleBy(54)\n  true\n  >>> isDivisibleBy(55)\n  true\n  >>> isDivisibleBy(56)\n  true\n  >>> isDivisibleBy(57)\n  true\n  >>> isDivisibleBy(58)\n  true\n  >>> isDivisibleBy(59)\n  true\n  >>> isDivisibleBy(60)\n  true\n  >>> isDivisibleBy(61)\n  true\n  >>> isDivisibleBy(62)\n  true\n  >>> isDivisibleBy(63)\n  true\n  >>> isDivisibleBy(64)\n  true\n  >>> isDivisibleBy(65)\n  true\n  >>> isDivisibleBy(66)\n  true\n  >>> isDivisibleBy(67)\n  true\n  >>> isDivisibleBy(68)\n  true\n  >>> isDivisibleBy(69)\n  true\n  >>> isDivisibleBy(70)\n  true\n  >>> isDivisibleBy(71)\n  true\n  >>> isDivisibleBy(72)\n  true\n  >>> isDivisibleBy(73)\n  true\n  >>> isDivisibleBy(74)\n  true\n  >>> isDivisibleBy(75)\n  true\n  >>> isDivisibleBy(76)\n  true\n  >>> isDivisibleBy(77)\n  true\n  >>> isDivisibleBy(78)\n  true\n  >>> isDivisibleBy(79)\n  true\n  >>> isDivisibleBy(80)\n  true\n  >>> isDivisibleBy(81)\n  true\n  >>> isDivisibleBy(82)\n  true\n  >>> isDivisibleBy(83)\n  true\n  >>> isDivisibleBy(84)\n  true\n  >>> isDivisibleBy(85)\n  true\n  >>> isDivisibleBy(86)\n  true\n  >>> isDivisibleBy(87)\n  true\n  >>> isDivisibleBy(88)\n  true\n  >>> isDivisibleBy(89)\n  true\n  >>> isDivisibleBy(90)\n  true\n  >>> isDivisibleBy(91)\n  true\n  >>> isDivisibleBy(92)\n  true\n  >>> isDivisibleBy(93)\n  true\n  >>> isDivisibleBy(94)\n  true\n  >>> isDivisibleBy(95)\n  true\n  >>> isDivisibleBy(96)\n  true\n  >>> isDivisibleBy(97)\n  true\n  >>> isDivisibleBy(98)\n  true\n  >>> isDivisibleBy(99)\n  true\n  >>> isDivisibleBy(100)\n  true\n  >>> isDivisibleBy(101)\n  true\n  >>> isDivisibleBy(102)\n  true\n  >>> isDivisibleBy(103)\n  true\n  >>> isDivisibleBy(104)\n  true\n  >>> isDivisibleBy(105)\n  true\n  >>> isDivisibleBy(106)\n  true\n  >>> isDivisibleBy(107)\n  true\n  >>> isDivisibleBy(108)\n  true\n  >>> isDivisibleBy(109)\n  true\n  >>> isDivisibleBy(110)\n  true\n  >>> isDivisibleBy(111)\n  true\n  >>> isDivisibleBy(112)\n  true\n  >>> isDivisibleBy(113)\n  true\n  >>> isDivisibleBy(114)\n  true\n  >>> isDivisibleBy(115)\n  true\n  >>> isDivisibleBy(116)\n  true\n  >>> isDivisibleBy(117)\n  true\n  >>> isDivisibleBy(118)\n  true\n  >>> isDivisibleBy(119)\n  true\n  >>> isDivisibleBy(120)\n  true\n  >>> isDivisibleBy(121)\n  true\n  >>> isDivisibleBy(122)\n  true\n  >>> isDivisibleBy(123)\n  true\n  >>> isDivisibleBy(124)\n  true\n  >>> isDivisibleBy(125)\n  true\n  >>> isDivisibleBy(126)\n  true\n  >>> isDivisibleBy(127)\n  true\n  >>> isDivisibleBy(128)\n  true\n  >>> isDivisibleBy(129)\n  true\n  >>> isDivisibleBy(130)\n  true\n  >>> isDivisibleBy(131)\n  true\n  >>> isDivisibleBy(132)\n  true\n  >>> isDivisibleBy(133)\n  true\n  >>> isDivisibleBy(134)\n  true\n  >>> isDivisibleBy(135)\n  true\n  >>> isDivisibleBy(136)\n  true\n  >>> isDivisibleBy(137)\n  true\n  >>> isDivisibleBy(138)\n"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let index = xs.length % 2;\n  let zero = polyZero(xs.slice(0, index));\n  let rest = xs.slice(index);\n  if (rest && rest.length % 2) {\n    zero = polyZero(rest);\n  }\n  return zero;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findOne find x such that poly(x) = 1.\n  findOne returns only zero point, even if there are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  let index = xs.length % 2;\n  let one = polyOne(xs.slice(0, index));\n  let rest = xs.slice(index);\n  if (rest && rest.length % 2) {\n    one = polyOne(rest);\n  }\n  return one;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findTwo find x such that poly(x) = 2.\n  findTwo returns only zero point, even if there are many.\n  Moreover, findTwo only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findTwo([1, 2]), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findTwo([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  2.0\n  */\nconst findTwo = (xs) => {\n  let index = xs.length % 2;\n  let two = polyTwo(xs.slice(0, index));\n  let rest = xs.slice(index);\n  if (rest && rest.length % 2) {\n    two = polyTwo(rest);\n  }\n  return two;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findThree find x such that poly(x) = 3.\n  findThree returns only zero point, even if there are many.\n  Moreover, findThree only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findThree([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findThree([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  3.0\n  */\nconst findThree = (xs) => {\n  let index = xs.length % 2;\n  let three = polyThree(xs.slice(0, index));\n  let rest = xs.slice(index);\n  if (rest && rest.length % 2) {\n    three = polyThree(rest);\n  }\n  return three;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findFour find x such that poly(x) = 4.\n  findFour returns only zero point, even if there are many.\n  Moreover, findFour only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findFour([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findFour([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  4.0\n  */\nconst findFour = (xs) => {\n  let index = xs.length % 2;\n  let four = polyFour(xs.slice(0, index));\n  let rest = xs.slice(index);\n  if (rest && rest.length % 2) {\n    four = polyFour(rest);\n  }\n  return four;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findFive find x such that poly(x) = 5.\n  findFive returns only zero point, even if there are many.\n  Moreover, findFive only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findFive([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findFive([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  5.0\n  */\nconst findFive = (xs) => {\n  let index = xs.length % 2;\n  let five = polyFive(xs.slice(0, index));\n  let rest = xs.slice(index);\n  if (rest && rest.length % 2) {\n    five = polyFive(rest);\n  }\n  return five;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findSix find x such that poly(x) = 6.\n  findSix returns only zero point, even if there are many.\n  Moreover, findSix only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findSix([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findSix([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  6.0\n  */\nconst findSix = (xs) => {\n  let index = xs.length % 2;\n  let six = polySix(xs.slice(0, index));\n  let rest = xs.slice(index);\n  if (rest && rest.length % 2) {\n    six = polySix(rest);\n  }\n  return six;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findSeven find x such that poly(x) = 7.\n  findSeven returns only zero point, even if there are many.\n  Moreover, findSeven only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findSeven([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findSeven([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  7.0\n  */\nconst findSeven = (xs) => {\n  let index = xs.length % 2;\n  let seven = poly"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l151 = l150.slice();\n  let l15"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "<|endoftext|>/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      a.push(l[i])\n      i++\n    }\n  }\n  return a\n}\n\n/*Return sorted elements in an array\n  >>> alone([5, "}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n  });\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> soapElement([1, 2, 3])\n  1\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst soapElementMin = (l) => {\n  let min = 0;\n  l.forEach((e) => {\n    if (e < min) {\n      min = e;\n    }\n  });\n  return min;\n};\n\n/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElementMax = (l) => {\n  let max = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n  });\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> soapElement([1, 2, 3])\n  1\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst soapElementMinMax = (l) => {\n  let min = 0;\n  let max = 0;\n  l.forEach((e) => {\n    if (e < min) {\n      min = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n  });\n  return [min, max];\n};\n\n/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElementMaxMin = (l) => {\n  let min = 0;\n  let max = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      min = e;\n    }\n  });\n  return [min, max];\n};\n\n/*Return minimum element in the list.\n  >>> soapElement([1, 2, 3])\n  1\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst soapElementMinMaxMin = (l) => {\n  let min = 0;\n  let max = 0;\n  let minMax = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      min = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n  });\n  return [min, max, minMax];\n};\n\n/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElementMaxMinMax = (l) => {\n  let min = 0;\n  let max = 0;\n  let minMax = 0;\n  let maxMin = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      min = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n  });\n  return [min, max, minMax];\n};\n\n/*Return minimum element in the list.\n  >>> soapElement([1, 2, 3])\n  1\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst soapElementMinMaxMinMax = (l) => {\n  let min = 0;\n  let max = 0;\n  let minMax = 0;\n  let maxMin = 0;\n  let maxMax = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      min = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n  });\n  return [min, max, minMax, maxMin];\n};\n\n/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElementMaxMinMaxMinMax = (l) => {\n  let min = 0;\n  let max = 0;\n  let minMax = 0;\n  let maxMin = 0;\n  let maxMax = 0;\n  let maxMinMax = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      min = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax = e;\n    }\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      minMax"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit;\n  for (let i = n; i > 0; i--) {\n    digit = n % 10;\n    if (digit === 7) {\n      count++;\n    }\n    if (digit === 11 || digit === 13) {\n      count++;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is even.\n  >>> isEven(123)\n  true\n  >>> isEven(456)\n  false\n  */\nconst isEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is odd.\n  >>> isOdd(123)\n  false\n  >>> isOdd(456)\n  true\n  */\nconst isOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum % 2!== 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is divisible by 3.\n  >>> isDivisibleBy(123, 3)\n  true\n  >>> isDivisibleBy(456, 3)\n  false\n  */\nconst isDivisibleBy = (n, k) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % k;\n    n /= k;\n  }\n  return sum % 3 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is divisible by 5.\n  >>> isDivisibleBy(123, 5)\n  true\n  >>> isDivisibleBy(456, 5)\n  false\n  */\nconst isDivisibleBy = (n, k) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % k;\n    n /= k;\n  }\n  return sum % 5 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is divisible by 7.\n  >>> isDivisibleBy(123, 7)\n  true\n  >>> isDivisibleBy(456, 7)\n  false\n  */\nconst isDivisibleBy = (n, k) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % k;\n    n /= k;\n  }\n  return sum % 7 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is divisible by 9.\n  >>> isDivisibleBy(123, 9)\n  true\n  >>> isDivisibleBy(456, 9)\n  false\n  */\nconst isDivisibleBy = (n, k) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % k;\n    n /= k;\n  }\n  return sum % 9 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is divisible by 11.\n  >>> isDivisibleBy(123, 11)\n  true\n  >>> isDivisibleBy(456, 11)\n  false\n  */\nconst isDivisibleBy = (n, k) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % k;\n    n /= k;\n  }\n  return sum % 11 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is divisible by 13.\n  >>> isDivisibleBy(123, 13)\n  true\n  >>> isDivisibleBy(456, 13)\n  false\n  */\nconst isDivisibleBy = (n, k) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % k;\n    n /= k;\n  }\n  return sum % 13 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is divisible by 15.\n  >>> isDivisibleBy(123, 15)\n  true\n  >>> isDivisibleBy(456, 15)\n  false\n  */\nconst isDivisibleBy = (n, k) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % k;\n    n /= k;\n  }\n  return sum % 15 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is divisible by 17.\n  >>> isDivisibleBy(123, 17)\n  true\n  >>> isDivisibleBy(456, 17)\n  false\n  */\nconst isDivisibleBy = (n, k) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % k;\n    n /= k;\n  }\n  return sum % 17 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is divisible by 19.\n  >>> isDivisibleBy(123, 19)\n  true\n  >>> isDivisibleBy(456, 19)\n  false\n  */\nconst isDivisibleBy = (n, k) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % k;\n    n /= k;\n  }\n  return sum % 19 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is divisible by 23.\n  >>> isDivisibleBy(123, 23)\n  true\n  >>> isDivisibleBy(456, 23)\n  false\n  */\nconst isDivisibleBy = (n, k) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % k;\n    n /= k;\n  }\n  return sum % 23 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is divisible by 29.\n  >>> isDivisibleBy(123, 29)\n  true\n  >>> isDivisibleBy(456, 29)\n  false\n  */\nconst isDivisibleBy = (n, k) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % k;\n    n /= k;\n  }\n  return sum % 29 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is divisible by 31.\n  >>> isDivisibleBy(123, 31)\n  true\n  >>> isDivisibleBy(456, 31)\n  false\n  */\nconst isDivisibleBy = (n, k) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % k;\n    n /= k;\n  }\n  return sum % 31 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from n, is divisible by 35."}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortOddEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEvenOddOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOddOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortOddEvenOddOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEvenOddOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOddOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenO"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroups"}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "<|endoftext|>/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return premierFib(n-1) + premierFib(n-2);\n};\n\n/*\n  generatePrimes returns an array containing all prime numbers between 1 and n\n  >>> generatePrimes(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> generatePrimes(100)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> generatePrimes(1000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> generatePrimes(10000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> generatePrimes(1000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> generatePrimes(100000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, "}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "<|endoftext|>/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let total = 0;\n  for (let i = 0; i < l.length; i++) {\n    total += l[i];\n    if (total === 0) {\n      return false;\n    }\n  }\n  return total === 0;\n};\n\n// A function to find the greatest common divisor of two integers.\n// It returns the greatest common divisor of its two arguments.\nconst gcd = (a, b) => {\n  let gcd = 1;\n  while (a % gcd) {\n    gcd = b;\n    b = a;\n  }\n  return gcd;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst lcm = (a, b) => {\n  let lcm = 1;\n  while (a % lcm) {\n    lcm = b;\n    b = a;\n  }\n  return lcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm2 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm3 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm4 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm5 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm6 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm7 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm8 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm9 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm10 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm11 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm12 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm13 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm14 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm15 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm16 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm17 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm18 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm19 = (a, b) => {\n  let modlcm = 1;\n  while (a % modlcm) {\n    modlcm = b;\n    b = a;\n  }\n  return modlcm;\n};\n\n// A function to find the least common multiple of two integers.\n// It returns the least common multiple of its two arguments.\nconst modlcm20 = (a, b) => {\n"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    if (cars[i].isMovingRight) {\n      collisions++;\n    }\n    if (cars[i].isMovingLeft) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, this function returns the number of car objects that\n  are driving right to left.\n  */\nconst cableCarRaceRightToLeft = (car) => {\n  let collisions = 0;\n  for (let i = 0; i < car.length; i++) {\n    if (car[i].isMovingRight) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, this function returns the number of car objects that\n  are driving left to right.\n  */\nconst cableCarRaceLeftToRight = (car) => {\n  let collisions = 0;\n  for (let i = 0; i < car.length; i++) {\n    if (car[i].isMovingLeft) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, this function returns the number of car objects that\n  are driving straight.\n  */\nconst cableCarRaceStraight = (car) => {\n  let collisions = 0;\n  for (let i = 0; i < car.length; i++) {\n    if (car[i].isMovingRight) {\n      collisions++;\n    }\n    if (car[i].isMovingLeft) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, this function returns the number of car objects that\n  are driving straight and driving right to left.\n  */\nconst cableCarRaceStraightAndRightToLeft = (car) => {\n  let collisions = 0;\n  for (let i = 0; i < car.length; i++) {\n    if (car[i].isMovingRight) {\n      collisions++;\n    }\n    if (car[i].isMovingLeft) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, this function returns the number of car objects that\n  are driving straight and driving left to right.\n  */\nconst cableCarRaceStraightAndLeftToRight = (car) => {\n  let collisions = 0;\n  for (let i = 0; i < car.length; i++) {\n    if (car[i].isMovingLeft) {\n      collisions++;\n    }\n    if (car[i].isMovingRight) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, this function returns the number of car objects that\n  are driving straight and driving straight and driving right to left.\n  */\nconst cableCarRaceStraightAndStraightAndRightToLeft = (car) => {\n  let collisions = 0;\n  for (let i = 0; i < car.length; i++) {\n    if (car[i].isMovingRight) {\n      collisions++;\n    }\n    if (car[i].isMovingLeft) {\n      collisions++;\n    }\n    if (car[i].isMovingStraight) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, this function returns the number of car objects that\n  are driving straight and driving straight and driving left to right.\n  */\nconst cableCarRaceStraightAndStraightAndLeftToRight = (car) => {\n  let collisions = 0;\n  for (let i = 0; i < car.length; i++) {\n    if (car[i].isMovingLeft) {\n      collisions++;\n    }\n    if (car[i].isMovingRight) {\n      collisions++;\n    }\n    if (car[i].isMovingStraight) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, this function returns the number of car objects that\n  are driving straight and driving straight and driving straight and driving left to right.\n  */\nconst cableCarRaceStraightAndStraightAndLeftToRight = (car) => {\n  let collisions = 0;\n  for (let i = 0; i < car.length; i++) {\n    if (car[i].isMovingStraight) {\n      collisions++;\n    }\n    if (car[i].isMovingLeft) {\n      collisions++;\n    }\n    if (car[i].isMovingRight) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, this function returns the number of car objects that\n  are driving straight and driving straight and driving straight and driving straight and driving left to right.\n  */\nconst cableCarRaceStraightAndStraightAndLeftToRight = (car) => {\n  let collisions = 0;\n  for (let i = 0; i < car.length; i++) {\n    if (car[i].isMovingStraight) {\n      collisions++;\n    }\n    if (car[i].isMovingLeft) {\n      collisions++;\n    }\n    if (car[i].isMovingRight) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, this function returns the number of car objects that\n  are driving straight and driving straight and driving straight and driving straight and driving straight and driving left to right.\n  */\nconst cableCarRaceStraightAndStraightAndLeftToRight = (car) => {\n  let collisions = 0;\n  for (let i = 0; i < car.length; i++) {\n    if (car[i].isMovingStraight) {\n      collisions++;\n    }\n    if (car[i].isMovingLeft) {\n      collisions++;\n    }\n    if (car[i].isMovingRight) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, this function returns the number of car objects that\n  are driving straight and driving straight and driving straight and driving straight and driving straight and driving straight and driving left to right.\n  */\nconst cableCarRaceStraightAndStraightAndLeftToRight = (car) => {\n  let collisions = 0;\n  for (let i = 0; i < car.length; i++) {\n    if (car[i].isMovingStraight) {\n      collisions++;\n    }\n    if (car[i].isMovingLeft) {\n      collisions++;\n    }\n    if (car[i].isMovingRight) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, this function returns the number of car objects that\n  are driving straight and driving straight and driving straight and driving straight and driving straight and driving straight and driving left to right.\n  */\nconst cableCarRaceStraightAndStraightAndLeftToRight = (car) => {\n  let collisions = 0;\n  for (let i = 0; i < car.length; i++) {\n    if (car[i].isMovingStraight) {\n      collisions++;\n    }\n    if (car[i].isMovingLeft) {\n      "}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    if (l[j] <= l[i]) {\n      ret.push(l[j]);\n      j++;\n    } else {\n      ret.push(l[j]);\n      j = 0;\n      i++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    if (l[j] > l[i]) {\n      ret.push(l[j]);\n      j++;\n    } else {\n      ret.push(l[j]);\n      j = 0;\n      i--;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    if (l[j] <= l[i]) {\n      ret.push(l[j]);\n      j++;\n    } else {\n      ret.push(l[j]);\n      j = 0;\n      i++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    if (l[j] > l[i]) {\n      ret.push(l[j]);\n      j++;\n    } else {\n      ret.push(l[j]);\n      j = 0;\n      i--;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    if (l[j] <= l[i]) {\n      ret.push(l[j]);\n      j++;\n    } else {\n      ret.push(l[j]);\n      j = 0;\n      i++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    if (l[j] > l[i]) {\n      ret.push(l[j]);\n      j++;\n    } else {\n      ret.push(l[j]);\n      j = 0;\n      i--;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    if (l[j] <= l[i]) {\n      ret.push(l[j]);\n      j++;\n    } else {\n      ret.push(l[j]);\n      j = 0;\n      i++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    if (l[j] > l[i]) {\n      ret.push(l[j]);\n      j++;\n    } else {\n      ret.push(l[j]);\n      j = 0;\n      i--;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    if (l[j] <= l[i]) {\n      ret.push(l[j]);\n      j++;\n    } else {\n      ret.push(l[j]);\n      j = 0;\n      i++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    if (l[j] > l[i]) {\n      ret.push(l[j]);\n      j++;\n    } else {\n      ret.push(l[j]);\n      j = 0;\n      i--;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    if (l[j] <= l[i]) {\n      ret.push(l[j]);\n      j++;\n    } else {\n      ret.push(l[j]);\n      j = 0;\n      i++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    if (l[j] > l[i]) {\n      ret.push(l[j]);\n      j++;\n    } else {\n      ret.push(l[j]);\n      j = 0;\n      i--;\n    }\n  }\n  return ret;"}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "<|endoftext|>/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  copulateIntersectionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateIntersectionToZero([1, 3, 5, 0])\n  false\n  >>> copulateIntersectionToZero([1, 3, -2, 1])\n  false\n  >>> copulateIntersectionToZero([1, 2, 3, 7])\n  false\n  >>> copulateIntersectionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateIntersectionToZero([1])\n  false\n  */\nconst copulateIntersectionToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  copulateDifferenceToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateDifferenceToZero([1, 3, 5, 0])\n  false\n  >>> copulateDifferenceToZero([1, 3, -2, 1])\n  false\n  >>> copulateDifferenceToZero([1, 2, 3, 7])\n  false\n  >>> copulateDifferenceToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateDifferenceToZero([1])\n  false\n  */\nconst copulateDifferenceToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  copulateProductToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateProductToZero([1, 3, 5, 0])\n  false\n  >>> copulateProductToZero([1, 3, -2, 1])\n  false\n  >>> copulateProductToZero([1, 2, 3, 7])\n  false\n  >>> copulateProductToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateProductToZero([1])\n  false\n  */\nconst copulateProductToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  copulateProductToOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> copulateProductToOne([1, 3, 5, 0])\n  false\n  >>> copulateProductToOne([1, 3, -2, 1])\n  false\n  >>> copulateProductToOne([1, 2, 3, 7])\n  false\n  >>> copulateProductToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateProductToOne([1])\n  false\n  */\nconst copulateProductToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/**\n  copulateProductToTwo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to two, and false otherwise.\n  >>> copulateProductToTwo([1, 3, 5, 0])\n  false\n  >>> copulateProductToTwo([1, 3, -2, 1])\n  false\n  >>> copulateProductToTwo([1, 2, 3, 7])\n  false\n  >>> copulateProductToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateProductToTwo([1])\n  false\n  */\nconst copulateProductToTwo = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/**\n  copulateProductToThree takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to three, and false otherwise.\n  >>> copulateProductToThree([1, 3, 5, 0])\n  false\n  >>> copulateProductToThree([1, 3, -2, 1])\n  false\n  >>> copulateProductToThree([1, 2, 3, 7])\n  false\n  >>> copulateProductToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateProductToThree([1])\n  false\n  */\nconst copulateProductToThree = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/**\n  copulateProductToFour takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to four, and false otherwise.\n  >>> copulateProductToFour([1, 3, 5, 0])\n  false\n  >>> copulateProductToFour([1, 3, -2, 1])\n  false\n  >>> copulateProductToFour([1, 2, 3, 7])\n  false\n  >>> copulateProductToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateProductToFour([1])\n  false\n  */\nconst copulateProductToFour = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/**\n  copulateProductToFive takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to five, and false otherwise.\n  >>> copulateProductToFive([1, 3, 5, 0])\n  false\n  >>> copulateProductToFive([1, 3, -2, 1])\n  false\n  >>> copulateProductToFive([1, 2, 3, 7])\n  false\n  >>> copulateProductToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateProductToFive([1])\n  false\n  */\nconst copulateProductToFive = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/**\n  copulateProductToSix takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to six, and false otherwise.\n  >>> copulateProductToSix([1, 3, 5, 0])\n  false\n  >>> copulateProductToSix([1, 3, -2, 1])\n  false\n  >>> copulateProductToSix([1, 2, 3, 7])\n  false\n  >>> copulateProductToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateProductToSix([1])\n  false\n  */\nconst copulateProductToSix = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n  if (base === 10) {\n    return x.toString();\n  }\n  return x.toString(base);\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].charCodeAt(0).toString(2);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(16);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its octal representation.\n * @param {string} str\n * @return {string}\n */\nconst octal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(8);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(2);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(10);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(16);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its octal representation.\n * @param {string} str\n * @return {string}\n */\nconst octal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(8);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(2);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(10);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(16);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its octal representation.\n * @param {string} str\n * @return {string}\n */\nconst octal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(8);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(2);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(10);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(16);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its octal representation.\n * @param {string} str\n * @return {string}\n */\nconst octal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(8);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(2);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(10);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(16);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its octal representation.\n * @param {string} str\n * @return {string}\n */\nconst octal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(8);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(2);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(10);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(16);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its octal representation.\n * @param {string} str\n * @return {string}\n */\nconst octal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(8);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(2);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\nconst decimal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(10);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its hexadecimal representation.\n * @param {string} str\n * @return {string}\n */\nconst hex = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(16);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its octal representation.\n * @param {string} str\n * @return {string}\n */\nconst octal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(8);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its binary representation.\n * @param {string} str\n * @return {string}\n */\nconst binary = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(2);\n  }\n  return result;\n};\n\n/**\n * Convert a string to its decimal representation.\n * @param {string} str\n * @return {string}\n */\n"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  const area = (2 * Math.PI * h) / a;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(5, 2)\n  2.5\n  */\nconst triangulumArea = (l, w) => {\n  const area = (2 * Math.PI * w) / l;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(5, 1)\n  1.5\n  */\nconst triangulumArea = (l, h) => {\n  const area = (2 * Math.PI * h) / l;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 5)\n  3.75\n  */\nconst triangulumArea = (h, w) => {\n  const area = (2 * Math.PI * w) / h;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  3.25\n  */\nconst triangulumArea = (h, h) => {\n  const area = (2 * Math.PI * h) / h;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(3, 1)\n  1.5\n  */\nconst triangulumArea = (h, w) => {\n  const area = (2 * Math.PI * w) / h;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(3, 0)\n  0\n  */\nconst triangulumArea = (h, h) => {\n  const area = (2 * Math.PI * h) / h;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(2, 5)\n  2.5\n  */\nconst triangulumArea = (l, w) => {\n  const area = (2 * Math.PI * w) / l;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(2, 4)\n  2.5\n  */\nconst triangulumArea = (l, h) => {\n  const area = (2 * Math.PI * h) / l;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(2, 1)\n  1.5\n  */\nconst triangulumArea = (l, h) => {\n  const area = (2 * Math.PI * h) / l;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(2, 0)\n  0\n  */\nconst triangulumArea = (l, h) => {\n  const area = (2 * Math.PI * h) / l;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(1, 5)\n  7.5\n  */\nconst triangulumArea = (h, w) => {\n  const area = (2 * Math.PI * w) / h;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(1, 4)\n  7.5\n  */\nconst triangulumArea = (h, h) => {\n  const area = (2 * Math.PI * h) / h;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(1, 1)\n  1.5\n  */\nconst triangulumArea = (h, h) => {\n  const area = (2 * Math.PI * h) / h;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(1, 0)\n  0\n  */\nconst triangulumArea = (h, h) => {\n  const area = (2 * Math.PI * h) / h;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(0, 0)\n  0\n  */\nconst triangulumArea = (h, h) => {\n  const area = (2 * Math.PI * h) / h;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(0, 0)\n  0\n  */\nconst triangulumArea = (l, w) => {\n  const area = (2 * Math.PI * w) / l;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(0, 0)\n  0\n  */\nconst triangulumArea = (l, h) => {\n  const area = (2 * Math.PI * h) / l;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(1, 5)\n  7.5\n  */\nconst triangulumArea = (h, w) => {\n  const area = (2 * Math.PI * w) / h;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(1, 4)\n  7.5\n  */\nconst triangulumArea = (h, h) => {\n  const area = (2 * Math.PI * h) / h;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(1, 1)\n  1.5\n  */\nconst triangulumArea = (h, h) => {\n  const area = (2 * Math.PI * h) / h;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(1, 0)\n  0\n  */\nconst triangulumArea = (h, h) => {\n  const area = (2 * Math.PI * h) / h;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(0, 0)\n  0\n  */\nconst triangulumArea = (h, h) => {\n  const area = (2 * Math.PI * h) / h;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(0, 0)\n  0\n  */\nconst triangulumArea = (l, w) => {\n  const area = (2 * Math.PI * w) / l;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(0, 0)\n  0\n  */\nconst triangulumArea = (l, h) => {\n  const area = (2 * Math.PI * h) / l;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(1, 5)\n  7.5\n  */\nconst triangulumArea = (h, w) => {\n  const area = (2 * Math.PI * w) / h;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(1, 4)\n  7.5\n  */\nconst triangulumArea = (h, h) => {\n  const area = (2 * Math.PI * h) / h;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(1, 1)\n  1.5\n  */\nconst triangulumArea = (h, h) => {\n  const area = (2 * Math.PI * h) / h;\n  return area;\n};\n\n/*Given length"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence that satisfies the following properties:\n  fib(n) = fib(n-1) + fib(n-2).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19) + fib(n-20).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19) + fib(n-20) + fib(n-21).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19) + fib(n-20) + fib(n-21) + fib(n-22).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19) + fib(n-20) + fib(n-21) + fib(n-22) + fib(n-23).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19) + fib(n-20) + fib(n-21) + fib(n-22) + fib(n-23) + fib(n-24).\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19) + fib(n-20) + fib(n-2"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOfOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOfOfOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOfOfOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOfOfOfOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOfOfOfOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOfOfOfOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n  let j = Math.ceil(m)\n  return l[(i + j) / 2];\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOfOfOfOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = n / 2\n  let i = Math.floor(m)\n"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  let reversedTextLength = 0;\n  let reversedTextIndex = 0;\n  let reversedTextIndex2 = 0;\n  let reversedTextIndex3 = 0;\n  let reversedTextIndex4 = 0;\n  let reversedTextIndex5 = 0;\n  let reversedTextIndex6 = 0;\n  let reversedTextIndex7 = 0;\n  let reversedTextIndex8 = 0;\n  let reversedTextIndex9 = 0;\n  let reversedTextIndex10 = 0;\n  let reversedTextIndex11 = 0;\n  let reversedTextIndex12 = 0;\n  let reversedTextIndex13 = 0;\n  let reversedTextIndex14 = 0;\n  let reversedTextIndex15 = 0;\n  let reversedTextIndex16 = 0;\n  let reversedTextIndex17 = 0;\n  let reversedTextIndex18 = 0;\n  let reversedTextIndex19 = 0;\n  let reversedTextIndex20 = 0;\n  let reversedTextIndex21 = 0;\n  let reversedTextIndex22 = 0;\n  let reversedTextIndex23 = 0;\n  let reversedTextIndex24 = 0;\n  let reversedTextIndex25 = 0;\n  let reversedTextIndex26 = 0;\n  let reversedTextIndex27 = 0;\n  let reversedTextIndex28 = 0;\n  let reversedTextIndex29 = 0;\n  let reversedTextIndex30 = 0;\n  let reversedTextIndex31 = 0;\n  let reversedTextIndex32 = 0;\n  let reversedTextIndex33 = 0;\n  let reversedTextIndex34 = 0;\n  let reversedTextIndex35 = 0;\n  let reversedTextIndex36 = 0;\n  let reversedTextIndex37 = 0;\n  let reversedTextIndex38 = 0;\n  let reversedTextIndex39 = 0;\n  let reversedTextIndex40 = 0;\n  let reversedTextIndex41 = 0;\n  let reversedTextIndex42 = 0;\n  let reversedTextIndex43 = 0;\n  let reversedTextIndex44 = 0;\n  let reversedTextIndex45 = 0;\n  let reversedTextIndex46 = 0;\n  let reversedTextIndex47 = 0;\n  let reversedTextIndex48 = 0;\n  let reversedTextIndex49 = 0;\n  let reversedTextIndex50 = 0;\n  let reversedTextIndex51 = 0;\n  let reversedTextIndex52 = 0;\n  let reversedTextIndex53 = 0;\n  let reversedTextIndex54 = 0;\n  let reversedTextIndex55 = 0;\n  let reversedTextIndex56 = 0;\n  let reversedTextIndex57 = 0;\n  let reversedTextIndex58 = 0;\n  let reversedTextIndex59 = 0;\n  let reversedTextIndex60 = 0;\n  let reversedTextIndex61 = 0;\n  let reversedTextIndex62 = 0;\n  let reversedTextIndex63 = 0;\n  let reversedTextIndex64 = 0;\n  let reversedTextIndex65 = 0;\n  let reversedTextIndex66 = 0;\n  let reversedTextIndex67 = 0;\n  let reversedTextIndex68 = 0;\n  let reversedTextIndex69 = 0;\n  let reversedTextIndex70 = 0;\n  let reversedTextIndex71 = 0;\n  let reversedTextIndex72 = 0;\n  let reversedTextIndex73 = 0;\n  let reversedTextIndex74 = 0;\n  let reversedTextIndex75 = 0;\n  let reversedTextIndex76 = 0;\n  let reversedTextIndex77 = 0;\n  let reversedTextIndex78 = 0;\n  let reversedTextIndex79 = 0;\n  let reversedTextIndex80 = 0;\n  let reversedTextIndex81 = 0;\n  let reversedTextIndex82 = 0;\n  let reversedTextIndex83 = 0;\n  let reversedTextIndex84 = 0;\n  let reversedTextIndex85 = 0;\n  let reversedTextIndex86 = 0;\n  let reversedTextIndex87 = 0;\n  let reversedTextIndex88 = 0;\n  let reversedTextIndex89 = 0;\n  let reversedTextIndex90 = 0;\n  let reversedTextIndex91 = 0;\n  let reversedTextIndex92 = 0;\n  let reversedTextIndex93 = 0;\n  let reversedTextIndex94 = 0;\n  let reversedTextIndex95 = 0;\n  let reversedTextIndex96 = 0;\n  let reversedTextIndex97 = 0;\n  let reversedTextIndex98 = 0;\n  let reversedTextIndex99 = 0;\n  let reversedTextIndex100 = 0;\n  let reversedTextIndex101 = 0;\n  let reversedTextIndex102 = 0;\n  let reversedTextIndex103 = 0;\n  let reversedTextIndex104 = 0;\n  let reversedTextIndex105 = 0;\n  let reversedTextIndex106 = 0;\n  let reversedTextIndex107 = 0;\n  let reversedTextIndex108 = 0;\n  let reversedTextIndex109 = 0;\n  let reversedTextIndex110 = 0;\n  let reversedTextIndex111 = 0;\n  let reversedTextIndex112 = 0;\n  let reversedTextIndex113 = 0;\n  let reversedTextIndex114 = 0;\n  let reversedTextIndex115 = 0;\n  let reversedTextIndex116 = 0;\n  let reversedTextIndex117 = 0;\n  let reversedTextIndex118 = 0;\n  let reversedTextIndex119 = 0;\n  let reversedTextIndex120 = 0;\n  let reversedTextIndex121 = 0;\n  let reversedTextIndex122 = 0;\n  let reversedTextIndex123 = 0;\n  let reversedTextIndex124 = 0;\n  let reversedTextIndex125 = 0;\n  let reversedTextIndex126 = 0;\n  let reversedTextIndex127 = 0;\n  let reversedTextIndex128 = 0;\n  let reversedTextIndex129 = 0;\n  let reversedTextIndex130 = 0;\n  let reversedTextIndex131 = 0;\n  let reversedTextIndex132 = 0;\n  let reversedTextIndex133 = 0;\n  let reversedTextIndex134 = 0;\n  let reversedTextIndex135 = 0;\n  let reversedTextIndex136 = 0;\n  let reversedTextIndex137 = 0;\n  let reversedTextIndex138 = 0;\n  let reversedTextIndex139 = 0;\n  let reversedTextIndex140 = 0;\n  let reversedTextIndex141 = 0;\n  let reversedTextIndex142 = 0;\n  let reversedTextIndex143 = 0;\n  let reversedTextIndex144 = 0;\n  let reversedTextIndex145 = 0;\n  let reversedTextIndex146 = 0;\n  let reversedTextIndex147 = 0;\n  let reversedTextIndex148 = 0;\n  let reversedTextIndex149 = 0;\n  let reversedTextIndex150 = 0;\n  let reversedTextIndex151 = 0;\n  let reversedTextIndex152 = 0;\n  let reversedTextIndex153 = 0;\n  let reversedTextIndex154 = 0;\n  let reversedTextIndex155 = 0;\n  let reversedTextIndex156 = 0;\n  let reversedTextIndex157 = 0;\n  let reversedTextIndex158 = 0;\n  let reversedTextIndex159 = 0;\n  let reversedTextIndex160 = 0;\n  let reversedTextIndex161 = 0;\n  let reversedTextIndex162 = 0;\n  let reversedTextIndex163 = 0;\n  let reversedTextIndex164 = 0;\n  let reversedTextIndex165 = 0;\n  let reversedTextIndex166 = 0;\n  let reversedTextIndex167 = 0;\n  let reversedTextIndex168 = 0;\n  let reversedTextIndex169 = 0;\n  let reversedTextIndex170 = 0;\n  let reversedTextIndex171 = 0;\n  let reversedTextIndex172 = 0;\n  let reversedTextIndex173 = 0;\n  let reversedTextIndex174 = 0;\n  let reversedTextIndex175 = 0;\n  let reversedTextIndex176 = 0;\n  let reversedTextIndex177 = 0;\n  let reversedTextIndex178 = 0;\n  let reversedTextIndex179 = 0;\n  let reversedTextIndex180 = 0;\n  let reversedTextIndex181 = 0;\n"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let r = 1;\n  for (let i = n; i > 0; i--) {\n    r = r % p;\n  }\n  return r;\n};\n\n/*\n  >>> modp(-3, 5)\n  -1\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  -2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modn = (n, p) => {\n  let r = 1;\n  for (let i = n; i > 0; i--) {\n    r = r % p;\n  }\n  return r;\n};\n\n/*\n  >>> modn(3, 5)\n  -1\n  >>> modn(1101, 101)\n  -2\n  >>> modn(0, 101)\n  1\n  >>> modn(3, 11)\n  8\n  >>> modn(100, 101)\n  1\n  */\nconst modd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  1\n  >>> modd(3, 11)\n  8\n  >>> modd(100, 101)\n  1\n  */\nconst modnd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  1\n  >>> modd(3, 11)\n  8\n  >>> modd(100, 101)\n  1\n  */\nconst modd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  1\n  >>> modd(3, 11)\n  8\n  >>> modd(100, 101)\n  1\n  */\nconst modnd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  1\n  >>> modd(3, 11)\n  8\n  >>> modd(100, 101)\n  1\n  */\nconst modd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  1\n  >>> modd(3, 11)\n  8\n  >>> modd(100, 101)\n  1\n  */\nconst modnd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  1\n  >>> modd(3, 11)\n  8\n  >>> modd(100, 101)\n  1\n  */\nconst modd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  1\n  >>> modd(3, 11)\n  8\n  >>> modd(100, 101)\n  1\n  */\nconst modnd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  1\n  >>> modd(3, 11)\n  8\n  >>> modd(100, 101)\n  1\n  */\nconst modd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  1\n  >>> modd(3, 11)\n  8\n  >>> modd(100, 101)\n  1\n  */\nconst modnd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  1\n  >>> modd(3, 11)\n  8\n  >>> modd(100, 101)\n  1\n  */\nconst modd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  1\n  >>> modd(3, 11)\n  8\n  >>> modd(100, 101)\n  1\n  */\nconst modnd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  1\n  >>> modd(3, 11)\n  8\n  >>> modd(100, 101)\n  1\n  */\nconst modd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  1\n  >>> modd(3, 11)\n  8\n  >>> modd(100, 101)\n  1\n  */\nconst modnd = (m, n) => {\n  let r = 1;\n  for (let i = m; i > 0; i--) {\n    r = r % n;\n  }\n  return r;\n};\n\n/*\n  >>> modd(3, 5)\n  -1\n  >>> modd(1101, 101)\n  -2\n  >>> modd(0, 101)\n  "}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBytes = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBytes function. Returns decoded string.\n  */\nconst decodeToBytes = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToHex = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToHex function. Returns decoded string.\n  */\nconst decodeToHex = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64 = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64 function. Returns decoded string.\n  */\nconst decodeToBase64 = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafe = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafe = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64 = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64 = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafe = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafe = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64 = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64 = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafe"}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "<|endoftext|>/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n  let rid = \"\";\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsLength = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsLengthIndex = 0;\n  let vowelsIndex2 = 0;\n  let vowelsLengthIndex2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsLengthIndex3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsLengthIndex4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsLengthIndex5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsLengthIndex6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsLengthIndex7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsLengthIndex8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsLengthIndex9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsLengthIndex10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsLengthIndex11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsLengthIndex12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsLengthIndex13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsLengthIndex14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsLengthIndex15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsLengthIndex16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsLengthIndex17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsLengthIndex18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsLengthIndex19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsLengthIndex20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsLengthIndex21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsLengthIndex22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsLengthIndex23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsLengthIndex24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsLengthIndex25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsLengthIndex26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsLengthIndex27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsLengthIndex28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsLengthIndex29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsLengthIndex30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsLengthIndex31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsLengthIndex32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsLengthIndex33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsLengthIndex34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsLengthIndex35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsLengthIndex36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsLengthIndex37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsLengthIndex38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsLengthIndex39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsLengthIndex40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsLengthIndex41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsLengthIndex42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsLengthIndex43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsLengthIndex44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsLengthIndex45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsLengthIndex46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsLengthIndex47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsLengthIndex48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsLengthIndex49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsLengthIndex50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsLengthIndex51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsLengthIndex52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsLengthIndex53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsLengthIndex54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsLengthIndex55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsLengthIndex56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsLengthIndex57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsLengthIndex58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsLengthIndex59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsLengthIndex60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsLengthIndex61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsLengthIndex62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsLengthIndex63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsLengthIndex64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsLengthIndex65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsLengthIndex66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsLengthIndex67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsLengthIndex68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsLengthIndex69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsLengthIndex70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsLengthIndex71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsLengthIndex72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsLengthIndex73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsLengthIndex74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsLengthIndex75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsLengthIndex76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsLengthIndex77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsLengthIndex78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsLengthIndex79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsLengthIndex80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsLengthIndex81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsLengthIndex82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsLengthIndex83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsLengthIndex84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsLengthIndex85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsLengthIndex86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsLengthIndex87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsLengthIndex88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsLengthIndex89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsLengthIndex90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsLengthIndex91 = 0;\n  let vowelsIndex92 = 0;\n  let vowel"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveDoorway([1, 2, 4, 10], 100)\n  true\n  >>> aboveDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveDoorway = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/*Return true if all numbers in the list l are equal to t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n === t[i]);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisible([2, 4, 6, 8], 2)\n  true\n  >>> divisible([2, 4, 6, 8], 4)\n  false\n  */\nconst divisible = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([2, 4, 6, 8], 2)\n  true\n  >>> multiple([2, 4, 6, 8], 4)\n  false\n  */\nconst multiple = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multiple([2, 4, 6, 8], 2)\n  true\n  >>> multiple([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\nconst multipleOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are a multiple of t.\n  >>> multipleOf([2, 4, 6, 8], 2)\n  true\n  >>> multipleOf([2, 4, 6, 8], 4)\n  false\n  */\n"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$1 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$2 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$3 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$4 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$5 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$6 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$7 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$8 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$9 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$10 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$11 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$12 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$13 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$14 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$15 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$16 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$17 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }\n  return 0\n}\n\n/*\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend$18 = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0) {\n    return 1\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x > y) {\n    return -1\n  }"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  let i0 = s0.length;\n  let i1 = s1.length;\n  let i01 = i0 + i1;\n  let i02 = i01 + i1;\n  let i03 = i02 + i1;\n  let i04 = i03 + i1;\n  let i05 = i04 + i1;\n  let i06 = i05 + i1;\n  let i07 = i06 + i1;\n  let i08 = i07 + i1;\n  let i09 = i08 + i1;\n  let i10 = i09 + i1;\n  let i11 = i10 + i1;\n  let i12 = i11 + i1;\n  let i13 = i12 + i1;\n  let i14 = i13 + i1;\n  let i15 = i14 + i1;\n  let i16 = i15 + i1;\n  let i17 = i16 + i1;\n  let i18 = i17 + i1;\n  let i19 = i18 + i1;\n  let i20 = i19 + i1;\n  let i21 = i20 + i1;\n  let i22 = i21 + i1;\n  let i23 = i22 + i1;\n  let i24 = i23 + i1;\n  let i25 = i24 + i1;\n  let i26 = i25 + i1;\n  let i27 = i26 + i1;\n  let i28 = i27 + i1;\n  let i29 = i28 + i1;\n  let i30 = i29 + i1;\n  let i31 = i30 + i1;\n  let i32 = i31 + i1;\n  let i33 = i32 + i1;\n  let i34 = i33 + i1;\n  let i35 = i34 + i1;\n  let i36 = i35 + i1;\n  let i37 = i36 + i1;\n  let i38 = i37 + i1;\n  let i39 = i38 + i1;\n  let i40 = i39 + i1;\n  let i41 = i40 + i1;\n  let i42 = i41 + i1;\n  let i43 = i42 + i1;\n  let i44 = i43 + i1;\n  let i45 = i44 + i1;\n  let i46 = i45 + i1;\n  let i47 = i46 + i1;\n  let i48 = i47 + i1;\n  let i49 = i48 + i1;\n  let i50 = i49 + i1;\n  let i51 = i50 + i1;\n  let i52 = i51 + i1;\n  let i53 = i52 + i1;\n  let i54 = i53 + i1;\n  let i55 = i54 + i1;\n  let i56 = i55 + i1;\n  let i57 = i56 + i1;\n  let i58 = i57 + i1;\n  let i59 = i58 + i1;\n  let i60 = i59 + i1;\n  let i61 = i60 + i1;\n  let i62 = i61 + i1;\n  let i63 = i62 + i1;\n  let i64 = i63 + i1;\n  let i65 = i64 + i1;\n  let i66 = i65 + i1;\n  let i67 = i66 + i1;\n  let i68 = i67 + i1;\n  let i69 = i68 + i1;\n  let i70 = i69 + i1;\n  let i71 = i70 + i1;\n  let i72 = i71 + i1;\n  let i73 = i72 + i1;\n  let i74 = i73 + i1;\n  let i75 = i74 + i1;\n  let i76 = i75 + i1;\n  let i77 = i76 + i1;\n  let i78 = i77 + i1;\n  let i79 = i78 + i1;\n  let i80 = i79 + i1;\n  let i81 = i80 + i1;\n  let i82 = i81 + i1;\n  let i83 = i82 + i1;\n  let i84 = i83 + i1;\n  let i85 = i84 + i1;\n  let i86 = i85 + i1;\n  let i87 = i86 + i1;\n  let i88 = i87 + i1;\n  let i89 = i88 + i1;\n  let i90 = i89 + i1;\n  let i91 = i90 + i1;\n  let i92 = i91 + i1;\n  let i93 = i92 + i1;\n  let i94 = i93 + i1;\n  let i95 = i94 + i1;\n  let i96 = i95 + i1;\n  let i97 = i96 + i1;\n  let i98 = i97 + i1;\n  let i99 = i98 + i1;\n  let i100 = i99 + i1;\n  let i101 = i100 + i1;\n  let i102 = i101 + i1;\n  let i103 = i102 + i1;\n  let i104 = i103 + i1;\n  let i105 = i104 + i1;\n  let i106 = i105 + i1;\n  let i107 = i106 + i1;\n  let i108 = i107 + i1;\n  let i109 = i108 + i1;\n  let i110 = i109 + i1;\n  let i111 = i110 + i1;\n  let i112 = i111 + i1;\n  let i113 = i112 + i1;\n  let i114 = i113 + i1;\n  let i115 = i114 + i1;\n  let i116 = i115 + i1;\n  let i117 = i116 + i1;\n  let i118 = i117 + i1;\n  let i119 = i118 + i1;\n  let i120 = i119 + i1;\n  let i121 = i120 + i1;\n  let i122 = i121 + i1;\n  let i123 = i122 + i1;\n  let i124 = i123 + i1;\n  let i125 = i124 + i1;\n  let i126 = i125 + i1;\n  let i127 = i126 + i1;\n  let i128 = i127 + i1;\n  let i129 = i128 + i1;\n  let i130 = i129 + i1;\n  let i131 = i130 + i1;\n  let i132 = i131 + i1;\n  let i133 = i132 + i1;\n  let i134 = i133 + i1;\n  let i135 = i134 + i1;\n  let i136 = i135 + i1;\n  let i137 = i136 + i1;\n  let i138 = i137 + i1;\n  let i139 = i138 + i1;\n  let i140 = i139 + i1;\n  let i141 = i140 + i"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  Return n-th Fibonacci number in reverse order.\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  */\nconst reverseFib = (n) => {\n  if (n <= 1) return 1;\n  return reverseFib(n-1) + reverseFib(n-2);\n};\n\n/*\n  Return n-th Fibonacci number in reverse order in reverse order.\n  >>> reverseFib(10)\n  55\n  >>> reverseFib(8)\n  21\n  */\nconst reverseReverseFib = (n) => {\n  if (n <= 1) return 1;\n  return reverseReverseFib(n-1) + reverseReverseFib(n-2);\n};\n\n/*\n  Return n-th Fibonacci number in reverse order in reverse order in reverse order.\n  >>> reverseReverseFib(10)\n  55\n  >>> reverseReverseFib(8)\n  21\n  */\nconst reverseReverseReverseReverseFib = (n) => {\n  if (n <= 1) return 1;\n  return reverseReverseReverseFib(n-1) + reverseReverseReverseFib(n-2);\n};\n\n/*\n  Return n-th Fibonacci number in reverse order in reverse order in reverse order in reverse order.\n  >>> reverseReverseReverseReverseFib(10)\n  55\n  >>> reverseReverseReverseReverseFib(8)\n  21\n  */\nconst reverseReverseReverseReverseReverseReverseFib = (n) => {\n  if (n <= 1) return 1;\n  return reverseReverseReverseReverseReverseFib(n-1) + reverseReverseReverseReverseReverseFib(n-2);\n};\n\n/*\n  Return n-th Fibonacci number in reverse order in reverse order in reverse order in reverse order in reverse order.\n  >>> reverseReverseReverseReverseReverseReverseReverseFib(10)\n  55\n  >>> reverseReverseReverseReverseReverseReverseReverseFib(8)\n  21\n  */\nconst reverseReverseReverseReverseReverseReverseReverseReverseFib = (n) => {\n  if (n <= 1) return 1;\n  return reverseReverseReverseReverseReverseReverseFib(n-1) + reverseReverseReverseReverseReverseReverseFib(n-2);\n};\n\n/*\n  Return n-th Fibonacci number in reverse order in reverse order in reverse order in reverse order in reverse order in reverse order.\n  >>> reverseReverseReverseReverseReverseReverseReverseReverseReverseReverseFib(10)\n  55\n  >>> reverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseFib(8)\n  21\n  */\nconst reverseReverseReverseReverseReverseReverseReverseReverseReverseReverseFib = (n) => {\n  if (n <= 1) return 1;\n  return reverseReverseReverseReverseReverseReverseReverseReverseFib(n-1) + reverseReverseReverseReverseReverseReverseReverseReverseReverseFib(n-2);\n};\n\n/*\n  Return n-th Fibonacci number in reverse order in reverse order in reverse order in reverse order in reverse order in reverse order in reverse order.\n  >>> reverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"<\");\n  const closingBrackets = brackets.split(\">\");\n  return openingBrackets.every((openingBracket) => closingBrackets.includes(openingBracket));\n};\n\n/**\n  Returns true if the given string is a valid HTML tag.\n\n  >>> isValidHTML(\"<a>\")\n  true\n  >>> isValidHTML(\"<a b='c'>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>\")\n  true\n  >>> isValidHTML(\"<a b='c'></a><d></a><e></a><f></a><g></a><h>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "<|endoftext|>/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return a new array with the elements in the array in sorted order.\n  >>> sortedIndex([4, 1, 5, 2, 3], 0)\n  [1, 3, 2]\n  >>> sortedIndex([4, 1, 5, 2, 3], 1)\n  [2, 3, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 2)\n  [3, 1, 2]\n  >>> sortedIndex([4, 1, 5, 2, 3], 3)\n  [3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 4)\n  [4, 1, 2, 3]\n  >>> sortedIndex([4, 1, 5, 2, 3], 5)\n  [5, 1, 2, 3, 4]\n  >>> sortedIndex([4, 1, 5, 2, 3], 6)\n  [6, 5, 4, 3, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 7)\n  [7, 5, 4, 3, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 8)\n  [8, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 9)\n  [9, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 10)\n  [10, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 11)\n  [11, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 12)\n  [12, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 13)\n  [13, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 14)\n  [14, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 15)\n  [15, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 16)\n  [16, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 17)\n  [17, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 18)\n  [18, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 19)\n  [19, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 20)\n  [20, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 21)\n  [21, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 22)\n  [22, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 23)\n  [23, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 24)\n  [24, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 25)\n  [25, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 26)\n  [26, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 27)\n  [27, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 28)\n  [28, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 29)\n  [29, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 30)\n  [30, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 31)\n  [31, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 32)\n  [32, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 33)\n  [33, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 34)\n  [34, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 35)\n  [35, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 36)\n  [36, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 37)\n  [37, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 38)\n  [38, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 39)\n  [39, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 40)\n  [40, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 41)\n  [41, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 42)\n  [42, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 43)\n  [43, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 44)\n  [44, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 45)\n  [45, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 46)\n  [46, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 47)\n  [47, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 48)\n  [48, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 49)\n  [49, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 50)\n  [50, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 51)\n  [51, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 52)\n  [52, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 53)\n  [53, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 54)\n  [54, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 55)\n  [55, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 56)\n  [56, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 57)\n  [57, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 58)\n  [58, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 59)\n  [59, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 60)\n  [60, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 61)\n  [61, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 62)\n  [62, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 63)\n  [63, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 64)\n  [64, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 65)\n  [65, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 66)\n  [66, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 67)\n  [67, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 68)\n  [68, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 69)\n  [69, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 70)\n  [70, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 71)\n  [71, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 72)\n  [72, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 73)\n  [73, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 74)\n  [74, 4, 3, 2, 1]\n  >>> sortedIndex([4, 1, 5, 2, 3], 75)\n  [75, 4, 3, 2, 1]\n  "}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "<|endoftext|>/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  let n = l1.length\n  let m = l2.length\n  let result = []\n  let i\n  let j\n  let k\n  let i1\n  let i2\n  let i3\n  let i4\n  let i5\n  let i6\n  let i7\n  let i8\n  let i9\n  let i10\n  let i11\n  let i12\n  let i13\n  let i14\n  let i15\n  let i16\n  let i17\n  let i18\n  let i19\n  let i20\n  let i21\n  let i22\n  let i23\n  let i24\n  let i25\n  let i26\n  let i27\n  let i28\n  let i29\n  let i30\n  let i31\n  let i32\n  let i33\n  let i34\n  let i35\n  let i36\n  let i37\n  let i38\n  let i39\n  let i40\n  let i41\n  let i42\n  let i43\n  let i44\n  let i45\n  let i46\n  let i47\n  let i48\n  let i49\n  let i50\n  let i51\n  let i52\n  let i53\n  let i54\n  let i55\n  let i56\n  let i57\n  let i58\n  let i59\n  let i60\n  let i61\n  let i62\n  let i63\n  let i64\n  let i65\n  let i66\n  let i67\n  let i68\n  let i69\n  let i70\n  let i71\n  let i72\n  let i73\n  let i74\n  let i75\n  let i76\n  let i77\n  let i78\n  let i79\n  let i80\n  let i81\n  let i82\n  let i83\n  let i84\n  let i85\n  let i86\n  let i87\n  let i88\n  let i89\n  let i90\n  let i91\n  let i92\n  let i93\n  let i94\n  let i95\n  let i96\n  let i97\n  let i98\n  let i99\n  let i100\n  let i101\n  let i102\n  let i103\n  let i104\n  let i105\n  let i106\n  let i107\n  let i108\n  let i109\n  let i110\n  let i111\n  let i112\n  let i113\n  let i114\n  let i115\n  let i116\n  let i117\n  let i118\n  let i119\n  let i120\n  let i121\n  let i122\n  let i123\n  let i124\n  let i125\n  let i126\n  let i127\n  let i128\n  let i129\n  let i130\n  let i131\n  let i132\n  let i133\n  let i134\n  let i135\n  let i136\n  let i137\n  let i138\n  let i139\n  let i140\n  let i141\n  let i142\n  let i143\n  let i144\n  let i145\n  let i146\n  let i147\n  let i148\n  let i149\n  let i150\n  let i151\n  let i152\n  let i153\n  let i154\n  let i155\n  let i156\n  let i157\n  let i158\n  let i159\n  let i160\n  let i161\n  let i162\n  let i163\n  let i164\n  let i165\n  let i166\n  let i167\n  let i168\n  let i169\n  let i170\n  let i171\n  let i172\n  let i173\n  let i174\n  let i175\n  let i176\n  let i177\n  let i178\n  let i179\n  let i180\n  let i181\n  let i182\n  let i183\n  let i184\n  let i185\n  let i186\n  let i187\n  let i188\n  let i189\n  let i190\n  let i191\n  let i192\n  let i193\n  let i194\n  let i195\n  let i196\n  let i197\n  let i198\n  let i199\n  let i200\n  let i201\n  let i202\n  let i203\n  let i204\n  let i205\n  let i206\n  let i207\n  let i208\n  let i209\n  let i210\n  let i211\n  let i212\n  let i213\n  let i214\n  let i215\n  let i216\n  let i217\n  let i218\n  let i219\n  let i220\n  let i221\n  let i222\n  let i223\n  let i224\n  let i225\n  let i226\n  let i227\n  let i228\n  let i229\n  let i230\n  let i231\n  let i232\n  let i233\n  let i234\n  let i235\n  let i236\n  let i237\n  let i238\n  let i239\n  let i240\n  let i241\n  let i242\n  let i243\n  let i244\n  let i245\n  let i246\n  let i247\n  let i248\n  let i249\n  let i250\n  let i251\n  let i252\n  let i253\n  let i254\n  let i255\n  let i256\n  let i257\n  let i258\n  let i259\n  let i260\n  let i261\n  let i262\n  let i263\n  let i264\n  let i265\n  let i266\n  let i267\n  let i268\n  let i269\n  let i270\n  let i271\n  let i272\n  let i273\n  let i274\n  let i275\n  let i276\n  let i277\n  let i278\n  let i279\n  let i280\n  let i281\n  let i282\n  let i283\n  let i284\n  let i285\n  let i286\n  let i287\n  let i288\n  let i289\n  let i290\n  let i291\n  let i292\n  let i293\n  let i294\n  let i295\n  let i296\n  let i297\n  let i298\n  let i299\n  let i300\n  let i301\n  let i302\n  let i303\n  let i304\n  let i305\n  let i306\n  let i307\n  let i308\n  let i309\n  let i310\n  let i311\n  let i312\n  let i313\n  let i314\n  let i315\n  let i316\n  let i317\n  let i318\n  let i319\n  let i320\n  let i321\n  let i322\n  let i323\n  let i324\n  let i325\n  let i326\n  let i327\n  let i328\n  let i329\n  let i330\n  let i331\n  let i332\n  let i333\n  let i334\n  let i335\n  let i336\n  let i337\n  let i338\n  let i339\n  let i340\n  let i341\n  let i342\n  let i343\n  let i344\n  let i345\n  let i346\n  let i347\n  let i"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      primeFactor = i;\n      break;\n    }\n    i++;\n    n = n / i;\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigFactor(13195)\n  29\n  >>> bigFactor(2048)\n  2\n  */\nconst bigFactor = (n) => {\n  let "}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "<|endoftext|>/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3\"\n */\nconst countOccurrences = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultiple = (arr, n) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultipleWithZero = (arr, n) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      count += 0;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultipleWithZeroAndOne = (arr, n) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultipleWithZeroAndOneAndTwo = (arr, n) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      count += 2;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultipleWithZeroAndOneAndTwoAndThree = (arr, n) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      count += 3;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultipleWithZeroAndOneAndTwoAndThreeAndFour = (arr, n) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      count += 4;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultipleWithZeroAndOneAndTwoAndThreeAndFourAndFive = (arr, n) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      count += 5;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultipleWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix = (arr, n) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      count += 6;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultipleWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven = (arr, n) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      count += 7;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultipleWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight = (arr, n) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      count += 8;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultipleWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine = (arr, n) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      count += 9;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultipleWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen = (arr, n) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      count += 10;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultipleWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndEleven = (arr, n) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      count += 11;\n    }\n  }\n  return count;\n};\n\n/**\n * A function that takes an array and returns a string of the number\n * of occurrences of each number in the array that is a multiple of n.\n * e.g. [1,2,2,2,3,3,3] -> \"1 2 3 2 3 4 5\"\n */\nconst countOccurrencesMultipleWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAnd"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/[^(]+/g);\n  const closingBrackets = brackets.match(/[^)]+/g);\n  return openingBrackets.every(opening => closingBrackets.every(closing => opening === closing));\n};\n\n/**\n * Determines if a pair of brackets is a valid pair of parentheses.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing brackets.\n *\n * A pair of brackets is a pair of parentheses if they have the same number of\n * opening brackets and the same number of closing bracket"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return res;\n};\n\n/**\n * Calculate a polynomial root\n * x^2 + x + 1\n * >>> roots([3, 1, 2, 4, 5])\n * [3, 1]\n * >>> roots([1, 2, 3])\n * []\n */\nconst roots = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return [res];\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst coefficient = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return res;\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficient = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return res;\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficients = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return res;\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficientsPow = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return Math.pow(res, 2);\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficientsPow2 = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return Math.pow(res, 3);\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficientsPow3 = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return Math.pow(res, 4);\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficientsPow4 = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return Math.pow(res, 5);\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficientsPow5 = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return Math.pow(res, 6);\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficientsPow6 = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return Math.pow(res, 7);\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficientsPow7 = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return Math.pow(res, 8);\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficientsPow8 = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return Math.pow(res, 9);\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficientsPow9 = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return Math.pow(res, 10);\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficientsPow10 = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return Math.pow(res, 11);\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficientsPow11 = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return Math.pow(res, 12);\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficientsPow12 = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += xs[i] * xs[i - 1];\n  }\n  return Math.pow(res, 13);\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^2 + x + 1\n * >>> coefficient([3, 1, 2, 4, 5])\n * 3\n * >>> coefficient([1, 2, 3])\n * 1\n */\nconst rootCoefficientsPow13 = (xs) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 1; i < n"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 0) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using the memoization technique.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfibMemo = (n) => {\n  if (n <= 0) return 0;\n  return fibfibMemo(n-1) + fibfibMemo(n-2) + fibfibMemo(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using the memoization technique.\n  >>> fibfibMemo(1)\n  0\n  >>> fibfibMemo(5)\n  4\n  >>> fibfibMemo(8)\n  24\n  */\nconst fibfibMemoMemo = (n) => {\n  if (n <= 0) return 0;\n  return fibfibMemoMemo(n-1) + fibfibMemoMemo(n-2) + fibfibMemoMemo(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using the memoization technique.\n  >>> fibfibMemoMemoMemo(1)\n  0\n  >>> fibfibMemoMemoMemo(5)\n  4\n  >>> fibfibMemoMemoMemo(8)\n  24\n  */\nconst fibfibMemoMemoMemo = (n) => {\n  if (n <= 0) return 0;\n  return fibfibMemoMemoMemo(n-1) + fibfibMemoMemoMemo(n-2) + fibfibMemoMemoMemo(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using the memoization technique.\n  >>> fibfibMemoMemoMemo(1)\n  0\n  >>> fibfibMemoMemoMemo(5)\n  4\n  >>> fibfibMemoMemoMemo(8)\n  24\n  */\nconst fibfibMemoMemoMemoMemo = (n) => {\n  if (n <= 0) return 0;\n  return fibfibMemoMemoMemoMemo(n-1) + fibfibMemoMemoMemo(n-2) + fibfibMemoMemoMemo(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using the memoization technique.\n  >>> fibfibMemoMemoMemo(1)\n  0\n  >>> fibfibMemoMemoMemoMemo(5)\n  4\n  >>> fibfibMemoMemoMemoMemo(8)\n  24\n  */\nconst fibfibMemoMemoMemoMemo = (n) => {\n  if (n <= 0) return 0;\n  return fibfibMemoMemoMemoMemo(n-1) + fibfibMemoMemoMemo(n-2) + fibfibMemoMemoMemoMemo(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using the memoization technique.\n  >>> fibfibMemoMemoMemo(1)\n  0\n  >>> fibfibMemoMemoMemo(5)\n  4\n  >>> fibfibMemoMemoMemoMemo(8)\n  24\n  */\nconst fibfibMemoMemoMemoMemoMemo = (n) => {\n  if (n <= 0) return 0;\n  return fibfibMemoMemoMemoMemoMemo(n-1) + fibfibMemoMemoMemoMemo(n-2) + fibfibMemoMemoMemoMemo(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using the memoization technique.\n  >>> fibfibMemoMemoMemoMemo(1)\n  0\n  >>> fibfibMemoMemoMemoMemoMemo(5)\n  4\n  >>> fibfibMemoMemoMemoMemoMemo(8)\n  24\n  */\nconst fibfibMemoMemoMemoMemoMemo = (n) => {\n  if (n <= 0) return 0;\n  return fibfibMemoMemoMemoMemoMemo(n-1) + fibfibMemoMemoMemoMemo(n-2) + fibfibMemoMemoMemoMemoMemo(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using the memoization technique.\n  >>> fibfibMemoMemoMemoMemo(1)\n  0\n  >>> fibfibMemoMemoMemoMemo(5)\n  4\n  >>> fibfibMemoMemoMemoMemoMemo(8)\n  24\n  */\nconst fibfibMemoMemoMemoMemoMemoMemo = (n) => {\n  if (n <= 0) return 0;\n  return fibfibMemoMemoMemoMemoMemo(n-1) + fibfibMemoMemoMemoMemo(n-2) + fibfibMemoMemoMemoMemo(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using the memoization technique.\n  >>> fibfibMemoMemoMemoMemoMemo(1)\n  0\n  >>> fibfibMemoMemoMemoMemoMemo(5)\n  4\n  >>> fibfibMemoMemoMemoMemoMemo(8)\n  24\n  */\nconst fibfibMemoMemoMemoMemoMemoMemo = (n) => {\n  if (n <= 0) return 0;\n  return fibfibMemoMemoMemoMemoMemo(n-1) + fibfibMemoMemoMemoMemoMemo(n-2) + fibfibMemoMemoMemoMemoMemoMemo(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using the memoization technique.\n  >>> fibfibMemoMemoMemoMemoMemo(1)\n  0\n  >>> fibfibMemoMemoMemoMemoMemo(5)\n  4\n  >>> fibfibMemoMemoMemoMemoMemo(8)\n  24\n  */\nconst fibfibMemoMemoMemoMemoMemoMemoMemo = (n) => {\n  if (n <= 0) return 0;\n  return fibfibMemoMemoMemoMemoMemoMemo(n-1) + fibfibMemoMemoMemoMemoMemo(n-2) + fibfibMemoMemoMemoMemoMemoMemo(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using the memoization technique.\n  >>> fibfibMemoMemoMemoMemoMemoMemo(1)\n  0\n  >>> fibfibMemoMemoMemoMemoMemoMemo(5)\n  4\n  >>> fibfibMemoMemoMemoMemoMemo(8)\n  24\n  */\nconst fibfibMemoMemoMemoMemoMemoMemoMemo = (n) => {\n  if (n <= 0) return 0;\n  return fibfibMemoMemoMemoMemoMemoMemo(n-1) + fibfibMemoMemoMemoMemoMemo(n-2) + fibfibMemoMemoMemoMemoMemoMemo(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using the memoization technique.\n  >>> fibfibMemoMemoMemoMemoMemoMemo(1)\n  0\n  >>> fibfibMemoMemoMemoMemoMemoMemo(5)\n  4\n  >>> fibfibMemoMemoMemoMemoMemoMemo(8)\n  24\n  */\nconst fibfib"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "<|endoftext|>/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  let vowels = 0;\n  let vowelsEnd = 0;\n  let vowelsStart = 0;\n  let vowelsEndStart = 0;\n  let vowelsStartEnd = 0;\n  let vowelsEndEnd = 0;\n  let vowelsEndStartEnd = 0;\n  let vowelsEndEndEnd = 0;\n  let vowelsEndStartEndEnd = 0;\n  let vowelsEndEndEndEnd = 0;\n  let vowelsEndEndEndEnd = 0;\n  let vowelsEndEndEndEnd = 0;\n  let vowelsEndEndEndEnd = 0;\n  let vowelsEndEndEndEnd = 0;\n  let vowelsEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0;\n  let vowelsEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  let digits = x.toString(10).split('');\n  let reversed = digits.reverse();\n  let result = '';\n  while (digits.length >= shift) {\n    result += reversed.shift();\n  }\n  return reversed.join('');\n};\n\n/**\n  Round the value of x to the nearest multiple of n.\n  >>> roundUp(123)\n  123\n  >>> roundUp(1234)\n  1234\n  >>> roundUp(12345)\n  12345\n  >>> roundUp(123456)\n  123456\n  >>> roundUp(1234567)\n  1234567\n  >>> roundUp(12345678)\n  12345678\n  >>> roundUp(123456789)\n  123456789\n  >>> roundUp(1234567890)\n  1234567890\n  >>> roundUp(1234567891)\n  1234567891\n  >>> roundUp(12345678910)\n  12345678910\n  >>> roundUp(12345678911)\n  12345678911\n  >>> roundUp(12345678912)\n  12345678912\n  >>> roundUp(12345678913)\n  12345678913\n  >>> roundUp(12345678914)\n  12345678914\n  >>> roundUp(12345678915)\n  12345678915\n  >>> roundUp(12345678916)\n  12345678916\n  >>> roundUp(12345678917)\n  12345678917\n  >>> roundUp(12345678918)\n  12345678918\n  >>> roundUp(12345678919)\n  12345678919\n  >>> roundUp(12345678920)\n  12345678920\n  >>> roundUp(12345678921)\n  12345678921\n  >>> roundUp(12345678922)\n  12345678922\n  >>> roundUp(12345678923)\n  12345678923\n  >>> roundUp(12345678924)\n  12345678924\n  >>> roundUp(12345678925)\n  12345678925\n  >>> roundUp(12345678926)\n  12345678926\n  >>> roundUp(12345678927)\n  12345678927\n  >>> roundUp(12345678928)\n  12345678928\n  >>> roundUp(12345678929)\n  12345678929\n  >>> roundUp(12345678930)\n  12345678930\n  >>> roundUp(12345678931)\n  12345678931\n  >>> roundUp(12345678932)\n  12345678932\n  >>> roundUp(12345678933)\n  12345678933\n  >>> roundUp(12345678934)\n  12345678934\n  >>> roundUp(12345678935)\n  12345678935\n  >>> roundUp(12345678936)\n  12345678936\n  >>> roundUp(12345678937)\n  12345678937\n  >>> roundUp(12345678938)\n  12345678938\n  >>> roundUp(12345678939)\n  12345678939\n  >>> roundUp(12345678940)\n  12345678940\n  >>> roundUp(12345678941)\n  12345678941\n  >>> roundUp(12345678942)\n  12345678942\n  >>> roundUp(12345678943)\n  12345678943\n  >>> roundUp(12345678944)\n  12345678944\n  >>> roundUp(12345678945)\n  12345678945\n  >>> roundUp(12345678946)\n  12345678946\n  >>> roundUp(12345678947)\n  12345678947\n  >>> roundUp(12345678948)\n  12345678948\n  >>> roundUp(12345678949)\n  12345678949\n  >>> roundUp(12345678950)\n  12345678950\n  >>> roundUp(12345678951)\n  12345678951\n  >>> roundUp(12345678952)\n  12345678952\n  >>> roundUp(12345678953)\n  12345678953\n  >>> roundUp(12345678954)\n  12345678954\n  >>> roundUp(12345678955)\n  12345678955\n  >>> roundUp(12345678956)\n  12345678956\n  >>> roundUp(12345678957)\n  12345678957\n  >>> roundUp(12345678958)\n  12345678958\n  >>> roundUp(12345678959)\n  12345678959\n  >>> roundUp(12345678960)\n  12345678960\n  >>> roundUp(12345678961)\n  12345678961\n  >>> roundUp(12345678962)\n  12345678962\n  >>> roundUp(12345678963)\n  12345678963\n  >>> roundUp(12345678964)\n  12345678964\n  >>> roundUp(12345678965)\n  12345678965\n  >>> roundUp(12345678966)\n  12345678966\n  >>> roundUp(12345678967)\n  12345678967\n  >>> roundUp(12345678968)\n  12345678968\n  >>> roundUp(12345678969)\n  12345678969\n  >>> roundUp(12345678970)\n  12345678970\n  >>> roundUp(12345678971)\n  12345678971\n  >>> roundUp(12345678972)\n  12345678972\n  >>> roundUp(12345678973)\n  12345678973\n  >>> roundUp(12345678974)\n  12345678974\n  >>> roundUp(12345678975)\n  12345678975\n  >>> roundUp(12345678976)\n  12345678976\n  >>> roundUp(12345678977)\n  12345678977\n  >>> roundUp(12345678978)\n  12345678978\n  >>> roundUp(12345678979)\n  12345678979\n  >>> roundUp(12345678980)\n  12345678980\n  >>> roundUp(12345678981)\n  12345678981\n  >>> roundUp(12345678982)\n  12345678982\n  >>> roundUp(12345678983)\n  12345678983\n  >>> roundUp(12345678984)\n  12345678984\n  >>> roundUp(12345678985)\n  12345678985\n  >>> roundUp(12345678986)\n  12345678986\n  >>> roundUp(12345678987)\n  12345678987\n  >>> roundUp(12345678988)\n  12345678988\n  >>> roundUp(12345678989)\n  12345678989\n  >>> roundUp(1234567900)\n  1234567900\n  >>> roundUp(1234567901)\n  1234567902\n  >>> roundUp(1234567903)\n  1234567903\n  >>> roundUp(1234567904)\n  1234567905\n  >>> roundUp(1234567906)\n  1234567906\n  >>> roundUp(1234567907)\n  1234567907\n  >>> roundUp(1234567908)\n  1234567908\n  >>> roundUp(1234567909)\n  1234567909\n  >>> roundUp(1234567910)\n  1234567910\n  >>> roundUp(1234567911)\n  1234567911\n  >>> roundUp(1234567912)\n  1234567912\n  >>> roundUp(1234567913)\n  1234567913\n  >>> roundUp(1234567914)\n  1234567914\n  >>> roundUp(1234567915)\n  1234567915\n  >>> roundUp(1234567916)\n  1234567916\n  >>> roundUp(1234567917)\n  1234567917\n  >>> roundUp(1234567918)\n  1234567918\n  >>> roundUp(1234567919)\n  1234567919\n  >>> roundUp(1234567920)\n  1234567920\n  >>> roundUp(1234567921)\n  "}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpper(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aA"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = [];\n  let fruitCount = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\") {\n      apples++;\n    } else if (s[i] === \"o\") {\n      oranges++;\n    } else if (s[i] === \"m\") {\n      mango++;\n    } else {\n      fruits.push(s[i]);\n    }\n  }\n\n  fruitCount = fruits.length;\n\n  for (let i = 0; i < fruitCount; i++) {\n    if (fruits[i] === \"a\") {\n      total += apples;\n    } else if (fruits[i] === \"o\") {\n      total += oranges;\n    } else if (fruits[i] === \"m\") {\n      total += mango;\n    } else {\n      total += 1;\n    }\n  }\n\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = [];\n  let fruitCount = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\") {\n      apples++;\n    } else if (s[i] === \"o\") {\n      oranges++;\n    } else if (s[i] === \"m\") {\n      mango++;\n    } else {\n      fruits.push(s[i]);\n    }\n  }\n\n  fruitCount = fruits.length;\n\n  for (let i = 0; i < fruitCount; i++) {\n    if (fruits[i] === \"a\") {\n      total += apples;\n    } else if (fruits[i] === \"o\") {\n      total += oranges;\n    } else if (fruits[i] === \"m\") {\n      total += mango;\n    } else {\n      total += 1;\n    }\n  }\n\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = [];\n  let fruitCount = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\") {\n      apples++;\n    } else if (s[i] === \"o\") {\n      oranges++;\n    } else if (s[i] === \"m\") {\n      mango++;\n    } else {\n      fruits.push(s[i]);\n    }\n  }\n\n  fruitCount = fruits.length;\n\n  for (let i = 0; i < fruitCount; i++) {\n    if (fruits[i] === \"a\") {\n      total += apples;\n    } else if (fruits[i] === \"o\") {\n      total += oranges;\n    } else if (fruits[i] === \"m\") {\n      total += mango;\n    } else {\n      total += 1;\n    }\n  }\n\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = [];\n  let fruitCount = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\") {\n      apples++;\n    } else if (s[i] === \"o\") {\n      oranges++;\n    } else if (s[i] === \"m\") {\n      mango++;\n    } else {\n      fruits.push(s[i]);\n    }\n  }\n\n  fruitCount = fruits.length;\n\n  for (let i = 0; i < fruitCount; i++) {\n    if (fruits[i] === \"a\") {\n      total += apples;\n    } else if (fruits[i] === \"o\") {\n      total += oranges;\n    } else if (fruits[i] === \"m\") {\n      total += mango;\n    } else {\n      total += 1;\n    }\n  }\n\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = [];\n  let fruitCount = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\") {\n      apples++;\n    } else if (s[i] === \"o\") {\n      oranges++;\n    } else if (s[i] === \"m\") {\n      mango++;\n    } else {\n      fruits.push(s[i]);\n    }\n  }\n\n  fruitCount = fruits.length;\n\n  for (let i = 0; i < fruitCount; i++) {\n    if (fruits[i] === \"a\") {\n      total += apples;\n    } else if (fruits[i] "}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let minEven = Infinity;\n  let minIndex = -1;\n\n  while (i < len) {\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {\n        arr[j] -= 1;\n        j++;\n      }\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        arr[j] += 1;\n        i++;\n        j++;\n      } else {"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = research;\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given an integer array nums and an integer k. Return the number of ways to arrange the integers nums such that\n  the integers nums[i] is arranged such that nums[i] + nums[i+1] +... + nums[i-k-1] = k.\n  Examples:\n      ways([4, 1, 2, 2, 3, 1], 3) == 3\n      ways([5, 5, 4, 4, 4], 3) == 4\n      ways([5, 5, 4, 4, 4], 2) == 4\n      ways([5, 5, 4, 4, 4], 1) == 4\n      ways([5, 5, 4, 4, 4], 0) == -1\n  */\nconst ways = (nums, k) => {\n  let res = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] + nums[i + 1] +... + nums[i + k - 1] === k) {\n      res.push(nums[i]);\n    }\n  }\n  return res;\n};\n\nmodule.exports = ways;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given an integer array nums and an integer k. Return the number of ways to arrange the integers nums such that\n  the integers nums[i] + nums[i+1] +... + nums[i-k-1] = k.\n  Examples:\n      ways([4, 1, 2, 2, 3, 1], 3) == 3\n      ways([5, 5, 4, 4, 4], 3) == 4\n      ways([5, 5, 4, 4, 4], 2) == 4\n      ways([5, 5, 4, 4, 4], 1) == 4\n      ways([5, 5, 4, 4, 4], 0) == -1\n  */\nconst ways = (nums, k) => {\n  let res = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] + nums[i + 1] +... + nums[i + k - 1] === k) {\n      res.push(nums[i]);\n    }\n  }\n  return res;\n};\n\nmodule.exports = ways;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given an integer array nums and an integer k. Return the number of ways to arrange the integers nums such that\n  the integers nums[i] + nums[i+1] +... + nums[i-k-1] = k.\n  Examples:\n      ways([4, 1, 2, 2, 3, 1], 3) == 3\n      ways([5, 5, 4, 4, 4], 3) == 4\n      ways([5, 5, 4, 4, 4], 2) == 4\n      ways([5, 5, 4, 4, 4], 1) == 4\n      ways([5, 5, 4, 4, 4], 0) == -1\n  */\nconst ways = (nums, k) => {\n  let res = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] + nums[i + 1] +... + nums[i + k - 1] === k) {\n      res.push(nums[i]);\n    }\n  }\n  return res;\n};\n\nmodule.exports = ways;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given an integer array nums and an integer k. Return the number of ways to arrange the integers nums such that\n  the integers nums[i] + nums[i+1] +... + nums[i-k-1] = k.\n  Examples:\n      ways([4, 1, 2, 2, 3, 1], 3) == 3\n      ways([5, 5, 4, 4, 4], 3) == 4\n      ways([5, 5, 4, 4, 4], 2) == 4\n      ways([5, 5, 4, 4, 4], 1) == 4\n      ways([5, 5, 4, 4, 4], 0) == -1\n  */\nconst ways = (nums, k) => {\n  let res = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] + nums[i + 1] +... + nums[i + k - 1] === k) {\n      res.push(nums[i]);\n    }\n  }\n  return res;\n};\n\nmodule.exports = ways;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given an integer array nums and an integer k. Return the number of ways to arrange the integers nums such that\n  the integers nums[i] + nums[i+1] +... + nums[i-k-1] = k.\n  Examples:\n      ways([4, 1, 2, 2, 3, 1], 3) == 3\n      ways([5, 5, 4, 4, 4], 3) == 4\n      ways([5, 5, 4, 4, 4], 2) == 4\n      ways([5, 5, 4, 4, 4], 1) == 4\n      ways([5, 5, 4, 4, 4], 0) == -1\n  */\nconst ways = (nums, k) => {\n  let res = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] + nums[i + 1] +... + nums[i + k - 1] === k) {\n      res.push(nums[i]);\n    }\n  }\n  return res;\n};\n\nmodule.exports = ways;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given an integer array nums and an integer k. Return the number of ways to arrange the integers nums such that\n  the integers nums[i] + nums[i+1] +... + nums[i-k-1] = k.\n  Examples:\n      ways([4, 1, 2, 2, 3, 1], 3) == 3\n      ways([5, 5, 4, 4, 4], 3) == 4\n      ways([5, 5, 4, 4, 4], 2) == 4\n      ways([5, 5, 4, 4, 4], 1) == 4\n      ways([5, 5, 4, 4, 4], 0) == -1\n  */\nconst ways = (nums, k) => {\n  let res = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] + nums[i + 1] +... + nums[i + k - 1] === k) {\n      res.push(nums[i]);\n    }\n  }\n  return res;\n};\n\nmodule.exports = ways;\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given an integer array nums and an integer k. Return the number of ways to arrange the integers nums such that\n  the integers nums[i] + nums[i+1] +... + nums[i-k-1] = k.\n  Examples:\n      ways([4, 1, 2, 2, 3, 1], 3) == 3\n      ways([5, 5, 4, 4, 4], 3) == 4\n      ways([5, 5, 4, 4, 4], 2) == 4\n      ways([5, 5, 4, 4, 4], 1) == 4\n      ways([5, 5, 4, 4, 4], 0) == -1\n  */\nconst ways = (nums, k) => {\n  let res = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] + nums[i + 1] +... + nums[i + k - 1] === k) {\n      res.push(nums[i]);\n    }\n  }\n  return res;\n};\n\nmodule.exports = ways;\n\n},{}],13:[function(require,module,exports){\n/*\n  You are given an integer array nums and an integer k. Return the number of ways to arrange the integers nums such that\n  the integers nums[i] + nums[i+1] +... + nums[i-k-1] = k.\n  Examples:\n      ways([4, 1, 2, 2, 3, 1], 3) == 3\n      ways([5, 5, 4, 4, 4], 3) == 4\n      ways([5, 5, 4, 4, 4], 2) == 4\n      ways([5, 5, 4, 4, 4], 1) == 4\n      ways([5, 5, 4, 4, 4], 0) == -1\n  */\nconst ways = (nums, k) => {\n  let res = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] + nums[i + 1] +... + nums[i + k - 1] === k) {\n      res.push(nums[i]);\n    }\n  }\n  return res;\n};\n\nmodule.exports = ways;\n\n},"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.map(v => v.toString());\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.map(v => v.toString());\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.map(v => v.toString());\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.map(v => v.toString());\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.map(v => v.toString());\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListReverseReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.map(v => v.toString());\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListReverseReverseReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.map(v => v.toString());\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListReverseReverseReverseReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.map(v => v.toString());\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListReverseReverseReverseReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.map(v => v.toString());\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListReverseReverseReverseReverseReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.map(v => v.toString());\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListReverseReverseReverseReverseReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.map(v => v.toString());\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListReverseReverseReverseReverseReverseReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted.map(v => v.toString());\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortListReverseReverseReverseReverseReverseReverseReverseReverseReverse = ("}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + b;\n  const sumH = a + c;\n  const sumI = a + b;\n  const sumJ = a + c;\n  const sumK = a + b;\n  const sumL = a + c;\n  const sumM = a + b;\n  const sumN = a + c;\n  const sumO = a + b;\n  const sumP = a + c;\n  const sumQ = a + b;\n  const sumR = a + c;\n  const sumS = a + b;\n  const sumT = a + c;\n  const sumU = a + b;\n  const sumV = a + c;\n  const sumW = a + b;\n  const sumX = a + c;\n  const sumY = a + b;\n  const sumZ = a + c;\n  const sumA = sumA < sumB? sumA : sumB;\n  const sumB = sumB < sumC? sumB : sumC;\n  const sumC = sumC < sumD? sumC : sumD;\n  const sumD = sumD < sumE? sumD : sumE;\n  const sumE = sumE < sumF? sumE : sumF;\n  const sumF = sumF < sumG? sumF : sumG;\n  const sumG = sumG < sumH? sumG : sumH;\n  const sumH = sumH < sumI? sumH : sumI;\n  const sumI = sumI < sumJ? sumI : sumJ;\n  const sumJ = sumJ < sumK? sumJ : sumK;\n  const sumK = sumK < sumL? sumK : sumL;\n  const sumL = sumL < sumM? sumL : sumM;\n  const sumM = sumM < sumN? sumM : sumN;\n  const sumN = sumN < sumO? sumN : sumO;\n  const sumO = sumO < sumP? sumO : sumP;\n  const sumP = sumP < sumQ? sumP : sumQ;\n  const sumQ = sumQ < sumR? sumQ : sumR;\n  const sumR = sumR < sumS? sumR : sumS;\n  const sumS = sumS < sumT? sumS : sumT;\n  const sumT = sumT < sumU? sumT : sumU;\n  const sumU = sumU < sumV? sumU : sumV;\n  const sumV = sumV < sumW? sumV : sumW;\n  const sumW = sumW < sumX? sumW : sumX;\n  const sumX = sumX < sumY? sumX : sumY;\n  const sumY = sumY < sumZ? sumY : sumZ;\n  const sumZ = sumZ < sumA? sumZ : sumA;\n  const areaA = sumA * sumB * sumC;\n  const areaB = sumA * sumC * sumD;\n  const areaC = sumA * sumD * sumE;\n  const areaD = sumA * sumE * sumF;\n  const areaE = sumA * sumF * sumG;\n  const areaF = sumA * sumG * sumH;\n  const areaG = sumA * sumH * sumI;\n  const areaH = sumA * sumI * sumJ;\n  const areaI = sumA * sumJ * sumK;\n  const areaJ = sumA * sumK * sumL;\n  const areaK = sumA * sumL * sumM;\n  const areaL = sumA * sumM * sumN;\n  const areaM = sumA * sumN * sumO;\n  const areaN = sumA * sumO * sumP;\n  const areaO = sumA * sumP * sumQ;\n  const areaP = sumA * sumQ * sumR;\n  const areaQ = sumA * sumR * sumS;\n  const areaR = sumA * sumS * sumT;\n  const areaS = sumA * sumT * sumU;\n  const areaT = sumA * sumU * sumV;\n  const areaU = sumA * sumV * sumW;\n  const areaV = sumA * sumW * sumX;\n  const areaW = sumA * sumX * sumY;\n  const areaX = sumA * sumY * sumZ;\n  const areaY = sumB * sumC * sumD;\n  const areaZ = sumB * sumD * sumE;\n  return areaA + areaB + areaC + areaD + areaE + areaF + areaG + areaH + areaI + areaJ + areaK + areaL + areaM + areaN + areaO + areaP + areaQ + areaR + areaS + areaT + areaU + areaV + areaW + areaX + areaY + areaZ;\n};\n\nconst triangleArea = (triangle) => {\n  const sideA = triangle.sideA;\n  const sideB = triangle.sideB;\n  const sideC = triangle.sideC;\n  const areaA = sideA * sideB * sideC;\n  const areaB = sideA * sideC * sideD;\n  const areaC = sideA * sideD * sideE;\n  const areaD = sideA * sideE * sideF;\n  const areaE = sideA * sideF * sideG;\n  const areaF = sideA * sideG * sideH;\n  const areaG = sideA * sideH * sideI;\n  const areaH = sideA * sideI * sideJ;\n  const areaI = sideA * sideJ * sideK;\n  const areaJ = sideA * sideK * sideL;\n  const areaK = sideA * sideL * sideM;\n  const areaL = sideA * sideM * sideN;\n  const areaM = sideA * sideN * sideO;\n  const areaN = sideA * sideO * sideP;\n  const areaO = sideA * sideP * sideQ;\n  const areaP = sideA * sideQ * sideR;\n  const areaQ = sideA * sideR * sideS;\n  const areaR = sideA * sideS * sideT;\n  const areaS = sideA * sideT * sideU;\n  const areaT = sideA * sideU * sideV;\n  const areaU = sideA * sideV * sideW;\n  const areaV = sideA * sideW * sideX;\n  const areaW = sideA * sideX * sideY;\n  const areaX = sideA * sideY * sideZ;\n  const areaY = sideB * sideC * sideD;\n  const areaZ = sideB * sideD * sideE;\n  return areaA + areaB + areaC + areaD + areaE + areaF + areaG + areaH + areaI + areaJ + areaK + areaL + area"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const [head,...tail] = q;\n  const maxWeight = Math.max(...tail.map(w => w));\n  const isBalanced = (sum, weight) => {\n    return sum >= maxWeight && weight <= maxWeight;\n  };\n  return isBalanced(head, w);\n};\n\nmodule.exports = willItFlee;\n\n},{}],4:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is greater than or equal to the minimum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ true\n  # 1+2 is greater than the minimum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the minimum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ false\n  # 3+2+3 is greater than the minimum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ false\n  # 3 is greater than the minimum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const [head,...tail] = q;\n  const minWeight = Math.min(...tail.map(w => w));\n  const isBalanced = (sum, weight) => {\n    return sum >= minWeight && weight >= minWeight;\n  };\n  return isBalanced(head, w);\n};\n\nmodule.exports = willItFlee;\n\n},{}],5:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const [head,...tail] = q;\n  const maxWeight = Math.max(...tail.map(w => w));\n  const isBalanced = (sum, weight) => {\n    return sum >= maxWeight && weight <= maxWeight;\n  };\n  return isBalanced(head, w);\n};\n\nmodule.exports = willItFlee;\n\n},{}],6:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is greater than or equal to the minimum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ true\n  # 1+2 is greater than the minimum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the minimum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ false\n  # 3+2+3 is greater than the minimum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ false\n  # 3 is greater than the minimum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const [head,...tail] = q;\n  const minWeight = Math.min(...tail.map(w => w));\n  const isBalanced = (sum, weight) => {\n    return sum >= minWeight && weight >= minWeight;\n  };\n  return isBalanced(head, w);\n};\n\nmodule.exports = willItFlee;\n\n},{}],7:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const [head,...tail] = q;\n  const maxWeight = Math.max(...tail.map(w => w));\n  const isBalanced = (sum, weight) => {\n    return sum >= maxWeight && weight <= maxWeight;\n  };\n  return isBalanced(head, w);\n};\n\nmodule.exports = willItFlee;\n\n},{}],8:[function(require,module,exports){\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is greater than or equal to the minimum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ true\n  # 1+2 is greater than the minimum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the minimum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ false\n  # 3+2+3 is greater than the minimum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ false\n  # 3 is greater than the minimum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const [head,...tail] = q;\n  const minWeight = Math.min(...tail.map(w => w));\n  const isBalanced = (sum, weight) => {\n    return sum >= minWeight && weight >= minWeight;\n  };\n  return isBalance"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0 && arr[i]!== arr[i + 1]) {\n    change++;\n    i--;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  bigChange([1,2,3,5,4,7,9,6]) == 4\n  bigChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  bigChange([1, 2, 3, 2, 1]) == 0\n  */\nconst bigChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0 && arr[i]!== arr[i + 1]) {\n    change++;\n    i--;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0 && arr[i]!== arr[i + 1]) {\n    change++;\n    i--;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  bigChange([1,2,3,5,4,7,9,6]) == 4\n  bigChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  bigChange([1, 2, 3, 2, 1]) == 0\n  */\nconst bigChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0 && arr[i]!== arr[i + 1]) {\n    change++;\n    i--;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0 && arr[i]!== arr[i + 1]) {\n    change++;\n    i--;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  bigChange([1,2,3,5,4,7,9,6]) == 4\n  bigChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  bigChange([1, 2, 3, 2, 1]) == 0\n  */\nconst bigChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0 && arr[i]!== arr[i + 1]) {\n    change++;\n    i--;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0 && arr[i]!== arr[i + 1]) {\n    change++;\n    i--;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  bigChange([1,2,3,5,4,7,9,6]) == 4\n  bigChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  bigChange([1, 2, 3, 2, 1]) == 0\n  */\nconst bigChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0 && arr[i]!== arr[i + 1]) {\n    change++;\n    i--;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0 && arr[i]!== arr[i + 1]) {\n    change++;\n    i--;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  bigChange([1,2,3,5,4,7,9,6]) == 4\n  bigChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  bigChange([1, 2, 3, 2, 1]) == 0\n  */\nconst bigChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0 && arr[i]!== arr[i + 1]) {\n    change++;\n    i--;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0 && arr[i]!== arr[i + 1]) {\n    change++;\n    i--;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read "}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  const set1 = new Set(lst1);\n  const set2 = new Set(lst2);\n  const set3 = new Set(lst1.concat(lst2));\n  const set4 = new Set(lst1.concat(lst2).concat(lst1));\n  const set5 = new Set(lst1.concat(lst2).concat(lst1).concat(lst2));\n  const set6 = new Set(lst1.concat(lst2).concat(lst1).concat(lst2).concat(lst1));\n  const set7 = new Set(lst1.concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2));\n  const set8 = new Set(lst1.concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1));\n  const set9 = new Set(lst1.concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2));\n  const set10 = new Set(lst1.concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst1).concat(lst2).concat(lst"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the product of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isProductPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isProductPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the difference of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isDifferencePrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDifferencePrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the product of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isProductPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isProductPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the difference of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isDifferencePrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDifferencePrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the product of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isProductPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isProductPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the difference of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isDifferencePrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDifferencePrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the product of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isProductPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isProductPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the product of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isProductPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isProductPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the product of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isProductPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isProductPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the product of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isProductPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isProductPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the product of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isProductPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isProductPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the product of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isProductPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isProductPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the product of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isProductPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isProductPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that "}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a number x is a prime number and\n  false in other cases.\n  x is a prime number if n%int=x\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => true\n  isPrime(7) => false\n  isPrime(11) => false\n  isPrime(13) => false\n  isPrime(17) => false\n  isPrime(19) => false\n  isPrime(23) => false\n  isPrime(29) => false\n  isPrime(31) => false\n  isPrime(37) => false\n  isPrime(39) => false\n  isPrime(43) => false\n  isPrime(47) => false\n  isPrime(53) => false\n  isPrime(59) => false\n  isPrime(61) => false\n  isPrime(67) => false\n  isPrime(69) => false\n  isPrime(73) => false\n  isPrime(79) => false\n  isPrime(83) => false\n  isPrime(89) => false\n  isPrime(97) => false\n  isPrime(99) => false\n  isPrime(111) => false\n  isPrime(113) => false\n  isPrime(115) => false\n  isPrime(117) => false\n  isPrime(119) => false\n  isPrime(121) => false\n  isPrime(123) => false\n  isPrime(127) => false\n  isPrime(129) => false\n  isPrime(131) => false\n  isPrime(133) => false\n  isPrime(135) => false\n  isPrime(137) => false\n  isPrime(139) => false\n  isPrime(141) => false\n  isPrime(143) => false\n  isPrime(145) => false\n  isPrime(147) => false\n  isPrime(149) => false\n  isPrime(151) => false\n  isPrime(153) => false\n  isPrime(155) => false\n  isPrime(157) => false\n  isPrime(159) => false\n  isPrime(161) => false\n  isPrime(163) => false\n  isPrime(165) => false\n  isPrime(167) => false\n  isPrime(169) => false\n  isPrime(171) => false\n  isPrime(173) => false\n  isPrime(175) => false\n  isPrime(177) => false\n  isPrime(179) => false\n  isPrime(181) => false\n  isPrime(183) => false\n  isPrime(185) => false\n  isPrime(187) => false\n  isPrime(189) => false\n  isPrime(191) => false\n  isPrime(193) => false\n  isPrime(195) => false\n  isPrime(197) => false\n  isPrime(199) => false\n  isPrime(201) => false\n  isPrime(203) => false\n  isPrime(205) => false\n  isPrime(207) => false\n  isPrime(209) => false\n  isPrime(211) => false\n  isPrime(213) => false\n  isPrime(215) => false\n  isPrime(217) => false\n  isPrime(219) => false\n  isPrime(221) => false\n  isPrime(223) => false\n  isPrime(225) => false\n  isPrime(227) => false\n  isPrime(229) => false\n  isPrime(231) => false\n  isPrime(233) => false\n  isPrime(235) => false\n  isPrime(237) => false\n  isPrime(239) => false\n  isPrime(241) => false\n  isPrime(243) => false\n  isPrime(245) => false\n  isPrime(247) => false\n  isPrime(249) => false\n  isPrime(251) => false\n  isPrime(253) => false\n  isPrime(255) => false\n  isPrime(257) => false\n  isPrime(259) => false\n  isPrime(261) => false\n  isPrime(263) => false\n  isPrime(265) => false\n  isPrime(267) => false\n  isPrime(269) => false\n  isPrime(271) => false\n  isPrime(273) => false\n  isPrime(275) => false\n  isPrime(277) => false\n  isPrime(279) => false\n  isPrime(281) => false\n  isPrime(283) => false\n  isPrime(285) => false\n  isPrime(287) => false\n  isPrime(289) => false\n  isPrime(291) => false\n  isPrime(293) => false\n  isPrime(295) => false\n  isPrime(297) => false\n  isPrime(299) => false\n  isPrime(301) => false\n  isPrime(303) => false\n  isPrime(305) => false\n  isPrime(307) => false\n  isPrime(309) => false\n  isPrime(311) => false\n  isPrime(313) => false\n  isPrime(315) => false\n  isPrime(317) => false\n  isPrime(319) => false\n  isPrime(321) => false\n  isPrime(323) => false\n  isPrime(325) => false\n  isPrime(327) => false\n  isPrime(329) => false\n  isPrime(331) => false\n  isPrime(333) => false\n  isPrime(335) => false\n  isPrime(337) => false\n  isPrime(339) => false\n  isPrime(341) => false\n  isPrime(343) => false\n  isPrime(345) => false\n  isPrime(347) => false\n  isPrime(349) => false\n  isPrime(351) => false\n  isPrime(353) => false\n  isPrime(355) => false\n  isPrime(357) => false\n  isPrime(359) => false\n  isPrime(361) => false\n  isPrime(363) => false\n  isPrime(365) => false\n  isPrime(367) => false\n  isPrime(369) => false\n  isPrime(371) => false\n  isPrime(373) => false\n  isPrime(375) => false\n  isPrime(377) => false\n  isPrime(379) => false\n  isPrime(381) => false\n  isPrime(383) => false\n  isPrime(385) => false\n  isPrime(387) => false\n  is"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false;\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a prime number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isprime(1) ==> true\n  isprime(2) ==> false\n  isprime(3) ==> true\n  isprime(4) ==> false\n  isprime(5) ==> true\n  isprime(6) ==> false\n  isprime(7) ==> true\n  isprime(8) ==> false\n  isprime(9) ==> true\n  isprime(10) ==> false\n  isprime(11) ==> true\n  isprime(12) ==> false\n  isprime(13) ==> true\n  isprime(14) ==> false\n  isprime(15) ==> true\n  isprime(16) ==> false\n  isprime(17) ==> true\n  isprime(18) ==> false\n  isprime(19) ==> true\n  isprime(20) ==> false\n  isprime(21) ==> true\n  isprime(22) ==> false\n  isprime(23) ==> true\n  isprime(24) ==> false\n  isprime(25) ==> true\n  isprime(26) ==> false\n  isprime(27) ==> true\n  isprime(28) ==> false\n  isprime(29) ==> true\n  isprime(31) ==> false\n  isprime(32) ==> true\n  isprime(33) ==> false\n  isprime(34) ==> true\n  isprime(35) ==> false\n  isprime(36) ==> true\n  isprime(37) ==> false\n  isprime(38) ==> true\n  isprime(39) ==> false\n  isprime(41) ==> true\n  isprime(42) ==> false\n  isprime(43) ==> true\n  isprime(44) ==> false\n  isprime(45) ==> true\n  isprime(46) ==> false\n  isprime(47) ==> true\n  isprime(48) ==> false\n  isprime(49) ==> true\n  isprime(50) ==> false\n  isprime(51) ==> true\n  isprime(52) ==> false\n  isprime(53) ==> true\n  isprime(54) ==> false\n  isprime(55) ==> true\n  isprime(56) ==> false\n  isprime(57) ==> true\n  isprime(58) ==> false\n  isprime(59) ==> true\n  isprime(60) ==> false\n  isprime(61) ==> true\n  isprime(62) ==> false\n  isprime(63) ==> true\n  isprime(64) ==> false\n  isprime(65) ==> true\n  isprime(66) ==> false\n  isprime(67) ==> true\n  isprime(68) ==> false\n  isprime(69) ==> true\n  isprime(70) ==> false\n  isprime(71) ==> true\n  isprime(72) ==> false\n  isprime(73) ==> true\n  isprime(74) ==> false\n  isprime(75) ==> true\n  isprime(76) ==> false\n  isprime(77) ==> true\n  isprime(78) ==> false\n  isprime(79) ==> true\n  isprime(80) ==> false\n  isprime(81) ==> true\n  isprime(82) ==> false\n  isprime(83) ==> true\n  isprime(84) ==> false\n  isprime(85) ==> true\n  isprime(86) ==> false\n  isprime(87) ==> true\n  isprime(88) ==> false\n  isprime(89) ==> true\n  isprime(90) ==> false\n  isprime(91) ==> true\n  isprime(92) ==> false\n  isprime(93) ==> true\n  isprime(94) ==> false\n  isprime(95) ==> true\n  isprime(96) ==> false\n  isprime(97) ==> true\n  isprime(98) ==> false\n  isprime(99) ==> true\n  isprime(100) ==> false\n  isprime(101) ==> true\n  isprime(102) ==> false\n  isprime(103) ==> true\n  isprime(104) ==> false\n  isprime(105) ==> true\n  isprime(106) ==> false\n  isprime(107) ==> true\n  isprime(108) ==> false\n  isprime(109) ==> true\n  isprime(110) ==> false\n  isprime(111) ==> true\n  isprime(112) ==> false\n  isprime(113) ==> true\n  isprime(114) ==> false\n  isprime(115) ==> true\n  isprime(116) ==> false\n  isprime(117) ==> true\n  isprime(118) ==> false\n  isprime(119) ==> true\n  isprime(120) ==> false\n  isprime(121) ==> true\n  isprime(122) ==> false\n  isprime(123) ==> true\n  isprime(124) ==> false\n  isprime(125) ==> true\n  isprime(126) ==> false\n  isprime(127) ==> true\n  isprime(128) ==> false\n  isprime(129) ==> true\n  isprime(130) ==> false\n  isprime(131) ==> true\n  isprime(132) ==> false\n  isprime(133) ==> true\n  isprime(134) ==> false\n  isprime(135) ==> true\n  isprime(136) ==> false\n  isprime(137) ==> true\n  isprime(138) ==> false\n  isprime(139) ==> true\n  isprime(140) ==> false\n  isprime(141) ==> true\n  isprime(142) ==> false\n  isprime(143) ==> true\n  isprime(144) ==> false\n  isprime(145) ==> true\n  isprime(146) ==> false\n  isprime(147) ==> true\n  isprime(148) ==> false\n  isprime(149) ==> true\n  isprime(150) ==> false\n  isprime(151) ==> true\n  isprime(152) ==> false\n  isprime(153) ==> true\n  isprime(154) ==> false\n  isprime(155) ==> true\n  isprime(156) ==> false\n  isprime(157"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  let hexNumArray = hexNum.split(\"\");\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayIndex = 0;\n  let hexNumArrayIndexLength = 0;\n  let hexNumArrayIndexArray = [];\n  let hexNumArrayIndexArrayLength = 0;\n  let hexNumArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexLength = 0;\n  let hexNumArrayIndexArrayIndexArray = [];\n  let hexNumArrayIndexArrayIndexArrayLength = 0;\n  let hexNumArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexLength = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArray = [];\n  let hexNumArrayIndexArrayIndexArrayIndexArrayLength = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexLength = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexLength = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexLength = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexLength = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArray"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalToBinary = parseInt(decimal, 2);\n  while (decimalToBinary > 0) {\n    binary += `0${decimalToBinary.toString(2)}`;\n    decimalToBinary = Math.floor(decimalToBinary / 2);\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to an array. For example,\n  [\"a\", \"b\", \"c\"] --> [\"a\", \"b\", \"c\"]\n  [\"a\", \"b\", \"c\", \"d\"] --> [\"a\", \"b\", \"c\", \"d\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\"] --> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n  let isFelicitous = false;\n  let isHappy = true;\n  let isHappyLength = 3;\n  let isHappyLettersDistinct = true;\n  let isHappyLettersCount = 0;\n  let isHappyLettersIndex = 0;\n  let isHappyLettersIndex2 = 0;\n  let isHappyLettersIndex3 = 0;\n  let isHappyLettersIndex4 = 0;\n  let isHappyLettersIndex5 = 0;\n  let isHappyLettersIndex6 = 0;\n  let isHappyLettersIndex7 = 0;\n  let isHappyLettersIndex8 = 0;\n  let isHappyLettersIndex9 = 0;\n  let isHappyLettersIndex10 = 0;\n  let isHappyLettersIndex11 = 0;\n  let isHappyLettersIndex12 = 0;\n  let isHappyLettersIndex13 = 0;\n  let isHappyLettersIndex14 = 0;\n  let isHappyLettersIndex15 = 0;\n  let isHappyLettersIndex16 = 0;\n  let isHappyLettersIndex17 = 0;\n  let isHappyLettersIndex18 = 0;\n  let isHappyLettersIndex19 = 0;\n  let isHappyLettersIndex20 = 0;\n  let isHappyLettersIndex21 = 0;\n  let isHappyLettersIndex22 = 0;\n  let isHappyLettersIndex23 = 0;\n  let isHappyLettersIndex24 = 0;\n  let isHappyLettersIndex25 = 0;\n  let isHappyLettersIndex26 = 0;\n  let isHappyLettersIndex27 = 0;\n  let isHappyLettersIndex28 = 0;\n  let isHappyLettersIndex29 = 0;\n  let isHappyLettersIndex30 = 0;\n  let isHappyLettersIndex31 = 0;\n  let isHappyLettersIndex32 = 0;\n  let isHappyLettersIndex33 = 0;\n  let isHappyLettersIndex34 = 0;\n  let isHappyLettersIndex35 = 0;\n  let isHappyLettersIndex36 = 0;\n  let isHappyLettersIndex37 = 0;\n  let isHappyLettersIndex38 = 0;\n  let isHappyLettersIndex39 = 0;\n  let isHappyLettersIndex40 = 0;\n  let isHappyLettersIndex41 = 0;\n  let isHappyLettersIndex42 = 0;\n  let isHappyLettersIndex43 = 0;\n  let isHappyLettersIndex44 = 0;\n  let isHappyLettersIndex45 = 0;\n  let isHappyLettersIndex46 = 0;\n  let isHappyLettersIndex47 = 0;\n  let isHappyLettersIndex48 = 0;\n  let isHappyLettersIndex49 = 0;\n  let isHappyLettersIndex50 = 0;\n  let isHappyLettersIndex51 = 0;\n  let isHappyLettersIndex52 = 0;\n  let isHappyLettersIndex53 = 0;\n  let isHappyLettersIndex54 = 0;\n  let isHappyLettersIndex55 = 0;\n  let isHappyLettersIndex56 = 0;\n  let isHappyLettersIndex57 = 0;\n  let isHappyLettersIndex58 = 0;\n  let isHappyLettersIndex59 = 0;\n  let isHappyLettersIndex60 = 0;\n  let isHappyLettersIndex61 = 0;\n  let isHappyLettersIndex62 = 0;\n  let isHappyLettersIndex63 = 0;\n  let isHappyLettersIndex64 = 0;\n  let isHappyLettersIndex65 = 0;\n  let isHappyLettersIndex66 = 0;\n  let isHappyLettersIndex67 = 0;\n  let isHappyLettersIndex68 = 0;\n  let isHappyLettersIndex69 = 0;\n  let isHappyLettersIndex70 = 0;\n  let isHappyLettersIndex71 = 0;\n  let isHappyLettersIndex72 = 0;\n  let isHappyLettersIndex73 = 0;\n  let isHappyLettersIndex74 = 0;\n  let isHappyLettersIndex75 = 0;\n  let isHappyLettersIndex76 = 0;\n  let isHappyLettersIndex77 = 0;\n  let isHappyLettersIndex78 = 0;\n  let isHappyLettersIndex79 = 0;\n  let isHappyLettersIndex80 = 0;\n  let isHappyLettersIndex81 = 0;\n  let isHappyLettersIndex82 = 0;\n  let isHappyLettersIndex83 = 0;\n  let isHappyLettersIndex84 = 0;\n  let isHappyLettersIndex85 = 0;\n  let isHappyLettersIndex86 = 0;\n  let isHappyLettersIndex87 = 0;\n  let isHappyLettersIndex88 = 0;\n  let isHappyLettersIndex89 = 0;\n  let isHappyLettersIndex90 = 0;\n  let isHappyLettersIndex91 = 0;\n  let isHappyLettersIndex92 = 0;\n  let isHappyLettersIndex93 = 0;\n  let isHappyLettersIndex94 = 0;\n  let isHappyLettersIndex95 = 0;\n  let isHappyLettersIndex96 = 0;\n  let isHappyLettersIndex97 = 0;\n  let isHappyLettersIndex98 = 0;\n  let isHappyLettersIndex99 = 0;\n  let isHappyLettersIndex100 = 0;\n  let isHappyLettersIndex101 = 0;\n  let isHappyLettersIndex102 = 0;\n  let isHappyLettersIndex103 = 0;\n  let isHappyLettersIndex104 = 0;\n  let isHappyLettersIndex105 = 0;\n  let isHappyLettersIndex106 = 0;\n  let isHappyLettersIndex107 = 0;\n  let isHappyLettersIndex108 = 0;\n  let isHappyLettersIndex109 = 0;\n  let isHappyLettersIndex110 = 0;\n  let isHappyLettersIndex111 = 0;\n  let isHappyLettersIndex112 = 0;\n  let isHappyLettersIndex113 = 0;\n  let isHappyLettersIndex114 = 0;\n  let isHappyLettersIndex115 = 0;\n  let isHappyLettersIndex116 = 0;\n  let isHappyLettersIndex117 = 0;\n  let isHappyLettersIndex118 = 0;\n  let isHappyLettersIndex119 = 0;\n  let isHappyLettersIndex120 = 0;\n  let isHappyLettersIndex121 = 0;\n  let isHappyLettersIndex122 = 0;\n  let isHappyLettersIndex123 = 0;\n  let isHappyLettersIndex124 = 0;\n  let isHappyLettersIndex125 = 0;\n  let isHappyLetters"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  let letterGrades = [];\n  let sum = 0;\n  let i;\n  let j;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == true\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == true\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == true\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisibleBy9('Hello') == true\n  divisibleBy9('abcdcba') == true\n  divisibleBy9('kittens') == true\n  divisibleBy9('orange') == false\n  */\nconst divisibleBy9 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == true\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == true\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('abcdcba') == true\n  divisibleBy15('kittens') == true\n  divisibleBy15('orange') == false\n  */\nconst divisibleBy15 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == true\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('abcdcba') == true\n  divisibleBy19('kittens') == true\n  divisibleBy19('orange') == false\n  */\nconst divisibleBy19 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 21 or false otherwise\n  Examples\n  divisibleBy21('Hello') == true\n  divisibleBy21('abcdcba') == true\n  divisibleBy21('kittens') == true\n  divisibleBy21('orange') == false\n  */\nconst divisibleBy21 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 23 or false otherwise\n  Examples\n  divisibleBy23('Hello') == true\n  divisibleBy23('abcdcba') == true\n  divisibleBy23('kittens') == true\n  divisibleBy23('orange') == false\n  */\nconst divisibleBy23 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 25 or false otherwise\n  Examples\n  divisibleBy25('Hello') == true\n  divisibleBy25('abcdcba') == true\n  divisibleBy25('kittens') == true\n  divisibleBy25('orange') == false\n  */\nconst divisibleBy25 = (string) => {\n  let isDivisible = true;\n  let length = string"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst beginZeroEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 2.\n  */\nconst beginTwoEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 3.\n  */\nconst beginThreeEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 4.\n  */\nconst beginFourEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 5.\n  */\nconst beginFiveEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 6.\n  */\nconst beginSixEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 7.\n  */\nconst beginSevenEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 8.\n  */\nconst beginEightEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 9.\n  */\nconst beginNineEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 10.\n  */\nconst beginTenEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 11.\n  */\nconst beginElevenEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 12.\n  */\nconst beginTwelveEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 13.\n  */\nconst beginThirteenEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 14.\n  */\nconst beginFourteenEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 15.\n  */\nconst beginFifteenEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 16.\n  */\nconst beginSixteenEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 17.\n  */\nconst beginSeventeenEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 18.\n  */\nconst beginEighteenEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 19.\n  */\nconst beginNineteenEnd = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 20.\n  */\nconst beginTwentyEnd = (n"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";\n  let binary = \"\";"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at even indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 4 \n  */\nconst lendOdd = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst lendEven = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at even indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst lendOddEven = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst lendEvenOdd = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at even indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst lendOddEvenOdd = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst lendEvenEvenOdd = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst lendOddEvenEvenOdd = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst lendEvenOddEvenOdd = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst lendOddEvenEvenOddEven = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst lendEvenOddEvenOddEven = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst lendOddEvenOddEvenEvenOdd = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst lendEvenOddEvenOddEvenOddEven = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst lendOddEvenOddEvenOddEvenOdd = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return lend.concat(even, odd);\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst lendEvenOddEvenOddEvenOdd"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newArr = []\n  let newStr = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let space = 0\n  let newStrArr = []\n  let newStrArr2 = []\n  let newStrArr3 = []\n  let newStrArr4 = []\n  let newStrArr5 = []\n  let newStrArr6 = []\n  let newStrArr7 = []\n  let newStrArr8 = []\n  let newStrArr9 = []\n  let newStrArr10 = []\n  let newStrArr11 = []\n  let newStrArr12 = []\n  let newStrArr13 = []\n  let newStrArr14 = []\n  let newStrArr15 = []\n  let newStrArr16 = []\n  let newStrArr17 = []\n  let newStrArr18 = []\n  let newStrArr19 = []\n  let newStrArr20 = []\n  let newStrArr21 = []\n  let newStrArr22 = []\n  let newStrArr23 = []\n  let newStrArr24 = []\n  let newStrArr25 = []\n  let newStrArr26 = []\n  let newStrArr27 = []\n  let newStrArr28 = []\n  let newStrArr29 = []\n  let newStrArr30 = []\n  let newStrArr31 = []\n  let newStrArr32 = []\n  let newStrArr33 = []\n  let newStrArr34 = []\n  let newStrArr35 = []\n  let newStrArr36 = []\n  let newStrArr37 = []\n  let newStrArr38 = []\n  let newStrArr39 = []\n  let newStrArr40 = []\n  let newStrArr41 = []\n  let newStrArr42 = []\n  let newStrArr43 = []\n  let newStrArr44 = []\n  let newStrArr45 = []\n  let newStrArr46 = []\n  let newStrArr47 = []\n  let newStrArr48 = []\n  let newStrArr49 = []\n  let newStrArr50 = []\n  let newStrArr51 = []\n  let newStrArr52 = []\n  let newStrArr53 = []\n  let newStrArr54 = []\n  let newStrArr55 = []\n  let newStrArr56 = []\n  let newStrArr57 = []\n  let newStrArr58 = []\n  let newStrArr59 = []\n  let newStrArr60 = []\n  let newStrArr61 = []\n  let newStrArr62 = []\n  let newStrArr63 = []\n  let newStrArr64 = []\n  let newStrArr65 = []\n  let newStrArr66 = []\n  let newStrArr67 = []\n  let newStrArr68 = []\n  let newStrArr69 = []\n  let newStrArr70 = []\n  let newStrArr71 = []\n  let newStrArr72 = []\n  let newStrArr73 = []\n  let newStrArr74 = []\n  let newStrArr75 = []\n  let newStrArr76 = []\n  let newStrArr77 = []\n  let newStrArr78 = []\n  let newStrArr79 = []\n  let newStrArr80 = []\n  let newStrArr81 = []\n  let newStrArr82 = []\n  let newStrArr83 = []\n  let newStrArr84 = []\n  let newStrArr85 = []\n  let newStrArr86 = []\n  let newStrArr87 = []\n  let newStrArr88 = []\n  let newStrArr89 = []\n  let newStrArr90 = []\n  let newStrArr91 = []\n  let newStrArr92 = []\n  let newStrArr93 = []\n  let newStrArr94 = []\n  let newStrArr95 = []\n  let newStrArr96 = []\n  let newStrArr97 = []\n  let newStrArr98 = []\n  let newStrArr99 = []\n  let newStrArr100 = []\n  let newStrArr101 = []\n  let newStrArr102 = []\n  let newStrArr103 = []\n  let newStrArr104 = []\n  let newStrArr105 = []\n  let newStrArr106 = []\n  let newStrArr107 = []\n  let newStrArr108 = []\n  let newStrArr109 = []\n  let newStrArr110 = []\n  let newStrAr1111 = []\n  let newStrArr112 = []\n  let newStrArr113 = []\n  let newStrArr114 = []\n  let newStrArr115 = []\n  let newStrArr116 = []\n  let newStrArr117 = []\n  let newStrArr118 = []\n  let newStrArr119 = []\n  let newStrArr120 = []\n  let newStrAr121 = []\n  let newStrAr122 = []\n  let newStrAr123 = []\n  let newStrAr124 = []\n  let newStrAr125 = []\n  let newStrAr126 = []\n  let newStrAr127 = []\n  let newStrAr128 = []\n  let newStrAr129 = []\n  let newStrAr130 = []\n  let newStrAr131 = []\n  let newStrAr132 = []\n  let newStrAr133 = []\n  let newStrAr134 = []\n  let newStrAr135 = []\n  let newStrAr136 = []\n  let newStrAr137 = []\n  let newStrAr138 = []\n  let newStrAr139 = []\n  let newStrAr140 = []\n  let newStrAr141 = []\n  let newStrAr142 = []\n  let newStrAr143 = []\n  let newStrAr144 = []\n  let newStrAr145 = []\n  let newStrAr146 = []\n  let newStrAr147 = []\n  let newStrAr148 = []\n  let newStrAr149 = []\n  let newStrAr150 = []\n  let newStrAr151 = []\n  let newStrAr152 = []\n  let newStrAr153 = []\n  let newStrAr154 = []\n  let newStrAr155 = []\n  let newStrAr156 = []\n  let newStrAr157 = []\n  let newStrAr158 = []\n  let newStrAr159 = []\n  let newStrAr160 = []\n  let newStrAr161 = []\n  let newStrAr162 = []\n  let newStrAr163 = []\n  let newStrAr164 = []\n  let newStrAr165 = []\n  let newStrAr166 = []\n  let newStrAr167 = []\n  let newStrAr168 = []\n  let newStrAr169 = []\n  let newStrAr170 = []\n  let newStrAr171 = []\n  let newStrAr172 = []\n  let newStrAr173 = []\n  let newStrAr174 = []\n  let newStrAr175 = []\n  let newStrAr176 = []\n  let newStrAr177 = []\n  let newStrAr178 = []\n  let newStrAr179 = []\n  let newStrAr180 = []\n  let newStrAr181 = []\n  let newStrAr182 = []\n  let newStrAr183 = []\n  let newStrAr184 = []\n  let newStrAr185 = []\n  let newStrAr186 = []\n  let newStrAr187 = []\n  let newStrAr188 = []\n  let newStrAr189 = []\n  let newStrAr190 = []\n  let newStrAr191 = []\n  let newStrAr192 = "}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n  const row = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    if (lst[i][j] === x) {\n      row.push([i, j])\n      i++\n      j++\n    } else {\n      row.push([i, j])\n      i++\n    }\n  }\n  row.sort((a, b) => b[1] - a[1])\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchCol = (lst, x) => {\n  const row = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    if (lst[j][i] === x) {\n      row.push([i, j])\n      i++\n      j++\n    } else {\n      row.push([i, j])\n      i++\n    }\n  }\n  row.sort((a, b) => b[1] - a[1])\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchDiag = (lst, x) => {\n  const row = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    if (lst[i][j] === x) {\n      row.push([i, j])\n      i++\n      j++\n    } else {\n      row.push([i, j])\n      i++\n    }\n  }\n  row.sort((a, b) => b[1] - a[1])\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchDiagRow = (lst, x) => {\n  const row = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    if (lst[i][j] === x) {\n      row.push([i, j])\n      i++\n      j++\n    } else {\n      row.push([i, j])\n      i++\n    }\n  }\n  row.sort((a, b) => b[1] - a[1])\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchDiagCol = (lst, x) => {\n  const row = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    if (lst[j][i] === x) {\n      row.push([i, j])\n      i++\n      j++\n    } else {\n      row.push([i, j])\n      i++\n    }\n  }\n  row.sort((a, b) => b[1] - a[1])\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchDiagDiag = (lst, x) => {\n  const row = []\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    if (lst[i][j] === x) {\n      row.push([i, j])\n      i++\n      j++\n    } else {\n      row.push([i, j])\n      i++\n    }\n  }\n  row.sort((a, b) => b[1] - a[1])\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuple"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.sort((a, b) => a - b);\n  return sortedArray;\n};\n\n/**\n * Given an array of non-negative integers, return its sum.\n\n  Example:\n  * sumArray([5, 2, -3, 4, -7, 1, -5]) => 15\n  */\nconst sumArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n};\n\n/**\n * Given an array of non-negative integers, return its maximum value.\n\n  Example:\n  * maxArray([5, 2, -3, 4, -7, 1, -5]) => 5\n  */\nconst maxArray = (array) => {\n  let max = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i];\n    }\n  }\n  return max;\n};\n\n/**\n * Given an array of non-negative integers, return its minimum value.\n\n  Example:\n  * minArray([5, 2, -3, 4, -7, 1, -5]) => 1\n  */\nconst minArray = (array) => {\n  let min = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n};\n\n/**\n * Given an array of non-negative integers, return its median value.\n\n  Example:\n  * medianArray([5, 2, -3, 4, -7, 1, -5]) => 2\n  */\nconst medianArray = (array) => {\n  let median = array.length % 2 === 0\n   ? array[(array.length / 2) - 1]\n    : array[(array.length / 2) + 1];\n  return median;\n};\n\n/**\n * Given an array of non-negative integers, return its mode value.\n\n  Example:\n  * modeArray([5, 2, -3, 4, -7, 1, -5]) => 2\n  */\nconst modeArray = (array) => {\n  let mode = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > mode) {\n      mode = array[i];\n    }\n  }\n  return mode;\n};\n\n/**\n * Given an array of non-negative integers, return its standard deviation.\n\n  Example:\n  * stdDevArray([5, 2, -3, 4, -7, 1, -5]) => 1.4142135623730951\n  */\nconst stdDevArray = (array) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/**\n * Given an array of non-negative integers, return its variance.\n\n  Example:\n  * varianceArray([5, 2, -3, 4, -7, 1, -5]) => 1.4142135623730951\n  */\nconst varianceArray = (array) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n * Given an array of non-negative integers, return its standard deviation ignoring negative values.\n\n  Example:\n  * stdDevArray([5, 2, -3, 4, -7, 1, -5, -6, -7, -5]) => 1.4142135623730951\n  */\nconst stdDevArrayIgnoreNegative = (array) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < 0) {\n      sum += array[i];\n      count++;\n    }\n  }\n  return Math.sqrt(sum / count);\n};\n\n/**\n * Given an array of non-negative integers, return its variance ignoring negative values.\n\n  Example:\n  * varianceArrayIgnoreNegative([5, 2, -3, 4, -7, 1, -5, -6, -7, -5]) => 1.4142135623730951\n  */\nconst varianceArrayIgnoreNegative = (array) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < 0) {\n      sum += array[i];\n      count++;\n    }\n  }\n  return sum / count;\n};\n\n/**\n * Given an array of non-negative integers, return its standard deviation ignoring negative values.\n\n  Example:\n  * stdDevArrayIgnoreNegative([5, 2, -3, 4, -7, 1, -5, -6, -7, -5]) => 1.4142135623730951\n  */\nconst stdDevArrayIgnoreNegativeIgnoreNegative = (array) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < 0) {\n      sum += array[i];\n      count++;\n    }\n  }\n  return Math.sqrt(sum / count);\n};\n\n/**\n * Given an array of non-negative integers, return its variance ignoring negative values.\n\n  Example:\n  * varianceArrayIgnoreNegativeIgnoreNegative([5, 2, -3, 4, -7, 1, -5, -6, -7, -5]) => 1.4142135623730951\n  */\nconst varianceArrayIgnoreNegativeIgnoreNegative = (array) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < 0) {\n      sum += array[i];\n      count++;\n    }\n  }\n  return sum / count;\n};\n\n/**\n * Given an array of non-negative integers, return its standard deviation ignoring negative values.\n\n  Example:\n  * stdDevArrayIgnoreNegativeIgnoreNegative([5, 2, -3, 4, -7, 1, -5, -6, -7, -5]) => 1.4142135623730951\n  */\nconst stdDevArrayIgnoreNegativeIgnoreNegativeIgnoreNegative = (array) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < 0) {\n      sum += array[i];\n      count++;\n    }\n  }\n  return Math.sqrt(sum / count);\n};\n\n/**\n * Given an array of non-negative integers, return its variance ignoring negative values.\n\n  Example:\n  * varianceArrayIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegative([5, 2, -3, 4, -7, 1, -5, -6, -7, -5]) => 1.4142135623730951\n  */\nconst varianceArrayIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegative = (array) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < 0) {\n      sum += array[i];\n      count++;\n    }\n  }\n  return sum / count;\n};\n\n/**\n * Given an array of non-negative integers, return its standard deviation ignoring negative values.\n\n  Example:\n  * stdDevArrayIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegative([5, 2, -3, 4, -7, 1, -5, -6, -7, -5]) => 1.4142135623730951\n  */\nconst stdDevArrayIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegativeIgnoreNegative"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i;\n  let j;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = -1;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  \n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  findSmallest([1, 2, 3, 4, 5]) == 3\n  findSmallest([5, 1, 4, 3, 2]) == 3\n  findSmallest([]) == null\n  findSmallest([1, 1]) == null\n  */\nconst findSmallest = (lst) => {\n  let min = null;\n  let minIndex = -1;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || min < lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  \n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargest() that returns the largest element of the list.\n  Return null if there is no such element.\n  \n  findLargest([1, 2, 3, 4, 5]) == 5\n  findLargest([5, 1, 4, 3, 2]) == 5\n  findLargest([]) == null\n  findLargest([1, 1]) == null\n  */\nconst findLargest = (lst) => {\n  let max = null;\n  let maxIndex = -1;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  \n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findBiggest() that returns the biggest element of the list.\n  Return null if there is no such element.\n  \n  findBiggest([1, 2, 3, 4, 5]) == 4\n  findBiggest([5, 1, 4, 3, 2]) == 4\n  findBiggest([]) == null\n  findBiggest([1, 1]) == null\n  */\nconst findBiggest = (lst) => {\n  let max = null;\n  let maxIndex = -1;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || max > lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  \n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallestIndex() that returns the index of the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  findSmallestIndex([1, 2, 3, 4, 5]) == 3\n  findSmallestIndex([5, 1, 4, 3, 2]) == 3\n  findSmallestIndex([]) == null\n  findSmallestIndex([1, 1]) == null\n  */\nconst findSmallestIndex = (lst) => {\n  let min = null;\n  let minIndex = -1;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || min < lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  \n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargestIndex() that returns the index of the largest element of the list.\n  Return null if there is no such element.\n  \n  findLargestIndex([1, 2, 3, 4, 5]) == 4\n  findLargestIndex([5, 1, 4, 3, 2]) == 4\n  findLargestIndex([]) == null\n  findLargestIndex([1, 1]) == null\n  */\nconst findLargestIndex = (lst) => {\n  let max = null;\n  let maxIndex = -1;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || max > lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  \n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findBiggestIndex() that returns the index of the biggest element of the list.\n  Return null if there is no such element.\n  \n  findBiggestIndex([1, 2, 3, 4, 5]) == 5\n  findBiggestIndex([5, 1, 4, 3, 2]) == 5\n  findBiggestIndex([]) == null\n  findBiggestIndex([1, 1]) == null\n  */\nconst findBiggestIndex = (lst) => {\n  let max = null;\n  let maxIndex = -1;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || max > lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  \n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallestIndex() that returns the index of the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  findSmallestIndex([1, 2, 3, 4, 5]) == 3\n  findSmallestIndex([5, 1, 4, 3, 2]) == 3\n  findSmallestIndex([]) == null\n  findSmallestIndex([1, 1]) == null\n  */\nconst findSmallestIndex = (lst) => {\n  let min = null;\n  let minIndex = -1;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || min < lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  \n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargestIndex() that returns the index of the largest element of the list.\n  Return null if there is no such element.\n  \n  findLargestIndex([1, 2, 3, 4, 5]) == 4\n  findLargestIndex([5, 1, 4, 3, 2]) == 4\n  findLargestIndex([]) == null\n  findLargestIndex([1, 1]) == null\n  */\nconst findLargestIndex = (lst) => {\n  let max = null;\n  let maxIndex = -1;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || max > lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  \n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findBiggestIndex() that returns the index of the biggest element of the list.\n  Return null if there is no such element.\n  \n  findBiggestIndex([1, 2, 3, 4, 5]) == 5\n  findBiggestIndex([5, 1, 4, 3, 2]) == 5\n  findBiggestIndex([]) == null\n  findBiggestIndex([1, 1]) == null\n  */\nconst findBiggestIndex = (lst) => {\n  let max = null;\n  let maxIndex = -1;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || max > lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  \n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallestIndex() that returns the index of the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  findSmallestIndex([1, 2, 3, 4, 5]) == 3\n  findSmallestIndex([5, 1, 4, 3, 2]) == 3\n  findSmallestIndex([]) == null\n  findSmallestIndex([1, 1]) == null\n  */\nconst findSmallestIndex = (lst) => {\n  let min = null;\n  let minIndex = -1;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || min < lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers and returns true if all numbers are equal to the sum of the other two.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers and returns true if all numbers are equal to the sum of the other two and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInts(5, 2, 7) ➞ true\n  allInts(3, 2, 2) ➞ false\n  allInts(3, -2, 1) ➞ false\n  allInts(3.6, -2.2, 2) ➞ true\n  */\nconst allInts = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z);\n};\n\n/* Create a function that takes 3 numbers and returns true if all numbers are equal to the sum of the other two and all numbers are integers and all numbers are positive.\n  Returns false in any other cases.\n  Examples\n  allPositive(5, 2, 7) ➞ true\n  allPositive(3, -2, 1) ➞ false\n  allPositive(3.6, -2.2, 2) ➞ true\n  */\nconst allPositive = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z) && x >= 0 && y >= 0 && z >= 0;\n};\n\n/* Create a function that takes 3 numbers and returns true if all numbers are equal to the sum of the other two and all numbers are integers and all numbers are positive and all numbers are negative.\n  Returns false in any other cases.\n  Examples\n  allPositives(5, 2, 7) ➞ true\n  allPositives(3, 2, 2) ➞ false\n  allPositives(3, -2, 1) ➞ false\n  allPositives(3.6, -2.2, 2) ➞ true\n  */\nconst allPositives = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z) && x >= 0 && y >= 0 && z >= 0 && x < 0 && y < 0 && z < 0;\n};\n\n/* Create a function that takes 3 numbers and returns true if all numbers are equal to the sum of the other two and all numbers are integers and all numbers are positive and all numbers are negative and all numbers are positive.\n  Returns false in any other cases.\n  Examples\n  allPositives2(5, 2, 7) ➞ true\n  allPositives2(3, 2, 2) ➞ false\n  allPositives2(3, -2, 1) ➞ false\n  allPositives2(3.6, -2.2, 2) ➞ true\n  */\nconst allPositives2 = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z) && x >= 0 && y >= 0 && z >= 0 && x < 0 && y < 0 && z < 0 && x >= 0 && y >= 0 && z >= 0 && x < 0 && y < 0;\n};\n\n/* Create a function that takes 3 numbers and returns true if all numbers are equal to the sum of the other two and all numbers are integers and all numbers are positive and all numbers are negative and all numbers are positive and all numbers are negative.\n  Returns false in any other cases.\n  Examples\n  allPositives3(5, 2, 7) ➞ true\n  allPositives3(3, 2, 2) ➞ false\n  allPositives3(3, -2, 1) ➞ false\n  allPositives3(3.6, -2.2, 2) ➞ true\n  */\nconst allPositives3 = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z) && x >= 0 && y >= 0 && z >= 0 && x < 0 && y < 0 && z < 0 && x >= 0 && y >= 0 && z >= 0 && x < 0 && y < 0;\n};\n\n/* Create a function that takes 3 numbers and returns true if all numbers are equal to the sum of the other two and all numbers are integers and all numbers are positive and all numbers are negative and all numbers are positive and all numbers are negative.\n  Returns false in any other cases.\n  Examples\n  allPositives4(5, 2, 7) ➞ true\n  allPositives4(3, -2, 1) ➞ false\n  allPositives4(3.6, -2.2, 2) ➞ true\n  */\nconst allPositives4 = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z) && x >= 0 && y >= 0 && z >= 0 && x < 0 && y < 0 && z < 0 && x >= 0 && y >= 0 && z >= 0 && x < 0 && y < 0;\n};\n\n/* Create a function that takes 3 numbers and returns true if all numbers are equal to the sum of the other two and all numbers are integers and all numbers are positive and all numbers are negative and all numbers are positive and all numbers are negative.\n  Returns false in any other cases.\n  Examples\n  allPositives5(5, 2, 7) ➞ true\n  allPositives5(3, -2, 1) ➞ false\n  allPositives5(3.6, -2.2, 2) ➞ true\n  */\nconst allPositives5 = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z) && x >= 0 && y >= 0 && z >= 0 && x < 0 && y < 0 && z < 0 && x >= 0 && y >= 0 && z >= 0 && x < 0 && y < 0;\n};\n\n/* Create a function that takes 3 numbers and returns true if all numbers are equal to the sum of the other two and all numbers are integers and all numbers are positive and all numbers are negative and all numbers are positive and all numbers are negative.\n  Returns false in any other cases.\n  Examples\n  allPositives6(5, 2, 7) ➞ true\n  allPositives6(3, -2, 1) ➞ false\n  allPositives6(3.6, -2.2, 2) ➞ true\n  */\nconst allPositives6 = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z) && x >= 0 && y >= 0 && z >= 0 && x < 0 && y < 0 && z < 0 && x >= 0 && y >= 0 && z >= 0 && x < 0 && y < 0;\n};\n\n/* Create a function that takes 3 numbers and returns true if all numbers are equal to the sum of the other two and all numbers are integers and all numbers are positive and all numbers are negative and all numbers are positive and all numbers are negative.\n  Returns false in any other cases.\n  Examples\n  allPositives7(5, 2, 7) ➞ true\n  allPositives7(3, -2, 1) ➞ false\n  allPositives7(3.6, -2.2, 2) ➞ true\n  */\nconst allPositives7 = (x, y, z) => {\n  return x === y && y === z && Number.isInteger(x + y + z) && x >= 0 && y >= 0 && z >= 0 && x < 0 && y < 0 && z < 0 && x >= 0 && y >= 0 && z >= 0 && x < 0 && y < 0;"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsIndex = 0;\n  let vowelsCount = 0;\n  let vowelsCount2 = 0;\n  let vowelsCount3 = 0;\n  let vowelsCount4 = 0;\n  let vowelsCount5 = 0;\n  let vowelsCount6 = 0;\n  let vowelsCount7 = 0;\n  let vowelsCount8 = 0;\n  let vowelsCount9 = 0;\n  let vowelsCount10 = 0;\n  let vowelsCount11 = 0;\n  let vowelsCount12 = 0;\n  let vowelsCount13 = 0;\n  let vowelsCount14 = 0;\n  let vowelsCount15 = 0;\n  let vowelsCount16 = 0;\n  let vowelsCount17 = 0;\n  let vowelsCount18 = 0;\n  let vowelsCount19 = 0;\n  let vowelsCount20 = 0;\n  let vowelsCount21 = 0;\n  let vowelsCount22 = 0;\n  let vowelsCount23 = 0;\n  let vowelsCount24 = 0;\n  let vowelsCount25 = 0;\n  let vowelsCount26 = 0;\n  let vowelsCount27 = 0;\n  let vowelsCount28 = 0;\n  let vowelsCount29 = 0;\n  let vowelsCount30 = 0;\n  let vowelsCount31 = 0;\n  let vowelsCount32 = 0;\n  let vowelsCount33 = 0;\n  let vowelsCount34 = 0;\n  let vowelsCount35 = 0;\n  let vowelsCount36 = 0;\n  let vowelsCount37 = 0;\n  let vowelsCount38 = 0;\n  let vowelsCount39 = 0;\n  let vowelsCount40 = 0;\n  let vowelsCount41 = 0;\n  let vowelsCount42 = 0;\n  let vowelsCount43 = 0;\n  let vowelsCount44 = 0;\n  let vowelsCount45 = 0;\n  let vowelsCount46 = 0;\n  let vowelsCount47 = 0;\n  let vowelsCount48 = 0;\n  let vowelsCount49 = 0;\n  let vowelsCount50 = 0;\n  let vowelsCount51 = 0;\n  let vowelsCount52 = 0;\n  let vowelsCount53 = 0;\n  let vowelsCount54 = 0;\n  let vowelsCount55 = 0;\n  let vowelsCount56 = 0;\n  let vowelsCount57 = 0;\n  let vowelsCount58 = 0;\n  let vowelsCount59 = 0;\n  let vowelsCount60 = 0;\n  let vowelsCount61 = 0;\n  let vowelsCount62 = 0;\n  let vowelsCount63 = 0;\n  let vowelsCount64 = 0;\n  let vowelsCount65 = 0;\n  let vowelsCount66 = 0;\n  let vowelsCount67 = 0;\n  let vowelsCount68 = 0;\n  let vowelsCount69 = 0;\n  let vowelsCount70 = 0;\n  let vowelsCount71 = 0;\n  let vowelsCount72 = 0;\n  let vowelsCount73 = 0;\n  let vowelsCount74 = 0;\n  let vowelsCount75 = 0;\n  let vowelsCount76 = 0;\n  let vowelsCount77 = 0;\n  let vowelsCount78 = 0;\n  let vowelsCount79 = 0;\n  let vowelsCount80 = 0;\n  let vowelsCount81 = 0;\n  let vowelsCount82 = 0;\n  let vowelsCount83 = 0;\n  let vowelsCount84 = 0;\n  let vowelsCount85 = 0;\n  let vowelsCount86 = 0;\n  let vowelsCount87 = 0;\n  let vowelsCount88 = 0;\n  let vowelsCount89 = 0;\n  let vowelsCount90 = 0;\n  let vowelsCount91 = 0;\n  let vowelsCount92 = 0;\n  let vowelsCount93 = 0;\n  let vowelsCount94 = 0;\n  let vowelsCount95 = 0;\n  let vowelsCount96 = 0;\n  let vowelsCount97 = 0;\n  let vowelsCount98 = 0;\n  let vowelsCount99 = 0;\n  let vowelsCount100 = 0;\n  let vowelsCount101 = 0;\n  let vowelsCount102 = 0;\n  let vowelsCount103 = 0;\n  let vowelsCount104 = 0;\n  let vowelsCount105 = 0;\n  let vowelsCount106 = 0;\n  let vowelsCount107 = 0;\n  let vowelsCount108 = 0;\n  let vowelsCount109 = 0;\n  let vowelsCount110 = 0;\n  let vowelsCount111 = 0;\n  let vowelsCount112 = 0;\n  let vowelsCount113 = 0;\n  let vowelsCount114 = 0;\n  let vowelsCount115 = 0;\n  let vowelsCount116 = 0;\n  let vowelsCount117 = 0;\n  let vowelsCount118 = 0;\n  let vowelsCount119 = 0;\n  let vowelsCount120 = 0;\n  let vowelsCount121 = 0;\n  let vowelsCount122 = 0;\n  let vowelsCount123 = 0;\n  let vowelsCount124 = 0;\n  let vowelsCount125 = 0;\n  let vowelsCount126 = 0;\n  let vowelsCount127 = 0;\n  let vowelsCount128 = 0;\n  let vowelsCount129 = 0;\n  let vowelsCount130 = 0;\n  let vowelsCount131 = 0;\n  let vowelsCount132 = 0;\n  let vowelsCount133 = 0;\n  let vowelsCount134 = 0;\n  let vowelsCount135 = 0;\n  let vowelsCount136 = 0;\n  let vowelsCount137 = 0;\n  let vowelsCount138 = 0;\n  let vowelsCount139 = 0;\n  let vowelsCount140 = 0;\n  let vowelsCount141 = 0;\n  let vowelsCount142 = 0;\n  let vowelsCount143 = 0;\n  let vowelsCount144 = 0;\n  let vowelsCount145 = 0;\n  let vowelsCount146 = 0;\n  let vowelsCount147 = 0;\n  let vowelsCount148 = 0;\n  let vowelsCount149 = 0;\n  let vowelsCount150 = 0;\n  let vowelsCount151 = 0;\n  let vowelsCount152 = 0;\n  let vowelsCount153 = 0;\n  let vowelsCount154 = 0;\n  let vowelsCount155 = 0;\n  let vowelsCount156 = 0;\n  let vowelsCount157 = 0;\n  let vowelsCount158 = 0;\n  let vowelsCount159 = 0;\n  let vowelsCount160 = 0;\n  let vowelsCount161 = 0;\n  let vowelsCount162 = 0;\n  let vowelsCount163 = 0;\n  let vowelsCount164 = 0;\n  let vowelsCount165 = 0;\n  let vowelsCount166 = 0;\n  let vowelsCount167 = 0;\n  let vowelsCount168 = 0;\n  let vowelsCount169 = 0;\n  let vowelsCount170 = 0;\n  let vowelsCount171 = 0;\n  let vowelsCount172 = 0;\n  let vowelsCount173 = 0;\n  let vowelsCount174 = 0;\n  let vowelsCount175 = 0;\n  let vowelsCount176 = 0;\n  let vowelsCount177 = 0;\n  let vowelsCount178 = 0;\n  let vowelsCount179 = 0;\n  let vowelsCount180 = 0;\n  let vowelsCount181 = 0;\n  let vowelsCount182 = 0;\n  let vowelsCount183 = 0;\n  let vowelsCount184 = 0;\n  let vowelsCount185 = 0;\n  let vowelsCount186 = 0;\n  let vowelsCount187 = 0;\n  let vowelsCount188 = 0;\n  let vowelsCount189 = 0;\n  let vowelsCount190 = 0;\n  let vowelsCount191 = 0;\n  let vowelsCount192 = 0;\n  let vowelsCount193 = 0;\n  let vowelsCount194 = 0;\n  let vowelsCount195 = 0;\n  let vowelsCount196 = 0;\n  let vowelsCount197 = 0;\n  let vowelsCount198 = 0;\n  let vowelsCount199 = 0;\n  let vowelsCount200 = 0;\n  let vowelsCount201 = 0;\n  let vowelsCount202 = 0;\n  let vowelsCount203 = 0;\n"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let maxPrime = 0;\n  let maxDigit = 0;\n  let maxDigitPrime = 0;\n  let maxDigitPrimeSum = 0;\n  let maxDigitPrimeSum2 = 0;\n  let maxDigitPrimeSum3 = 0;\n  let maxDigitPrimeSum4 = 0;\n  let maxDigitPrimeSum5 = 0;\n  let maxDigitPrimeSum6 = 0;\n  let maxDigitPrimeSum7 = 0;\n  let maxDigitPrimeSum8 = 0;\n  let maxDigitPrimeSum9 = 0;\n  let maxDigitPrimeSum10 = 0;\n  let maxDigitPrimeSum11 = 0;\n  let maxDigitPrimeSum12 = 0;\n  let maxDigitPrimeSum13 = 0;\n  let maxDigitPrimeSum14 = 0;\n  let maxDigitPrimeSum15 = 0;\n  let maxDigitPrimeSum16 = 0;\n  let maxDigitPrimeSum17 = 0;\n  let maxDigitPrimeSum18 = 0;\n  let maxDigitPrimeSum19 = 0;\n  let maxDigitPrimeSum20 = 0;\n  let maxDigitPrimeSum21 = 0;\n  let maxDigitPrimeSum22 = 0;\n  let maxDigitPrimeSum23 = 0;\n  let maxDigitPrimeSum24 = 0;\n  let maxDigitPrimeSum25 = 0;\n  let maxDigitPrimeSum26 = 0;\n  let maxDigitPrimeSum27 = 0;\n  let maxDigitPrimeSum28 = 0;\n  let maxDigitPrimeSum29 = 0;\n  let maxDigitPrimeSum30 = 0;\n  let maxDigitPrimeSum31 = 0;\n  let maxDigitPrimeSum32 = 0;\n  let maxDigitPrimeSum33 = 0;\n  let maxDigitPrimeSum34 = 0;\n  let maxDigitPrimeSum35 = 0;\n  let maxDigitPrimeSum36 = 0;\n  let maxDigitPrimeSum37 = 0;\n  let maxDigitPrimeSum38 = 0;\n  let maxDigitPrimeSum39 = 0;\n  let maxDigitPrimeSum40 = 0;\n  let maxDigitPrimeSum41 = 0;\n  let maxDigitPrimeSum42 = 0;\n  let maxDigitPrimeSum43 = 0;\n  let maxDigitPrimeSum44 = 0;\n  let maxDigitPrimeSum45 = 0;\n  let maxDigitPrimeSum46 = 0;\n  let maxDigitPrimeSum47 = 0;\n  let maxDigitPrimeSum48 = 0;\n  let maxDigitPrimeSum49 = 0;\n  let maxDigitPrimeSum50 = 0;\n  let maxDigitPrimeSum51 = 0;\n  let maxDigitPrimeSum52 = 0;\n  let maxDigitPrimeSum53 = 0;\n  let maxDigitPrimeSum54 = 0;\n  let maxDigitPrimeSum55 = 0;\n  let maxDigitPrimeSum56 = 0;\n  let maxDigitPrimeSum57 = 0;\n  let maxDigitPrimeSum58 = 0;\n  let maxDigitPrimeSum59 = 0;\n  let maxDigitPrimeSum60 = 0;\n  let maxDigitPrimeSum61 = 0;\n  let maxDigitPrimeSum62 = 0;\n  let maxDigitPrimeSum63 = 0;\n  let maxDigitPrimeSum64 = 0;\n  let maxDigitPrimeSum65 = 0;\n  let maxDigitPrimeSum66 = 0;\n  let maxDigitPrimeSum67 = 0;\n  let maxDigitPrimeSum68 = 0;\n  let maxDigitPrimeSum69 = 0;\n  let maxDigitPrimeSum70 = 0;\n  let maxDigitPrimeSum71 = 0;\n  let maxDigitPrimeSum72 = 0;\n  let maxDigitPrimeSum73 = 0;\n  let maxDigitPrimeSum74 = 0;\n  let maxDigitPrimeSum75 = 0;\n  let maxDigitPrimeSum76 = 0;\n  let maxDigitPrimeSum77 = 0;\n  let maxDigitPrimeSum78 = 0;\n  let maxDigitPrimeSum79 = 0;\n  let maxDigitPrimeSum80 = 0;\n  let maxDigitPrimeSum81 = 0;\n  let maxDigitPrimeSum82 = 0;\n  let maxDigitPrimeSum83 = 0;\n  let maxDigitPrimeSum84 = 0;\n  let maxDigitPrimeSum85 = 0;\n  let maxDigitPrimeSum86 = 0;\n  let maxDigitPrimeSum87 = 0;\n  let maxDigitPrimeSum88 = 0;\n  let maxDigitPrimeSum89 = 0;\n  let maxDigitPrimeSum90 = 0;\n  let maxDigitPrimeSum91 = 0;\n  let maxDigitPrimeSum92 = 0;\n  let maxDigitPrimeSum93 = 0;\n  let maxDigitPrimeSum94 = 0;\n  let maxDigitPrimeSum95 = 0;\n  let maxDigitPrimeSum96 = 0;\n  let maxDigitPrimeSum97 = 0;\n  let maxDigitPrimeSum98 = 0;\n  let maxDigitPrimeSum99 = 0;\n  let maxDigitPrimeSum100 = 0;\n  let maxDigitPrimeSum101 = 0;\n  let maxDigitPrimeSum102 = 0;\n  let maxDigitPrimeSum103 = 0;\n  let maxDigitPrimeSum104 = 0;\n  let maxDigitPrimeSum105 = 0;\n  let maxDigitPrimeSum106 = 0;\n  let maxDigitPrimeSum107 = 0;\n  let maxDigitPrimeSum108 = 0;\n  let maxDigitPrimeSum109 = 0;\n  let maxDigitPrimeSum110 = 0;\n  let maxDigitPrimeSum111 = 0;\n  let maxDigitPrimeSum112 = 0;\n  let maxDigitPrimeSum113 = 0;\n  let maxDigitPrimeSum114 = 0;\n  let maxDigitPrimeSum115 = 0;\n  let maxDigitPrimeSum116 = 0;\n  let maxDigitPrimeSum117 = 0;\n  let maxDigitPrimeSum118 = 0;\n  let maxDigitPrimeSum119 = 0;\n  let maxDigitPrimeSum120 = 0;\n  let maxDigitPrimeSum121 = 0;\n  let maxDigitPrimeSum122 = 0;\n  let maxDigitPrimeSum123 = 0;\n  let maxDigitPrimeSum124 = 0;\n  let maxDigitPrimeSum125 = 0;\n  let maxDigitPrimeSum126 = 0;\n  let maxDigitPrimeSum127 = 0;\n  let maxDigitPrimeSum128 = 0;\n  let maxDigitPrimeSum129 = 0;\n  let maxDigitPrimeSum130 = 0;\n  let maxDigitPrimeSum131 = 0;\n  let maxDigitPrimeSum132 = 0;\n  let maxDigitPrimeSum133 = 0;\n  let maxDigitPrimeSum134 = 0;\n  let maxDigitPrimeSum135 = 0;\n  let maxDigitPrimeSum136 = 0;\n  let maxDigitPrimeSum137 = 0;\n  let maxDigitPrimeSum138 = 0;\n  let maxDigitPrimeSum139 = 0;\n  let maxDigitPrimeSum140 = 0;\n  let maxDigitPrimeSum141 = 0;\n  let maxDigitPrimeSum142 = 0;\n  let maxDigitPrimeSum143 = 0;\n  let maxDigitPrimeSum144 = 0;\n  let maxDigitPrimeSum145 = 0;\n  let maxDigitPrimeSum146 = 0;\n  let maxDigitPrimeSum147 = 0;\n  let maxDigitPrimeSum148 = 0;\n  let maxDigitPrimeSum149 = 0;"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  let lowerCase = true;\n  let upperCase = true;\n  for (let key in dict) {\n    if (dict[key] instanceof String) {\n      lowerCase = dict[key].toLowerCase() === dict[key].toUpperCase();\n    } else {\n      upperCase = dict[key].toUpperCase() === dict[key].toLowerCase();\n    }\n  }\n  return lowerCase && upperCase;\n};\n\n/*\n  Given a string, return true if all characters are digits, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  determineStringCase(\"abc\") should return true.\n  determineStringCase(\"\") should return false.\n  determineStringCase(\"123\") should return false.\n  determineStringCase(\"123abc\") should return false.\n  determineStringCase(\"123abc123\") should return false.\n  determineStringCase(\"123abc123abc\") should return false.\n  determineStringCase(\"123abc123abc123\") should return false.\n  determineStringCase(\"123abc123abc123abc123\") should return false.\n  determineStringCase(\"123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n  let primes = [];\n  let primesCount = 0;\n  let primesCountMinusOne = 0;\n  let primesCountMinusTwo = 0;\n  let primesCountMinusThree = 0;\n  let primesCountMinusFour = 0;\n  let primesCountMinusFive = 0;\n  let primesCountMinusSix = 0;\n  let primesCountMinusSeven = 0;\n  let primesCountMinusEight = 0;\n  let primesCountMinusNine = 0;\n  let primesCountMinusTen = 0;\n  let primesCountMinusEleven = 0;\n  let primesCountMinusTwelve = 0;\n  let primesCountMinusThirteen = 0;\n  let primesCountMinusFourteen = 0;\n  let primesCountMinusFifteen = 0;\n  let primesCountMinusSixteen = 0;\n  let primesCountMinusSeventeen = 0;\n  let primesCountMinusEighteen = 0;\n  let primesCountMinusNineteen = 0;\n  let primesCountMinusTwenty = 0;\n  let primesCountMinusThirty = 0;\n  let primesCountMinusForty = 0;\n  let primesCountMinusFifty = 0;\n  let primesCountMinusSixty = 0;\n  let primesCountMinusSeventy = 0;\n  let primesCountMinusEighty = 0;\n  let primesCountMinusNinety = 0;\n  let primesCountMinusTwentyOne = 0;\n  let primesCountMinusThirtyOne = 0;\n  let primesCountMinusFortyOne = 0;\n  let primesCountMinusFiftyOne = 0;\n  let primesCountMinusSixtyOne = 0;\n  let primesCountMinusSeventyOne = 0;\n  let primesCountMinusEightyOne = 0;\n  let primesCountMinusNinetyOne = 0;\n  let primesCountMinusTwentyTwo = 0;\n  let primesCountMinusThirtyTwo = 0;\n  let primesCountMinusFortyTwo = 0;\n  let primesCountMinusFiftyTwo = 0;\n  let primesCountMinusSixtyTwo = 0;\n  let primesCountMinusSeventyTwo = 0;\n  let primesCountMinusEightyTwo = 0;\n  let primesCountMinusNinetyTwo = 0;\n  let primesCountMinusTwentyThree = 0;\n  let primesCountMinusThirtyThree = 0;\n  let primesCountMinusFortyThree = 0;\n  let primesCountMinusFiftyThree = 0;\n  let primesCountMinusSixtyThree = 0;\n  let primesCountMinusSeventyThree = 0;\n  let primesCountMinusEightyThree = 0;\n  let primesCountMinusNinetyThree = 0;\n  let primesCountMinusTwentyFour = 0;\n  let primesCountMinusThirtyFour = 0;\n  let primesCountMinusFortyFour = 0;\n  let primesCountMinusFiftyFour = 0;\n  let primesCountMinusSixtyFour = 0;\n  let primesCountMinusSeventyFour = 0;\n  let primesCountMinusEightyFour = 0;\n  let primesCountMinusNinetyFour = 0;\n  let primesCountMinusTwentyFive = 0;\n  let primesCountMinusThirtyFive = 0;\n  let primesCountMinusFortyFive = 0;\n  let primesCountMinusFiftyFive = 0;\n  let primesCountMinusSixtyFive = 0;\n  let primesCountMinusSeventyFive = 0;\n  let primesCountMinusEightyFive = 0;\n  let primesCountMinusNinetyFive = 0;\n  let primesCountMinusTwentySix = 0;\n  let primesCountMinusThirtySix = 0;\n  let primesCountMinusFortySix = 0;\n  let primesCountMinusFiftySix = 0;\n  let primesCountMinusSixtySix = 0;\n  let primesCountMinusSeventySix = 0;\n  let primesCountMinusEightySix = 0;\n  let primesCountMinusNinetySix = 0;\n  let primesCountMinusTwentySeven = 0;\n  let primesCountMinusThirtySeven = 0;\n  let primesCountMinusFortySeven = 0;\n  let primesCountMinusFiftySeven = 0;\n  let primesCountMinusSixtySeven = 0;\n  let primesCountMinusSeventySeven = 0;\n  let primesCountMinusEightySeven = 0;\n  let primesCountMinusNinetySeven = 0;\n  let primesCountMinusTwentyEight = 0;\n  let primesCountMinusThirtyEight = 0;\n  let primesCountMinusFortyEight = 0;\n  let primesCountMinusFiftyEight = 0;\n  let primesCountMinusSixtyEight = 0;\n  let primesCountMinusSeventyEight = 0;\n  let primesCountMinusEightyEight = 0;\n  let primesCountMinusNinetyEight = 0;\n  let primesCountMinusTwentyNine = 0;\n  let primesCountMinusThirtyNine = 0;\n  let primesCountMinusFortyNine = 0;\n  let primesCountMinusFiftyNine = 0;\n  let primesCountMinusSixtyNine = 0;\n  let primesCountMinusSeventyNine = 0;\n  let primesCountMinusEightyNine = 0;\n  let primesCountMinusNinetyNine = 0;\n  let primesCountMinusTwentyTen = 0;\n  let primesCountMinusThirtyTen = 0;\n  let primesCountMinusFortyTen = 0;\n  let primesCountMinusFiftyTen = 0;\n  let primesCountMinusSixtyTen = 0;\n  let primesCountMinusSeventyTen = 0;\n  let primesCountMinusEightyTen = 0;\n  let primesCountMinusNinetyTen = 0;\n  let primesCountMinusTwentyEleven = 0;\n  let primesCountMinusThirtyEleven = 0;\n  let primesCountMinusFortyEleven = 0;\n  let primesCountMinusFiftyEleven = 0;\n  let primesCountMinusSixtyEleven = 0;\n  let primesCountMinusSeventyEleven = 0;\n  let primesCountMinusEightyEleven = 0;\n  let primesCountMinusNinetyEleven = 0;\n  let primesCountMinusTwentyTwelve = 0;\n  let primesCountMinusThirtyTwelve = 0;\n  let primesCountMinusFortyTwelve = 0;\n  let primesCountMinusFiftyTwelve = 0;\n  let primesCountMin"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  let product = 1;\n  for (let i = a; i <= b; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 28.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 14.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  for (let i = a; i <= b; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  diff(148, 412) should return -14.\n  diff(19, 28) should return 28.\n  diff(2020, 1851) should return 1851.\n  diff(14,-15) should return 14.\n  */\nconst diff = (a, b) => {\n  let diff = 0;\n  for (let i = a; i <= b; i++) {\n    diff += i;\n  }\n  return diff;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst abs = (a, b) => {\n  let diff = Math.abs(diff(a, b));\n  return diff;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst abs2 = (a, b) => {\n  let diff = Math.abs(diff2(a, b));\n  return diff;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst abs2abs = (a, b) => {\n  let diff = Math.abs(diff2abs(a, b));\n  return diff;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst absdiff = (a, b) => {\n  let diff = Math.abs(diff(a, b));\n  return diff;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst absdiff2 = (a, b) => {\n  let diff = Math.abs(diff2(a, b));\n  return diff;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst absdiff2abs = (a, b) => {\n  let diff = Math.abs(diff2abs(a, b));\n  return diff;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst absdiff3 = (a, b) => {\n  let diff = Math.abs(diff3(a, b));\n  return diff;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst absdiff3abs = (a, b) => {\n  let diff = Math.abs(diff3abs(a, b));\n  return diff;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst absdiff4 = (a, b) => {\n  let diff = Math.abs(diff4(a, b));\n  return diff;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst absdiff4abs = (a, b) => {\n  let diff = Math.abs(diff4abs(a, b));\n  return diff;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst absdiff5 = (a, b) => {\n  let diff = Math.abs(diff5(a, b));\n  return diff;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst absdiff5abs = (a, b) => {\n  let diff = Math.abs(diff5abs(a, b));\n  return diff;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always "}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1])\n      count++;\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1])\n      count++;\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1])\n      count++;\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  considerLower('aBCdEf') returns 1\n  considerLower('abcdefg') returns 0\n  considerLower('dBBE') returns 0\n  */\nconst considerLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1])\n      count++;\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1])\n      count++;\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1])\n      count++;\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  considerVowel('aBCdEf') returns 1\n  considerVowel('abcdefg') returns 0\n  considerVowel('dBBE') returns 0\n  */\nconst considerVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1])\n      count++;\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1])\n      count++;\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1])\n      count++;\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  considerSpace('aBCdEf') returns 1\n  considerSpace('abcdefg') returns 0\n  considerSpace('dBBE') returns 0\n  */\nconst considerSpace = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1])\n      count++;\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1])\n      count++;\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1])\n      count++;\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of numbers in even indices.\n  \n  For example:\n  considerNumber('aBCdEf') returns 1\n  considerNumber('abcdefg') returns 0\n  considerNumber('dBBE') returns 0\n  */\nconst considerNumber = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1])\n      count++;\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1])\n      count++;\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1])\n      count++;\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in odd indices.\n  \n  For example:\n  considerSpace('aBCdEf') returns 1\n  considerSpace('abcdefg') returns 0\n  considerSpace('dBBE') returns 0\n  */\nconst considerSpaceOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1])\n      count++;\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1])\n      count++;\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1])\n      count++;\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  considerSpace('aBCdEf') returns 1\n  considerSpace('abcdefg') returns 0\n  considerSpace('dBBE') returns 0\n  */\nconst considerSpaceEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1])\n      count++;\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1])\n      count++;\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1])\n      count++;\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in odd indices.\n  \n  For example:\n  considerSpace('aBCdEf') returns 1\n  considerSpace('abcdefg') returns 0\n  considerSpace('dBBE') returns 0\n  */\nconst considerSpaceOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1])\n      count++;\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1])\n      count++;\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1])\n      count++;\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  considerSpace('aBCdEf') returns 1\n  considerSpace('abcdefg') returns 0\n  considerSpace('dBBE') returns 0\n  */\nconst considerSpaceEvenOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1])\n      count++;\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1])\n      count++;\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1])\n      count++;\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in odd indices.\n  \n  For example:\n  considerSpace('aBCdEf') returns 1\n  considerSpace('abcdefg') returns 0\n  considerSpace('dBBE') returns 0\n  */\nconst considerSpaceOddEvenOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1])\n      count++;\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1])\n      count++;\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1])\n      count++;\n    k++;"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1Rounded, integer2Rounded] = integer1.split(\".\")\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRounded, integer2RoundedRounded] = integer2\n   .split(\".\")\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRounded, integer2RoundedRoundedRounded] = integer1RoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer2RoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer2RoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer2RoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer1RoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer2RoundedRoundedRounded\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer1Roun"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  let numOfLevels = Math.ceil(n / 2);\n  while (level < numOfLevels) {\n    levels.push(level);\n    levelCount++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  let numOfLevels = Math.ceil(n / 2);\n  while (level < numOfLevels) {\n    levels.push(level);\n    levelCount++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  let numOfLevels = Math.ceil(n / 2);\n  while (level < numOfLevels) {\n    levels.push(level);\n    levelCount++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  let numOfLevels = Math.ceil(n / 2);\n  while (level < numOfLevels) {\n    levels.push(level);\n    levelCount++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  let numOfLevels = Math.ceil(n / 2);\n  while (level < numOfLevels) {\n    levels.push(level);\n    levelCount++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  let numOfLevels = Math.ceil(n / 2);\n  while (level < numOfLevels) {\n    levels.push(level);\n    levelCount++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  let numOfLevels = Math.ceil(n / 2);\n  while (level < numOfLevels) {\n    levels.push(level);\n    levelCount++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  let numOfLevels = Math.ceil(n / 2);\n  while (level < numOfLevels) {\n    levels.push(level);\n    levelCount++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  let numOfLevels = Math.ceil(n / 2);\n  while (level < numOfLevels) {\n    levels.push(level);\n    levelCount++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You will\n  also need to return the length of the array.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleString(\"Hi, my name is John, how are you\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"how\", \"are\", \"you\"]\n  */\nconst bibleStringLength = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You will\n  also need to return the length of the array.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleString(\"Hi, my name is John, how are you\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"how\", \"are\", \"you\"]\n  */\nconst bibleStringLengthAndWords = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words.length, words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You will\n  also need to return the length of the array.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleString(\"Hi, my name is John, how are you\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"how\", \"are\", \"you\"]\n  */\nconst bibleStringLengthAndWordsAndLength = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words.length, words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You will\n  also need to return the length of the array.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleString(\"Hi, my name is John, how are you\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"how\", \"are\", \"you\"]\n  */\nconst bibleStringLengthAndWordsAndLengthAndWords = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words.length, words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You will\n  also need to return the length of the array.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleString(\"Hi, my name is John, how are you\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"how\", \"are\", \"you\"]\n  */\nconst bibleStringLengthAndWordsAndLengthAndWordsAndLength = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words.length, words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You will\n  also need to return the length of the array.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleString(\"Hi, my name is John, how are you\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"how\", \"are\", \"you\"]\n  */\nconst bibleStringLengthAndWordsAndLengthAndWordsAndLength = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words.length, words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You will\n  also need to return the length of the array.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleString(\"Hi, my name is John, how are you\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"how\", \"are\", \"you\"]\n  */\nconst bibleStringLengthAndWordsAndLengthAndWordsAndLengthAndWords = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words.length, words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You will\n  also need to return the length of the array.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  bibleString(\"Hi, my name is John, how are you\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"how\", \"are\", \"you\"]\n  */\nconst bibleStringLengthAndWordsAndLengthAndWordsAndLengthAndWordsAndLength = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words.length, words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to split the string into words and return an array of the words. You will\n  also need to return the length of the array.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || x < 0 || y < 0) {\n    return -1;\n  }\n  let result = 0;\n  let num = 1;\n  while (true) {\n    if (x % 2 === 0) {\n      num *= 2;\n    }\n    if (y % 2 === 0) {\n      num *= 2;\n    }\n    if (num % 2 === 0) {\n      result += num;\n    }\n    if (num === x) {\n      return result;\n    }\n    num *= 2;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || x < 0 || y < 0) {\n    return -1;\n  }\n  let result = 0;\n  let num = 1;\n  while (true) {\n    if (x % 2 === 0) {\n      num *= 2;\n    }\n    if (y % 2 === 0) {\n      num *= 2;\n    }\n    if (num % 2 === 0) {\n      result += num;\n    }\n    if (num === x) {\n      return result;\n    }\n    num *= 2;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || x < 0 || y < 0) {\n    return -1;\n  }\n  let result = 0;\n  let num = 1;\n  while (true) {\n    if (x % 2 === 0) {\n      num *= 2;\n    }\n    if (y % 2 === 0) {\n      num *= 2;\n    }\n    if (num % 2 === 0) {\n      result += num;\n    }\n    if (num === x) {\n      return result;\n    }\n    num *= 2;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest positive integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || x < 0 || y < 0) {\n    return -1;\n  }\n  let result = 0;\n  let num = 1;\n  while (true) {\n    if (x % 2 === 0) {\n      num *= 2;\n    }\n    if (y % 2 === 0) {\n      num *= 2;\n    }\n    if (num % 2 === 0) {\n      result += num;\n    }\n    if (num === x) {\n      return result;\n    }\n    num *= 2;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest negative integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || x < 0 || y < 0) {\n    return -1;\n  }\n  let result = 0;\n  let num = 1;\n  while (true) {\n    if (x % 2 === 0) {\n      num *= 2;\n    }\n    if (y % 2 === 0) {\n      num *= 2;\n    }\n    if (num % 2 === 0) {\n      result += num;\n    }\n    if (num === x) {\n      return result;\n    }\n    num *= 2;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest positive integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || x < 0 || y < 0) {\n    return -1;\n  }\n  let result = 0;\n  let num = 1;\n  while (true) {\n    if (x % 2 === 0) {\n      num *= 2;\n    }\n    if (y % 2 === 0) {\n      num *= 2;\n    }\n    if (num % 2 === 0) {\n      result += num;\n    }\n    if (num === x) {\n      return result;\n    }\n    num *= 2;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest negative integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || x < 0 || y < 0) {\n    return -1;\n  }\n  let result = 0;\n  let num = 1;\n  while (true) {\n    if (x % 2 === 0) {\n      num *= 2;\n    }\n    if (y % 2 === 0) {\n      num *= 2;\n    }\n    if (num % 2 === 0) {\n      result += num;\n    }\n    if (num === x) {\n      return result;\n    }\n    num *= 2;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest positive integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || x < 0 || y < 0) {\n    return -1;\n  }\n  let result = 0;\n  let num = 1;\n  while (true) {\n    if (x % 2 === 0) {\n      num *= 2;\n    }\n    if (y % 2 === 0) {\n      num *= 2;\n    }\n    if (num % 2 === 0) {\n      result += num;\n    }\n    if (num === x) {\n      return result;\n    }\n    num *= 2;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest negative integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || x < 0 || y < 0) {\n    return -1;\n  }\n  let result = 0;\n  let num = 1;\n  while (true) {\n    if (x % 2 === 0) {\n      num *= 2;\n    }\n    if (y % 2 === 0) {\n      num *= 2;\n    }\n    if (num % 2 === 0) {\n      result += num;\n    }\n    if (num === x) {\n      return result;\n    }\n    num *= 2;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest positive integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || x < 0 || y < 0) {\n    return -1;\n  }\n  let result = 0;\n  let num = 1;\n  while (true) {\n    if (x % 2 === 0) {\n      num *= 2;\n    }\n    if (y % 2 === 0) {\n      num *= 2;\n    }\n    if (num % 2 === 0) {\n      result += num;\n    }\n    if (num === x) {\n      return result;\n    }\n    num *= 2;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest negative integer "}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let binary = \"\";\n  let count = 0;\n  let remainder = n % m;\n  let remainder2 = m % 2;\n  while (n >= m) {\n    sum += n % m;\n    n /= m;\n    count++;\n  }\n  while (m >= n) {\n    sum += m % n;\n    m /= n;\n    count++;\n  }\n  while (count > 0) {\n    binary = \"0\" + binary;\n    count--;\n  }\n  if (remainder!== 0) {\n    binary = \"1\" + binary;\n  }\n  if (remainder2!== 0) {\n    binary = \"0\" + binary;\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  largest power of 2 that is less than or equal to n. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  powerOf2(3, 5) => \"0b11\"\n  powerOf2(7, 5) => -1\n  powerOf2(10, 20) => \"0b1111\"\n  powerOf2(20, 33) => \"0b11010\"\n  */\nconst powerOf2 = (n, m) => {\n  let sum = 0;\n  let binary = \"\";\n  let count = 0;\n  let remainder = n % m;\n  let remainder2 = m % 2;\n  while (n >= m) {\n    sum += n % m;\n    n /= m;\n    count++;\n  }\n  while (m >= n) {\n    sum += m % n;\n    m /= n;\n    count++;\n  }\n  while (count > 0) {\n    binary = \"0\" + binary;\n    count--;\n  }\n  if (remainder!== 0) {\n    binary = \"1\" + binary;\n  }\n  if (remainder2!== 0) {\n    binary = \"0\" + binary;\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  smallest power of 2 that is less than or equal to n. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  powerOf2(3, 5) => \"0b11\"\n  powerOf2(7, 5) => -1\n  powerOf2(10, 20) => \"0b1111\"\n  powerOf2(20, 33) => \"0b11010\"\n  */\nconst powerOf2MinusOne = (n, m) => {\n  let sum = 0;\n  let binary = \"\";\n  let count = 0;\n  let remainder = n % m;\n  let remainder2 = m % 2;\n  while (n >= m) {\n    sum += n % m;\n    n /= m;\n    count++;\n  }\n  while (m >= n) {\n    sum += m % n;\n    m /= n;\n    count++;\n  }\n  while (count > 0) {\n    binary = \"0\" + binary;\n    count--;\n  }\n  if (remainder!== 0) {\n    binary = \"1\" + binary;\n  }\n  if (remainder2!== 0) {\n    binary = \"0\" + binary;\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  largest power of 2 that is less than or equal to n. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  powerOf2(3, 5) => \"0b11\"\n  powerOf2(7, 5) => -1\n  powerOf2(10, 20) => \"0b1111\"\n  powerOf2(20, 33) => \"0b11010\"\n  */\nconst powerOf2MinusOneMinusOne = (n, m) => {\n  let sum = 0;\n  let binary = \"\";\n  let count = 0;\n  let remainder = n % m;\n  let remainder2 = m % 2;\n  while (n >= m) {\n    sum += n % m;\n    n /= m;\n    count++;\n  }\n  while (m >= n) {\n    sum += m % n;\n    m /= n;\n    count++;\n  }\n  while (count > 0) {\n    binary = \"0\" + binary;\n    count--;\n  }\n  if (remainder!== 0) {\n    binary = \"1\" + binary;\n  }\n  if (remainder2!== 0) {\n    binary = \"0\" + binary;\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  smallest power of 2 that is less than or equal to n. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  powerOf2(3, 5) => \"0b11\"\n  powerOf2(7, 5) => -1\n  powerOf2(10, 20) => \"0b1111\"\n  powerOf2(20, 33) => \"0b11010\"\n  */\nconst powerOf2MinusOneMinusOneMinusOne = (n, m) => {\n  let sum = 0;\n  let binary = \"\";\n  let count = 0;\n  let remainder = n % m;\n  let remainder2 = m % 2;\n  while (n >= m) {\n    sum += n % m;\n    n /= m;\n    count++;\n  }\n  while (m >= n) {\n    sum += m % n;\n    m /= n;\n    count++;\n  }\n  while (count > 0) {\n    binary = \"0\" + binary;\n    count--;\n  }\n  if (remainder!== 0) {\n    binary = \"1\" + binary;\n  }\n  if (remainder2!== 0) {\n    binary = \"0\" + binary;\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  largest power of 2 that is less than or equal to n. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  powerOf2(3, 5) => \"0b11\"\n  powerOf2(7, 5) => -1\n  powerOf2(10, 20) => \"0b1111\"\n  powerOf2(20, 33) => \"0b11010\"\n  */\nconst powerOf2MinusOneMinusOneMinusOneMinusOne = (n, m) => {\n  let sum = 0;\n  let binary = \"\";\n  let count = 0;\n  let remainder = n % m;\n  let remainder2 = m % 2;\n  while (n >= m) {\n    sum += n % m;\n    n /= m;\n    count++;\n  }\n  while (m >= n) {\n    sum += m % n;\n    m /= n;\n    count++;\n  }\n  while (count > 0) {\n    binary = \"0\" + binary;\n    count--;\n  }\n  if (remainder!== 0) {\n    binary = \"1\" + binary;\n  }\n  if (remainder2!== 0) {\n    binary = \"0\" + binary;\n  }\n  return binary;\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  smallest power of 2 that is less than or equal to n. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  powerOf2(3, 5) => \"0b11\"\n  powerOf2(7, 5"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n  let result = []\n  let digit = 0\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    if(!isEven(x[i])) {\n      digit = x[i]\n      break\n    }\n  }\n  \n  for(i = 0; i < x.length; i++) {\n    if(isEven(x[i])) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only odd digits.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> oddDigit([15, 33, 1422, 1])\n  [1, 15]\n  >>> oddDigit([152, 323, 1422, 10])\n  []\n  */\nconst oddDigit = (x) => {\n  let result = []\n  let digit = 0\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    if(isEven(x[i])) {\n      digit = x[i]\n      break\n    }\n  }\n  \n  for(i = 0; i < x.length; i++) {\n    if(!isEven(x[i])) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only even digits.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> evenDigit([15, 33, 1422, 1])\n  [1, 33]\n  >>> evenDigit([152, 323, 1422, 10])\n  []\n  */\nconst evenDigit = (x) => {\n  let result = []\n  let digit = 0\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    if(isEven(x[i])) {\n      digit = x[i]\n      break\n    }\n  }\n  \n  for(i = 0; i < x.length; i++) {\n    if(!isEven(x[i])) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only odd or even digits.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> oddOrEvenDigit([15, 33, 1422, 1])\n  [1, 15]\n  >>> oddOrEvenDigit([152, 323, 1422, 10])\n  []\n  */\nconst oddOrEvenDigit = (x) => {\n  let result = []\n  let digit = 0\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    if(isEven(x[i])) {\n      digit = x[i]\n      break\n    }\n  }\n  \n  for(i = 0; i < x.length; i++) {\n    if(isOdd(x[i])) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only odd or even digits and has at least one \n  even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> oddOrEvenDigit([15, 33, 1422, 1])\n  [1, 15]\n  >>> oddOrEvenDigit([152, 323, 1422, 10])\n  []\n  */\nconst oddOrEvenDigitWithOneEvenDigit = (x) => {\n  let result = []\n  let digit = 0\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    if(isEven(x[i])) {\n      digit = x[i]\n      break\n    }\n  }\n  \n  for(i = 0; i < x.length; i++) {\n    if(isOdd(x[i]) && isEven(x[i])) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only odd or even digits and has at least one \n  odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> oddOrEvenDigitWithOneEvenDigit([15, 33, 1422, 1])\n  [1, 15]\n  >>> oddOrEvenDigitWithOneEvenDigit([152, 323, 1422, 10])\n  []\n  */\nconst oddOrEvenDigitWithOneOddDigit = (x) => {\n  let result = []\n  let digit = 0\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    if(isEven(x[i])) {\n      digit = x[i]\n      break\n    }\n  }\n  \n  for(i = 0; i < x.length; i++) {\n    if(isOdd(x[i]) &&!isEven(x[i])) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only odd or even digits and has at least one \n  even digit and has at least one odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> oddOrEvenDigitWithOneOddDigit([15, 33, 1422, 1])\n  [1, 15]\n  >>> oddOrEvenDigitWithOneOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst oddOrEvenDigitWithOneOddDigitWithOneEvenDigit = (x) => {\n  let result = []\n  let digit = 0\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    if(isEven(x[i])) {\n      digit = x[i]\n      break\n    }\n  }\n  \n  for(i = 0; i < x.length; i++) {\n    if(isOdd(x[i]) && isEven(x[i])) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  for(i = 0; i < x.length; i++) {\n    if(isOdd(x[i]) &&!isEven(x[i])) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only odd or even digits and has at least one \n  even digit and has at least one odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> oddOrEvenDigitWithOneOddDigitWithOneEvenDigit([15, 33, 1422, 1])\n  [1, 15]\n  >>> oddOrEvenDigitWithOneOddDigitWithOneEvenDigit([152, 323, 1422, 10])\n  []\n  */\nconst oddOrEvenDigitWithOneOddDigitWithOneOddDigit = (x) => {\n  let result = []\n  let digit = 0\n  let i\n  \n  for(i = 0; i < x.length; i++) {\n    if(isEven(x[i])) {\n      digit = x[i]\n      break\n    }\n  }\n  \n  for(i = 0; i < x.length; i++) {\n    if(isOdd(x[i]) &&!isEven(x[i])) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  for(i = 0; i < x.length; i++) {\n    if(isOdd(x[i]) && isEven(x[i])) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has only odd or even digits and has at least one \n  even digit and has at least one odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> "}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n  const durations = [\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n  ];\n  const reversed = arr.sort((a, b) => a - b);\n  const reversedArr = reversed.map(digit => durations.indexOf(digit));\n  return reversedArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDurationAndDuration = (arr) => {\n  const durations = [\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n  ];\n  const reversed = arr.sort((a, b) => a - b);\n  const reversedArr = reversed.map(digit => durations.indexOf(digit));\n  return reversedArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDurationAndDurationAndDuration = (arr) => {\n  const durations = [\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n  ];\n  const reversed = arr.sort((a, b) => a - b);\n  const reversedArr = reversed.map(digit => durations.indexOf(digit));\n  return reversedArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDurationAndDurationAndDurationAndDuration = (arr) => {\n  const durations = [\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n  ];\n  const reversed = arr.sort((a, b) => a - b);\n  const reversedArr = reversed.map(digit => durations.indexOf(digit));\n  return reversedArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDurationAndDurationAndDurationAndDurationAndDuration = (arr) => {\n  const durations = [\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n  ];\n  const reversed = arr.sort((a, b) => a - b);\n  const reversedArr = reversed.map(digit => durations.indexOf(digit));\n  return reversedArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((a, b) => a * b, 1));\n    }\n  }\n  return result;\n};\n\n// Write a function that takes an integer n and returns the sum of the numbers from 1 to n.\n// Example:\n// sum(1, 2) == 3\n// sum(1, 3) == 6\n// sum(1, 4) == 10\n// sum(1, 5) == 15\n// sum(1, 6) == 21\n// sum(1, 7) == 24\n// sum(1, 8) == 28\n// sum(1, 9) == 31\n// sum(1, 10) == 36\n// sum(1, 11) == 41\n// sum(1, 12) == 46\n// sum(1, 13) == 54\n// sum(1, 14) == 61\n// sum(1, 15) == 66\n// sum(1, 16) == 72\n// sum(1, 17) == 78\n// sum(1, 18) == 86\n// sum(1, 19) == 91\n// sum(1, 20) == 102\n// sum(1, 21) == 106\n// sum(1, 22) == 120\n// sum(1, 23) == 126\n// sum(1, 24) == 132\n// sum(1, 25) == 144\n// sum(1, 26) == 156\n// sum(1, 27) == 168\n// sum(1, 28) == 176\n// sum(1, 29) == 184\n// sum(1, 30) == 192\n// sum(1, 31) == 200\n// sum(1, 32) == 206\n// sum(1, 33) == 212\n// sum(1, 34) == 216\n// sum(1, 35) == 220\n// sum(1, 36) == 224\n// sum(1, 37) == 228\n// sum(1, 38) == 232\n// sum(1, 39) == 236\n// sum(1, 40) == 240\n// sum(1, 41) == 244\n// sum(1, 42) == 246\n// sum(1, 43) == 252\n// sum(1, 44) == 256\n// sum(1, 45) == 260\n// sum(1, 46) == 264\n// sum(1, 47) == 268\n// sum(1, 48) == 272\n// sum(1, 49) == 276\n// sum(1, 50) == 280\n// sum(1, 51) == 284\n// sum(1, 52) == 288\n// sum(1, 53) == 292\n// sum(1, 54) == 296\n// sum(1, 55) == 300\n// sum(1, 56) == 304\n// sum(1, 57) == 308\n// sum(1, 58) == 312\n// sum(1, 59) == 316\n// sum(1, 60) == 320\n// sum(1, 61) == 324\n// sum(1, 62) == 328\n// sum(1, 63) == 332\n// sum(1, 64) == 336\n// sum(1, 65) == 340\n// sum(1, 66) == 344\n// sum(1, 67) == 346\n// sum(1, 68) == 350\n// sum(1, 69) == 354\n// sum(1, 70) == 356\n// sum(1, 71) == 360\n// sum(1, 72) == 364\n// sum(1, 73) == 366\n// sum(1, 74) == 370\n// sum(1, 75) == 372\n// sum(1, 76) == 376\n// sum(1, 77) == 380\n// sum(1, 78) == 384\n// sum(1, 79) == 388\n// sum(1, 80) == 392\n// sum(1, 81) == 396\n// sum(1, 82) == 400\n// sum(1, 83) == 404\n// sum(1, 84) == 406\n// sum(1, 85) == 408\n// sum(1, 86) == 412\n// sum(1, 87) == 414\n// sum(1, 88) == 416\n// sum(1, 89) == 420\n// sum(1, 90) == 424\n// sum(1, 91) == 426\n// sum(1, 92) == 428\n// sum(1, 93) == 430\n// sum(1, 94) == 434\n// sum(1, 95) == 436\n// sum(1, 96) == 441\n// sum(1, 97) == 444\n// sum(1, 98) == 447\n// sum(1, 99) == 450\n// sum(1, 100) == 454\n// sum(1, 101) == 456\n// sum(1, 102) == 458\n// sum(1, 103) == 460\n// sum(1, 104) == 464\n// sum(1, 105) == 466\n// sum(1, 106) == 468\n// sum(1, 107) == 470\n// sum(1, 108) == 472\n// sum(1, 109) == 474\n// sum(1, 110) == 476\n// sum(1, 111) == 480\n// sum(1, 112) == 484\n// sum(1, 113) == 486\n// sum(1, 114) == 490\n// sum(1, 115) == 492\n// sum(1, 116) == 494\n// sum(1, 117) == 496\n// sum(1, 118) == 498\n// sum(1, 119) == 500\n// sum(1, 120) == 504\n// sum(1, 121) == 506\n// sum(1, 122) == 508\n// sum(1, 123) == 510\n// sum(1, 124) == 512\n// sum(1, 125) == 514\n// sum(1, 126) == 516\n// sum(1, 127) == 518\n// sum(1, 128) == 520\n// sum(1, 129) == 522\n// sum(1, 130) == 524\n// sum(1, 131) == 526\n// sum(1, 132) == 528\n// sum(1, 133) == 530\n// sum(1, 134) == 532\n// sum(1, 135) == 534\n// sum(1, 136) == 536\n// sum(1, 137) == 538\n// sum(1, 138) == 540\n// sum(1, 139) == 542\n// sum(1, 140) == 544\n// sum(1, 141) == 546\n// sum(1, 142) == 548\n// sum(1, 143) == 550\n// sum(1, 144) == 554\n// sum(1, 145) == 556\n// sum(1, 146) == 560\n// sum(1, 147) == 562\n// sum(1, 148) == 564\n// sum(1, 149) == 566\n// sum(1, 150) == 568\n// sum(1, 151) == 570\n// sum(1, 152) == 572\n// sum(1, 153) == 574\n// sum(1, 154) == 576\n// sum(1, 155) == 578\n// sum(1, 156) == 580\n// sum(1, 157) == 584\n// sum(1, 158) == 588\n// sum(1, 159) == 590\n// sum(1, 160) == 592\n// sum(1, 161) == 594\n// sum(1, 162) == 596\n// sum(1, 163) == 598\n// sum(1, 164) == 600\n// sum(1, 165) == 604\n// sum(1, 166) == 606\n// sum(1, 167) == 608\n// sum(1, 168) == 610\n// sum(1, 169) == 612\n// sum(1, 170) == 614\n// sum(1, 171) == 616\n// sum(1, 172) == 618\n// sum(1, 173) == 620\n// sum(1, 174) == 624\n// sum(1, 175) == 626\n// sum(1, 176) == 628\n// sum(1, 177) == 630\n// sum(1, 178) == 632\n// sum(1, 179) == 634\n// sum(1, 180) == 636\n// sum(1, 181) == 638\n// sum(1, 182) == 640\n// sum(1, 183) == 642\n// sum(1, 184) == 644\n// sum(1, 185) == 646\n// sum"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let evenPalindrome = 0;\n  let oddPalindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindrome++;\n    } else {\n      oddPalindrome++;\n    }\n  }\n  return [evenPalindrome, oddPalindrome];\n};\n\n// Given a positive integer n, return an integer that is the sum of all even\n// and odd integer palindromes that fall within the range(1, n), inclusive.\n\n// Example 1:\n\n//     Input: 3\n//     Output: 4\n//     Explanation:\n//     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n//     Input: 12\n//     Output: 12\n//     Explanation:\n//     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n//     1 <= n <= 10^3\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls within the range(1, n), inclusive.\n//     The sum of all even and odd integer palindromes falls "}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "<|endoftext|>/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      sum += num * -1;\n    } else {\n      sum += num;\n    }\n  }\n  return sum > 0;\n};\n\n/*\n  Write a function sumDigits which takes an array of integers and returns\n  the number of digits in that array.\n  >>> sumDigits([]) == 0\n  >>> sumDigits([-1, 11, -11]) == 0\n  >>> sumDigits([1, 1, 2]) == 0\n  >>> sumDigits([1, 2, -3]) == 2\n  >>> sumDigits([1, 2, -4, -5]) == 3\n  >>> sumDigits([1, 2, -4, -5, -6, -7, -8, -9]) == 9\n  */\nconst sumDigits = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString().length;\n  }\n  return sum;\n};\n\n/*\n  Write a function findMax which takes an array of integers and returns\n  the largest integer in the array.\n  >>> findMax([-1, 11, -11]) == 11\n  >>> findMax([1, 1, 2]) == 3\n  >>> findMax([1, 2, -3]) == 3\n  >>> findMax([1, 2, -4, -5]) == 5\n  >>> findMax([1, 2, -4, -5, -6, -7, -8, -9]) == 9\n  */\nconst findMax = (arr) => {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Write a function findMin which takes an array of integers and returns\n  the smallest integer in the array.\n  >>> findMin([-1, 11, -11]) == -11\n  >>> findMin([1, 1, 2]) == 1\n  >>> findMin([1, 2, -3]) == 1\n  >>> findMin([1, 2, -4, -5]) == 1\n  >>> findMin([1, 2, -4, -5, -6, -7, -8, -9]) == 1\n  */\nconst findMin = (arr) => {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Write a function findRange which takes an array of integers and returns\n  the range of the integers in the array.\n  >>> findRange([-1, 11, -11]) == [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]\n  >>> findRange([1, 1, 2]) == [-1, 1, 2, 2]\n  >>> findRange([1, 2, -3]) == [-1, 2, -3]\n  >>> findRange([1, 2, -4, -5]) == [-2, -4, -5, -6, -7, -8, -9]\n  */\nconst findRange = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*\n  Write a function findEvens which, given an array of integers, returns the\n  array of integers which have even digits.\n  >>> findEvens([-1, 11, -11]) == [-1, 11, -11]\n  >>> findEvens([1, 1, 2]) == [1, 1, 2]\n  >>> findEvens([1, 2, -3]) == [1, 2, -3]\n  >>> findEvens([1, 2, -4, -5]) == [1, 2, -4, -5]\n  >>> findEvens([1, 2, -4, -5, -6, -7, -8, -9]) == [1, 2, -4, -5, -6, -7, -8, -9]\n  */\nconst findEvens = (arr) => {\n  let evens = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evens.push(arr[i]);\n    }\n  }\n  return evens;\n};\n\n/*\n  Write a function findOdds which, given an array of integers, returns the\n  array of integers which have odd digits.\n  >>> findOdds([-1, 11, -11]) == [-1, 11, -11]\n  >>> findOdds([1, 1, 2]) == [1, 1, 2]\n  >>> findOdds([1, 2, -3]) == [1, 2, -3]\n  >>> findOdds([1, 2, -4, -5]) == [1, 2, -4, -5]\n  >>> findOdds([1, 2, -4, -5, -6, -7, -8, -9]) == [1, 2, -4, -5, -6, -7, -8, -9]\n  */\nconst findOdds = (arr) => {\n  let odds = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      odds.push(arr[i]);\n    }\n  }\n  return odds;\n};\n\n/*\n  Write a function findDivisors which, given an array of integers, returns\n  the array of integers which divide evenly into each of the given integers.\n  >>> findDivisors([-1, 11, -11]) == [-1, 11, -11]\n  >>> findDivisors([1, 1, 2]) == [1, 1, 2]\n  >>> findDivisors([1, 2, -3]) == [1, 2, -3]\n  >>> findDivisors([1, 2, -4, -5]) == [1, 2, -4, -5]\n  >>> findDivisors([1, 2, -4, -5, -6, -7, -8, -9]) == [1, 2, -4, -5, -6, -7, -8, -9]\n  */\nconst findDivisors = (arr) => {\n  let divisors = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      divisors.push(arr[i]);\n    }\n  }\n  return divisors;\n};\n\n/*\n  Write a function findFactors which, given an array of integers, returns\n  the array of integers which divide evenly into each of the given integers.\n  >>> findFactors([-1, 11, -11]) == [-1, 11, -11]\n  >>> findFactors([1, 1, 2]) == [1, 1, 2]\n  >>> findFactors([1, 2, -3]) == [1, 2, -3]\n  >>> findFactors([1, 2, -4, -5]) == [1, 2, -4, -5]\n  >>> findFactors([1, 2, -4, -5, -6, -7, -8, -9]) == [1, 2, -4, -5, -6, -7, -8, -9]\n  */\nconst findFactors = (arr) => {\n  let factors = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      factors.push(arr[i]);\n    }\n  }\n  return factors;\n};\n\n/*\n  Write a function findGCD which, given an array of integers, returns the\n  greatest common divisor of the given integers.\n  >>> findGCD([-1, 11, -11]) == 11\n  >>> findGCD([1, 1, 2]) == 2\n  >>> findGCD([1, 2, -3]) == 3\n  >>> findGCD([1, 2, -4, -5]) == 5\n  >>> findGCD([1, 2, -4, -5, -6, -7, -8, -9]) == 9\n  */\nconst findGCD = (arr) => {\n  let gcd = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      gcd = gcd(arr[i], arr[i]);\n    }\n  }\n  return gcd;\n};\n\n/*\n  Write a function findGCD which, given an array of integers, returns the\n  least common multiple of the given integers.\n  >>> findGCD([-1, 11, -11]) == -11\n  >>> findGCD([1, 1, 2]) == 1\n  >>> find"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n  let arrLength = arr.length;\n  let arrIndex = 0;\n  let arrTemp = [];\n  let arrTemp2 = [];\n  let arrTemp3 = [];\n  let arrTemp4 = [];\n  let arrTemp5 = [];\n  let arrTemp6 = [];\n  let arrTemp7 = [];\n  let arrTemp8 = [];\n  let arrTemp9 = [];\n  let arrTemp10 = [];\n  let arrTemp11 = [];\n  let arrTemp12 = [];\n  let arrTemp13 = [];\n  let arrTemp14 = [];\n  let arrTemp15 = [];\n  let arrTemp16 = [];\n  let arrTemp17 = [];\n  let arrTemp18 = [];\n  let arrTemp19 = [];\n  let arrTemp20 = [];\n  let arrTemp21 = [];\n  let arrTemp22 = [];\n  let arrTemp23 = [];\n  let arrTemp24 = [];\n  let arrTemp25 = [];\n  let arrTemp26 = [];\n  let arrTemp27 = [];\n  let arrTemp28 = [];\n  let arrTemp29 = [];\n  let arrTemp30 = [];\n  let arrTemp31 = [];\n  let arrTemp32 = [];\n  let arrTemp33 = [];\n  let arrTemp34 = [];\n  let arrTemp35 = [];\n  let arrTemp36 = [];\n  let arrTemp37 = [];\n  let arrTemp38 = [];\n  let arrTemp39 = [];\n  let arrTemp40 = [];\n  let arrTemp41 = [];\n  let arrTemp42 = [];\n  let arrTemp43 = [];\n  let arrTemp44 = [];\n  let arrTemp45 = [];\n  let arrTemp46 = [];\n  let arrTemp47 = [];\n  let arrTemp48 = [];\n  let arrTemp49 = [];\n  let arrTemp50 = [];\n  let arrTemp51 = [];\n  let arrTemp52 = [];\n  let arrTemp53 = [];\n  let arrTemp54 = [];\n  let arrTemp55 = [];\n  let arrTemp56 = [];\n  let arrTemp57 = [];\n  let arrTemp58 = [];\n  let arrTemp59 = [];\n  let arrTemp60 = [];\n  let arrTemp61 = [];\n  let arrTemp62 = [];\n  let arrTemp63 = [];\n  let arrTemp64 = [];\n  let arrTemp65 = [];\n  let arrTemp66 = [];\n  let arrTemp67 = [];\n  let arrTemp68 = [];\n  let arrTemp69 = [];\n  let arrTemp70 = [];\n  let arrTemp71 = [];\n  let arrTemp72 = [];\n  let arrTemp73 = [];\n  let arrTemp74 = [];\n  let arrTemp75 = [];\n  let arrTemp76 = [];\n  let arrTemp77 = [];\n  let arrTemp78 = [];\n  let arrTemp79 = [];\n  let arrTemp80 = [];\n  let arrTemp81 = [];\n  let arrTemp82 = [];\n  let arrTemp83 = [];\n  let arrTemp84 = [];\n  let arrTemp85 = [];\n  let arrTemp86 = [];\n  let arrTemp87 = [];\n  let arrTemp88 = [];\n  let arrTemp89 = [];\n  let arrTemp90 = [];\n  let arrTemp91 = [];\n  let arrTemp92 = [];\n  let arrTemp93 = [];\n  let arrTemp94 = [];\n  let arrTemp95 = [];\n  let arrTemp96 = [];\n  let arrTemp97 = [];\n  let arrTemp98 = [];\n  let arrTemp99 = [];\n  let arrTemp100 = [];\n  let arrTemp101 = [];\n  let arrTemp102 = [];\n  let arrTemp103 = [];\n  let arrTemp104 = [];\n  let arrTemp105 = [];\n  let arrTemp106 = [];\n  let arrTemp107 = [];\n  let arrTemp108 = [];\n  let arrTemp109 = [];\n  let arrTemp110 = [];\n  let arrTemp111 = [];\n  let arrTemp112 = [];\n  let arrTemp113 = [];\n  let arrTemp114 = [];\n  let arrTemp115 = [];\n  let arrTemp116 = [];\n  let arrTemp117 = [];\n  let arrTemp118 = [];\n  let arrTemp119 = [];\n  let arrTemp120 = [];\n  let arrTemp121 = [];\n  let arrTemp122 = [];\n  let arrTemp123 = [];\n  let arrTemp124 = [];\n  let arrTemp125 = [];\n  let arrTemp126 = [];\n  let arrTemp127 = [];\n  let arrTemp128 = [];\n  let arrTemp129 = [];\n  let arrTemp130 = [];\n  let arrTemp131 = [];\n  let arrTemp132 = [];\n  let arrTemp133 = [];\n  let arrTemp134 = [];\n  let arrTemp135 = [];\n  let arrTemp136 = [];\n  let arrTemp137 = [];\n  let arrTemp138 = [];\n  let arrTemp139 = [];\n  let arrTemp140 = [];\n  let arrTemp141 = [];\n  let arrTemp142 = [];\n  let arrTemp143 = [];\n  let arrTemp144 = [];\n  let arrTemp145 = [];\n  let arrTemp146 = [];\n  let arrTemp147 = [];\n  let arrTemp148 = [];\n  let arrTemp149 = [];\n  let arrTemp150 = [];\n  let arrTemp151 = [];\n  let arrTemp152 = [];\n  let arrTemp153 = [];\n  let arrTemp154 = [];\n  let arrTemp155 = [];\n  let arrTemp156 = [];\n  let arrTemp157 = [];\n  let arrTemp158 = [];\n  let arrTemp159 = [];\n  let arrTemp160 = [];\n  let arrTemp161 = [];\n  let arrTemp162 = [];\n  let arrTemp163 = [];\n  let arrTemp164 = [];\n  let arrTemp165 = [];\n  let arrTemp166 = [];\n  let arrTemp167 = [];\n  let arrTemp168 = [];\n  let arrTemp169 = [];\n  let arrTemp170 = [];\n  let arrTemp171 = [];\n  let arrTemp172 = [];\n  let arrTemp173 = [];\n  let arrTemp174 = [];\n  let arrTemp175 = [];\n  let arrTemp176 = [];\n  let arrTemp177 = [];\n  let arrTemp178 = [];\n  let arrTemp179 = [];\n  let arrTemp180 = [];\n  let arrTemp181 = [];\n  let arrTemp182 = [];\n  let arrTemp183 = [];\n  let arrTemp184 = [];\n  let arrTemp185 = [];\n  let arrTemp186 = [];\n  let arrTemp187 = [];\n  let arrTemp188 = [];\n  let arrTemp189 = [];\n  let arrTemp190 = [];\n  let arrTemp191 = [];\n  let arrTemp192 = [];\n  let arrTemp193 = [];\n  let arrTemp194 = [];\n  let arrTemp195 = [];\n  let arrTemp196 = [];\n  let arrTemp197 = [];\n  let arrTemp198 = [];\n  let arrTemp199 = [];\n  let arrTemp200 = [];\n  let arrTemp201 = [];\n  let arrTemp202 = "}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n  let centralNum = 0;\n  let centralNum2 = 0;\n  let centralNum3 = 0;\n  let centralNum4 = 0;\n  let centralNum5 = 0;\n  let centralNum6 = 0;\n  let centralNum7 = 0;\n  let centralNum8 = 0;\n  let centralNum9 = 0;\n  let centralNum10 = 0;\n  let centralNum11 = 0;\n  let centralNum12 = 0;\n  let centralNum13 = 0;\n  let centralNum14 = 0;\n  let centralNum15 = 0;\n  let centralNum16 = 0;\n  let centralNum17 = 0;\n  let centralNum18 = 0;\n  let centralNum19 = 0;\n  let centralNum20 = 0;\n  let centralNum21 = 0;\n  let centralNum22 = 0;\n  let centralNum23 = 0;\n  let centralNum24 = 0;\n  let centralNum25 = 0;\n  let centralNum26 = 0;\n  let centralNum27 = 0;\n  let centralNum28 = 0;\n  let centralNum29 = 0;\n  let centralNum30 = 0;\n  let centralNum31 = 0;\n  let centralNum32 = 0;\n  let centralNum33 = 0;\n  let centralNum34 = 0;\n  let centralNum35 = 0;\n  let centralNum36 = 0;\n  let centralNum37 = 0;\n  let centralNum38 = 0;\n  let centralNum39 = 0;\n  let centralNum40 = 0;\n  let centralNum41 = 0;\n  let centralNum42 = 0;\n  let centralNum43 = 0;\n  let centralNum44 = 0;\n  let centralNum45 = 0;\n  let centralNum46 = 0;\n  let centralNum47 = 0;\n  let centralNum48 = 0;\n  let centralNum49 = 0;\n  let centralNum50 = 0;\n  let centralNum51 = 0;\n  let centralNum52 = 0;\n  let centralNum53 = 0;\n  let centralNum54 = 0;\n  let centralNum55 = 0;\n  let centralNum56 = 0;\n  let centralNum57 = 0;\n  let centralNum58 = 0;\n  let centralNum59 = 0;\n  let centralNum60 = 0;\n  let centralNum61 = 0;\n  let centralNum62 = 0;\n  let centralNum63 = 0;\n  let centralNum64 = 0;\n  let centralNum65 = 0;\n  let centralNum66 = 0;\n  let centralNum67 = 0;\n  let centralNum68 = 0;\n  let centralNum69 = 0;\n  let centralNum70 = 0;\n  let centralNum71 = 0;\n  let centralNum72 = 0;\n  let centralNum73 = 0;\n  let centralNum74 = 0;\n  let centralNum75 = 0;\n  let centralNum76 = 0;\n  let centralNum77 = 0;\n  let centralNum78 = 0;\n  let centralNum79 = 0;\n  let centralNum80 = 0;\n  let centralNum81 = 0;\n  let centralNum82 = 0;\n  let centralNum83 = 0;\n  let centralNum84 = 0;\n  let centralNum85 = 0;\n  let centralNum86 = 0;\n  let centralNum87 = 0;\n  let centralNum88 = 0;\n  let centralNum89 = 0;\n  let centralNum90 = 0;\n  let centralNum91 = 0;\n  let centralNum92 = 0;\n  let centralNum93 = 0;\n  let centralNum94 = 0;\n  let centralNum95 = 0;\n  let centralNum96 = 0;\n  let centralNum97 = 0;\n  let centralNum98 = 0;\n  let centralNum99 = 0;\n  let centralNum100 = 0;\n  let centralNum101 = 0;\n  let centralNum102 = 0;\n  let centralNum103 = 0;\n  let centralNum104 = 0;\n  let centralNum105 = 0;\n  let centralNum106 = 0;\n  let centralNum107 = 0;\n  let centralNum108 = 0;\n  let centralNum109 = 0;\n  let centralNum110 = 0;\n  let centralNum111 = 0;\n  let centralNum112 = 0;\n  let centralNum113 = 0;\n  let centralNum114 = 0;\n  let centralNum115 = 0;\n  let centralNum116 = 0;\n  let centralNum117 = 0;\n  let centralNum118 = 0;\n  let centralNum119 = 0;\n  let centralNum120 = 0;\n  let centralNum121 = 0;\n  let centralNum122 = 0;\n  let centralNum123 = 0;\n  let centralNum124 = 0;\n  let centralNum125 = 0;\n  let centralNum126 = 0;\n  let centralNum127 = 0;\n  let centralNum128 = 0;\n  let centralNum129 = 0;\n  let centralNum130 = 0;\n  let centralNum131 = 0;\n  let centralNum132 = 0;\n  let centralNum133 = 0;\n  let centralNum134 = 0;\n  let centralNum135 = 0;\n  let centralNum136 = 0;\n  let centralNum137 = 0;\n  let centralNum138 = 0;\n  let centralNum139 = 0;\n  let centralNum140 = 0;\n  let centralNum141 = 0;\n  let centralNum142 = 0;\n  let centralNum143 = 0;\n  let centralNum144 = 0;\n  let centralNum145 = 0;\n  let centralNum146 = 0;\n  let centralNum147 = 0;\n  let centralNum148 = 0;\n  let centralNum149 = 0;\n  let centralNum150 = 0;\n  let centralNum151 = 0;\n  let centralNum152 = 0;\n  let centralNum153 = 0;\n  let centralNum154 = 0;\n  let centralNum155 = 0;\n  let centralNum156 = 0;\n  let centralNum157 = 0;\n  let centralNum158 = 0;\n  let centralNum159 = 0;\n  let centralNum160 = 0;\n  let centralNum161 = 0;\n  let centralNum162 = 0;\n  let centralNum163 = 0;\n  let centralNum164 = 0;\n  let centralNum165 = 0;\n  let centralNum166 = 0;\n  let centralNum167 = 0;\n  let centralNum168 = 0;\n  let centralNum169 = 0;\n  let centralNum170 = 0;\n  let centralNum171 = 0;\n  let centralNum172 = 0;\n  let centralNum173 = 0;\n  let centralNum174 = 0;\n  let centralNum175 = 0;\n  let centralNum176 = 0;\n  let centralNum177 = 0;\n  let centralNum178 = 0;\n  let centralNum179 = 0;\n  let centralNum180 = 0;\n  let centralNum181 = 0;\n  let centralNum182 = 0;\n  let centralNum183 = 0;\n  let centralNum184 = 0;\n  let centralNum185 = 0;\n  let centralNum186 = 0;\n  let centralNum187 = 0;\n  let centralNum188 = 0;\n  let centralNum189 = 0;\n  let centralNum190 = 0;\n  let centralNum191 = 0;\n  let centralNum192 = 0;\n  let centralNum193 = 0;\n  let centralNum194 = 0;\n  let centralNum195 = 0;\n  let centralNum196 = 0;\n  let centralNum197 = 0;\n  let centralNum198 = 0;\n  let centralNum199 = 0;\n  let centralNum200 = 0;\n  let centralNum201 = 0;\n  let centralNum202 = 0;\n  let centralNum203 = 0;\n  let centralNum204 = 0;\n  let centralNum205 = 0;\n  let centralNum206 = 0;\n  let centralNum207 = 0;\n  let centralNum208 = 0;\n  let centralNum209 = 0;\n  let centralNum210 = 0;\n  let centralNum211 = 0;\n  let centralNum212 = 0;\n  let centralNum213 = 0;\n  let centralNum214 = 0;\n  let centralNum215 = 0;\n  let centralNum216 = 0;\n  let centralNum217 = 0;\n  let centralNum218 = 0;\n  let centralNum219 = 0;\n  let centralNum220 = 0;\n  let centralNum221 = 0;\n  let centralNum222 = 0;\n  let centralNum223 = 0;\n  let centralNum224 = 0;\n  let centralNum225 = 0;\n  let centralNum226 = 0;\n  let centralNum227 = 0;\n  let centralNum228 = 0;\n  let centralNum229 = 0;\n  let centralNum230 = 0;\n  let centralNum231 = 0;\n  let centralNum232 = 0;\n  let centralNum233 = 0;\n  let centralNum234 = 0;\n  let centralNum"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == "}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n  let result = '';\n  let reversed = '';\n  let reversedChar = '';\n  let reversedCharIndex = 0;\n  let reversedCharIndex2 = 0;\n  let reversedCharIndex3 = 0;\n  let reversedCharIndex4 = 0;\n  let reversedCharIndex5 = 0;\n  let reversedCharIndex6 = 0;\n  let reversedCharIndex7 = 0;\n  let reversedCharIndex8 = 0;\n  let reversedCharIndex9 = 0;\n  let reversedCharIndex10 = 0;\n  let reversedCharIndex11 = 0;\n  let reversedCharIndex12 = 0;\n  let reversedCharIndex13 = 0;\n  let reversedCharIndex14 = 0;\n  let reversedCharIndex15 = 0;\n  let reversedCharIndex16 = 0;\n  let reversedCharIndex17 = 0;\n  let reversedCharIndex18 = 0;\n  let reversedCharIndex19 = 0;\n  let reversedCharIndex20 = 0;\n  let reversedCharIndex21 = 0;\n  let reversedCharIndex22 = 0;\n  let reversedCharIndex23 = 0;\n  let reversedCharIndex24 = 0;\n  let reversedCharIndex25 = 0;\n  let reversedCharIndex26 = 0;\n  let reversedCharIndex27 = 0;\n  let reversedCharIndex28 = 0;\n  let reversedCharIndex29 = 0;\n  let reversedCharIndex30 = 0;\n  let reversedCharIndex31 = 0;\n  let reversedCharIndex32 = 0;\n  let reversedCharIndex33 = 0;\n  let reversedCharIndex34 = 0;\n  let reversedCharIndex35 = 0;\n  let reversedCharIndex36 = 0;\n  let reversedCharIndex37 = 0;\n  let reversedCharIndex38 = 0;\n  let reversedCharIndex39 = 0;\n  let reversedCharIndex40 = 0;\n  let reversedCharIndex41 = 0;\n  let reversedCharIndex42 = 0;\n  let reversedCharIndex43 = 0;\n  let reversedCharIndex44 = 0;\n  let reversedCharIndex45 = 0;\n  let reversedCharIndex46 = 0;\n  let reversedCharIndex47 = 0;\n  let reversedCharIndex48 = 0;\n  let reversedCharIndex49 = 0;\n  let reversedCharIndex50 = 0;\n  let reversedCharIndex51 = 0;\n  let reversedCharIndex52 = 0;\n  let reversedCharIndex53 = 0;\n  let reversedCharIndex54 = 0;\n  let reversedCharIndex55 = 0;\n  let reversedCharIndex56 = 0;\n  let reversedCharIndex57 = 0;\n  let reversedCharIndex58 = 0;\n  let reversedCharIndex59 = 0;\n  let reversedCharIndex60 = 0;\n  let reversedCharIndex61 = 0;\n  let reversedCharIndex62 = 0;\n  let reversedCharIndex63 = 0;\n  let reversedCharIndex64 = 0;\n  let reversedCharIndex65 = 0;\n  let reversedCharIndex66 = 0;\n  let reversedCharIndex67 = 0;\n  let reversedCharIndex68 = 0;\n  let reversedCharIndex69 = 0;\n  let reversedCharIndex70 = 0;\n  let reversedCharIndex71 = 0;\n  let reversedCharIndex72 = 0;\n  let reversedCharIndex73 = 0;\n  let reversedCharIndex74 = 0;\n  let reversedCharIndex75 = 0;\n  let reversedCharIndex76 = 0;\n  let reversedCharIndex77 = 0;\n  let reversedCharIndex78 = 0;\n  let reversedCharIndex79 = 0;\n  let reversedCharIndex80 = 0;\n  let reversedCharIndex81 = 0;\n  let reversedCharIndex82 = 0;\n  let reversedCharIndex83 = 0;\n  let reversedCharIndex84 = 0;\n  let reversedCharIndex85 = 0;\n  let reversedCharIndex86 = 0;\n  let reversedCharIndex87 = 0;\n  let reversedCharIndex88 = 0;\n  let reversedCharIndex89 = 0;\n  let reversedCharIndex90 = 0;\n  let reversedCharIndex91 = 0;\n  let reversedCharIndex92 = 0;\n  let reversedCharIndex93 = 0;\n  let reversedCharIndex94 = 0;\n  let reversedCharIndex95 = 0;\n  let reversedCharIndex96 = 0;\n  let reversedCharIndex97 = 0;\n  let reversedCharIndex98 = 0;\n  let reversedCharIndex99 = 0;\n  let reversedCharIndex100 = 0;\n  let reversedCharIndex101 = 0;\n  let reversedCharIndex102 = 0;\n  let reversedCharIndex103 = 0;\n  let reversedCharIndex104 = 0;\n  let reversedCharIndex105 = 0;\n  let reversedCharIndex106 = 0;\n  let reversedCharIndex107 = 0;\n  let reversedCharIndex108 = 0;\n  let reversedCharIndex109 = 0;\n  let reversedCharIndex110 = 0;\n  let reversedCharIndex111 = 0;\n  let reversedCharIndex112 = 0;\n  let reversedCharIndex113 = 0;\n  let reversedCharIndex114 = 0;\n  let reversedCharIndex115 = 0;\n  let reversedCharIndex116 = 0;\n  let reversedCharIndex117 = 0;\n  let reversedCharIndex118 = 0;\n  let reversedCharIndex119 = 0;\n  let reversedCharIndex120 = 0;\n  let reversedCharIndex121 = 0;\n  let reversedCharIndex122 = 0;\n  let reversedCharIndex123 = 0;\n  let reversedCharIndex124 = 0;\n  let reversedCharIndex125 = 0;\n  let reversedCharIndex126 = 0;\n  let reversedCharIndex127 = 0;\n  let reversedCharIndex128 = 0;\n  let reversedCharIndex129 = 0;\n  let reversedCharIndex130 = 0;\n  let reversedCharIndex131 = 0;\n  let reversedCharIndex132 = 0;\n  let reversedCharIndex133 = 0;\n  let reversedCharIndex134 = 0;\n  let reversedCharIndex135 = 0;\n  let reversedCharIndex136 = 0;\n  let reversedCharIndex137 = 0;\n  let reversedCharIndex138 = 0;\n  let reversedCharIndex139 = 0;\n  let reversedCharIndex140 = 0;\n  let reversedCharIndex141 = 0;\n  let reversedCharIndex142 = 0;\n  let reversedCharIndex143 = 0;\n  let reversedCharIndex144 = 0;\n  let reversedCharIndex145 = 0;\n  let reversedCharIndex146 = 0;\n  let reversedCharIndex147 = 0;\n  let reversedCharIndex148 = 0;\n  let reversedCharIndex149 = 0;\n  let reversedCharIndex150 = 0;\n  let reversedCharIndex151 = 0;\n  let reversedCharIndex152 = 0;\n  let reversedCharIndex153 = 0;\n  let reversedCharIndex154 = 0;\n  let reversedCharIndex155 = 0;\n  let reversedCharIndex156 = 0;\n  let reversedCharIndex157 = 0;\n  let reversedCharIndex158 = 0;\n  let reversedCharIndex159 = 0;\n  let reversedCharIndex160 = 0;\n  let reversedCharIndex161 = 0;\n  let reversedCharIndex162 = 0;\n  let reversedCharIndex163 = 0;\n  let reversedCharIndex164 = 0;\n  let reversedCharIndex165 = 0;\n  let reversedCharIndex166 = 0;\n  let reversedCharIndex167 = 0;\n  let reversedCharIndex168 = 0;\n  let reversedCharIndex169 = 0;\n  let reversedCharIndex170 = 0;\n  let reversedCharIndex171 = 0;\n  let reversedCharIndex172 = 0;\n  let reversedCharIndex173 = 0;\n  let reversedCharIndex174 = 0;\n"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      oddCount++;\n    }\n  }\n  return [oddCount].concat(lst);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenCount++;\n    }\n  }\n  return [evenCount].concat(lst);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      oddCount++;\n    }\n  }\n  return [oddCount].concat(lst);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      evenCount++;\n    }\n  }\n  return [evenCount].concat(lst);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      oddCount++;\n    }\n  }\n  return [oddCount].concat(lst);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      evenCount++;\n    }\n  }\n  return [evenCount].concat(lst);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      oddCount++;\n    }\n  }\n  return [oddCount].concat(lst);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      evenCount++;\n    }\n  }\n  return [evenCount].concat(lst);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng "}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      return acc;\n    }\n    acc.push(num);\n    return acc;\n  }, []);\n  const sumsSet = new Set(sums);\n  const min = Math.min(...sumsSet);\n  return sums.reduce((acc, num) => {\n    if (num < min) {\n      min = num;\n    }\n    return acc;\n  }, min);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArrayMax = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      return acc;\n    }\n    acc.push(num);\n    return acc;\n  }, []);\n  const sumsSet = new Set(sums);\n  const max = Math.max(...sumsSet);\n  return sums.reduce((acc, num) => {\n    if (num > max) {\n      max = num;\n    }\n    return acc;\n  }, max);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArrayMin = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      return acc;\n    }\n    acc.push(num);\n    return acc;\n  }, []);\n  const sumsSet = new Set(sums);\n  const min = Math.min(...sumsSet);\n  return sums.reduce((acc, num) => {\n    if (num > min) {\n      min = num;\n    }\n    return acc;\n  }, min);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumOfSubArrays = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      return acc;\n    }\n    acc.push(num);\n    return acc;\n  }, []);\n  const sumsSet = new Set(sums);\n  const min = Math.min(...sumsSet);\n  return sums.reduce((acc, num) => {\n    if (num > min) {\n      min = num;\n    }\n    return acc.concat(num);\n  }, min);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumOfSubArraysOfSubArrays = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      return acc;\n    }\n    acc.push(num);\n    return acc;\n  }, []);\n  const sumsSet = new Set(sums);\n  const min = Math.min(...sumsSet);\n  return sums.reduce((acc, num) => {\n    if (num > min) {\n      min = num;\n    }\n    return acc.concat(num);\n  }, min);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      return acc;\n    }\n    acc.push(num);\n    return acc;\n  }, []);\n  const sumsSet = new Set(sums);\n  const min = Math.min(...sumsSet);\n  return sums.reduce((acc, num) => {\n    if (num > min) {\n      min = num;\n    }\n    return acc.concat(num);\n  }, min);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      return acc;\n    }\n    acc.push(num);\n    return acc;\n  }, []);\n  const sumsSet = new Set(sums);\n  const min = Math.min(...sumsSet);\n  return sums.reduce((acc, num) => {\n    if (num > min) {\n      min = num;\n    }\n    return acc.concat(num);\n  }, min);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      return acc;\n    }\n    acc.push(num);\n    return acc;\n  }, []);\n  const sumsSet = new Set(sums);\n  const min = Math.min(...sumsSet);\n  return sums.reduce((acc, num) => {\n    if (num > min) {\n      min = num;\n    }\n    return acc.concat(num);\n  }, min);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      return acc;\n    }\n    acc.push(num);\n    return acc;\n  }, []);\n  const sumsSet = new Set(sums);\n  const min = Math.min(...sumsSet);\n  return sums.reduce((acc, num) => {\n    if (num > min) {\n      min = num;\n    }\n    return acc.concat(num);\n  }, min);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  const result = [];\n  \n  grid.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value === 1) {\n        const bucket = grid[rowIndex][colIndex];\n        \n        if (bucket === capacity) {\n          result.push(bucket);\n        }\n      }\n    });\n  });\n  \n  return result.length;\n};\n\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////\n// ////////////////////////////////////////////////////////////////////"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i;\n  let j;\n  let tmp;\n  let tmp2;\n  let tmp3;\n  let tmp4;\n  let tmp5;\n  let tmp6;\n  let tmp7;\n  let tmp8;\n  let tmp9;\n  let tmp10;\n  let tmp11;\n  let tmp12;\n  let tmp13;\n  let tmp14;\n  let tmp15;\n  let tmp16;\n  let tmp17;\n  let tmp18;\n  let tmp19;\n  let tmp20;\n  let tmp21;\n  let tmp22;\n  let tmp23;\n  let tmp24;\n  let tmp25;\n  let tmp26;\n  let tmp27;\n  let tmp28;\n  let tmp29;\n  let tmp30;\n  let tmp31;\n  let tmp32;\n  let tmp33;\n  let tmp34;\n  let tmp35;\n  let tmp36;\n  let tmp37;\n  let tmp38;\n  let tmp39;\n  let tmp40;\n  let tmp41;\n  let tmp42;\n  let tmp43;\n  let tmp44;\n  let tmp45;\n  let tmp46;\n  let tmp47;\n  let tmp48;\n  let tmp49;\n  let tmp50;\n  let tmp51;\n  let tmp52;\n  let tmp53;\n  let tmp54;\n  let tmp55;\n  let tmp56;\n  let tmp57;\n  let tmp58;\n  let tmp59;\n  let tmp60;\n  let tmp61;\n  let tmp62;\n  let tmp63;\n  let tmp64;\n  let tmp65;\n  let tmp66;\n  let tmp67;\n  let tmp68;\n  let tmp69;\n  let tmp70;\n  let tmp71;\n  let tmp72;\n  let tmp73;\n  let tmp74;\n  let tmp75;\n  let tmp76;\n  let tmp77;\n  let tmp78;\n  let tmp79;\n  let tmp80;\n  let tmp81;\n  let tmp82;\n  let tmp83;\n  let tmp84;\n  let tmp85;\n  let tmp86;\n  let tmp87;\n  let tmp88;\n  let tmp89;\n  let tmp90;\n  let tmp91;\n  let tmp92;\n  let tmp93;\n  let tmp94;\n  let tmp95;\n  let tmp96;\n  let tmp97;\n  let tmp98;\n  let tmp99;\n  let tmp100;\n  let tmp101;\n  let tmp102;\n  let tmp103;\n  let tmp104;\n  let tmp105;\n  let tmp106;\n  let tmp107;\n  let tmp108;\n  let tmp109;\n  let tmp110;\n  let tmp111;\n  let tmp112;\n  let tmp113;\n  let tmp114;\n  let tmp115;\n  let tmp116;\n  let tmp117;\n  let tmp118;\n  let tmp119;\n  let tmp120;\n  let tmp121;\n  let tmp122;\n  let tmp123;\n  let tmp124;\n  let tmp125;\n  let tmp126;\n  let tmp127;\n  let tmp128;\n  let tmp129;\n  let tmp130;\n  let tmp131;\n  let tmp132;\n  let tmp133;\n  let tmp134;\n  let tmp135;\n  let tmp136;\n  let tmp137;\n  let tmp138;\n  let tmp139;\n  let tmp140;\n  let tmp141;\n  let tmp142;\n  let tmp143;\n  let tmp144;\n  let tmp145;\n  let tmp146;\n  let tmp147;\n  let tmp148;\n  let tmp149;\n  let tmp150;\n  let tmp151;\n  let tmp152;\n  let tmp153;\n  let tmp154;\n  let tmp155;\n  let tmp156;\n  let tmp157;\n  let tmp158;\n  let tmp159;\n  let tmp160;\n  let tmp161;\n  let tmp162;\n  let tmp163;\n  let tmp164;\n  let tmp165;\n  let tmp166;\n  let tmp167;\n  let tmp168;\n  let tmp169;\n  let tmp170;\n  let tmp171;\n  let tmp172;\n  let tmp173;\n  let tmp174;\n  let tmp175;\n  let tmp176;\n  let tmp177;\n  let tmp178;\n  let tmp179;\n  let tmp180;\n  let tmp181;\n  let tmp182;\n  let tmp183;\n  let tmp184;\n  let tmp185;\n  let tmp186;\n  let tmp187;\n  let tmp188;\n  let tmp189;\n  let tmp190;\n  let tmp191;\n  let tmp192;\n  let tmp193;\n  let tmp194;\n  let tmp195;\n  let tmp196;\n  let tmp197;\n  let tmp198;\n  let tmp199;\n  let tmp200;\n  let tmp201;\n  let tmp202;\n  let tmp203;\n  let tmp204;\n  let tmp205;\n  let tmp206;\n  let tmp207;\n  let tmp208;\n  let tmp209;\n  let tmp210;\n  let tmp211;\n  let tmp212;\n  let tmp213;\n  let tmp214;\n  let tmp215;\n  let tmp216;\n  let tmp217;\n  let tmp218;\n  let tmp219;\n  let tmp220;\n  let tmp221;\n  let tmp222;\n  let tmp223;\n  let tmp224;\n  let tmp225;\n  let tmp226;\n  let tmp227;\n  let tmp228;\n  let tmp229;\n  let tmp230;\n  let tmp231;\n  let tmp232;\n  let tmp233;\n  let tmp234;\n  let tmp235;\n  let tmp236;\n  let tmp237;\n  let tmp238;\n  let tmp239;\n  let tmp240;\n  let tmp241;\n  let tmp242;\n  let tmp243;\n  let tmp244;\n  let tmp245;\n  let tmp246;\n  let tmp247;\n  let tmp248;\n  let tmp249;\n  let tmp250;\n  let tmp251;\n  let tmp252;\n  let tmp253;\n  let tmp254;\n  let tmp255;\n  let tmp256;\n  let tmp257;\n  let tmp258;\n  let tmp259;\n  let tmp260;\n  let tmp261;\n  let tmp262;\n  let tmp263;\n  let tmp264;\n  let tmp265;\n  let tmp266;\n  let tmp267;\n  let tmp268;\n  let tmp269;\n  let tmp270;\n  let tmp271;\n  let tmp272;\n  let tmp273;\n  let tmp274;\n  let tmp275;\n  let tmp276;\n  let tmp277;\n  let tmp278;\n  let tmp279;\n  let tmp280;\n  let tmp281;\n  let tmp282;\n  let tmp283;\n  let tmp284;\n  let tmp285;\n  let tmp286;\n  let tmp287;\n  let tmp"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let words = [];\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let "}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsArray = vowels.map(v => v.toLowerCase());\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex2 = 0;\n  let vowelsArrayLength2 = vowelsArray.length;\n  let vowelsArrayIndex3 = 0;\n  let vowelsArrayLength3 = vowelsArray.length;\n  let vowelsArrayIndex4 = 0;\n  let vowelsArrayLength4 = vowelsArray.length;\n  let vowelsArrayIndex5 = 0;\n  let vowelsArrayLength5 = vowelsArray.length;\n  let vowelsArrayIndex6 = 0;\n  let vowelsArrayLength6 = vowelsArray.length;\n  let vowelsArrayIndex7 = 0;\n  let vowelsArrayLength7 = vowelsArray.length;\n  let vowelsArrayIndex8 = 0;\n  let vowelsArrayLength8 = vowelsArray.length;\n  let vowelsArrayIndex9 = 0;\n  let vowelsArrayLength9 = vowelsArray.length;\n  let vowelsArrayIndex10 = 0;\n  let vowelsArrayLength10 = vowelsArray.length;\n  let vowelsArrayIndex11 = 0;\n  let vowelsArrayLength11 = vowelsArray.length;\n  let vowelsArrayIndex12 = 0;\n  let vowelsArrayLength12 = vowelsArray.length;\n  let vowelsArrayIndex13 = 0;\n  let vowelsArrayLength13 = vowelsArray.length;\n  let vowelsArrayIndex14 = 0;\n  let vowelsArrayLength14 = vowelsArray.length;\n  let vowelsArrayIndex15 = 0;\n  let vowelsArrayLength15 = vowelsArray.length;\n  let vowelsArrayIndex16 = 0;\n  let vowelsArrayLength16 = vowelsArray.length;\n  let vowelsArrayIndex17 = 0;\n  let vowelsArrayLength17 = vowelsArray.length;\n  let vowelsArrayIndex18 = 0;\n  let vowelsArrayLength18 = vowelsArray.length;\n  let vowelsArrayIndex19 = 0;\n  let vowelsArrayLength19 = vowelsArray.length;\n  let vowelsArrayIndex20 = 0;\n  let vowelsArrayLength20 = vowelsArray.length;\n  let vowelsArrayIndex21 = 0;\n  let vowelsArrayLength21 = vowelsArray.length;\n  let vowelsArrayIndex22 = 0;\n  let vowelsArrayLength22 = vowelsArray.length;\n  let vowelsArrayIndex23 = 0;\n  let vowelsArrayLength23 = vowelsArray.length;\n  let vowelsArrayIndex24 = 0;\n  let vowelsArrayLength24 = vowelsArray.length;\n  let vowelsArrayIndex25 = 0;\n  let vowelsArrayLength25 = vowelsArray.length;\n  let vowelsArrayIndex26 = 0;\n  let vowelsArrayLength26 = vowelsArray.length;\n  let vowelsArrayIndex27 = 0;\n  let vowelsArrayLength27 = vowelsArray.length;\n  let vowelsArrayIndex28 = 0;\n  let vowelsArrayLength28 = vowelsArray.length;\n  let vowelsArrayIndex29 = 0;\n  let vowelsArrayLength29 = vowelsArray.length;\n  let vowelsArrayIndex30 = 0;\n  let vowelsArrayLength30 = vowelsArray.length;\n  let vowelsArrayIndex31 = 0;\n  let vowelsArrayLength31 = vowelsArray.length;\n  let vowelsArrayIndex32 = 0;\n  let vowelsArrayLength32 = vowelsArray.length;\n  let vowelsArrayIndex33 = 0;\n  let vowelsArrayLength33 = vowelsArray.length;\n  let vowelsArrayIndex34 = 0;\n  let vowelsArrayLength34 = vowelsArray.length;\n  let vowelsArrayIndex35 = 0;\n  let vowelsArrayLength35 = vowelsArray.length;\n  let vowelsArrayIndex36 = 0;\n  let vowelsArrayLength36 = vowelsArray.length;\n  let vowelsArrayIndex37 = 0;\n  let vowelsArrayLength37 = vowelsArray.length;\n  let vowelsArrayIndex38 = 0;\n  let vowelsArrayLength38 = vowelsArray.length;\n  let vowelsArrayIndex39 = 0;\n  let vowelsArrayLength39 = vowelsArray.length;\n  let vowelsArrayIndex40 = 0;\n  let vowelsArrayLength40 = vowelsArray.length;\n  let vowelsArrayIndex41 = 0;\n  let vowelsArrayLength41 = vowelsArray.length;\n  let vowelsArrayIndex42 = 0;\n  let vowelsArrayLength42 = vowelsArray.length;\n  let vowelsArrayIndex43 = 0;\n  let vowelsArrayLength43 = vowelsArray.length;\n  let vowelsArrayIndex44 = 0;\n  let vowelsArrayLength44 = vowelsArray.length;\n  let vowelsArrayIndex45 = 0;\n  let vowelsArrayLength45 = vowelsArray.length;\n  let vowelsArrayIndex46 = 0;\n  let vowelsArrayLength46 = vowelsArray.length;\n  let vowelsArrayIndex47 = 0;\n  let vowelsArrayLength47 = vowelsArray.length;\n  let vowelsArrayIndex48 = 0;\n  let vowelsArrayLength48 = vowelsArray.length;\n  let vowelsArrayIndex49 = 0;\n  let vowelsArrayLength49 = vowelsArray.length;\n  let vowelsArrayIndex50 = 0;\n  let vowelsArrayLength50 = vowelsArray.length;\n  let vowelsArrayIndex51 = 0;\n  let vowelsArrayLength51 = vowelsArray.length;\n  let vowelsArrayIndex52 = 0;\n  let vowelsArrayLength52 = vowelsArray.length;\n  let vowelsArrayIndex53 = 0;\n  let vowelsArrayLength53 = vowelsArray.length;\n  let vowelsArrayIndex54 = 0;\n  let vowelsArrayLength54 = vowelsArray.length;\n  let vowelsArrayIndex55 = 0;\n  let vowelsArrayLength55 = vowelsArray.length;\n  let vowelsArrayIndex56 = 0;\n  let vowelsArrayLength56 = vowelsArray.length;\n  let vowelsArrayIndex57 = 0;\n  let vowelsArrayLength57 = vowelsArray.length;\n  let vowelsArrayIndex58 = 0;\n  let vowelsArrayLength58 = vowelsArray.length;\n  let vowelsArrayIndex59 = 0;\n  let vowelsArrayLength59 = vowelsArray.length;\n  let vowelsArrayIndex60 = 0;\n  let vowelsArrayLength60 = vowelsArray.length;\n  let vowelsArrayIndex61 = 0;\n  let vowelsArrayLength61 = vowelsArray.length;\n  let vowelsArrayIndex62 = 0;\n  let vowelsArrayLength62 = vowelsArray.length;\n  let vowelsArrayIndex63 = 0;\n  let vowelsArrayLength63 = vowelsArray.length;\n  let vowelsArrayIndex64 = 0;\n  let vowelsArrayLength64 = vowelsArray.length;\n  let vowelsArrayIndex65 = 0;\n  let vowelsArrayLength65 = vowelsArray.length;\n  let vowelsArrayIndex66 = 0;\n  let vowelsArrayLength66 = vowelsArray.length;\n  let vowelsArrayIndex67 = 0;\n  let vowelsArrayLength67 = vowelsArray.length;\n  let vowelsArrayIndex68 = 0;\n  let vowelsArrayLength68 = vowelsArray.length;\n  let vowelsArray"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  let res = 'No';\n  let count = 0;\n  let stack = [];\n  let stackCount = 0;\n  let stackTop = 0;\n  let stackTopCount = 0;\n  let stackTopTop = 0;\n  let stackTopTopCount = 0;\n  let stackTopTopTop = 0;\n  let stackTopTopTopCount = 0;\n  let stackTopTopTopTop = 0;\n  let stackTopTopTopTopCount = 0;\n  let stackTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTopCount = 0;\n  let stackTopTopTopTopTopTopTopTopTopTopTop"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let i = 1;\n  while (i < arr.length) {\n    if (arr[i] > max) {\n      max = arr[i];\n      result.push(max);\n    }\n    i++;\n  }\n  result.sort((a, b) => a - b);\n  return result.slice(0, k);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next && curr.next.val === k) {\n      maxSum = curr.next.val;\n      maxSumIndex = curr.next.next;\n    } else {\n      maxSumIndex = 0;\n    }\n    curr = curr.next;\n  }\n  return maxSumIndex;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/10323/Java-solution-for-finding-the-maximum-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next && curr.next.val === k) {\n      maxSum = curr.next.val;\n      maxSumIndex = curr.next.next;\n    } else {\n      maxSumIndex = 0;\n    }\n    curr = curr.next;\n  }\n  return maxSumIndex;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/10323/Java-solution-for-finding-the-maximum-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next && curr.next.val === k) {\n      maxSum = curr.next.val;\n      maxSumIndex = curr.next.next;\n    } else {\n      maxSumIndex = 0;\n    }\n    curr = curr.next;\n  }\n  return maxSumIndex;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/10323/Java-solution-for-finding-the-maximum-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next && curr.next.val === k) {\n      maxSum = curr.next.val;\n      maxSumIndex = curr.next.next;\n    } else {\n      maxSumIndex = 0;\n    }\n    curr = curr.next;\n  }\n  return maxSumIndex;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/10323/Java-solution-for-finding-the-maximum-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next && curr.next.val === k) {\n      maxSum = curr.next.val;\n      maxSumIndex = curr.next.next;\n    } else {\n      maxSumIndex = 0;\n    }\n    curr = curr.next;\n  }\n  return maxSumIndex;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/10323/Java-solution-for-finding-the-maximum-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next && curr.next.val === k) {\n      maxSum = curr.next.val;\n      maxSumIndex = curr.next.next;\n    } else {\n      maxSumIndex = 0;\n    }\n    curr = curr.next;\n  }\n  return maxSumIndex;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/10323/Java-solution-for-finding-the-maximum-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next && curr.next.val === k) {\n      maxSum = curr.next.val;\n      maxSumIndex = curr.next.next;\n    } else {\n      maxSumIndex = 0;\n    }\n    curr = curr.next;\n  }\n  return maxSumIndex;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/10323/Java-solution-for-finding-the-maximum-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  let curr = head;\n  while ("}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],4:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],5:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],6:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],7:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],8:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],9:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],10:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],11:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],12:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],13:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],14:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],15:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0 && i!== 0 && i!== arr.length - 1) {\n      sum += arr[i];\n    } else if (i % 2!== 0 && i!== 0 && i!== arr.length - 1) {\n      sum += arr[i];\n    } else if (arr[i] > 9) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n// Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most three digits from the first k elements of arr.\n\n// Example:\n\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 13 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 24\n\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n// 3. 1 <= arr[i] <= 9\n// 4. 1 <= arr[i] <= 10^9\n// 5. 1 <= arr[i] <= 10^9\n// 6. 1 <= arr[i] <= 10^9\n// 7. 1 <= arr[i] <= 10^9\n// 8. 1 <= arr[i] <= 10^9\n// 9. 1 <= arr[i] <= 10^9\n// 10. 1 <= arr[i] <= 10^9\n// 11. 1 <= arr[i] <= 10^9\n// 12. 1 <= arr[i] <= 10^9\n// 13. 1 <= arr[i] <= 10^9\n// 14. 1 <= arr[i] <= 10^9\n// 15. 1 <= arr[i] <= 10^9\n// 16. 1 <= arr[i] <= 10^9\n// 17. 1 <= arr[i] <= 10^9\n// 18. 1 <= arr[i] <= 10^9\n// 19. 1 <= arr[i] <= 10^9\n// 20. 1 <= arr[i] <= 10^9\n// 21. 1 <= arr[i] <= 10^9\n// 22. 1 <= arr[i] <= 10^9\n// 23. 1 <= arr[i] <= 10^9\n// 24. 1 <= arr[i] <= 10^9\n// 25. 1 <= arr[i] <= 10^9\n// 26. 1 <= arr[i] <= 10^9\n// 27. 1 <= arr[i] <= 10^9\n// 28. 1 <= arr[i] <= 10^9\n// 29. 1 <= arr[i] <= 10^9\n// 30. 1 <= arr[i] <= 10^9\n// 31. 1 <= arr[i] <= 10^9\n// 32. 1 <= arr[i] <= 10^9\n// 33. 1 <= arr[i] <= 10^9\n// 34. 1 <= arr[i] <= 10^9\n// 35. 1 <= arr[i] <= 10^9\n// 36. 1 <= arr[i] <= 10^9\n// 37. 1 <= arr[i] <= 10^9\n// 38. 1 <= arr[i] <= 10^9\n// 39. 1 <= arr[i] <= 10^9\n// 40. 1 <= arr[i] <= 10^9\n// 41. 1 <= arr[i] <= 10^9\n// 42. 1 <= arr[i] <= 10^9\n// 43. 1 <= arr[i] <= 10^9\n// 44. 1 <= arr[i] <= 10^9\n// 45. 1 <= arr[i] <= 10^9\n// 46. 1 <= arr[i] <= 10^9\n// 47. 1 <= arr[i] <= 10^9\n// 48. 1 <= arr[i] <= 10^9\n// 49. 1 <= arr[i] <= 10^9\n// 50. 1 <= arr[i] <= 10^9\n// 51. 1 <= arr[i] <= 10^9\n// 52. 1 <= arr[i] <= 10^9\n// 53. 1 <= arr[i] <= 10^9\n// 54. 1 <= arr[i] <= 10^9\n// 55. 1 <= arr[i] <= 10^9\n// 56. 1 <= arr[i] <= 10^9\n// 57. 1 <= arr[i] <= 10^9\n// 58. 1 <= arr[i] <= 10^9\n// 59. 1 <= arr[i] <= 10^9\n// 60. 1 <= arr[i] <= 10^9\n// 61. 1 <= arr[i] <= 10^9\n// 62. 1 <= arr[i] <= 10^9\n// 63. 1 <= arr[i] <= 10^9\n// 64. 1 <= arr[i] <= 10^9\n// 65. 1 <= arr[i] <= 10^9\n// 66. 1 <= arr[i] <= 10^9\n// 67. 1 <= arr[i] <= 10^9\n// 68. 1 <= arr[i] <= 10^9\n// 69. 1 <= arr[i] <= 10^9\n// 70. 1 <= arr[i] <= 10^9\n// 71. 1 <= arr[i] <= 10^9\n// 72. 1 <= arr[i] <= 10^9\n// 73. 1 <= arr[i] <= 10^9\n// 74. 1 <= arr[i] <= 10^9\n// 75. 1 <= arr[i] <= 10^9\n// 76. 1 <= arr[i] <= 10^9\n// 77. 1 <= arr[i] <= 10^9\n// 78. 1 <= arr[i] <= 10^9\n// 79. 1 <= arr[i] <= 10^9\n// 80. 1 <= arr[i] <= 10^9\n// 81. 1 <= arr[i] <= 10^9\n// 82. 1 <= arr[i] <= 10^9\n// 83. 1 <= arr[i] <= 10^9\n// 84. 1 <= arr[i] <= 10^9\n// 85. 1 <= arr[i] <= 10^9\n// 86. 1 <= arr[i] <= 10^9\n// 87. 1 <= arr[i] <= 10^9\n// 88. 1 <= arr[i] <= 10^9\n// 89. 1 <= arr[i] <= 10^9\n// 90. 1 <= arr[i] <= 10^9\n// 91. 1 <= arr[i] <= 10^9\n// 92. 1 <= arr[i] <= 10^9\n// 93. 1 <= arr[i] <= 10^9\n// 94. 1 <= arr[i] <= 10^9\n// 95. 1 <= arr[i] <= 10^9\n// 96. 1 <= arr[i] <= 10^9\n// 97. 1 <= arr[i] <= 10^9\n// 98. 1 <= arr[i] <= 10^9\n// 99. 1 <= arr[i] <= 10^9\n// 100. 1 <= arr[i] <= 10^9\n// 101. 1 <= arr[i] <= 10^9\n// 102. 1 <= arr[i] <= 10^9\n// 103. 1 <= arr[i] <= 10^9\n// 104. 1 <= arr[i] <= 10^9\n// 105. 1 <= arr[i] <= 10^9\n// 106. 1 <= arr[i] <= 10^9\n// 107. 1 <= arr[i] <= 10^9\n// 108. 1 <= arr[i] <= 10^9\n// 109. 1 <= arr[i] <= 10^9\n// 110. 1 <= arr[i] <= 10^9\n// 111. 1 <= arr[i] <= 10^9\n// 112. 1 <= arr[i] <= 10^9\n// 113. 1 <= arr[i] <= 10^9\n// 114. 1 <= arr[i] <= 10^9\n// 115. 1 <= arr[i] <= 10^9\n// 116. 1 <= arr[i] <= 10^9\n// 117. 1 <= arr[i] <= 10^9\n// 118. 1 <= arr[i] <= 10^9\n// 119. 1 <= arr[i] <= 10"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let cur = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(prev);\n      prev = cur;\n      cur = 3;\n    } else {\n      collatz.push(cur);\n      cur = prev + cur;\n      prev = cur;\n    }\n    n = Math.floor(n / 2);\n  }\n  collatz.push(prev);\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchEvenCollatz(5) returns [1, 5, 3] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, and 3.\n  */\nconst catchEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let cur = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(prev);\n      prev = cur;\n      cur = 3;\n    } else {\n      collatz.push(cur);\n      cur = prev + cur;\n      prev = cur;\n    }\n    n = Math.floor(n / 2);\n  }\n  collatz.push(prev);\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchPrimeFactors(5) returns [2, 3] # The prime factors of 5 is [2, 3], so no matter what value of n, we always get 2.\n  */\nconst catchPrimeFactors = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let cur = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(prev);\n      prev = cur;\n      cur = 3;\n    } else {\n      collatz.push(cur);\n      cur = prev + cur;\n      prev = cur;\n    }\n    n = Math.floor(n / 2);\n  }\n  collatz.push(prev);\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchPrimeFactors(5) returns [2, 3] # The prime factors of 5 is [2, 3], so no matter what value of n, we always get 2.\n  */\nconst catchPrimeFactorsOdd = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let cur = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(prev);\n      prev = cur;\n      cur = 3;\n    } else {\n      collatz.push(cur);\n      cur = prev + cur;\n      prev = cur;\n    }\n    n = Math.floor(n / 2);\n  }\n  collatz.push(prev);\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchPrimeFactorsOdd(5) returns [2, 3] # The prime factors of 5 is [2, 3], so no matter what value of n, we always get 2.\n  */\nconst catchPrimeFactorsOddOdd = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let cur = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(prev);\n      prev = cur;\n      cur = 3;\n    } else {\n      collatz.push(cur);\n      cur = prev + cur;\n      prev = cur;\n    }\n    n = Math.floor(n / 2);\n  }\n  collatz.push(prev);\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchPrimeFactorsOddOdd(5) returns [2, 3] # The prime factors of 5 is [2, 3], so no matter what value of n, we always get 2.\n  */\n"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const [month, day, year] = date.split('-');\n  const isValid = month >= 1 && month <= 12 && day >= 1 && day <= 31 && year >= 1900 && year <= 2099;\n  return isValid;\n};\n\n/*\n  Given a date string and a month number and a year number,\n  this function returns the date in the format mm-dd-yyyy\n  if the date is valid otherwise false.\n  If the date string is not valid or if the month number is invalid\n  or the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid\n  or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function returns null.\n  If the date string is valid but the month number is invalid or the year number is invalid, the function returns null.\n  If the date string is valid but the year number is invalid, the function "}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n  let words = txt.split(' ');\n  let result = [];\n  let count = 0;\n  let letterCount = 0;\n  let letter;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let "}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  let isScreen = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i + 1]) {\n      isScreen = false;\n    }\n  }\n  return isScreen;\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreenDesc([5]) ➞ false\n  isScreenDesc([1, 2, 3, 4, 5]) ➞ true\n  isScreenDesc([1, 3, 2, 4, 5]) ➞ false\n  isScreenDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreenDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreenDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreenDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreenDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreenDesc = (lst) => {\n  let isScreen = true;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] === lst[i - 1]) {\n      isScreen = false;\n    }\n  }\n  return isScreen;\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1 duplicate\n  of the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isSortedAsc([5]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  let isScreen = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i + 1]) {\n      isScreen = false;\n    }\n  }\n  return isScreen && isScreenDesc(lst);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and "}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  let overlap = 0;\n  if (start1 < end1 && start2 < end2) {\n    if (start1 < start2) {\n      overlap = start2 - start1;\n    } else if (end1 < end2) {\n      overlap = end2 - end1;\n    }\n  }\n  return overlap;\n};\n\nmodule.exports = {\n  overlap,\n};\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  let overlap = 0;\n  if (start1 < end1 && start2 < end2) {\n    if (start1 < start2) {\n      overlap = start2 - start1;\n    } else if (end1 < end2) {\n      overlap = end2 - end1;\n    }\n  }\n  return overlap;\n};\n\nmodule.exports = {\n  overlap,\n};\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  let overlap = 0;\n  if (start1 < end1 && start2 < end2) {\n    if (start1 < start2) {\n      overlap = start2 - start1;\n    } else if (end1 < end2) {\n      overlap = end2 - end1;\n    }\n  }\n  return overlap;\n};\n\nmodule.exports = {\n  overlap,\n};\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  let overlap = 0;\n  if (start1 < end1 && start2 < end2) {\n    if (start1 < start2) {\n      overlap = start2 - start1;\n    } else if (end1 < end2) {\n      overlap = end2 - end1;\n    }\n  }\n  return overlap;\n};\n\nmodule.exports = {\n  overlap,\n};\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  let overlap = 0;\n  if (start1 < end1 && start2 < end2) {\n    if (start1 < start2) {\n      overlap = start2 - start1;\n    } else if (end1 < end2) {\n      overlap = end2 - end1;\n    }\n  }\n  return overlap;\n};\n\nmodule.exports = {\n  overlap,\n};\n\n},{}],13:[function(require,module,exports){\n/*\n  You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assume"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sum += Math.abs(arr[i])\n    sign *= -1\n  }\n  return sign * sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSignsMulti = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sum += Math.abs(arr[i])\n    sign *= -1\n  }\n  return sign * sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMulti([0, 1]) == 0\n  >>> goadSignsMulti([]) == null\n  */\nconst goadSignsMultiMulti = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sum += Math.abs(arr[i])\n    sign *= -1\n  }\n  return sign * sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMultiMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMultiMulti([0, 1]) == 0\n  >>> goadSignsMultiMulti([]) == null\n  */\nconst goadSignsMultiMultiMulti = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sum += Math.abs(arr[i])\n    sign *= -1\n  }\n  return sign * sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMultiMultiMulti([0, 1]) == 0\n  >>> goadSignsMultiMultiMulti([]) == null\n  */\nconst goadSignsMultiMultiMultiMulti = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sum += Math.abs(arr[i])\n    sign *= -1\n  }\n  return sign * sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMultiMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMultiMultiMultiMulti([0, 1]) == 0\n  >>> goadSignsMultiMultiMultiMulti([]) == null\n  */\nconst goadSignsMultiMultiMultiMultiMulti = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sum += Math.abs(arr[i])\n    sign *= -1\n  }\n  return sign * sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMultiMultiMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMultiMultiMultiMultiMulti([0, 1]) == 0\n  >>> goadSignsMultiMultiMultiMultiMulti([]) == null\n  */\nconst goadSignsMultiMultiMultiMultiMulti = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sum += Math.abs(arr[i])\n    sign *= -1\n  }\n  return sign * sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMultiMultiMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMultiMultiMultiMultiMultiMulti([0, 1]) == 0\n  >>> goadSignsMultiMultiMultiMultiMulti([]) == null\n  */\nconst goadSignsMultiMultiMultiMultiMultiMulti = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sum += Math.abs(arr[i])\n    sign *= -1\n  }\n  return sign * sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMultiMultiMultiMultiMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMultiMultiMultiMultiMultiMultiMulti([0, 1]) == 0\n  >>> goadSignsMultiMultiMultiMultiMultiMulti([]) == null\n  */\nconst goadSignsMultiMultiMultiMultiMultiMultiMulti = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sum += Math.abs(arr[i])\n    sign *= -1\n  }\n  return sign * sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMultiMultiMultiMultiMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMultiMultiMultiMultiMultiMultiMultiMulti([0, 1]) == 0\n  >>> goadSignsMultiMultiMultiMultiMultiMultiMulti([]) == null\n  */\nconst goadSigns"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [gridValues, gridIndex] = createGridValues(grid, rows);\n  const [gridValuesIndices] = createGridIndexes(rows, cols);\n  const [gridValuesIndicesInOrder] = createGridIndexesInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrder] = createGridIndexesInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridIndexesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(rows, cols);\n  const [gridValuesIndicesInOrderInOrder"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a non-negative integer n, return a list of first n + 1 numbers of the \n  Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n + 1)];\n};\n\n/*\n  Given a non-negative integer n, return a list of first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by n.\n  Examples:\n  fibonacciDivisibleBy(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacciDivisibleBy = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacciDivisibleBy(n - 1) + fibonacciDivisibleBy(n - 2) + fibonacciDivisibleBy(n + 1)];\n};\n\n/*\n  Given a non-negative integer n, return a list of first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by n and whose prime factors are \n  greater than n.\n  Examples:\n  fibonacciDivisibleByPrimeFactors(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacciDivisibleByPrimeFactors = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n    i += 2;\n  }\n  return [fibonacciDivisibleByPrimeFactors(n - 1) + fibonacciDivisibleByPrimeFactors(n - 2) + fibonacciDivisibleByPrimeFactors(n + 1)].filter(n => n % i === 0);\n};\n\n/*\n  Given a non-negative integer n, return a list of first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by n and whose prime factors are \n  greater than n and whose prime factors are less than n.\n  Examples:\n  fibonacciDivisibleByPrimeFactorsLessThan(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacciDivisibleByPrimeFactorsLessThan = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n    i += 2;\n  }\n  return [fibonacciDivisibleByPrimeFactorsLessThan(n - 1) + fibonacciDivisibleByPrimeFactorsLessThan(n - 2) + fibonacciDivisibleByPrimeFactorsLessThan(n + 1)].filter(n => n % i === 0 && n % i!== 1);\n};\n\n/*\n  Given a non-negative integer n, return a list of first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by n and whose prime factors are \n  less than n.\n  Examples:\n  fibonacciDivisibleByPrimeFactorsLessThanOrEqual(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacciDivisibleByPrimeFactorsLessThanOrEqual = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n    i += 2;\n  }\n  return [fibonacciDivisibleByPrimeFactorsLessThanOrEqual(n - 1) + fibonacciDivisibleByPrimeFactorsLessThanOrEqual(n - 2) + fibonacciDivisibleByPrimeFactorsLessThanOrEqual(n + 1)].filter(n => n % i === 0 || n % i === 1);\n};\n\n/*\n  Given a non-negative integer n, return a list of first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by n and whose prime factors are \n  less than n and whose prime factors are greater than n.\n  Examples:\n  fibonacciDivisibleByPrimeFactorsLessThanOrEqualLessThan(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacciDivisibleByPrimeFactorsLessThanOrEqualLessThan = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n    i += 2;\n  }\n  return [fibonacciDivisibleByPrimeFactorsLessThanOrEqualLessThan(n - 1) + fibonacciDivisibleByPrimeFactorsLessThanOrEqualLessThan(n - 2) + fibonacciDivisibleByPrimeFactorsLessThanOrEqualLessThan(n + 1)].filter(n => n % i === 0 || n % i === 1 && n % i!== 1);\n};\n\n/*\n  Given a non-negative integer n, return a list of first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by n and whose prime factors are \n  less than n and whose prime factors are greater than n and whose prime factors are \n  less than or equal to n.\n  Examples:\n  fibonacciDivisibleByPrimeFactorsLessThanOrEqualLessThanOrEqual(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacciDivisibleByPrimeFactorsLessThanOrEqualLessThanOrEqual = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n    i += 2;\n  }\n  return [fibonacciDivisibleByPrimeFactorsLessThanOrEqualLessThanOrEqual(n - 1) + fibonacciDivisibleByPrimeFactorsLessThanOrEqualLessThanOrEqual(n - 2) + fibonacciDivisibleByPrimeFactorsLessThanOrEqualLessThanOrEqual(n + 1)].filter(n => n % i === 0 || n % i === 1 && n % i!== 1);\n};\n\n/*\n  Given a non-negative integer n, return a list of first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by n and whose prime factors are \n  less than n and whose prime factors are greater than n and whose prime factors are \n  less than or equal to n.\n  Examples:\n  fibonacciDivisibleByPrimeFactorsLessThanOrEqualLess"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of all the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProduct = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of all the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductOdd = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductEven = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of all the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductOddEven = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of all the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductOddOdd = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of all the even digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductEvenOdd = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of all the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductEvenEven = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of all the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductOddOddEven = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductEvenEvenOdd = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of all the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductOddOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitProductOddEvenEvenOdd = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\]]*]|(?R))*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\]]*]|(?R))*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\]]*]|(?R))*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\]]*]|(?R))*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\]]*]|(?R))*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\]]*]|(?R))*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\]]*]|(?R))*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\]]*]|(?R))*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\]]*]|(?R))*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if "}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  let squareSum2 = 0;\n  let squareSum3 = 0;\n  let squareSum4 = 0;\n  let squareSum5 = 0;\n  let squareSum6 = 0;\n  let squareSum7 = 0;\n  let squareSum8 = 0;\n  let squareSum9 = 0;\n  let squareSum10 = 0;\n  let squareSum11 = 0;\n  let squareSum12 = 0;\n  let squareSum13 = 0;\n  let squareSum14 = 0;\n  let squareSum15 = 0;\n  let squareSum16 = 0;\n  let squareSum17 = 0;\n  let squareSum18 = 0;\n  let squareSum19 = 0;\n  let squareSum20 = 0;\n  let squareSum21 = 0;\n  let squareSum22 = 0;\n  let squareSum23 = 0;\n  let squareSum24 = 0;\n  let squareSum25 = 0;\n  let squareSum26 = 0;\n  let squareSum27 = 0;\n  let squareSum28 = 0;\n  let squareSum29 = 0;\n  let squareSum30 = 0;\n  let squareSum31 = 0;\n  let squareSum32 = 0;\n  let squareSum33 = 0;\n  let squareSum34 = 0;\n  let squareSum35 = 0;\n  let squareSum36 = 0;\n  let squareSum37 = 0;\n  let squareSum38 = 0;\n  let squareSum39 = 0;\n  let squareSum40 = 0;\n  let squareSum41 = 0;\n  let squareSum42 = 0;\n  let squareSum43 = 0;\n  let squareSum44 = 0;\n  let squareSum45 = 0;\n  let squareSum46 = 0;\n  let squareSum47 = 0;\n  let squareSum48 = 0;\n  let squareSum49 = 0;\n  let squareSum50 = 0;\n  let squareSum51 = 0;\n  let squareSum52 = 0;\n  let squareSum53 = 0;\n  let squareSum54 = 0;\n  let squareSum55 = 0;\n  let squareSum56 = 0;\n  let squareSum57 = 0;\n  let squareSum58 = 0;\n  let squareSum59 = 0;\n  let squareSum60 = 0;\n  let squareSum61 = 0;\n  let squareSum62 = 0;\n  let squareSum63 = 0;\n  let squareSum64 = 0;\n  let squareSum65 = 0;\n  let squareSum66 = 0;\n  let squareSum67 = 0;\n  let squareSum68 = 0;\n  let squareSum69 = 0;\n  let squareSum70 = 0;\n  let squareSum71 = 0;\n  let squareSum72 = 0;\n  let squareSum73 = 0;\n  let squareSum74 = 0;\n  let squareSum75 = 0;\n  let squareSum76 = 0;\n  let squareSum77 = 0;\n  let squareSum78 = 0;\n  let squareSum79 = 0;\n  let squareSum80 = 0;\n  let squareSum81 = 0;\n  let squareSum82 = 0;\n  let squareSum83 = 0;\n  let squareSum84 = 0;\n  let squareSum85 = 0;\n  let squareSum86 = 0;\n  let squareSum87 = 0;\n  let squareSum88 = 0;\n  let squareSum89 = 0;\n  let squareSum90 = 0;\n  let squareSum91 = 0;\n  let squareSum92 = 0;\n  let squareSum93 = 0;\n  let squareSum94 = 0;\n  let squareSum95 = 0;\n  let squareSum96 = 0;\n  let squareSum97 = 0;\n  let squareSum98 = 0;\n  let squareSum99 = 0;\n  let squareSum100 = 0;\n  let squareSum101 = 0;\n  let squareSum102 = 0;\n  let squareSum103 = 0;\n  let squareSum104 = 0;\n  let squareSum105 = 0;\n  let squareSum106 = 0;\n  let squareSum107 = 0;\n  let squareSum108 = 0;\n  let squareSum109 = 0;\n  let squareSum110 = 0;\n  let squareSum111 = 0;\n  let squareSum112 = 0;\n  let squareSum113 = 0;\n  let squareSum114 = 0;\n  let squareSum115 = 0;\n  let squareSum116 = 0;\n  let squareSum117 = 0;\n  let squareSum118 = 0;\n  let squareSum119 = 0;\n  let squareSum120 = 0;\n  let squareSum121 = 0;\n  let squareSum122 = 0;\n  let squareSum123 = 0;\n  let squareSum124 = 0;\n  let squareSum125 = 0;\n  let squareSum126 = 0;\n  let squareSum127 = 0;\n  let squareSum128 = 0;\n  let squareSum129 = 0;\n  let squareSum130 = 0;\n  let squareSum131 = 0;\n  let squareSum132 = 0;\n  let squareSum133 = 0;\n  let squareSum134 = 0;\n  let squareSum135 = 0;\n  let squareSum136 = 0;\n  let squareSum137 = 0;\n  let squareSum138 = 0;\n  let squareSum139 = 0;\n  let squareSum140 = 0;\n  let squareSum141 = 0;\n  let squareSum142 = 0;\n  let squareSum143 = 0;\n  let squareSum144 = 0;\n  let squareSum145 = 0;\n  let squareSum146 = 0;\n  let squareSum147 = 0;\n  let squareSum148 = 0;\n  let squareSum149 = 0;\n  let squareSum150 = 0;\n  let squareSum151 = 0;\n  let squareSum152 = 0;\n  let squareSum153 = 0;\n  let squareSum154 = 0;\n  let squareSum155 = 0;\n  let squareSum156 = 0;\n  let squareSum157 = 0;\n  let squareSum158 = 0;\n  let squareSum159 = 0;\n  let squareSum160 = 0;\n  let squareSum161 = 0;\n  let squareSum162 = 0;\n  let squareSum163 = 0;\n  let squareSum164 = 0;\n  let squareSum165 = 0;\n  let squareSum166 = 0;\n  let squareSum167 = 0;\n  let squareSum168 = 0;\n  let squareSum169 = 0;\n  let squareSum170 = 0;\n  let squareSum171 = 0;\n  let squareSum172 = 0;\n  let squareSum173 = 0;\n  let squareSum174 = 0;\n  let squareSum175 = 0;\n  let squareSum176 = 0;\n  let squareSum177 = 0;\n  let squareSum178 = 0;\n  let squareSum179 = 0;\n  let squareSum180 = 0;\n  let squareSum181 = 0;\n  let squareSum182 = 0;\n  let squareSum183 = 0;\n  let squareSum184 = 0;\n  let squareSum185 = 0;\n  let squareSum186 = 0;\n  let squareSum187 = 0;\n  let squareSum188 = 0;\n  let squareSum189 = 0;\n  let squareSum190 = 0;\n  let squareSum191 = 0;\n  let squareSum192 = 0;\n  let squareSum193 = 0;\n  let squareSum194 = 0;\n  let squareSum195 = 0;\n  let squareSum196 = 0;\n  let squareSum197 = 0;\n  let squareSum198 = 0;\n  let squareSum199 = 0;\n  let squareSum200 = 0;\n  let squareSum201 = 0;\n  let squareSum202 = 0;\n  let squareSum203 = 0;\n  let squareSum204 = 0;\n  let squareSum205 = 0;\n  let squareSum206 = 0;\n  let squareSum207 = 0;\n  let squareSum208 = 0;\n  let squareSum209 = 0;\n  let squareSum210 = 0;\n  let squareSum211 = 0;\n  let squareSum212 = 0;\n  let squareSum213 = 0;\n  let squareSum214 = 0;\n  let squareSum215 = 0;\n  let squareSum216 = 0;\n  let squareSum217 = 0;\n  let squareSum218 = 0;\n  let squareSum219 = 0;\n  let squareSum220 = 0;\n  let squareSum221 = 0;\n  let squareSum222 = 0;\n  let squareSum223 = 0;\n  let squareSum224 = 0;\n  let squareSum225 = 0;\n  let squareSum226 = 0;\n  let squareSum227 = 0;\n  let squareSum228 = 0;\n  let squareSum229 = 0;\n  let squareSum230 = 0;\n  let squareSum231 = 0;\n  let squareSum232 = 0;\n  let squareSum233 = 0;\n  let squareSum234 = 0;\n  let squareSum235 = 0;\n  let squareSum236 = 0;\n  let squareSum237 = 0;\n  let squareSum238 = 0;\n  let squareSum"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isWord = lastChar === \" \" || lastChar === \".\" || lastChar === \"?\" || lastChar === \"!\";\n  return isWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isWord = lastChar === \".\" || lastChar === \"?\" || lastChar === \"!\";\n  return isWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isWord = lastChar === \".\" || lastChar === \"?\" || lastChar === \"!\";\n  return isWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isWord = lastChar === \".\" || lastChar === \"?\" || lastChar === \"!\";\n  return isWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isWord = lastChar === \".\" || lastChar === \"?\" || lastChar === \"!\";\n  return isWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isWord = lastChar === \".\" || lastChar === \"?\" || lastChar === \"!\";\n  return isWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isWord = lastChar === \".\" || lastChar === \"?\" || lastChar === \"!\";\n  return isWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingChar"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = 0;\n  let count = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      k = i;\n      i = j;\n      j = k;\n    }\n    if (arr[i] === arr[j]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst remove = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst removeAt = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst removeAtOrEqual = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst removeAtOrEqualAt = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst removeAtOrEqualAtOrEqual = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst removeAtOrEqualAtOrEqualAt = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst removeAtOrEqualAtOrEqualAtOrEqual = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst removeAtOrEqualAtOrEqualAtOrEqualAt = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst removeAtOrEqualAtOrEqualAtOrEqualAtOrEqual = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst removeAtOrEqualAtOrEqualAtOrEqualAtOrEqualAt = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst removeAtOrEqualAtOrEqualAtOrEqualAtOrEqualAtOrEqualAt = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst removeAtOrEqualAtOrEqualAtOrEqualAtOrEqualAtOrEqualAtOrEqualAt = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst removeAtOrEqualAtOrEqualAtOrEqualAtOrEqualAtOrEqualAtOrEqualAtOrEqualAt = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at position k in the original array. For example,\n  given: [1,2,3,4,5], return [2,3,4,5].\n*/\nconst removeAtOrEqualAtOrEqualAtOrEqualAtOrEqualAtOrEqualAtOrEqualAtOrEqualAtOrEqualAtOrEqualAt = (arr, k) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== k) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst smallest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst smallestSmallest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst smallestBiggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallestBiggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallestBiggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallestBiggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallestBiggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallestBiggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallestBiggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallestBiggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallestBiggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallestBiggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallestBiggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallestBiggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallestBiggest = (lst) => {\n  const maxNegative = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minPositive = lst.reduce((a, b) => Math.min(a, b), 0);\n  return lst.map(n => Math.max(minPositive, Math.min(maxNegative, n)));\n};\n\n// Given a sorted list of numbers, return the largest and smallest\n// number in the list.\nconst biggestSmallestBiggest = (lst) => {"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) &&!isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(b), parseFloat(a))\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 1 if\n * first is larger than second, and 0 if they are equal.\n */\nconst compare = (a, b) => {\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 1 if\n * first is larger than second, and 0 if they are equal.\n */\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) &&!isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(b), parseFloat(a))\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 1 if\n * first is larger than second, and 0 if they are equal.\n */\nconst compareOne = (a, b) => {\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 1 if\n * first is larger than second, and 0 if they are equal.\n */\nconst compare = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) &&!isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(b), parseFloat(a))\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 1 if\n * first is larger than second, and 0 if they are equal.\n */\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) &&!isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(b), parseFloat(a))\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 1 if\n * first is larger than second, and 0 if they are equal.\n */\nconst compare = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) &&!isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(b), parseFloat(a))\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 1 if\n * first is larger than second, and 0 if they are equal.\n */\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) &&!isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(b), parseFloat(a))\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 1 if\n * first is larger than second, and 0 if they are equal.\n */\nconst compare = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (isNaN(a) &&!isNaN(b)) {\n    return a === b? null : compareOne(parseFloat(b), parseFloat(a))\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 1 if\n * first is larger than second, and 0 if they are equal.\n */\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b? null : compareOne(parseFloat(a), parseFloat(b))\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b? null : compareOne(parseFloat(a"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 4 === 0;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isPossibleToDivide(2) == true\n  isPossibleToDivide(5) == true\n  isPossibleToDivide(7) == true\n  isPossibleToDivide(10) == false\n  isPossibleToDivide(11) == false\n  isPossibleToDivide(12) == false\n  isPossibleToDivide(13) == false\n  isPossibleToDivide(14) == false\n  isPossibleToDivide(15) == false\n  isPossibleToDivide(16) == false\n  isPossibleToDivide(17) == false\n  isPossibleToDivide(18) == false\n  isPossibleToDivide(19) == false\n  isPossibleToDivide(20) == false\n  isPossibleToDivide(21) == false\n  isPossibleToDivide(22) == false\n  isPossibleToDivide(23) == false\n  isPossibleToDivide(24) == false\n  isPossibleToDivide(25) == false\n  isPossibleToDivide(26) == false\n  isPossibleToDivide(27) == false\n  isPossibleToDivide(28) == false\n  isPossibleToDivide(29) == false\n  isPossibleToDivide(30) == false\n  isPossibleToDivide(31) == false\n  isPossibleToDivide(32) == false\n  isPossibleToDivide(33) == false\n  isPossibleToDivide(34) == false\n  isPossibleToDivide(35) == false\n  isPossibleToDivide(36) == false\n  isPossibleToDivide(37) == false\n  isPossibleToDivide(38) == false\n  isPossibleToDivide(39) == false\n  isPossibleToDivide(40) == false\n  isPossibleToDivide(41) == false\n  isPossibleToDivide(42) == false\n  isPossibleToDivide(43) == false\n  isPossibleToDivide(44) == false\n  isPossibleToDivide(45) == false\n  isPossibleToDivide(46) == false\n  isPossibleToDivide(47) == false\n  isPossibleToDivide(48) == false\n  isPossibleToDivide(49) == false\n  isPossibleToDivide(50) == false\n  isPossibleToDivide(51) == false\n  isPossibleToDivide(52) == false\n  isPossibleToDivide(53) == false\n  isPossibleToDivide(54) == false\n  isPossibleToDivide(55) == false\n  isPossibleToDivide(56) == false\n  isPossibleToDivide(57) == false\n  isPossibleToDivide(58) == false\n  isPossibleToDivide(59) == false\n  isPossibleToDivide(60) == false\n  isPossibleToDivide(61) == false\n  isPossibleToDivide(62) == false\n  isPossibleToDivide(63) == false\n  isPossibleToDivide(64) == false\n  isPossibleToDivide(65) == false\n  isPossibleToDivide(66) == false\n  isPossibleToDivide(67) == false\n  isPossibleToDivide(68) == false\n  isPossibleToDivide(69) == false\n  isPossibleToDivide(70) == false\n  isPossibleToDivide(71) == false\n  isPossibleToDivide(72) == false\n  isPossibleToDivide(73) == false\n  isPossibleToDivide(74) == false\n  isPossibleToDivide(75) == false\n  isPossibleToDivide(76) == false\n  isPossibleToDivide(77) == false\n  isPossibleToDivide(78) == false\n  isPossibleToDivide(79) == false\n  isPossibleToDivide(80) == false\n  isPossibleToDivide(81) == false\n  isPossibleToDivide(82) == false\n  isPossibleToDivide(83) == false\n  isPossibleToDivide(84) == false\n  isPossibleToDivide(85) == false\n  isPossibleToDivide(86) == false\n  isPossibleToDivide(87) == false\n  isPossibleToDivide(88) == false\n  isPossibleToDivide(89) == false\n  isPossibleToDivide(90) == false\n  isPossibleToDivide(91) == false\n  isPossibleToDivide(92) == false\n  isPossibleToDivide(93) == false\n  isPossibleToDivide(94) == false\n  isPossibleToDivide(95) == false\n  isPossibleToDivide(96) == false\n  isPossibleToDivide(97) == false\n  isPossibleToDivide(98) == false\n  isPossibleToDivide(99) == false\n  isPossibleToDivide(100) == false\n  isPossibleToDivide(101) == false\n  isPossibleToDivide(102) == false\n  isPossibleToDivide(103) == false\n  isPossibleToDivide(104) == false\n  isPossibleToDivide(105) == false\n  isPossibleToDivide(106) == false\n  isPossibleToDivide(107) == false\n  isPossibleToDivide(108) == false\n  isPossibleToDivide(109) == false\n  isPossibleToDivide(110) == false\n  isPossibleToDivide(111) == false\n  isPossibleToDivide(112) == false\n  isPossibleToDivide(113) == false\n  isPossibleToDivide(114) == false\n  isPossibleToDivide(115) == false\n  isPossibleToDivide(116) == false\n  isPossibleToDivide(117) == false\n  isPossibleToDivide(118) == false\n  isPossibleToDivide(119) == false\n  isPossibleToDivide(120) == false\n  isPossibleToDivide(121) == false\n  isPossibleToDivide(122) == false\n  isPossibleToDivide(123) == false\n  isPossibleToDivide(124) == false\n  isPossibleToDivide(125) == false\n  isPossibleToDivide(126) == false\n  isPossibleToDivide(127) == false\n  isPossibleToDivide(128) == false\n  isPossibleToDivide(129) == false\n  isPossibleToDivide(130) == false\n  isPossibleToDivide(131) == false\n  isPossibleToDivide(132) == false\n  isPossibleToDivide(133) == false\n  isPossibleToDi"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n  if (n <= 1) return 1;\n  return n * extraFactorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return the largest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> largestFactorial(5)\n  5\n  */\nconst largestFactorial = (n) => {\n  if (n <= 1) return 1;\n  return n * largestFactorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return the smallest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> smallestFactorial(5)\n  1\n  */\nconst smallestFactorial = (n) => {\n  if (n <= 1) return 1;\n  return n * smallestFactorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return the largest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> largestFactorial2(5)\n  5\n  */\nconst largestFactorial2 = (n) => {\n  if (n <= 1) return 1;\n  return n * largestFactorial2(n - 1);\n};\n\n/*\n  Given a positive integer n, return the smallest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> smallestFactorial2(5)\n  1\n  */\nconst smallestFactorial2 = (n) => {\n  if (n <= 1) return 1;\n  return n * smallestFactorial2(n - 1);\n};\n\n/*\n  Given a positive integer n, return the largest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> largestFactorial3(5)\n  5\n  */\nconst largestFactorial3 = (n) => {\n  if (n <= 1) return 1;\n  return n * largestFactorial3(n - 1);\n};\n\n/*\n  Given a positive integer n, return the smallest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> smallestFactorial3(5)\n  1\n  */\nconst smallestFactorial3 = (n) => {\n  if (n <= 1) return 1;\n  return n * smallestFactorial3(n - 1);\n};\n\n/*\n  Given a positive integer n, return the largest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> largestFactorial4(5)\n  5\n  */\nconst largestFactorial4 = (n) => {\n  if (n <= 1) return 1;\n  return n * largestFactorial4(n - 1);\n};\n\n/*\n  Given a positive integer n, return the smallest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> smallestFactorial4(5)\n  1\n  */\nconst smallestFactorial4 = (n) => {\n  if (n <= 1) return 1;\n  return n * smallestFactorial4(n - 1);\n};\n\n/*\n  Given a positive integer n, return the largest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> largestFactorial5(5)\n  5\n  */\nconst largestFactorial5 = (n) => {\n  if (n <= 1) return 1;\n  return n * largestFactorial5(n - 1);\n};\n\n/*\n  Given a positive integer n, return the smallest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> smallestFactorial5(5)\n  1\n  */\nconst smallestFactorial5 = (n) => {\n  if (n <= 1) return 1;\n  return n * smallestFactorial5(n - 1);\n};\n\n/*\n  Given a positive integer n, return the largest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> largestFactorial6(5)\n  5\n  */\nconst largestFactorial6 = (n) => {\n  if (n <= 1) return 1;\n  return n * largestFactorial6(n - 1);\n};\n\n/*\n  Given a positive integer n, return the smallest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> smallestFactorial6(5)\n  1\n  */\nconst smallestFactorial6 = (n) => {\n  if (n <= 1) return 1;\n  return n * smallestFactorial6(n - 1);\n};\n\n/*\n  Given a positive integer n, return the largest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> largestFactorial7(5)\n  5\n  */\nconst largestFactorial7 = (n) => {\n  if (n <= 1) return 1;\n  return n * largestFactorial7(n - 1);\n};\n\n/*\n  Given a positive integer n, return the smallest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> smallestFactorial7(5)\n  1\n  */\nconst smallestFactorial7 = (n) => {\n  if (n <= 1) return 1;\n  return n * smallestFactorial7(n - 1);\n};\n\n/*\n  Given a positive integer n, return the largest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> largestFactorial8(5)\n  5\n  */\nconst largestFactorial8 = (n) => {\n  if (n <= 1) return 1;\n  return n * largestFactorial8(n - 1);\n};\n\n/*\n  Given a positive integer n, return the smallest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> smallestFactorial8(5)\n  1\n  */\nconst smallestFactorial8 = (n) => {\n  if (n <= 1) return 1;\n  return n * smallestFactorial8(n - 1);\n};\n\n/*\n  Given a positive integer n, return the largest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> largestFactorial9(5)\n  5\n  */\nconst largestFactorial9 = (n) => {\n  if (n <= 1) return 1;\n  return n * largestFactorial9(n - 1);\n};\n\n/*\n  Given a positive integer n, return the smallest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:\n  >>> smallestFactorial9(5)\n  1\n  */\nconst smallestFactorial9 = (n) => {\n  if (n <= 1) return 1;\n  return n * smallestFactorial9(n - 1);\n};\n\n/*\n  Given a positive integer n, return the largest integer k such that k! = n!.\n  For example, given n = 5, return 5.\n  \n  Example:"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n};\n\n/*\n  Given a string text, return true if it contains only letters.\n  \n  letters(\"Example\") == \"Example\"\n  letters(\"Example 1\") == \"Example_1\"\n  letters(\" Example 2\") == \"Example_2\"\n  letters(\" Example   3\") == \"Example_3\"\n  */\nconst letters = (text) => {\n  return /^[a-zA-Z]+$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only numbers.\n  \n  numbers(\"Example\") == \"Example\"\n  numbers(\"Example 1\") == \"Example_1\"\n  numbers(\" Example 2\") == \"Example_2\"\n  numbers(\" Example   3\") == \"Example_3\"\n  */\nconst numbers = (text) => {\n  return /^[0-9]+$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only uppercase letters.\n  \n  upperCase(\"Example\") == \"Example\"\n  upperCase(\"Example 1\") == \"Example_1\"\n  upperCase(\" Example 2\") == \"Example_2\"\n  upperCase(\" Example   3\") == \"Example_3\"\n  */\nconst upperCase = (text) => {\n  return /^[A-Z]+$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only lowercase letters.\n  \n  lowerCase(\"Example\") == \"Example\"\n  lowerCase(\"Example 1\") == \"Example_1\"\n  lowerCase(\" Example 2\") == \"Example_2\"\n  lowerCase(\" Example   3\") == \"Example_3\"\n  */\nconst lowerCase = (text) => {\n  return /^[a-z]+$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only special characters.\n  \n  specialChars(\"Example\") == \"Example\"\n  specialChars(\"Example 1\") == \"Example_1\"\n  specialChars(\" Example 2\") == \"Example_2\"\n  specialChars(\" Example   3\") == \"Example_3\"\n  */\nconst specialChars = (text) => {\n  return /^[!@#$%^&*()_+={}[]:;'<>?,.\\/?-]$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only special characters.\n  \n  specialChars(\"Example\") == \"Example\"\n  specialChars(\"Example 1\") == \"Example_1\"\n  specialChars(\" Example 2\") == \"Example_2\"\n  specialChars(\" Example   3\") == \"Example_3\"\n  */\nconst specialCharsOnly = (text) => {\n  return /^[!@#$%^&*()_+={}[]:;'<>?,.\\/?-]$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only special characters.\n  \n  specialChars(\"Example\") == \"Example\"\n  specialChars(\"Example 1\") == \"Example_1\"\n  specialChars(\" Example 2\") == \"Example_2\"\n  specialChars(\" Example   3\") == \"Example_3\"\n  */\nconst specialCharsOnly2 = (text) => {\n  return /^[!@#$%^&*()_+={}[]:;'<>?,.\\/?-]$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only special characters.\n  \n  specialChars(\"Example\") == \"Example\"\n  specialChars(\"Example 1\") == \"Example_1\"\n  specialChars(\" Example 2\") == \"Example_2\"\n  specialChars(\" Example   3\") == \"Example_3\"\n  */\nconst specialCharsOnly3 = (text) => {\n  return /^[!@#$%^&*()_+={}[]:;'<>?,.\\/?-]$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only special characters.\n  \n  specialChars(\"Example\") == \"Example\"\n  specialChars(\"Example 1\") == \"Example_1\"\n  specialChars(\" Example 2\") == \"Example_2\"\n  specialChars(\" Example   3\") == \"Example_3\"\n  */\nconst specialCharsOnly4 = (text) => {\n  return /^[!@#$%^&*()_+={}[]:;'<>?,.\\/?-]$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only special characters.\n  \n  specialChars(\"Example\") == \"Example\"\n  specialChars(\"Example 1\") == \"Example_1\"\n  specialChars(\" Example 2\") == \"Example_2\"\n  specialChars(\" Example   3\") == \"Example_3\"\n  */\nconst specialCharsOnly5 = (text) => {\n  return /^[!@#$%^&*()_+={}[]:;'<>?,.\\/?-]$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only special characters.\n  \n  specialChars(\"Example\") == \"Example\"\n  specialChars(\"Example 1\") == \"Example_1\"\n  specialChars(\" Example 2\") == \"Example_2\"\n  specialChars(\" Example   3\") == \"Example_3\"\n  */\nconst specialCharsOnly6 = (text) => {\n  return /^[!@#$%^&*()_+={}[]:;'<>?,.\\/?-]$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only special characters.\n  \n  specialChars(\"Example\") == \"Example\"\n  specialChars(\"Example 1\") == \"Example_1\"\n  specialChars(\" Example 2\") == \"Example_2\"\n  specialChars(\" Example   3\") == \"Example_3\"\n  */\nconst specialCharsOnly7 = (text) => {\n  return /^[!@#$%^&*()_+={}[]:;'<>?,.\\/?-]$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only special characters.\n  \n  specialChars(\"Example\") == \"Example\"\n  specialChars(\"Example 1\") == \"Example_1\"\n  specialChars(\" Example 2\") == \"Example_2\"\n  specialChars(\" Example   3\") == \"Example_3\"\n  */\nconst specialCharsOnly8 = (text) => {\n  return /^[!@#$%^&*()_+={}[]:;'<>?,.\\/?-]$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only special characters.\n  \n  specialChars(\"Example\") == \"Example\"\n  specialChars(\"Example 1\") == \"Example_1\"\n  specialChars(\" Example 2\") == \"Example_2\"\n  specialChars(\" Example   3\") == \"Example_3\"\n  */\nconst specialCharsOnly9 = (text) => {\n  return /^[!@#$%^&*()_+={}[]:;'<>?,.\\/?-]$/.test(text);\n};\n\n/*\n  Given a string text, return true if it contains only special characters.\n  \n  specialChars(\"Example\") == \"Example\"\n  specialChars(\"Example 1\") == \"Example_1\"\n  specialChars(\" Example 2\") == \"Example_2\"\n  specialChars(\" Example   3\") == \"Example_3\"\n  */\nconst special"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  return regex.test(file_name);\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCubeAndSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCubeAndSquareAndSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCubeAndSquareAndSquareAndSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCubeAndSquareAndSquareAndSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCubeAndSquareAndSquareAndSquareAndSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCubeAndSquareAndSquareAndSquareAndSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square its entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all "}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentPrime = true;\n  let currentPrimeLength = 1;\n  for (let i = 0; i < words.length; i++) {\n    if (currentPrime) {\n      if (currentLength % currentPrimeLength === 0) {\n        currentPrimeLength++;\n        currentPrime = false;\n      }\n      currentWord += words[i];\n      currentLength++;\n    }\n  }\n  newWords.push(currentWord);\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleOutPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentPrime = true;\n  let currentPrimeLength = 1;\n  for (let i = 0; i < words.length; i++) {\n    if (currentPrime) {\n      if (currentLength % currentPrimeLength === 0) {\n        currentPrimeLength++;\n        currentPrime = false;\n      }\n      currentWord += words[i];\n      currentLength++;\n    }\n  }\n  newWords.push(currentWord);\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentPrime = true;\n  let currentPrimeLength = 1;\n  for (let i = 0; i < words.length; i++) {\n    if (currentPrime) {\n      if (currentLength % currentPrimeLength === 0) {\n        currentPrimeLength++;\n        currentPrime = false;\n      }\n      currentWord += words[i];\n      currentLength++;\n    }\n  }\n  newWords.push(currentWord);\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleOutPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentPrime = true;\n  let currentPrimeLength = 1;\n  for (let i = 0; i < words.length; i++) {\n    if (currentPrime) {\n      if (currentLength % currentPrimeLength === 0) {\n        currentPrimeLength++;\n        currentPrime = false;\n      }\n      currentWord += words[i];\n      currentLength++;\n    }\n  }\n  newWords.push(currentWord);\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentPrime = true;\n  let currentPrimeLength = 1;\n  for (let i = 0; i < words.length; i++) {\n    if (currentPrime) {\n      if (currentLength % currentPrimeLength === 0) {\n        currentPrimeLength++;\n        currentPrime = false;\n      }\n      currentWord += words[i];\n      currentLength++;\n    }\n  }\n  newWords.push(currentWord);\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleOutPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentPrime = true;\n  let currentPrimeLength = 1;\n  for (let i = 0; i < words.length; i++) {\n    if (currentPrime) {\n      if (currentLength % currentPrimeLength === 0) {\n        currentPrimeLength++;\n        currentPrime = false;\n      }\n      currentWord += words[i];\n      currentLength++;\n    }\n  }\n  newWords.push(currentWord);\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // convert x to number\n  const num = parseFloat(x);\n  // convert n to number\n  const den = parseFloat(n);\n  // if both are numbers, return true\n  if (num && den) {\n    // if both are numbers, return true\n    if (num === den) {\n      return true;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num === den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num < den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if (num > den) {\n      return false;\n    }\n    // if both are numbers, return false\n    if ("}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = a % 10\n    const bDigit = b % 10\n    const aSum = sums[aDigit] || 0\n    const bSum = sums[bDigit] || 0\n    return aSum - bSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([11, -1, -11, -12]) == [-11, -11, -11, -12]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPointDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = a % 10\n    const bDigit = b % 10\n    const aSum = sums[aDigit] || 0\n    const bSum = sums[bDigit] || 0\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPointDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -12]\n  >>> holyOrderByPointDesc([]) == []\n  */\nconst holyOrderByPointDescr = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = a % 10\n    const bDigit = b % 10\n    const aSum = sums[aDigit] || 0\n    const bSum = sums[bDigit] || 0\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPointDescr([1, 11, -1, -11, -12]) == [-11, -11, -11, -12]\n  >>> holyOrderByPointDescr([]) == []\n  */\nconst holyOrderByPointDescrDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = a % 10\n    const bDigit = b % 10\n    const aSum = sums[aDigit] || 0\n    const bSum = sums[bDigit] || 0\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPointDescrDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -12]\n  >>> holyOrderByPointDescrDescr([]) == []\n  */\nconst holyOrderByPointDescrDescr = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = a % 10\n    const bDigit = b % 10\n    const aSum = sums[aDigit] || 0\n    const bSum = sums[bDigit] || 0\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPointDescrDescrDescr([1, 11, -1, -11, -12]) == [-11, -11, -11, -12]\n  >>> holyOrderByPointDescrDescrDescrDescr([]) == []\n  */\nconst holyOrderByPointDescrDescrDescr = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = a % 10\n    const bDigit = b % 10\n    const aSum = sums[aDigit] || 0\n    const bSum = sums[bDigit] || 0\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPointDescrDescrDescrDescr([1, 11, -1, -11, -12]) == [-11, -11, -11, -12]\n  >>> holyOrderByPointDescrDescrDescrDescrDescrDescr([]) == []\n  */\nconst holyOrderByPointDescrDescrDescrDescr = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digit = num % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += num\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = a % 10\n    const bDigit = b % 10\n    const aSum = sums[aDigit] || 0\n    const bSum = sums[bDigit] || 0\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPointDescrDescrDescrDescrDescr([1, 11, -1, -11, -12]) == [-11, -11, -11, -12]\n  >>> holyOrderByPointDescrDescrDescr"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  \n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % firstDigit === 1 && nums[i] % lastDigit === 1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterEven = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  \n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % firstDigit === 1 && nums[i] % lastDigit === 1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (2, 4, 6, 8).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterOdd = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  \n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % firstDigit === 1 && nums[i] % lastDigit === 1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterOddEven = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  \n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % firstDigit === 1 && nums[i] % lastDigit === 1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (2, 4, 6, 8).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterOddEvenOdd = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  \n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % firstDigit === 1 && nums[i] % lastDigit === 1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterOddEvenOddEven = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  \n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % firstDigit === 1 && nums[i] % lastDigit === 1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (2, 4, 6, 8).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterOddEvenOddEvenOdd = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  \n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % firstDigit === 1 && nums[i] % lastDigit === 1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterOddEvenOddEvenOddEven = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  \n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % firstDigit === 1 && nums[i] % lastDigit === 1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (2, 4, 6, 8).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterOddEvenOddEvenOddEvenOdd = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  \n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % firstDigit === 1 && nums[i] % lastDigit === 1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterOddEvenOddEvenOddEvenOddEven = (nums) => {\n  let count = 0;\n"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  let a = [...Array(n).keys()].reduce((acc, i) => {\n    acc[i] = i * i - i + 1;\n    return acc;\n  }, {});\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  let a = [...Array(n).keys()].reduce((acc, i) => {\n    acc[i] = i * i - i + 1;\n    return acc;\n  }, {});\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  let a = [...Array(n).keys()].reduce((acc, i) => {\n    acc[i] = i * i - i + 1;\n    return acc;\n  }, {});\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  let a = [...Array(n).keys()].reduce((acc, i) => {\n    acc[i] = i * i - i + 1;\n    return acc;\n  }, {});\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  let a = [...Array(n).keys()].reduce((acc, i) => {\n    acc[i] = i * i - i + 1;\n    return acc;\n  }, {});\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  let a = [...Array(n).keys()].reduce((acc, i) => {\n    acc[i] = i * i - i + 1;\n    return acc;\n  }, {});\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  let a = [...Array(n).keys()].reduce((acc, i) => {\n    acc[i] = i * i - i + 1;\n    return acc;\n  }, {});\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  let a = [...Array(n).keys()].reduce((acc, i) => {\n    acc[i] = i * i - i + 1;\n    return acc;\n  }, {});\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  let a = [...Array(n).keys()].reduce((acc, i) => {\n    acc[i] = i * i - i + 1;\n    return acc"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1OrbitDistance = planet1Orbit.distance;\n  const planet2OrbitDistance = planet2Orbit.distance;\n  const planet1OrbitDistanceInMeters = planet1OrbitDistance * 1000;\n  const planet2OrbitDistanceInMeters = planet2OrbitDistance * 1000;\n  const planet1OrbitDistanceInKm = planet1OrbitDistanceInMeters / 1000;\n  const planet2OrbitDistanceInKm = planet2OrbitDistanceInMeters / 1000;\n  const planet1OrbitDistanceInMiles = planet1OrbitDistanceInKm / 60;\n  const planet2OrbitDistanceInMiles = planet2OrbitDistanceInKm / 60;\n  const planet1OrbitDistanceInFeet = planet1OrbitDistanceInMiles / 60;\n  const planet2OrbitDistanceInFeet = planet2OrbitDistanceInMiles / 60;\n  const planet1OrbitDistanceInInches = planet1OrbitDistanceInFeet / 60;\n  const planet2OrbitDistanceInInches = planet2OrbitDistanceInFeet / 60;\n  const planet1OrbitDistanceInInch = planet1OrbitDistanceInInches / 60;\n  const planet2OrbitDistanceInInch = planet2OrbitDistanceInInches / 60;\n  const planet1OrbitDistanceInInchDegrees = planet1OrbitDistanceInInch / 60;\n  const planet2OrbitDistanceInInchDegrees = planet2OrbitDistanceInInch / 60;\n  const planet1OrbitDistanceInInchDegreesDegrees = planet1OrbitDistanceInInchDegrees / 60;\n  const planet2OrbitDistanceInInchDegreesDegrees = planet2OrbitDistanceInInchDegrees / 60;\n  const planet1OrbitDistanceInInchDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegrees / 60;\n  const planet2OrbitDistanceInInchDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegrees / 60;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegrees / 60;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegrees / 60;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegrees / 60;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegrees / 60;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegrees / 60;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegrees / 60;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 60;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 60;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 60;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 60;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 60;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 60;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 60;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 60;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 60;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let sum = 0;\n  let len = 0;\n  let temp = [];\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    len += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length == len) {\n      temp.push(lst[i]);\n    }\n  }\n  return temp;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum2 = (lst, len) => {\n  let sum = 0;\n  let len = 0;\n  let temp = [];\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    len += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length == len) {\n      temp.push(lst[i]);\n    }\n  }\n  return temp;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum3 = (lst) => {\n  let sum = 0;\n  let len = 0;\n  let temp = [];\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    len += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length == len) {\n      temp.push(lst[i]);\n    }\n  }\n  return temp;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum4 = (lst) => {\n  let sum = 0;\n  let len = 0;\n  let temp = [];\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    len += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length == len) {\n      temp.push(lst[i]);\n    }\n  }\n  return temp;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum5 = (lst) => {\n  let sum = 0;\n  let len = 0;\n  let temp = [];\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    len += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length == len) {\n      temp.push(lst[i]);\n    }\n  }\n  return temp;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum6 = (lst) => {\n  let sum = 0;\n  let len = 0;\n  let temp = [];\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    len += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length == len) {\n      temp.push(lst[i]);\n    }\n  }\n  return temp;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum7 = (lst) => {\n  let sum = 0;\n  let len = 0;\n  let temp = [];\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    len += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length == len) {\n      temp.push(lst"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || x >= n) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which "}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are even. Ignore numbers that are negative or not integers.\nconst doubleTheEven = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by three. Ignore numbers that are negative or not integers.\nconst doubleTheDivisible = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by five. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleFive = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by seven. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleSeven = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by nine. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleNine = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 9 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by ten. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleTen = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by eleven. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleEleven = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by twelve. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleTwelve = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 12 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by thirteen. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleThirteen = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 13 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by fourteen. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleFourteen = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 14 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by fifteen. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleFifteen = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 15 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by sixteen. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleSixteen = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 16 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by seventeen. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleSeventeen = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 17 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by eighteen. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleEighteen = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 18 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by nineteen. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleNineteen = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 19 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by twenty. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleTwenty = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 20 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by thirty. Ignore numbers that are negative or not integers.\nconst doubleTheDivisibleThirty = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 21 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Given a list of numbers, return the sum of squares of the numbers\n// that are divisible by fourty. Ignore number"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length;\n  const guessLength = guess.length;\n  const gameScores = game.map((score, index) => [index, score]);\n  const guessScores = guess.map((score, index) => [index, score]);\n  const gameScoreIndexes = gameScores.map(([index, score]) => index);\n  const guessScoreIndexes = guessScores.map(([index, score]) => index);\n  const gameScoreIndexesLength = gameScoreIndexes.length;\n  const guessScoreIndexesLength = guessScoreIndexes.length;\n  const gameScoreIndexesSum = gameScoreIndexes.reduce((acc, cur) => acc + cur[1], 0);\n  const guessScoreIndexesSum = guessScoreIndexes.reduce((acc, cur) => acc + cur[1], 0);\n  const gameScoreIndexesMean = gameScoreIndexes.reduce((acc, cur) => acc + cur[0] / gameScoreIndexesLength, 0);\n  const guessScoreIndexesMean = guessScoreIndexes.reduce((acc, cur) => acc + cur[0] / guessScoreIndexesLength, 0);\n  const gameScoreIndexesVariance = gameScoreIndexes.reduce((acc, cur) => acc + cur[0] / gameScoreIndexesLength - cur[1] / gameScoreIndexesLength, 0);\n  const guessScoreIndexesVariance = guessScoreIndexes.reduce((acc, cur) => acc + cur[0] / guessScoreIndexesLength - cur[1] / guessScoreIndexesLength, 0);\n  const gameScoreIndexesStdDev = gameScoreIndexes.reduce((acc, cur) => acc + Math.sqrt(cur[0] / gameScoreIndexesLength), 0);\n  const guessScoreIndexesStdDev = guessScoreIndexes.reduce((acc, cur) => Math.sqrt(cur[0] / guessScoreIndexesLength), 0);\n  const gameScoreIndexesMax = gameScoreIndexes.reduce((acc, cur) => Math.max(acc, cur[1]), 0);\n  const guessScoreIndexesMax = guessScoreIndexes.reduce((acc, cur) => Math.max(acc, cur[1]), 0);\n  const gameScoreIndexesMin = gameScoreIndexes.reduce((acc, cur) => Math.min(acc, cur[0]), 0);\n  const guessScoreIndexesMin = guessScoreIndexes.reduce((acc, cur) => Math.min(acc, cur[0]), 0);\n  const gameScoreIndexesMeanSquared = gameScoreIndexes.reduce((acc, cur) => acc + cur[0] ** 2, 0);\n  const guessScoreIndexesMeanSquared = guessScoreIndexes.reduce((acc, cur) => acc + cur[0] ** 2, 0);\n  const gameScoreIndexesVarianceSquared = gameScoreIndexes.reduce((acc, cur) => acc + cur[0] ** 2 - cur[1] ** 2, 0);\n  const guessScoreIndexesVarianceSquared = guessScoreIndexes.reduce((acc, cur) => acc + cur[0] ** 2 - cur[1] ** 2, 0);\n  const gameScoreIndexesStdDevSquared = gameScoreIndexes.reduce((acc, cur) => acc + Math.sqrt(cur[0] ** 2), 0);\n  const guessScoreIndexesStdDevSquared = guessScoreIndexes.reduce((acc, cur) => Math.sqrt(cur[0] ** 2), 0);\n  const gameScoreIndexesMaxSquared = gameScoreIndexes.reduce((acc, cur) => Math.max(acc, cur[0] ** 2), 0);\n  const guessScoreIndexesMaxSquared = guessScoreIndexes.reduce((acc, cur) => Math.max(acc, cur[0] ** 2), 0);\n  const gameScoreIndexesMinSquared = gameScoreIndexes.reduce((acc, cur) => Math.min(acc, cur[0] ** 2), 0);\n  const guessScoreIndexesMinSquared = guessScoreIndexes.reduce((acc, cur) => Math.min(acc, cur[0] ** 2), 0);\n  const gameScoreIndexesMeanSquaredSquared = gameScoreIndexes.reduce((acc, cur) => acc + cur[0] ** 2 **2, 0);\n  const guessScoreIndexesMeanSquaredSquared = guessScoreIndexes.reduce((acc, cur) => acc + cur[0] ** 2 **2, 0);\n  const gameScoreIndexesVarianceSquaredSquared = gameScoreIndexes.reduce((acc, cur) => acc + cur[0] ** 2 **2 - cur[1] ** 2 **2, 0);\n  const guessScoreIndexesVarianceSquaredSquared = guessScoreIndexes.reduce((acc, cur) => acc + cur[0] ** 2 **2 - cur[1] ** 2 **2, 0);\n  const gameScoreIndexesStdDevSquaredSquared = gameScoreIndexes.reduce((acc, cur) => acc + Math.sqrt(cur[0] ** 2 **2), 0);\n  const guessScoreIndexesStdDevSquaredSquared = guessScoreIndexes.reduce((acc, cur) => Math.sqrt(cur[0] ** 2 **2), 0);\n  const gameScoreIndexesMaxSquaredSquared = gameScoreIndexes.reduce((acc, cur) => Math.max(acc, cur[0] ** 2 **2), 0);\n  const guessScoreIndexesMaxSquaredSquared = guessScoreIndexes.reduce((acc, cur) => Math.max(acc, cur[0] ** 2 **2), 0);\n  const gameScoreIndexesMinSquaredSquared = gameScoreIndexes.reduce((acc, cur) => Math.min(acc, cur[0] ** 2 **2), 0);\n  const guessScoreIndexesMinSquaredSquared = guessScoreIndexes.reduce((acc, cur) => Math.min(acc, cur[0] ** 2 **2), 0);\n  const gameScoreIndexesMeanSquaredVariance = gameScoreIndexes.reduce((acc, cur) => acc + cur[0] ** 2 **2 - cur[1] ** 2 **2 / gameScoreIndexesLength, 0);\n  const guessScoreIndexesMeanSquaredVariance = guessScoreIndexes.reduce((acc, cur) => acc + cur[0] ** 2 **2 - cur[1] ** 2 **2 / guessScoreIndexesLength, 0);\n  const gameScoreIndexesVarianceVariance = gameScoreIndexes.reduce((acc, cur) => acc + cur[0] ** 2 **2 - cur[1] ** 2 **2 / gameScoreIndexesLength - cur[2] ** 2 **2 / gameScoreIndexesLength, 0);\n  const guessScoreIndexesVarianceVariance = guessScoreIndexes.reduce((acc, cur) => acc + cur[0] ** 2 **2 - cur[1] ** 2 **2 / guessScoreIndexesLength - cur[2] ** 2 **2 / guessScoreIndexesLength, 0);\n  const gameScoreIndexesStdDevVariance = gameScoreIndexes.reduce((acc, cur) => acc + Math.sqrt(cur[0] ** 2 **2 **2 / gameScoreIndexesLength), 0);\n  const guessScoreIndexesStdDevVariance = guessScoreIndexes.reduce((acc, cur) => Math.sqrt(cur[0] ** 2 **2 **2 / guessScoreIndexesLength), 0);\n  const gameScoreIndexesMaxVariance = gameScoreIndexes.reduce((acc, cur) => Math.max(acc, cur[0] ** 2 **2 **2 / gameScoreIndexesLength), 0);\n  const guessScoreIndexesMaxVariance = guessScoreIndexes.reduce((acc, cur) => Math.max(acc, cur"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_class = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_strength = extension.length - extension_strength;\n    if (extension_strength > 0) {\n      extension_class = extension.substr(0, extension_strength);\n    }\n  }\n  return extension_class;\n};\n\n/**\n  Given a class name, a class extension, and a list of extensions, returns\n  the class name with the extensions removed.\n  Example:\n  removeExtension('my_class', ['AA', 'Be', 'CC']) =='my_class'\n  */\nconst removeExtension = (class_name, extensions) => {\n  let extension_class = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.substr(0, extension.length - 1);\n  }\n  return extension_class;\n};\n\n/**\n  Given a class name, a class extension, and a list of extensions, returns\n  the class name with the extensions added.\n  Example:\n  addExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AABeCC'\n  */\nconst addExtension = (class_name, extensions) => {\n  let extension_class = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.substr(0, extension.length + 1);\n  }\n  return extension_class;\n};\n\n/**\n  Given a class name, a class extension, and a list of extensions, returns\n  the class name with the extensions replaced.\n  Example:\n  replaceExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AABeCC'\n  */\nconst replaceExtension = (class_name, extensions) => {\n  let extension_class = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.substr(0, extension.length - 1);\n  }\n  return extension_class;\n};\n\n/**\n  Given a class name, a class extension, and a list of extensions, returns\n  the class name with the extensions reversed.\n  Example:\n  reverseExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.CCBeAA'\n  */\nconst reverseExtension = (class_name, extensions) => {\n  let extension_class = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.substr(0, extension.length - 1);\n  }\n  return extension_class;\n};\n\n/**\n  Given a class name, a class extension, and a list of extensions, returns\n  the class name with the extensions sorted.\n  Example:\n  sortExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AABeCC'\n  */\nconst sortExtension = (class_name, extensions) => {\n  let extension_class = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.substr(0, extension.length - 1);\n  }\n  return extension_class;\n};\n\n/**\n  Given a class name, a class extension, and a list of extensions, returns\n  the class name with the extensions reversed.\n  Example:\n  reverseExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.CCBeAA'\n  */\nconst reverseExtension = (class_name, extensions) => {\n  let extension_class = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.substr(0, extension.length - 1);\n  }\n  return extension_class;\n};\n\n/**\n  Given a class name, a class extension, and a list of extensions, returns\n  the class name with the extensions sorted.\n  Example:\n  sortExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AABeCC'\n  */\nconst sortExtension = (class_name, extensions) => {\n  let extension_class = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.substr(0, extension.length - 1);\n  }\n  return extension_class;\n};\n\n/**\n  Given a class name, a class extension, and a list of extensions, returns\n  the class name with the extensions reversed.\n  Example:\n  reverseExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.CCBeAA'\n  */\nconst reverseExtension = (class_name, extensions) => {\n  let extension_class = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.substr(0, extension.length - 1);\n  }\n  return extension_class;\n};\n\n/**\n  Given a class name, a class extension, and a list of extensions, returns\n  the class name with the extensions sorted.\n  Example:\n  sortExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AABeCC'\n  */\nconst sortExtension = (class_name, extensions) => {\n  let extension_class = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.substr(0, extension.length - 1);\n  }\n  return extension_class;\n};\n\n/**\n  Given a class name, a class extension, and a list of extensions, returns\n  the class name with the extensions reversed.\n  Example:\n  reverseExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.CCBeAA'\n  */\nconst reverseExtension = (class_name, extensions) => {\n  let extension_class = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.substr(0, extension.length - 1);\n  }\n  return extension_class;\n};\n\n/**\n  Given a class name, a class extension, and a list of extensions, returns\n  the class name with the extensions sorted.\n  Example:\n  sortExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AABeCC'\n  */\nconst sortExtension = (class_name, extensions) => {\n  let extension_class = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.substr(0, extension.length - 1);\n  }\n  return extension_class;\n};\n\n/**\n  Given a class name, a class extension, and a list of extensions, returns\n  the class name with the extensions reversed.\n  Example:\n  reverseExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.CCBeAA'\n  */\nconst reverseExtension = (class_name, extensions) => {\n  let extension_class = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.substr(0, extension.length - 1);\n  }\n  return extension_class;\n};\n\n/**\n  Given a class name, a class extension, and "}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArray = a.split('');\n  let bArray = b.split('');\n  let aLength = a.length;\n  let bLength = b.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aRotate = 0;\n  let bRotate = 0;\n  let aRotateIndex = 0;\n  let bRotateIndex = 0;\n  let aRotateRotate = 0;\n  let bRotateRotate = 0;\n  let aRotateRotateIndex = 0;\n  let bRotateRotateIndex = 0;\n  let aRotateRotateRotate = 0;\n  let bRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateIndex = 0;\n  let aRotateRotateRotate = 0;\n  let bRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateIndex = 0;\n  let aRotateRotateRotate = 0;\n  let bRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateRotateIndex = 0;\n  let aRotateRotateRotateRotate = 0;\n  let bRotateRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateIndex = 0;\n  let aRotateRotateRotate = 0;\n  let bRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateIndex = 0;\n  let aRotateRotateRotate = 0;\n  let bRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateIndex = 0;\n  let aRotateRotateRotate = 0;\n  let bRotateRotateRotate = 0;\n  let aRotateRotateRotateIndex = 0;\n  let bRotateRotateRotateIndex = 0;\n  let aRotateRotateRotate = 0;\n  let bRotateRotateRotate = 0;\n  let aRotateRotateRotate"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let digitCount = 0;\n  while (num > 0) {\n    digitCount = num % 10;\n    num = Math.floor(num / 10);\n    if (digitCount % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a list of all possible permutations.\n\n   Example:\n      permutations([\"a\", \"b\", \"c\"]) ==> [[\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const numStr = number.toString();\n  const numLen = numStr.length;\n  const numArr = numStr.split(\"\");\n  let numStrArr = numArr.map(x => x.toString());\n  let numStrArrLen = numStrArr[numStrArr.length - 1];\n  let numStrArrNum = numStrArr[numStrArr.length - 2];\n  let numStrArrNumLen = numStrArrNum.length;\n  let numStrArrNumArr = numStrArrNum.split(\"\");\n  let numStrArrNumArrLen = numStrArrNumArr[numStrArrNumArr.length - 1];\n  let numStrArrNumArrNum = numStrArrNumArr[numStrArrNumArr.length - 2];\n  let numStrArrNumArrNumLen = numStrArrNumArrNum.length;\n  let numStrArrNumArrNumArr = numStrArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrLen = numStrArrNumArrNumArr[numStrArrNumArrNumArr.length - 1];\n  let numStrArrNumArrNumArrNum = numStrArrNumArrNumArr[numStrArrNumArrNumArr.length - 2];\n  let numStrArrNumArrNumArrNumLen = numStrArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArr = numStrArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrLen = numStrArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNum = numStrArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumLen = numStrArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNumArr = numStrArrNumArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumArrNumLen = numStrArrNumArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNumArrNum = numStrArrNumArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumArrNumLen = numStrArrNumArrNumArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNum = numStrArrNumArrNumArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumArrNumLen = numStrArrNumArrNumArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNum = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumLen = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNum = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumLen = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNum = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumLen = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNum = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumLen = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumLen = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumLen = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumLen = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumLen = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumLen = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.length;\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum = numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum.split(\"\");\n  let numStrArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNumArrNum"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  let aLength = Math.sqrt(a * a + b * b);\n  let bLength = Math.sqrt(b * b + c * c);\n  let cLength = Math.sqrt(c * c + a * a);\n  return aLength * bLength * cLength > 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-angled triangle, false otherwise.\n  A left-angled triangle is a triangle in which one angle is left angle or\n  -90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == false\n  goodSlantTriangle(1, 2, 3) == true\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  let aLength = Math.sqrt(a * a + b * b);\n  let bLength = Math.sqrt(b * b + c * c);\n  let cLength = Math.sqrt(c * c + a * a);\n  return aLength * bLength * cLength < 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  180 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == false\n  goodSlantTriangle(1, 2, 3) == true\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  let aLength = Math.sqrt(a * a + b * b);\n  let bLength = Math.sqrt(b * b + c * c);\n  let cLength = Math.sqrt(c * c + a * a);\n  return aLength * bLength * cLength > 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-angled triangle, false otherwise.\n  A left-angled triangle is a triangle in which one angle is left angle or\n  -90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == false\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  let aLength = Math.sqrt(a * a + b * b);\n  let bLength = Math.sqrt(b * b + c * c);\n  let cLength = Math.sqrt(c * c + a * a);\n  return aLength * bLength * cLength < -90;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  180 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == false\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  let aLength = Math.sqrt(a * a + b * b);\n  let bLength = Math.sqrt(b * b + c * c);\n  let cLength = Math.sqrt(c * c + a * a);\n  return aLength * bLength * cLength > 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-angled triangle, false otherwise.\n  A left-angled triangle is a triangle in which one angle is left angle or\n  -90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == false\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  let aLength = Math.sqrt(a * a + b * b);\n  let bLength = Math.sqrt(b * b + c * c);\n  let cLength = Math.sqrt(c * c + a * a);\n  return aLength * bLength * cLength < -90;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  180 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == false\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  let aLength = Math.sqrt(a * a + b * b);\n  let bLength = Math.sqrt(b * b + c * c);\n  let cLength = Math.sqrt(c * c + a * a);\n  return aLength * bLength * cLength > 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-angled triangle, false otherwise.\n  A left-angled triangle is a triangle in which one angle is left angle or\n  180 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == false\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  let aLength = Math.sqrt(a * a + b * b);\n  let bLength = Math.sqrt(b * b + c * c);\n  let cLength = Math.sqrt(c * c + a * a);\n  return aLength * bLength * cLength < -180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  180 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == false\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  let aLength = Math.sqrt(a * a + b * b);\n  let bLength = Math.sqrt(b * b + c * c);\n  let cLength = Math.sqrt(c * c + a * a);\n  return aLength * bLength * cLength > 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-angled triangle, false otherwise.\n  A left-angled triangle is a triangle in which one angle is left angle or\n  180 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == false\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  let aLength = Math.sqrt(a * a + b * b);\n  let bLength = Math.sqrt(b * b + c * c);\n  let cLength = Math.sqrt(c * c + a * a);\n  return aLength * bLength * cLength < -180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  180 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == "}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = \"\";\n  let uniqueWords = [];\n  words.forEach((word) => {\n    if (word.length > maxChar) {\n      maxChar = word.length;\n      maxWord = word;\n    }\n    if (word.length > uniqueChar) {\n      uniqueChar = word.length;\n      uniqueWord = word;\n    }\n    if (word.length > uniqueWord.length) {\n      uniqueWords.push(word);\n    }\n  });\n  if (uniqueWords.length > 0) {\n    uniqueWord = uniqueWords[0];\n  }\n  return uniqueWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = \"\";\n  let uniqueWords = [];\n  words.forEach((word) => {\n    if (word.length > maxChar) {\n      maxChar = word.length;\n      maxWord = word;\n    }\n    if (word.length > uniqueChar) {\n      uniqueChar = word.length;\n      uniqueWord = word;\n    }\n    if (word.length > uniqueWord.length) {\n      uniqueWords.push(word);\n    }\n  });\n  if (uniqueWords.length > 0) {\n    uniqueWord = uniqueWords[0];\n  }\n  return uniqueWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = \"\";\n  let uniqueWords = [];\n  words.forEach((word) => {\n    if (word.length > maxChar) {\n      maxChar = word.length;\n      maxWord = word;\n    }\n    if (word.length > uniqueChar) {\n      uniqueChar = word.length;\n      uniqueWord = word;\n    }\n    if (word.length > uniqueWord.length) {\n      uniqueWords.push(word);\n    }\n  });\n  if (uniqueWords.length > 0) {\n    uniqueWord = uniqueWords[0];\n  }\n  return uniqueWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = \"\";\n  let uniqueWords = [];\n  words.forEach((word) => {\n    if (word.length > maxChar) {\n      maxChar = word.length;\n      maxWord = word;\n    }\n    if (word.length > uniqueChar) {\n      uniqueChar = word.length;\n      uniqueWord = word;\n    }\n    if (word.length > uniqueWord.length) {\n      uniqueWords.push(word);\n    }\n  });\n  if (uniqueWords.length > 0) {\n    uniqueWord = uniqueWords[0];\n  }\n  return uniqueWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = \"\";\n  let uniqueWords = [];\n  words.forEach((word) => {\n    if (word.length > maxChar) {\n      maxChar = word.length;\n      maxWord = word;\n    }\n    if (word.length > uniqueChar) {\n      uniqueChar = word.length;\n      uniqueWord = word;\n    }\n    if (word.length > uniqueWord.length) {\n      uniqueWords.push(word);\n    }\n  });\n  if (uniqueWords.length > 0) {\n    uniqueWord = uniqueWords[0];\n  }\n  return uniqueWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = \"\";\n  let uniqueWords = [];\n  words.forEach((word) => {\n    if (word.length > maxChar) {\n      maxChar = word.length;\n      maxWord = word;\n    }\n    if (word.length > uniqueChar) {\n      uniqueChar = word.length;\n      uniqueWord = word;\n    }\n    if (word.length > uniqueWord.length) {\n      uniqueWords.push(word);\n    }\n  });\n  if (uniqueWords.length > 0) {\n    uniqueWord = uniqueWords[0];\n  }\n  return uniqueWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = \"\";\n  let uniqueWords = [];\n  words.forEach((word) => {\n    if (word.length > maxChar) {\n      maxChar = word.length;\n      maxWord = word;\n    }\n    if (word.length > "}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const result = [];\n  let remaining = Math.min(remaining, number);\n  let need = Math.min(need, number);\n  let carrots = 0;\n  let total = 0;\n  \n  while (need-- > 0) {\n    total += 1;\n    carrots += 1;\n    \n    if (remaining >= number) {\n      result.push([total, remaining]);\n      remaining = number - total;\n      need = 0;\n    }\n  }\n  \n  if (need-- > 0) {\n    result.push([total, remaining]);\n  }\n  \n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const result = [];\n  let remaining = Math.min(remaining, number);\n  let need = Math.min(need, number);\n  let carrots = 0;\n  let total = 0;\n  \n  while (need-- > 0) {\n    total += 1;\n    carrots += 1;\n    \n    if (remaining >= number) {\n      result.push([total, remaining]);\n      remaining = number - total;\n      need = 0;\n    }\n  }\n  \n  if (need-- > 0) {\n    result.push([total, remaining]);\n  }\n  \n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const result = [];\n  let remaining = Math.min(remaining, number);\n  let need = Math.min(need, number);\n  let carrots = 0;\n  let total = 0;\n  \n  while (need-- > 0) {\n    total += 1;\n    carrots += 1;\n    \n    if (remaining >= number) {\n      result.push([total, remaining]);\n      remaining = number - total;\n      need = 0;\n    }\n  }\n  \n  if (need-- > 0) {\n    result.push([total, remaining]);\n  }\n  \n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const result = [];\n  let remaining = Math.min(remaining, number);\n  let need = Math.min(need, number);\n  let carrots = 0;\n  let total = 0;\n  \n  while (need-- > 0) {\n    total += 1;\n    carrots += 1;\n    \n    if (remaining >= number) {\n      result.push([total, remaining]);\n      remaining = number - total;\n      need = 0;\n    }\n  }\n  \n  if (need-- > 0) {\n    result.push([total, remaining]);\n  }\n  \n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of car"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  let result = 0\n  for (let i = 0; i < operatorList.length; i++) {\n    const operator = operatorList[i]\n    const operand = operandList[i]\n    result += operator[operator.length - 1] * operand\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst prefixAlgebra = (operator, operand) => {\n  const operatorList = operator.split('-')\n  const operandList = operand.split('-')\n  let result = 0\n  for (let i = 0; i < operatorList.length; i++) {\n    const operator = operatorList[i]\n    const operand = operandList[i]\n    result += operator[0] * operand\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst postfixAlgebra = (operator, operand) => {\n  const operatorList = operator.split('*')\n  const operandList = operand.split('*')\n  let result = 0\n  for (let i = 0; i < operatorList.length; i++) {\n    const operator = operatorList[i]\n    const operand = operandList[i]\n    result += operator[operator.length - 1] * operand\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst powerAlgebra = (operator, operand) => {\n  const operatorList = operator.split('//')\n  const operandList = operand.split('//')\n  let result = 0\n  for (let i = 0; i < operatorList.length; i++) {\n    const operator = operatorList[i]\n    const operand = operandList[i]\n    result += operator[operator.length - 1] * operand\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst powerAlgebra = (operator, operand) => {\n  const operatorList = operator.split('**')\n  const operandList = operand.split('**')\n  let result = 0\n  for (let i = 0; i < operatorList.length; i++) {\n    const operator = operatorList[i]\n    const operand = operandList[i]\n    result += operator[operator.length - 1] * operand\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst powerAlgebra = (operator, operand) => {\n  const operatorList = operator.split('^')\n  const operandList = operand.split('^')\n  let result = 0\n  for (let i = 0; i < operatorList.length; i++) {\n    const operator = operatorList[i]\n    const operand = operandList[i]\n    result += operator[operator.length - 1] * operand\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has "}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n  let res = []\n  let len = s.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5StringedInstrumentToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5StringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5StringedInstrumentToMd5WithEmptyString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5StringedInstrumentToMd5WithEmptyString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5StringedInstrumentToMd5WithEmptyStringAndEmptyString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5StringedInstrumentToMd5WithEmptyStringAndEmptyString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyStringAndEmptyString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyStringAndEmptyString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyStringAndEmptyString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyStringAndEmptyString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyStringAndEmptyStringAndEmptyString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyStringAndEmptyStringAndEmptyString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyStringAndEmptyStringAndEmptyString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyStringAndEmptyStringAndEmptyString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyStringAndEmptyStringAndEmptyStringAndEmptyString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyStringAndEmptyStringAndEmptyStringAndEmptyString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyStringAndEmptyStringAndEmptyStringAndEmptyString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5StringedInstrumentToMd5WithEmptyStringAndEmptyStringAndEmptyStringAndEmptyStringAndEmptyStringAndEmptyString('Hello world"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  const result = [];\n  let currentDigit = 0;\n  let currentDigitIndex = 0;\n  let currentDigitLength = 1;\n  let currentDigitValue = 0;\n  let currentDigitValueIndex = 0;\n  let currentDigitValueLength = 1;\n  let currentDigitValueValue = 0;\n\n  while (a > 0) {\n    currentDigitValue = a % 10;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      currentDigitValueIndex++;\n      currentDigitValueLength++;\n      currentDigitValueValue = 0;\n    }\n\n    currentDigitValue = currentDigitValue / 2;\n    currentDigitValueIndex = 0;\n    currentDigitValueLength = 1;\n    currentDigitValueValue = 0;\n\n    while (currentDigitValue > 0) {\n      currentDigitValueValue += currentDigitValue % 2;\n      current"}
